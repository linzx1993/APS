{"version":3,"sources":["webpack:///static/js/echarts.fbb68525fb35cc2541ca.js","webpack:///../node_modules/.3.6.1@echarts/lib/component/dataZoom/InsideZoomModel.js?fa1b","webpack:///../node_modules/.3.6.1@echarts/lib/coord/cartesian/Cartesian2D.js?fa28","webpack:///../node_modules/.3.5.1@zrender/lib/graphic/shape/Line.js?d3ed","webpack:///../node_modules/.3.6.1@echarts/lib/util/number.js?d3e2","webpack:///../node_modules/.3.5.1@zrender/lib/core/env.js?d36d","webpack:///../node_modules/.3.5.1@zrender/lib/mixin/Draggable.js?d3a0","webpack:///../node_modules/.3.6.1@echarts/lib/component/helper/BrushTargetManager.js?d0cb","webpack:///../node_modules/.3.5.1@zrender/lib/graphic/Gradient.js?d228","webpack:///../node_modules/.3.6.1@echarts/lib/coord/cartesian/Axis2D.js?d7f7","webpack:///../node_modules/.3.6.1@echarts/lib/component/axis.js?d50c","webpack:///../node_modules/.3.6.1@echarts/lib/component/legend/LegendModel.js?dbdc","webpack:///../node_modules/.3.5.1@zrender/lib/contain/arc.js?d9cf","webpack:///../node_modules/.3.6.1@echarts/lib/action/createDataSelectAction.js?da23","webpack:///../node_modules/.3.6.1@echarts/lib/component/toolbox/feature/Restore.js?da9f","webpack:///../node_modules/.3.6.1@echarts/lib/chart/pie.js?dcdf","webpack:///../node_modules/.3.5.1@zrender/lib/graphic/shape/Arc.js?dea6","webpack:///../node_modules/.3.6.1@echarts/lib/model/mixin/textStyle.js?deb9","webpack:///../node_modules/.3.5.1@zrender/lib/Element.js?df3f","webpack:///../node_modules/.3.5.1@zrender/lib/contain/text.js?e393","webpack:///../node_modules/.3.5.1@zrender/lib/graphic/Text.js?e3a4","webpack:///../node_modules/.3.6.1@echarts/lib/util/format.js?e285","webpack:///../node_modules/.3.5.1@zrender/lib/graphic/Image.js?e286","webpack:///../node_modules/.3.6.1@echarts/lib/model/mixin/makeStyleMapper.js?e618","webpack:///../node_modules/.3.5.1@zrender/lib/graphic/shape/BezierCurve.js?eb51","webpack:///../node_modules/.3.6.1@echarts/lib/chart/line.js?eba5","webpack:///../node_modules/.3.5.1@zrender/lib/animation/Clip.js?e940","webpack:///../node_modules/.3.6.1@echarts/lib/processor/dataFilter.js?ec4b","webpack:///../node_modules/.3.6.1@echarts/lib/model/mixin/areaStyle.js?ed15","webpack:///../node_modules/.3.6.1@echarts/lib/chart/pie/PieSeries.js?edf5","webpack:///../node_modules/.3.6.1@echarts/lib/component/dataZoomSelect.js?ef3c","webpack:///../node_modules/.3.6.1@echarts/lib/chart/line/lineAnimationDiff.js?f3d1","webpack:///../node_modules/.3.6.1@echarts/lib/component/toolbox/feature/SaveAsImage.js?f0c1","webpack:///../node_modules/.3.6.1@echarts/lib/coord/axisDefault.js?f228","webpack:///../node_modules/.3.5.1@zrender/lib/contain/quadratic.js?f2f8","webpack:///../node_modules/.3.6.1@echarts/lib/component/title.js?f517","webpack:///../node_modules/.3.6.1@echarts/lib/component/tooltip/TooltipView.js?03e3","webpack:///../node_modules/.3.6.1@echarts/lib/processor/dataSample.js?0415","webpack:///../node_modules/.3.5.1@zrender/lib/core/log.js?0486","webpack:///../node_modules/.3.6.1@echarts/lib/view/Chart.js?04e6","webpack:///../node_modules/.3.5.1@zrender/lib/animation/requestAnimationFrame.js?0604","webpack:///../node_modules/.3.6.1@echarts/lib/layout/barGrid.js?0737","webpack:///../node_modules/.3.5.1@zrender/lib/graphic/Path.js?082e","webpack:///../node_modules/.3.6.1@echarts/lib/echarts.js?0b0c","webpack:///../node_modules/.3.5.1@zrender/lib/contain/line.js?0f6a","webpack:///../node_modules/.3.5.1@zrender/lib/graphic/Pattern.js?0fca","webpack:///../node_modules/.3.6.1@echarts/lib/view/Component.js?0fda","webpack:///../node_modules/.3.5.1@zrender/lib/core/bbox.js?0c04","webpack:///../node_modules/.3.6.1@echarts/lib/component/helper/RoamController.js?0d05","webpack:///../node_modules/.3.6.1@echarts/lib/component/helper/brushHelper.js?115e","webpack:///../node_modules/.3.6.1@echarts/lib/component/legend/legendFilter.js?117a","webpack:///../node_modules/.3.6.1@echarts/lib/chart/bar.js?11c3","webpack:///../node_modules/.3.5.1@zrender/lib/graphic/shape/Ring.js?12d3","webpack:///../node_modules/.3.6.1@echarts/lib/model/OptionManager.js?1619","webpack:///../node_modules/.3.6.1@echarts/lib/preprocessor/helper/compatStyle.js?1632","webpack:///../node_modules/.3.6.1@echarts/lib/component/toolbox/feature/MagicType.js?1843","webpack:///../node_modules/.3.5.1@zrender/lib/core/matrix.js?1a32","webpack:///../node_modules/.3.6.1@echarts/lib/scale/Log.js?1a61","webpack:///../node_modules/.3.6.1@echarts/lib/component/tooltip/TooltipContent.js?1f47","webpack:///../node_modules/.3.6.1@echarts/lib/coord/cartesian/Cartesian.js?1c96","webpack:///../node_modules/.3.6.1@echarts/lib/component/dataZoom/dataZoomAction.js?1cde","webpack:///../node_modules/.3.5.1@zrender/lib/contain/path.js?276a","webpack:///../node_modules/.3.6.1@echarts/lib/chart/helper/Symbol.js?2445","webpack:///../node_modules/.3.5.1@zrender/lib/graphic/Style.js?24a7","webpack:///../node_modules/.3.6.1@echarts/lib/chart/bar/helper.js?26ce","webpack:///../node_modules/.3.6.1@echarts/lib/chart/helper/SymbolDraw.js?2bf4","webpack:///../node_modules/.3.6.1@echarts/lib/layout/points.js?2b42","webpack:///../node_modules/.3.6.1@echarts/lib/component/dataZoom/roams.js?2a57","webpack:///../node_modules/.3.5.1@zrender/lib/core/vector.js?2ab7","webpack:///../node_modules/.3.6.1@echarts/lib/scale/Interval.js?2f96","webpack:///../node_modules/.3.6.1@echarts/lib/util/symbol.js?2c3a","webpack:///../node_modules/.3.6.1@echarts/lib/component/toolbox/ToolboxModel.js?2c4e","webpack:///../node_modules/.3.6.1@echarts/lib/util/model.js?2c56","webpack:///../node_modules/.3.6.1@echarts/lib/coord/axisModelCommonMixin.js?2cb4","webpack:///../node_modules/.3.5.1@zrender/lib/tool/path.js?2dd6","webpack:///../node_modules/.3.6.1@echarts/lib/data/List.js?2e02","webpack:///../node_modules/.3.6.1@echarts/lib/chart/line/poly.js?2e1c","webpack:///../node_modules/.3.5.1@zrender/lib/graphic/shape/Sector.js?2ec0","webpack:///../node_modules/.3.6.1@echarts/lib/component/toolbox/featureManager.js?339f","webpack:///../node_modules/.3.6.1@echarts/lib/model/Global.js?314f","webpack:///../node_modules/.3.6.1@echarts/lib/component/toolbox.js?3158","webpack:///../node_modules/.3.6.1@echarts/lib/chart/line/LineSeries.js?3294","webpack:///../node_modules/.3.6.1@echarts/lib/component/helper/interactionMutex.js?34f3","webpack:///../node_modules/.3.5.1@zrender/lib/dom/HandlerProxy.js?3575","webpack:///../node_modules/.3.6.1@echarts/lib/component/toolbox/feature/DataZoom.js?3867","webpack:///../node_modules/.3.6.1@echarts/lib/coord/cartesian/Grid.js?39f5","webpack:///../node_modules/.3.5.1@zrender/lib/Painter.js?3ac4","webpack:///../node_modules/.3.6.1@echarts/lib/component/toolbox/ToolboxView.js?3b0d","webpack:///../node_modules/.3.6.1@echarts/lib/component/dataZoom/DataZoomModel.js?3ed2","webpack:///../node_modules/.3.6.1@echarts/lib/model/Model.js?4384","webpack:///../node_modules/.3.6.1@echarts/lib/component/dataZoom/SliderZoomModel.js?40f5","webpack:///../node_modules/.3.5.1@zrender/lib/zrender.js?4177","webpack:///../node_modules/.3.6.1@echarts/lib/data/helper/completeDimensions.js?41a8","webpack:///../node_modules/.3.6.1@echarts/lib/component/axisPointer/modelHelper.js?463d","webpack:///../node_modules/.3.6.1@echarts/lib/chart/bar/BarSeries.js?4bea","webpack:///../node_modules/.3.5.1@zrender/lib/core/GestureMgr.js?4b6a","webpack:///../node_modules/.3.6.1@echarts/lib/coord/axisModelCreator.js?480a","webpack:///../node_modules/.3.6.1@echarts/lib/component/helper/selectableMixin.js?494a","webpack:///../node_modules/.3.6.1@echarts/lib/component/toolbox/feature/DataView.js?499e","webpack:///../node_modules/.3.6.1@echarts/lib/visual/seriesColor.js?4f79","webpack:///../node_modules/.3.5.1@zrender/lib/core/timsort.js?4d08","webpack:///../node_modules/.3.6.1@echarts/lib/scale/Scale.js?4e96","webpack:///../node_modules/.3.6.1@echarts/lib/visual/dataColor.js?505a","webpack:///../node_modules/.3.6.1@echarts/lib/component/helper/listComponent.js?52a1","webpack:///../node_modules/.3.5.1@zrender/lib/graphic/LinearGradient.js?57ed","webpack:///../node_modules/.3.5.1@zrender/lib/mixin/Transformable.js?5792","webpack:///../node_modules/.3.6.1@echarts/lib/model/globalDefault.js?55a5","webpack:///../node_modules/.3.6.1@echarts/lib/data/DataDiffer.js?55f4","webpack:///../node_modules/.3.6.1@echarts/lib/component/dataZoom/SelectZoomView.js?5657","webpack:///../node_modules/.3.5.1@zrender/lib/core/BoundingRect.js?5b80","webpack:///../node_modules/.3.6.1@echarts/lib/component/axis/cartesianAxisHelper.js?5a0a","webpack:///../node_modules/.3.5.1@zrender/lib/graphic/mixin/RectText.js?5a48","webpack:///../node_modules/.3.6.1@echarts/lib/coord/Axis.js?5fe5","webpack:///../node_modules/.3.6.1@echarts/lib/chart/pie/labelLayout.js?5fa4","webpack:///../node_modules/.3.6.1@echarts/lib/component/legend.js?5c46","webpack:///../node_modules/.3.6.1@echarts/lib/component/dataZoom/SliderZoomView.js?5cbe","webpack:///../node_modules/.3.6.1@echarts/lib/component/helper/cursorHelper.js?5d05","webpack:///../node_modules/.3.6.1@echarts/lib/helper.js?5d9c","webpack:///../node_modules/.3.6.1@echarts/lib/component/axisPointer/viewHelper.js?5eb0","webpack:///../node_modules/.3.6.1@echarts/lib/scale/Ordinal.js?6223","webpack:///../node_modules/.3.6.1@echarts/lib/component/axisPointer/AxisPointerModel.js?6422","webpack:///../node_modules/.3.6.1@echarts/lib/component/dataZoom/typeDefaulter.js?6514","webpack:///../node_modules/.3.5.1@zrender/lib/graphic/shape/Polygon.js?6911","webpack:///../node_modules/.3.6.1@echarts/lib/chart/bar/BarView.js?69de","webpack:///../node_modules/.3.6.1@echarts/lib/component/axisPointer/AxisPointerView.js?6a2f","webpack:///../node_modules/.3.5.1@zrender/lib/graphic/RadialGradient.js?6c74","webpack:///../node_modules/.3.6.1@echarts/lib/coord/axisHelper.js?6cbe","webpack:///../node_modules/.3.6.1@echarts/lib/component/helper/sliderMove.js?6e2a","webpack:///../node_modules/.3.5.1@zrender/lib/tool/transformPath.js?6e92","webpack:///../node_modules/.3.5.1@zrender/lib/graphic/helper/poly.js?6edf","webpack:///../node_modules/.3.6.1@echarts/lib/component/dataZoom/dataZoomProcessor.js?6eff","webpack:///../node_modules/.3.6.1@echarts/lib/component/axisPointer/BaseAxisPointer.js?7374","webpack:///../node_modules/.3.6.1@echarts/lib/scale/Time.js?7039","webpack:///../node_modules/.3.6.1@echarts/lib/component/axis/AxisBuilder.js?707f","webpack:///../node_modules/.3.6.1@echarts/lib/component/helper/BrushController.js?70eb","webpack:///../node_modules/.3.5.1@zrender/lib/core/curve.js?719f","webpack:///../node_modules/.3.5.1@zrender/lib/tool/color.js?7300","webpack:///../node_modules/.3.5.1@zrender/lib/graphic/helper/roundRect.js?77f6","webpack:///../node_modules/.3.6.1@echarts/lib/model/mixin/colorPalette.js?7420","webpack:///../node_modules/.3.5.1@zrender/lib/contain/windingLine.js?7b5c","webpack:///../node_modules/.3.6.1@echarts/lib/util/component.js?7b7e","webpack:///../node_modules/.3.6.1@echarts/lib/chart/bar/BaseBarSeries.js?7927","webpack:///../node_modules/.3.5.1@zrender/lib/core/PathProxy.js?7ffb","webpack:///../node_modules/.3.6.1@echarts/lib/util/throttle.js?7c80","webpack:///../node_modules/.3.5.1@zrender/lib/mixin/Eventful.js?7de5","webpack:///../node_modules/.3.6.1@echarts/lib/util/clazz.js?7f3a","webpack:///../node_modules/.3.5.1@zrender/lib/graphic/Displayable.js?834e","webpack:///../node_modules/.3.5.1@zrender/lib/graphic/shape/Circle.js?804e","webpack:///../node_modules/.3.5.1@zrender/lib/graphic/helper/smoothSpline.js?8145","webpack:///../node_modules/.3.5.1@zrender/lib/graphic/helper/smoothBezier.js?81e2","webpack:///../node_modules/.3.6.1@echarts/lib/loading/default.js?8570","webpack:///../node_modules/.3.6.1@echarts/lib/preprocessor/backwardCompat.js?869c","webpack:///../node_modules/.3.5.1@zrender/lib/core/LRU.js?8b82","webpack:///../node_modules/.3.6.1@echarts/lib/component/tooltip/TooltipModel.js?8a21","webpack:///../node_modules/.3.6.1@echarts/lib/component/dataZoom/AxisProxy.js?8a4a","webpack:///../node_modules/.3.5.1@zrender/lib/Layer.js?8c10","webpack:///../node_modules/.3.6.1@echarts/lib/ExtensionAPI.js?8d3b","webpack:///../node_modules/.3.5.1@zrender/lib/animation/easing.js?910f","webpack:///../node_modules/.3.5.1@zrender/lib/core/event.js?91ac","webpack:///../node_modules/.3.6.1@echarts/lib/visual/symbol.js?9308","webpack:///../node_modules/.3.6.1@echarts/lib/coord/cartesian/AxisModel.js?9737","webpack:///../node_modules/.3.6.1@echarts/lib/chart/pie/PieView.js?9ff8","webpack:///../node_modules/.3.6.1@echarts/lib/component/dataZoom/history.js?9d7a","webpack:///../node_modules/.3.6.1@echarts/lib/chart/line/LineView.js?9df9","webpack:///../node_modules/.3.5.1@zrender/lib/core/util.js?9f0d","webpack:///../node_modules/.3.6.1@echarts/lib/CoordinateSystem.js?a3f1","webpack:///../node_modules/.3.6.1@echarts/lib/component/dataZoom/SelectZoomModel.js?a343","webpack:///../node_modules/.3.5.1@zrender/lib/mixin/Animatable.js?a073","webpack:///../node_modules/.3.5.1@zrender/lib/graphic/shape/Polyline.js?a207","webpack:///../node_modules/.3.6.1@echarts/lib/component/gridSimple.js?a253","webpack:///../node_modules/.3.6.1@echarts/lib/model/mixin/lineStyle.js?a269","webpack:///../node_modules/.3.5.1@zrender/lib/Handler.js?a7ef","webpack:///../node_modules/.3.6.1@echarts/lib/component/axisPointer.js?a6dd","webpack:///../node_modules/.3.6.1@echarts/lib/chart/helper/createListFromArray.js?a700","webpack:///../node_modules/.3.6.1@echarts/lib/chart/bar/barItemStyle.js?a8b7","webpack:///../node_modules/.3.5.1@zrender/lib/animation/Animation.js?a985","webpack:///../node_modules/.3.5.1@zrender/lib/animation/Animator.js?a9fd","webpack:///../node_modules/.3.6.1@echarts/lib/component/tooltip.js?ad11","webpack:///../node_modules/.3.6.1@echarts/lib/component/axisPointer/globalListener.js?b040","webpack:///../node_modules/.3.6.1@echarts/lib/scale/helper.js?b2f8","webpack:///../node_modules/.3.6.1@echarts/lib/component/axis/AxisView.js?b78c","webpack:///../node_modules/.3.6.1@echarts/lib/component/dataZoom/InsideZoomView.js?b7a0","webpack:///../node_modules/.3.6.1@echarts/lib/model/mixin/boxLayout.js?b4f3","webpack:///../node_modules/.3.6.1@echarts/lib/component/axisPointer/findPointFromSeries.js?b51e","webpack:///../node_modules/.3.6.1@echarts/lib/component/axis/CartesianAxisView.js?b688","webpack:///../node_modules/.3.5.1@zrender/lib/contain/util.js?bb8c","webpack:///../node_modules/.3.6.1@echarts/lib/chart/pie/pieLayout.js?ba3c","webpack:///../node_modules/.3.6.1@echarts/lib/component/dataZoom/DataZoomView.js?ba58","webpack:///../node_modules/.3.5.1@zrender/lib/contain/cubic.js?bb2e","webpack:///../node_modules/.3.6.1@echarts/lib/chart/helper/labelHelper.js?bc68","webpack:///../node_modules/.3.6.1@echarts/lib/model/Series.js?bddd","webpack:///../node_modules/.3.5.1@zrender/lib/graphic/CompoundPath.js?bdf4","webpack:///../node_modules/.3.6.1@echarts/lib/model/mixin/itemStyle.js?be76","webpack:///../node_modules/.3.6.1@echarts/lib/component/axisPointer/CartesianAxisPointer.js?c0b6","webpack:///../node_modules/.3.6.1@echarts/lib/component/legend/legendAction.js?c265","webpack:///../node_modules/.3.6.1@echarts/lib/model/Component.js?c2f9","webpack:///../node_modules/.3.5.1@zrender/lib/config.js?c453","webpack:///../node_modules/.3.5.1@zrender/lib/core/guid.js?c46d","webpack:///../node_modules/.3.6.1@echarts/lib/component/legend/LegendView.js?c48f","webpack:///../node_modules/.3.6.1@echarts/lib/component/axisPointer/axisTrigger.js?c4b5","webpack:///../node_modules/.3.6.1@echarts/lib/util/graphic.js?cb65","webpack:///../node_modules/.3.6.1@echarts/lib/component/dataZoom.js?cbad","webpack:///../node_modules/.3.5.1@zrender/lib/Storage.js?cbd2","webpack:///../node_modules/.3.5.1@zrender/lib/container/Group.js?c8c3","webpack:///../node_modules/.3.6.1@echarts/lib/component/dataZoom/helper.js?c93a","webpack:///../node_modules/.3.5.1@zrender/lib/graphic/shape/Rect.js?cab4","webpack:///../node_modules/.3.6.1@echarts/lib/coord/cartesian/GridModel.js?cace","webpack:///../node_modules/.3.6.1@echarts/lib/util/layout.js?cf1b"],"names":["webpackJsonp","+huS","module","exports","__webpack_require__","extend","type","defaultOption","disabled","zoomLock","zoomOnMouseWheel","moveOnMouseMove","preventDefaultMouseMove","+iiX","Cartesian2D","name","Cartesian","call","this","zrUtil","prototype","constructor","dimensions","getBaseAxis","getAxesByScale","getAxis","containPoint","point","axisX","axisY","contain","toLocalCoord","containData","data","dataToPoints","stack","mapArray","x","y","dataToPoint","clamp","xAxis","yAxis","toGlobalCoord","dataToCoord","pointToData","coordToData","getOtherAxis","axis","dim","inherits","0+1J","shape","x1","y1","x2","y2","percent","style","stroke","fill","buildPath","ctx","moveTo","lineTo","pointAt","p","0+Kq","_trim","str","replace","quantityExponent","val","Math","floor","log","LN10","number","linearMap","domain","range","subDomain","subRange","parsePercent","all","match","parseFloat","NaN","round","precision","returnStr","min","max","toFixed","asc","arr","sort","a","b","getPrecision","isNaN","e","count","getPrecisionSafe","toString","eIndex","indexOf","slice","dotIndex","length","getPixelPrecision","dataExtent","pixelExtent","dataQuantity","sizeQuantity","abs","isFinite","MAX_SAFE_INTEGER","remRadian","radian","pi2","PI","isRadianAroundZero","TIME_REG","getTimezoneOffset","Date","parseDate","value","exec","timezoneOffset","timeOffset","toUpperCase","quantity","pow","nice","nf","exponent","exp10","f","reformIntervals","list","littleThan","lg","interval","close","curr","Infinity","currClose","i","splice","isNumeric","v","020c","env","navigator","browser","os","node","canvasSupported","ua","firefox","ie","edge","weChat","test","version","document","createElement","getContext","touchEventsSupported","window","pointerEventsSupported","userAgent","06Ck","Draggable","on","_dragStart","_drag","_dragEnd","param","target","topTarget","draggingTarget","draggable","_draggingTarget","dragging","_x","offsetX","_y","offsetY","dispatchToElement","event","dx","dy","drift","dropTarget","findHover","lastDropTarget","_dropTarget","0Mv9","BrushTargetManager","option","ecModel","opt","targetInfoList","_targetInfoList","info","foundCpts","parseFinder","each","targetInfoBuilders","builder","include","formatMinMax","minMax","reverse","modelUtil","includeMainTypes","INCLUDE_FINDER_MAIN_TYPES","axisConvert","axisNameIndex","to","coordSys","rangeOrCoordRange","__DEV__","assert","values","map","xyMinMax","axisDiffProcessor","refer","scales","getScales","xyMinMaxCurr","xyMinMaxOrigin","sizeCurr","getSize","sizeOrigin","graphic","brushHelper","curry","COORD_CONVERTS","proto","setOutputRanges","areas","matchOutputRanges","area","coordRange","coordRanges","push","result","coordConvert","brushType","__rangeOffset","offset","diffProcessor","cb","targetInfo","findTargetInfo","coordSyses","setInputRanges","panelId","rangeOffset","makePanelOpts","api","getDefaultBrushType","rect","getPanelRect","defaultBrushType","clipPath","makeRectPanelClipPath","isTargetByCursor","makeRectIsTargetByCursor","coordSysModel","getLinearBrushOtherExtent","makeLinearBrushOtherExtent","controlSeries","seriesModel","coordinateSystem","areaPanelId","targetInfoMatchers","grid","xAxisModels","yAxisModels","gridModels","gridModelMap","createHashMap","xAxesHas","yAxesHas","axisModel","gridModel","model","set","id","cartesians","getCartesians","cartesian","index","panelRectBuilder","xAxisDeclared","yAxisDeclared","geo","geoModels","geoModel","xAxisModel","yAxisModel","getRect","clone","getBoundingRect","applyTransform","getTransform","lineX","lineY","xminymin","xmaxymax","polygon","item","idx","0iiL","Gradient","colorStops","addColorStop","color","1/d/","Axis","Axis2D","scale","coordExtent","axisType","position","onZero","isHorizontal","getGlobalExtent","ret","getExtent","isLabelIgnored","labelInterval","getLabelInterval","getLabel","1QxH","2","29ze","Model","LegendModel","extendComponentModel","dependencies","layoutMode","ignoreSize","init","parentModel","mergeDefaultAndTheme","selected","mergeOption","superCall","optionUpdated","_updateData","legendData","_data","get","hasSelected","isSelected","select","dataItem","availableNames","getSeries","series","eachSeries","legendDataProvider","concat","getName","_availableNames","getData","unSelect","toggleSelected","hasOwnProperty","zlevel","z","show","orient","left","top","align","backgroundColor","borderColor","borderWidth","padding","itemGap","itemWidth","itemHeight","inactiveColor","textStyle","selectedMode","tooltip","2c/z","normalizeRadian","PI2","containStroke","cx","cy","r","startAngle","endAngle","anticlockwise","lineWidth","_l","d","sqrt","tmp","angle","atan2","2iN9","echarts","seriesType","actionInfos","actionInfo","update","registerAction","payload","eachComponent","mainType","subType","query","method","2p/A","Restore","history","icon","title","onclick","clear","dispatchAction","from","uid","register","resetOption","3N82","registerVisual","registerLayout","registerProcessor","3qaN","clockwise","unitX","cos","unitY","sin","arc","3rnY","textContain","graphicUtil","getTextColor","getShallow","getFont","fontStyle","fontWeight","fontSize","fontFamily","getTextRect","text","truncateText","containerWidth","ellipsis","options","3z8c","guid","Eventful","Transformable","Animatable","Element","opts","__zr","ignore","m","transform","decomposeTransform","dirty","beforeUpdate","afterUpdate","updateTransform","traverse","context","attrKV","key","hide","refresh","attr","isObject","setClipPath","zr","addSelfToZr","removeClipPath","__clipTarget","removeSelfFromZr","animators","animation","addAnimator","removeAnimator","mixin","45MQ","getTextWidth","textFont","textWidthCache","textLines","split","width","l","measureText","textWidthCacheCounter","TEXT_CACHE_MAX","textAlign","textBaseline","textLineLen","lineHeight","height","BoundingRect","adjustTextPositionOnRect","textPosition","textRect","distance","textHeight","halfHeight","retrieve","maxIterations","minChar","cnCharWidth","ascCharWidth","placeholder","contentWidth","ellipsisWidth","len","textLine","j","subLength","estimateLength","substr","join","charCode","charCodeAt","util","getWidth","font","46R8","Displayable","Text","brush","prevEl","bind","setTransform","textVerticalAlign","hasStroke","strokeText","hasFill","fillText","restoreTransform","_rect","w","4oXW","numberUtil","formatUtil","addCommas","toCamelCase","upperCaseFirst","toLowerCase","group1","charAt","normalizeCssArray","encodeHTML","source","String","TPL_VAR_ALIAS","wrapVar","varName","seriesIdx","formatTpl","tpl","paramsList","encode","isArray","seriesLen","$vars","alias","k","formatTplSimple","getTooltipMarker","extraCssText","s2d","formatTime","isUTC","date","utc","M","h","s","capitalFirst","4obY","ZImage","LRU","globalImageCache","image","src","_image","cachedImgObj","Image","onload","pending","put","aspect","sWidth","sHeight","sx","sy","drawImage","drawRectText","5hg5","properties","excludes","includes","propName","61Fv","someVectorAt","t","isTangent","cpx2","cpy2","cubicDerivativeAt","cubicAt","cpx1","cpy1","quadraticDerivativeAt","quadraticAt","curveTool","vec2","quadraticSubdivide","cubicSubdivide","out","quadraticCurveTo","bezierCurveTo","tangentAt","normalize","66V3","PRIORITY","PROCESSOR","STATISTIC","6UAp","Clip","_target","_life","life","_delay","delay","_initialized","loop","gap","easing","onframe","ondestroy","onrestart","_pausedTime","_paused","easingFuncs","step","globalTime","deltaTime","_startTime","easingFunc","schedule","fire","restart","_needsRemove","remainder","eventType","arg","pause","resume","7Etz","legendModels","findComponents","eachSeriesByType","filterSelf","7RWD","getAreaStyle","7fUZ","List","completeDimensions","dataSelectableMixin","PieSeries","extendSeriesModel","superApply","arguments","getRawData","updateSelectedMap","_defaultLabelLine","newOption","getInitialData","initData","getDataParams","dataIndex","params","sum","getSum","defaultEmphasis","labelLine","labelLineNormalOpt","normal","labelLineEmphasisOpt","emphasis","label","legendHoverLink","hoverAnimation","center","radius","minAngle","selectedOffset","avoidLabelOverlap","stillShowZeroSum","rotate","length2","smooth","lineStyle","itemStyle","animationType","animationEasing","7zxc","89FV","sign","getStackedOnPoint","stackedOnSameSign","baseAxis","valueAxis","valueStart","valueDim","baseDataOffset","stackedOn","stackedData","diffData","oldData","newData","diffResult","diff","add","cmd","newIdx","oldIdx","idx1","remove","execute","oldStackedOnPoints","newStackedOnPoints","oldCoordSys","newCoordSys","currPoints","nextPoints","currStackedPoints","nextStackedPoints","status","sortedIndices","rawIndices","dims","diffItem","pointAdded","currentPt","getItemLayout","nextPt","getRawIndex","rawIndex","sortedCurrPoints","sortedNextPoints","sortedCurrStackedPoints","sortedNextStackedPoints","sortedStatus","current","next","stackedOnCurrent","stackedOnNext","8MHU","SaveAsImage","excludeComponents","pixelRatio","lang","unusable","$a","download","url","getConnectedDataURL","href","MouseEvent","html","open","write","evt","view","bubbles","cancelable","dispatchEvent","8ig/","inverse","nameLocation","nameRotate","nameTruncate","maxWidth","nameTextStyle","nameGap","silent","triggerEvent","axisPointer","axisLine","axisTick","inside","axisLabel","showMinLabel","showMaxLabel","margin","splitLine","splitArea","areaStyle","categoryAxis","merge","boundaryGap","alignWithLabel","splitNumber","timeAxis","defaults","logAxis","logBase","8vhn","curve","x0","y0","quadraticProjectPoint","9Ree","layout","subtext","subtarget","subtextStyle","extendComponentView","render","titleModel","group","removeAll","textStyleModel","getModel","subtextStyleModel","textEl","z2","subText","subTextEl","link","sublink","groupRect","layoutOption","getBoxLayoutParams","layoutRect","getLayoutRect","getHeight","alignStyle","setStyle","getItemStyle","Rect","subPixelOptimizeRect","A+Of","buildTooltipModel","modelCascade","resultModel","pop","tooltipOpt","formatter","makeDispatchAction","refixTooltipPosition","el","viewWidth","viewHeight","gapH","gapV","clientWidth","clientHeight","confineTooltipPosition","calcTooltipPosition","contentSize","domWidth","domHeight","rectWidth","rectHeight","isCenterAlign","TooltipContent","findPointFromSeries","layoutUtil","globalListener","axisHelper","axisPointerViewHelper","proxyRect","tooltipContent","getDom","_tooltipContent","tooltipModel","_tooltipModel","_ecModel","_api","_lastDataByCoordSys","_alwaysShowContent","setEnterable","_initGlobalListener","_keepShow","triggerOn","currTrigger","_tryShow","_hide","_lastX","_lastY","self","clearTimeout","_refreshUpdateTimeout","setTimeout","manuallyShowTip","_ticket","dataByCoordSys","tooltipOption","seriesIndex","_manuallyAxisShowTip","pointInfo","getZr","manuallyHideTip","hideLater","coordSysAxesInfo","getComponent","getSeriesByIndex","getItemModel","_showAxisTooltip","_showSeriesItemTooltip","_showComponentItemTooltip","_showOrMove","_showTimout","globalTooltipModel","singleDefaultHTML","singleParamsList","singleTooltipModel","itemCoordSys","dataByAxis","axisDim","axisIndex","axisValue","seriesDefaultHTML","valueLabel","getValueLabel","seriesDataIndices","valueLabelOpt","idxItem","dataIndexInside","dataParams","axisId","getAxisRawValue","axisValueLabel","formatTooltip","firstLine","positionExpr","_updateContentNotChangedOnAxis","_updatePosition","_showTooltipContent","random","dataModel","dataType","tooltipTrigger","defaultHtml","asyncTicket","content","subTooltipModel","callback","cbTicket","setContent","vAlign","viewSize","pos","lastCoordSys","contentNotChanged","lastItemCoordSys","indexCoordSys","lastDataByAxis","thisItemCoordSys","thisDataByAxis","lastItem","indexAxis","thisItem","lastIndices","newIndices","lastIdxItem","newIdxItem","dispose","unregister","BBXc","samplers","average","frame","nearest","indexSampler","sampling","extent","size","rate","sampler","downSample","setData","BIYt","config","debugMode","Error","console","BOb8","Chart","Group","componentUtil","getUID","elSetState","state","trigger","childCount","childAt","toggleHighlight","queryDataIndex","normalizeToArray","dataIdx","getItemGraphicEl","eachItemGraphicEl","clazzUtil","highlight","downplay","chartProto","updateView","updateLayout","updateVisual","enableClassExtend","enableClassManagement","registerWhenExtend","BgTn","requestAnimationFrame","msRequestAnimationFrame","mozRequestAnimationFrame","webkitRequestAnimationFrame","func","BzeQ","getSeriesStackId","STACK_PREFIX","getAxisKey","getLayoutOnAxis","bandWidth","getBandWidth","axisKey","stackId","widthAndOffsets","doCalBarWidthAndOffset","offsetCenter","calBarWidthAndOffset","barSeries","axisExtent","barWidth","barMaxWidth","barGap","barCategoryGap","seriesInfoList","columnsMap","seriesInfo","columnsOnAxis","remainedWidth","autoWidthCount","categoryGap","stacks","coordSysName","barGapPercent","autoWidth","column","lastColumn","widthSum","barLayoutGrid","barWidthAndOffset","filter","getSeriesByType","isSeriesFiltered","lastStackCoords","lastStackCoordsOrigin","columnLayoutInfo","columnOffset","columnWidth","barMinHeight","valueAxisStart","coords","setLayout","n","coord","lastCoord","lastCoordOrigin","setItemLayout","CC7E","Path","path","PathProxy","pathContain","Pattern","getCanvasPattern","pathProxyForDraw","__dirtyPath","strokeContainThreshold","hasFillGradient","hasStrokeGradient","hasFillPattern","hasStrokePattern","__dirty","_fillGradient","getGradient","_strokeGradient","fillStyle","strokeStyle","lineDash","lineDashOffset","ctxLineDash","setLineDash","getGlobalScale","setScale","beginPath","setLineDashOffset","rebuildPath","shapeCfg","inBundle","createPathProxy","needsUpdateRect","rectWithStroke","_rectWithStroke","copy","lineScale","strokeNoScale","getLineScale","localPos","transformCoordToLocal","pathData","dirtyPath","animateShape","animate","setShape","Sub","extendFrom","defaultShape","thisShape","Cwwa","global","createRegisterEventWithLowercaseName","eventName","handler","MessageCenter","ECharts","dom","theme","prioritySortFunc","prio","themeStorage","_dom","_zr","zrender","renderer","devicePixelRatio","_throttledZrFlush","throttle","flush","_theme","_chartsViews","_chartsMap","_componentsViews","_componentsMap","_coordSysMgr","CoordinateSystemManager","createExtensionAPI","_messageCenter","_initEvents","resize","_pendingActions","timsort","visualFuncs","dataProcessorFuncs","_onframe","setAsPrimitive","doConvertPixel","methodName","finder","_model","coordSysList","getCoordinateSystems","warn","updateDirectly","ecIns","callView","__alive","__model","condition","__viewId","doDispatchAction","payloadType","escapeConnect","actionWrap","actions","cptType","updateMethod","parseClassType","IN_MAIN_PROCESS","payloads","batched","batch","eventObj","eventObjBatch","isHighDown","batchItem","action","main","sub","OPTION_UPDATED","updateMethods","prepareAndUpdate","flushPendingActions","pendingActions","shift","triggerUpdatedEvent","invokeUpdateMethod","component","componentModel","updateZ","chart","updateProgressiveAndBlend","updateHoverLayerStatus","postUpdateFuncs","prepareView","isComponent","viewList","viewMap","componentType","viewId","classType","Clazz","ComponentView","getClass","ChartView","__id","__ecComponentInfo","componentIndex","processData","process","stackSeriesData","stackedDataMap","previousStack","doLayout","visual","isLayout","doVisualEncoding","excludesLayout","clearColorPalette","doRender","componentView","chartView","storage","elCount","isGroup","useHoverLayer","frameDrawNum","needProgressive","progressive","stopAnimation","blendMode","ecInstance","coordSysMgr","ExtensionAPI","getComponentByElement","modelInfo","parent","enableConnect","updateConnectedChartsStatus","charts","STATUS_KEY","eventActionMap","actionType","connectedGroups","makeActionFromEvent","otherCharts","instances","otherChart","GlobalModel","OptionManager","ComponentModel","SeriesModel","colorTool","ACTION_REG","off","one","echartsProto","setOption","notMerge","lazyUpdate","optionManager","optionPreprocessorFuncs","setTheme","getOption","getDevicePixelRatio","painter","dpr","getRenderedCanvas","getDisplayList","getDataURL","excludesComponentViews","toDataURL","groupId","mathMin","mathMax","right","bottom","canvasList","canvas","boundingRect","getBoundingClientRect","targetCanvas","createCanvas","img","refreshImmediately","convertToPixel","convertFromPixel","containPixel","models","getVisual","visualType","defaultMainType","indexOfRawIndex","getItemVisual","getViewOfComponentModel","getViewOfSeriesModel","restoreData","create","isSingleCanvas","configLayer","clearColor","colorArr","parse","stringify","background","clearAllVisual","optionChanged","_loadingFX","showLoading","cfg","hideLoading","loadingEffects","MOUSE_EVENT_NAMES","eveName","eventData","isDisposed","_disposed","idBase","groupIdBase","existInstance","getInstanceByDom","isDom","nodeName","setAttribute","connect","disConnect","disconnect","getAttribute","getInstanceById","registerTheme","registerPreprocessor","preprocessorFunc","priority","processorFunc","registerPostUpdate","postUpdateFunc","registerCoordinateSystem","CoordinateSystem","layoutFunc","visualFunc","registerLoading","loadingFx","extendChartView","setCanvasCreator","creator","noop","format","matrix","vector","helper","FILTER","VISUAL","LAYOUT","GLOBAL","CHART","COMPONENT","BRUSH","D2ou","_a","_b","D8ol","repeat","createPattern","D9oD","Component","componentProto","DAQg","bbox","mathSin","mathCos","start","end","extremity","fromPoints","points","fromLine","xDim","yDim","fromCubic","x3","y3","cubicExtrema","fromQuadratic","quadraticExtremum","tx","ty","fromArc","rx","ry","vec2Min","vec2Max","DQU+","RoamController","pointerChecker","_opt","mousedownHandler","mousedown","mousemoveHandler","mousemove","mouseupHandler","mouseup","mousewheelHandler","mousewheel","pinchHandler","pinch","setPointerChecker","enable","controlType","disable","isDragging","_dragging","isPinching","_pinching","checkKeyBinding","gestureEvent","interactionMutex","isTaken","oldX","oldY","eventTool","stop","wheelDelta","zoomDelta","zoom","pinchScale","pinchX","pinchY","zoomX","zoomY","roamController","prop","setting","isString","EV4n","normalizeRect","cursorHelper","localPoints","clipPointsByRect","specifiedXYIndex","xyIndex","brushWidth","base","targetModel","localCursorPoint","onIrrelevantElement","EXqP","filterSeries","EcM6","setVisual","EtPY","r0","Fhmo","_timelineOptions","_mediaList","_mediaDefault","_currentMediaIndices","_optionBackup","_newBaseOption","parseRawOption","rawOption","isNew","mediaDefault","baseOption","timelineOptions","mediaList","timelineOpt","timeline","media","singleMedia","preProcess","applyMediaQuery","ecWidth","ecHeight","realMap","aspectratio","applicatable","matched","QUERY_REG","operator","realAttr","compare","real","expect","indicesEquals","indices1","indices2","oldOption","newCptOpt","oldCptOpt","hasClass","mapResult","mappingToExists","exist","oldOptionBackup","newParsedOption","mountOption","isRecreate","optionBackup","getTimelineOption","timelineModel","getCurrentIndex","getMediaOption","indices","FjKD","compatItemStyle","itemStyleOpt","POSSIBLE_STYLES","styleName","normalItemStyleOpt","emphasisItemStyleOpt","seriesOpt","markPoint","markLine","mpData","mlData","GEOw","MagicType","line","bar","tiled","getIcons","availableIcons","icons","seriesOptGenreator","seriesId","radioTypes","generateNewSeriesTypes","newSeriesOpt","queryComponents","radio","setIconStatus","currentType","GjIh","ArrayCtor","Float32Array","Array","identity","mul","m1","m2","out0","out1","out2","out3","out4","out5","translate","rad","aa","ac","atx","ab","ad","aty","st","ct","vx","vy","invert","det","GmGe","fixRoundingError","originalVal","roundingErrorFix","Scale","IntervalScale","scaleProto","intervalScaleProto","mathFloor","mathCeil","ceil","mathPow","mathLog","LogScale","$constructor","apply","_originalScale","getTicks","originalScale","_extent","originalExtent","powVal","__fixMin","__fixMax","setExtent","unionExtent","unionExtentFromData","getDataExtent","niceTicks","approxTickNum","span","err","niceExtent","_interval","_niceExtent","fixMin","fixMax","H0dg","assembleTransition","duration","transitionText","vendors","vendorPrefix","assembleFont","cssText","assembleCssText","transitionDuration","zrColor","toHex","borderName","camelCase","container","appendChild","_container","_show","_hideTimeout","onmouseenter","_enterable","_inContent","onmousemove","eventUtil","normalizeEvent","dispatch","onmouseleave","_hideDelay","stl","currentStyle","defaultView","getComputedStyle","domStyle","display","innerHTML","enterable","viewportRoot","getViewportRoot","offsetLeft","offsetTop","time","isShow","HJZV","dimAxisMapper","_axes","_dimList","getAxes","scaleType","addAxis","_dataCoordConvert","input","dimList","output","HN64","linkedNodesFinder","createLinkedNodesFinder","eachAxisDim","dimNames","effectedModels","nodes","dataZoomModel","setRawRange","startValue","endValue","J2oE","isAroundEqual","EPSILON","swapExtrema","extrema","windingCubic","nRoots","cubicRootAt","roots","y0_","y1_","nExtrema","unit","windingQuadratic","quadraticRootAt","y_","x_","windingArc","dir","containPath","isStroke","xi","yi","CMD","windingLine","L","C","cubic","Q","quadratic","A","theta","dTheta","R","Z","JEU6","getSymbolSize","symbolSize","getScale","Symbol","seriesScope","updateData","driftSymbol","symbolUtil","labelHelper","symbolProto","_createSymbol","symbolType","hostModel","symbolPath","createSymbol","culling","initProps","_symbolType","stopSymbolAnimation","toLastFrame","getSymbolPath","setZ","setDraggable","cursor","updateProps","_updateCommon","_seriesModel","normalStyleAccessPath","emphasisStyleAccessPath","normalLabelAccessPath","emphasisLabelAccessPath","useStyle","hoverItemStyle","symbolRotate","symbolOffset","labelModel","hoverLabelModel","hasItemOption","itemModel","elStyle","setColor","opacity","findLabelValueDim","setTextToStyle","hoverStyle","setHoverStyle","isAnimationEnabled","onEmphasis","ratio","animateTo","onNormal","fadeOut","JKcJ","createLinearGradient","obj","createRadialGradient","STYLE_COMMON_PROPS","Style","shadowBlur","shadowOffsetX","shadowOffsetY","textFill","textStroke","textOffset","textDistance","textShadowBlur","textShadowOffsetX","textShadowOffsetY","textTransform","textRotation","blend","prevStyle","firstDraw","globalAlpha","globalCompositeOperation","otherStyle","overwrite","newStyle","canvasGradient","styleProto","Js5e","setLabel","labelText","labelPositionOutside","setText","normalStyle","getFormattedLabel","getRawValue","K/R+","SymbolDraw","symbolCtor","_symbolCtor","symbolNeedsDraw","isIgnore","symbolDrawProto","SymbolCtor","symbolEl","setItemGraphicEl","enableAnimation","K0Lg","coordDims","coordDimToDataDim","Klcl","giveStore","ATTR","createController","newRecord","controller","onPan","onZoom","cleanStore","store","record","coordId","newX","newY","wrapAndDispatch","panGetRange","mouseX","mouseY","zoomGetRange","getRange","dataZoomInfos","dataZoomId","roams","dataZoomInfo","theDataZoomId","theCoordId","allCoordIds","roamControllerOpt","containsPoint","createOrUpdate","throttleRate","shouldRecordRange","generateCoordId","coordModel","Krco","v1","v2","scaleAndAdd","lenSquare","div","dot","distanceSquare","negate","lerp","lengthSquare","dist","distSquare","L5YH","roundNumber","_intervalPrecision","thisExtent","other","getInterval","setInterval","intervalScaleGetTicks","getTicksLabels","labels","ticks","minInterval","intervalScaleNiceTicks","intervalPrecision","niceTickExtent","expandSize","LDr7","Triangle","extendShape","closePath","Diamond","Pin","asin","tanX","tanY","cpLen","cpLen2","Arrow","symbolCtors","Line","roundRect","square","circle","Circle","diamond","pin","arrow","triangle","symbolShapeMakers","symbolBuildProxies","beforeBrush","proxySymbol","symbolPathSetColor","symbolStyle","symbolShape","__isEmptyBrush","isEmpty","makePath","LE4r","featureManager","ToolboxModel","feature","featureOpt","featureName","Feature","itemSize","showTitle","iconStyle","LFYx","has","nubmerUtil","subOpts","emphasisOpt","normalOpt","subOptName","LABEL_OPTIONS","getDataItemValue","isDataItemOption","converDataValue","dimInfo","dimType","createDataFormatModel","dataFormatMixin","rawValue","rawDataIndex","itemOpt","getRawDataItem","componentSubType","seriesName","marker","dimIndex","exists","newCptOptions","cptOption","isIdInner","makeIdAndName","idMap","existCpt","keyInfo","idNum","compressBatches","batchA","batchB","makeMap","sourceBatch","otherMap","dataIndices","otherDataIndices","lenj","mapToArray","isData","mapA","mapB","indexOfName","makeGetter","hostObj","parsedKey","queryType","queryParam","dataDimToCoordDim","dataDim","getDimension","dimItem","getDimensionInfo","coordDim","dimName","coordDimIndex","otherDimToDataDim","otherDim","otherDims","LLSH","getFormattedLabels","getCategories","getMin","origin","rangeStart","eqNaN","getMax","rangeEnd","getNeedCrossZero","getCoordSysModel","setRange","resetRange","LdYJ","processArc","fa","fs","psiDeg","psi","xp","yp","lambda","mathSqrt","cxp","cyp","vAngle","u","vRatio","addData","createPathProxyFromString","cs","cc","RegExp","prevCmd","cpx","cpy","c","ctlPtx","ctlPty","toStatic","createPathOptions","pathProxy","transformPath","vMag","acos","createFromString","extendFromString","mergePath","pathEls","pathList","pathEl","pathBundle","appendPath","LgKv","transferProperties","TRANSFERABLE_PROPERTIES","__wrappedMethods","DefaultDataProvider","dataArray","_array","normalizeDimensions","cloneListForMapAndSample","original","excludeDimensions","allDimensions","_storage","originalStorage","dimStore","globalObj","Float64Array","Int32Array","dataCtors","float","int","ordinal","DataDiffer","pure","getItem","dimensionInfos","dimensionNames","dimensionName","dimensionInfo","stackable","_dimensionInfos","_nameList","_idList","_optionModels","_visual","_layout","_itemVisuals","_itemLayouts","_graphicEls","_rawData","listProto","nameList","dimValueGetter","isDataArray","nameDimIdx","dimensionInfoMap","idList","nameRepeatCount","itemName","DataCtor","stackedValue","getValues","hasValue","dimData","dimExtent","mid","indicesOfNearest","maxDistance","nearestIndices","minDist","Number","MAX_VALUE","minDiff","rawIdx","getId","dimSize","keep","tmpRetValue","retValue","dimension","sampleValue","sampleIndex","targetStorage","originalIndices","frameValues","frameIndices","frameSize","otherList","otherIdList","getLayout","clearItemLayouts","ignoreParent","itemVisual","setItemVisual","setItemDataAndSeriesIndex","child","cloneShallow","dimensionInfoList","wrapMethod","injectFunction","originalMethod","res","TRANSFERABLE_METHODS","CHANGABLE_METHODS","LhwB","isPointNull","drawSegment","segLen","allLen","smoothMin","smoothMax","smoothMonotone","connectNulls","prevIdx","v2Copy","cp0","nextIdx","nextP","ratioNextSeg","prevP","cp1","lenPrevSeg","lenNextSeg","getBoundingBox","smoothConstraint","ptMin","ptMax","pt","Polyline","Polygon","stackedOnPoints","stackedOnSmooth","stackedOnBBox","LsC0","shadowTemp","modified","clipPaths","__clipPaths","M5+E","features","ctor","MU/F","mergeTheme","themeItem","initBase","OPTION_INNER_KEY","_seriesIndices","globalDefault","getComponentsByTypes","componentsMap","types","determineSubType","newCptOption","existComponent","createSeriesIndices","seriesModels","filterBySubType","components","cpt","assertSeriesInitialized","_optionManager","timelineOption","mediaOptions","mediaOption","visitComponent","newCptOptionList","dependentModels","resultItem","ComponentModelClass","extraOpt","newCptTypes","componentOption","topologicalTravel","getAllClassMainTypes","getTheme","cpts","isIdArray","isNameArray","queryCond","q","indexAttr","idAttr","nameAttr","queryResult","getSeriesByName","oneSeries","rawSeriesIndex","eachRawSeries","eachRawSeriesByType","getCurrentSeriesIndices","filteredSeries","componentTypes","MVgO","MpSj","createListFromArray","clipOverflow","symbol","showSymbol","showAllSymbol","hoverLayerThreshold","NPNz","getStore","take","resourceKey","userKey","release","NXVI","eventNameFix","processGesture","proxy","stage","gestureMgr","_gestureMgr","gestureInfo","recognize","zrX","zrY","setTouchTimer","instance","_touching","_touchTimer","isPointerFromTouch","pointerType","initDomHandler","makeMouseHandler","fn","touchHandlerNames","_handlers","domHandlers","pointerHandlerNames","mouseHandlerNames","HandlerDomProxy","mountHandlers","handlerNames","addEventListener","GestureMgr","removeEventListener","pointerEventNames","pointerdown","pointerup","pointermove","pointerout","nm","mouseout","element","toElement","relatedTarget","nodeType","parentNode","touchstart","zrByTouch","_lastTouchMoment","touchmove","touchend","click","handlerDomProxyProto","setCursor","cursorStyle","OGek","DataZoom","_brushController","BrushController","_onBrush","mount","_isZoomActive","retrieveAxisSetting","updateBackBtnStatus","featureModel","updateZoomBtnStatus","zoomActive","dataZoomSelectActive","brushTargetManager","setPanels","enableBrush","brushStyle","sliderMove","DATA_ZOOM_ID_BASE","back","handlers","unmount","nextActive","_dispatchZoomAction","setBatch","findDataZoom","minMaxSpan","findRepresentativeAxisProxy","getMinMaxSpan","minValueSpan","maxValueSpan","snapshot","found","dzModel","getAxisModel","isEnd","updateCovers","addForAxis","axisName","dataZoomOpt","axisIndicesName","givenAxisIndices","forEachComponent","axisOpt","newOpt","$fromToolbox","dataZoomOpts","dataZoom","toolboxOpt","toolbox","OfUh","isAxisUsedInTheGrid","getLabelUnionRect","labelCount","singleRect","union","Grid","_coordsMap","_coordsList","_axesMap","_axesList","_initCartesian","updateAxisTransfrom","coordBase","axisExtentSum","findAxesModels","axesTypes","getReferringComponents","isCartesian2D","ifAxisCrossZero","niceScaleExtent","gridProto","axisPointerEnabled","ifAxisCanNotOnZero","otherAxisDim","axes","axesMap","_updateScale","ignoreContainLabel","adjustAxes","axesList","gridRect","labelUnionRect","axesMapOnDim","getCartesian","xAxisIndex","yAxisIndex","coordList","_findConvertTarget","coordsList","createAxisCreator","axisPosition","axisPositionUsed","createScaleByModel","isCategory","onBand","axesCount","axesModels","getTooltipAxes","baseAxes","otherAxes","otherAxis","grids","OsTV","parseInt10","parseInt","isLayerValid","layer","__builtin__","preProcessLayer","__unusedCount","postProcessLayer","isDisplayableCulled","tmpRect","viewRect","intersect","isClipPathChanged","prevClipPaths","doClip","clip","createRoot","domRoot","Layer","Painter","root","singleCanvas","_opts","_singleCanvas","rootStyle","zlevelList","_zlevelList","layers","_layers","_layerConfig","_width","_height","mainLayer","initContext","_domRoot","_getSize","_progressiveLayers","_hoverlayer","_hoverElements","paintAll","_paintList","refreshHover","_startProgessive","addHover","__hoverMir","elMirror","__from","removeHover","hoverElements","clearHover","hoverLayer","displayableSortFunc","getLayer","scope","save","originalEl","invisible","invTransform","_doPaintEl","restore","token","_progressiveToken","_doPaintList","_furtherProgressive","_progress","_clearProgressive","_updateLayerStatus","eachBuiltinLayer","flushProgressiveLayer","currentLayer","currentZLevel","currentProgressiveLayer","layerProgress","progressiveLayerIdx","elZLevel","elFrame","__frame","MAX_PROGRESSIVE_LAYER_NUMBER","renderScope","__progress","__maxProgress","__nextIdxNotProg","forcePaint","prevClipLayer","prevElClipPaths","afterBrush","insertLayer","layersMap","prevLayer","virtual","prevDom","nextSibling","insertBefore","firstChild","eachLayer","eachOtherLayer","getLayers","progressiveLayers","elCountsLastFrame","progressiveElCountsLastFrame","lastProgressiveKey","progressiveLayerCount","frameCount","elProgress","_clearLayer","layerConfig","delLayer","removeChild","clearLayer","findAndDrawOtherLayer","smaller","larger","intermediateLayer","renderToCanvas","imageLayer","displayList","whIdx","wh","cwh","plt","prb","pathToImage","shadowBlurSize","leftMargin","rightMargin","topMargin","bottomMargin","clearRect","pathTransform","rotation","ImageShape","imgShape","Ow2V","isUserFeatureName","listComponentHelper","toolboxModel","newIndex","oldIndex","featureNames","oldName","featureOpts","createIconPaths","iconName","iconPaths","iconStatus","iconStyleModel","titles","rectHover","__title","_features","_featureNames","addBackground","eachChild","titleText","needPutOnTop","topOffset","PtLt","retrieveRaw","updateRangeUse","names","rangePropMode","_rangePropMode","AxisProxy","DataZoomModel","filterMode","minSpan","maxSpan","_dataIntervalByAxis","_dataInfo","_axisProxies","_autoThrottle","doInit","thisOption","realtime","_setDefaultThrottle","_resetTarget","_giveAxisProxies","axisProxies","eachTargetAxis","axisProxy","__dzAxisProxy","autoMode","_judgeAutoMode","axisIndexName","_autoSetAxisIndex","_autoSetOrient","hasIndexSpecified","autoAxisIndex","singleAxis","singleAxisModel","singleAxisIndex","axisIndices","axisModels","_isSeriesHasAllAxesTypeOf","is","seriesAxisIndex","globalOption","animationDurationUpdate","getFirstTargetAxisModel","firstAxisModel","getAxisProxy","ignoreUpdateRangeUsg","getPercentRange","getDataPercentWindow","getValueRange","axisDimName","getDataValueWindow","hostedBy","getRangePropMode","Q4Sk","doGet","pathArr","getParent","getParentMethod","parsePath","thisParentModel","Ctor","setReadOnly","customizeGetParent","QPUO","SliderZoomModel","dataBackground","fillerColor","handleIcon","handleSize","handleStyle","labelPrecision","labelFormatter","showDetail","showDataShadow","QXe6","delInstance","Handler","Storage","Animation","HandlerProxy","useVML","painterCtors","ZRender","getInstance","registerPainter","rendererType","vml","handerProxy","_needsRefresh","oldDelFromStorage","delFromStorage","oldAddToStorage","addToStorage","addRoot","delRoot","zLevel","_needsRefreshHover","refreshHoverImmediately","clearAnimation","setCursorStyle","eventHandler","Qajf","sysDims","applyDim","OTHER_DIMS","coordDimNameMap","genName","fromZero","dimsDef","encodeDef","dataDimNameMap","dimCount","value0","retrieveValue","sysDimItem","sysDimItemDimsDef","dimDefItem","userDimName","tooltipName","dataDims","resultDimIdx","availDimIdx","sysDimIndex","sysDimItemOtherDims","extra","extraPrefix","extraFromZero","isExtraCoord","guessOrdinal","o","Rj1V","collectAxesInfo","globalAxisPointerModel","linksOption","linkGroups","saveTooltipAxisInfo","fromTooltip","triggerTooltip","axisPointerModel","axisPointerShow","isHandleTrigger","makeAxisPointerModel","baseTooltipModel","snap","makeKey","involveSeries","axisInfo","axesInfo","useHandle","axesInfoInCoordSys","seriesInvolved","groupIndex","getLinkGroupIndex","linkGroup","mapper","coordSysKey","coordSysMap","triggerAxis","cross","tooltipAxes","tooltipAxisPointerModel","volatileOption","field","labelOption","crossStyle","collectSeriesInfo","seriesTooltipTrigger","seriesDataCount","linkOption","checkPropInLink","linkPropValue","axisPropValue","collect","fixValue","getAxisInfo","isBlank","getAxisPointerModel","S+o0","brushSelector","S2oc","pointPair","_track","_doTrack","_recognize","touches","trackItem","touch","clientToLocal","recognizers","track","trackLen","pinchEnd","pinchPre","pinchCenter","SAoR","axisDefault","AXIS_TYPES","BaseAxisModelClass","axisTypeDefaulter","extraDefaultOption","inputPositionParams","getLayoutParams","themeModel","getDefaultOption","mergeLayoutParam","mergeAll","registerSubTypeDefaulter","SUqx","targetList","_selectTargetMap","reduce","targetMap","SZ7R","groupSeries","seriesGroupByCategoryAxis","otherSeries","meta","assembleSeriesWithCategoryAxis","tables","valueAxisDim","headers","columns","lines","ITEM_SPLITER","items","BLOCK_SPLITER","assembleOtherSeries","vals","argLen","getContentFromModel","trim","isTSVFormat","block","parseTSVContents","tsv","tsvLines","itemSplitRegex","categories","header","parseListContents","hasName","parseContents","blockMetaList","blocks","blockMeta","DataView","tryMergeDataOption","originalData","newVal","readOnly","optionToContent","contentToOption","textColor","textareaColor","textareaBorderColor","buttonColor","buttonTextColor","viewMain","textarea","htmlOrDom","buttonContainer","buttonStyle","closeButton","refreshButton","keyCode","which","selectionStart","selectionEnd","substring","newSeriesOptList","T3k4","encodeColor","colorAccessPath","visualColorAccessPath","getColorFromPalette","TQiH","minRunLength","DEFAULT_MIN_MERGE","makeAscendingRun","array","lo","hi","runHi","reverseRun","binaryInsertionSort","pivot","gallopLeft","hint","lastOffset","maxOffset","gallopRight","TimSort","pushRun","_runStart","_runLength","runStart","stackSize","runLength","mergeRuns","mergeAt","forceMergeRuns","start1","length1","start2","mergeLow","mergeHigh","cursor1","cursor2","dest","count1","count2","exit","_minGallop","minGallop","DEFAULT_MIN_GALLOPING","customCursor","customDest","remaining","ts","minRun","force","Tpbs","_setting","getSetting","_isBlank","setBlank","UFrj","paletteScope","dataAll","idxMap","filteredIdx","singleDataColor","UqER","positionGroup","positionElement","box","V+37","LinearGradient","globalCoord","V5JR","isNotAroundZero","mIdentity","transformableProto","needLocalTransform","parentHasTransform","getLocalTransform","tmpTransform","transformCoordToGlobal","VaUJ","platform","animationDuration","animationEasingUpdate","animationThreshold","progressiveThreshold","useUTC","VfTC","defaultKeyGetter","oldArr","newArr","oldKeyGetter","newKeyGetter","_old","_new","_oldKeyGetter","_newKeyGetter","initIndexMap","keyArr","keyGetter","existence","_add","_update","_remove","oldDataIndexMap","newDataIndexMap","oldDataKeyArr","newDataKeyArr","unshift","Vlf+","W4Cx","v2ApplyTransform","lt","rb","lb","rt","maxX","maxY","calculateTransform","ax0","ax1","ay0","ay1","bx0","bx1","by0","by1","plain","Wgry","getZero","theAxis","rawAxisPosition","rectBound","axisOffset","posMap","dirMap","labelDirection","tickDirection","nameDirection","labelOffset","labelInside","labelRotate","WkjF","maxValue","lastIndexOf","RectText","baseline","verticalAlign","shadowColor","textShadowColor","X+UG","fixExtentWithBands","nTick","normalizedExtent","_labelInterval","getTicksCoords","bands","getBands","getLabelsCoords","getAxisLabelInterval","X6QE","adjustSingleSide","shiftUp","delta","changeX","isDownList","lastDeltaX","deltaY","len2","deltaX","lastY","upList","downList","avoidOverlap","labelLayoutList","leftList","rightList","linePoints","hasLabelRotate","textX","textY","labelPosition","labelLineModel","labelLineLen","labelLineLen2","midAngle","isLabelInside","XEbH","XL7f","getOtherDim","thisDim","DataZoomView","HORIZONTAL","LABEL_GAP","SHOW_DATA_SHADOW_SERIES_TYPE","SliderZoomView","_displayables","_orient","_range","_handleEnds","_size","_handleWidth","_handleHeight","_location","_dataShadowInfo","_buildView","_updateView","thisGroup","_resetLocation","_resetInterval","barGroup","_renderBackground","_renderHandle","_renderDataShadow","_positionGroup","coordRect","_findCoordRect","ecSize","positionInfo","layoutParams","location","targetAxisModel","otherAxisInverse","_getViewExtent","_onClickPanelClick","_prepareDataShadowInfo","getShadowDim","otherDataExtent","otherOffset","lastIsEmpty","otherShadowExtent","thisShadowExtent","areaPoints","thisCoord","stride","otherCoord","getLineStyle","getTargetSeriesModels","thisAxis","displaybles","handles","handleLabels","filler","_onDragMove","ondragstart","_showDataInfo","ondragend","_onDragEnd","onmouseover","onmouseout","iconStr","handleIndex","iconOpt","bRect","handleColor","viewExtent","_updateInterval","handleEnds","viewExtend","percentExtent","nonRealtime","handleInterval","handle","handleHeight","_updateDataInfo","barTransform","direction","transformDirection","textPoint","orderedHandleEnds","labelTexts","dataInterval","calculateDataWindow","valueWindow","_formatLabel","valueStr","isFunction","showOrHide","vertex","localPoint","getTargetCoordInfo","coordInfoList","XQWN","IRRELEVANT_EXCLUDES","targetCoordSysModel","XZzg","axisModelCommonMixin","createList","createScale","mixinAxisModelCommonMethods","XrCg","confineInContainer","AxisBuilder","buildElStyle","axisPointerType","styleModel","buildLabelElOption","elOption","labelPos","paddings","bgColor","seriesData","getTransformedPosition","layoutInfo","labelMargin","buildCartesianSingleLabelElOption","textLayout","innerTextLayout","makeLineShape","p1","p2","xDimIndex","makeRectShape","xy","makeSectorShape","YiND","OrdinalScale","rank","ZCII","AxisPointerModel","shadowStyle","ZRRT","aREe","polyHelper","ad5Q","removeRect","animationModel","removeSector","updateStyle","isPolar","itemStyleModel","getBarItemStyle","getLineWidth","rawLayout","BAR_BORDER_WIDTH_QUERY","BarView","coordinateSystemType","_render","isHorizontalOrRadial","elementCreator","cartesian2d","isUpdate","rectShape","animateProperty","animateTarget","polar","isRadial","sector","Sector","sectorShape","fixedLineWidth","signX","signY","ai9K","AxisPonterView","disopse","bHR6","RadialGradient","bL7R","getScaleExtent","axisDataLen","tickCoords","isAxisHorizontal","textSpaceTakenRect","autoLabelInterval","accumulatedLabelInterval","tickCoord","tick","biqb","getSpanSign","restrict","extentSpan","originalDistSign","extentMinSpan","realExtent","currDistSign","bpLu","nPoint","mathAtan2","bt+j","smoothSpline","smoothBezier","controlPoints","cp2","bv/E","resetSingleAxis","reset","filterSingleAxis","filterData","percentRange","valueRange","c3To","BaseAxisPointer","moveAnimation","props","propsEqual","lastProp","lastProps","newProps","equals","updateLabelShowHide","labelEl","getHandleTransProps","trans","createIcon","handleModel","updateMandatoryProps","axisPointerModelHelper","_group","_lastGraphicKey","_handle","_lastValue","_lastStatus","_payloadInfo","forceRender","_axisModel","_axisPointerModel","makeElOption","graphicKey","_moveAnimation","determineAnimation","doUpdateProps","updatePointerEl","updateLabelEl","createPointerEl","createLabelEl","isCategoryAxis","useSnap","pointerOption","pointer","pointerEl","updateHandleTransform","isInit","onmousedown","_onHandleDragMove","_onHandleDragEnd","includeStyles","_moveHandleToValue","getHandleTransform","_doDispatchAxisPointer","payloadInfo","cursorPoint","doClear","buildLabel","cDka","scaleHelper","bisect","TimeScale","stepLvl","_stepLvl","ONE_HOUR","getFullYear","getMonth","getDate","approxInterval","scaleLevelsLen","scaleLevels","level","yearSpan","fixExtent","ONE_SECOND","ONE_MINUTE","ONE_DAY","cH+X","makeAxisEventDataBase","endTextLayout","textRotate","rotationDiff","onLeft","isSilent","fixMinMaxLabelShow","textEls","firstLabel","nextLabel","lastLabel","prevLabel","isTwoLabelOverlapped","labelLayout","firstRect","nextRect","mRotationBack","dumbGroup","_transform","_dumbGroup","hasBuilder","builders","getGroup","pt1","pt2","subPixelOptimizeLine","anid","lineCap","tickModel","lineStyleModel","tickLen","tickInterval","ticksCoords","ifIgnoreOnTick","axisLabelShow","labelRotation","categoryData","tickVal","itemTextStyleModel","labelStr","targetType","gapSignal","nameRotation","axisNameAvailableWidth","truncateOpt","nameTruncateMaxWidth","truncatedText","formatterParams","__fullText","__truncatedText","axisRotation","rawTick","cOuU","_brushType","_brushOption","_panels","_covers","_creatingCover","_creatingPanel","_enableGlobalPan","_mounted","_uid","baseUID","mouseHandlers","doEnableBrush","brushOption","MUTEX_RESOURCE_KEY","DEFAULT_BRUSH_OPT","doDisableBrush","createCover","cover","coverRenderers","__brushOption","endCreating","creatingCover","coverRenderer","getCoverRenderer","updateCoverShape","COVER_Z","updateCoverAfterCreation","updateCommon","getPanelByPoint","panels","panel","pn","getPanelByCover","clearCovers","covers","originalLength","removeOnClick","shouldShowCover","UNSELECT_THRESHOLD","getTrackEnds","tail","createBaseRectCover","doDrift","edgeNames","makeStyle","updateBaseRect","localRange","MIN_RESIZE_LINE_WIDTH","xa","ya","x2a","y2a","widtha","heighta","updateRectShape","transformable","mainEl","childOfName","globalDir","getGlobalDirection","CURSOR_MAP","pointsToRect","clipByPanel","formatRectRange","localDirection","inverseMap","driftRect","toRectRange","fromRectRange","rectRange","localDelta","toLocalDelta","namePart","ind","DIRECTION_MAP","driftPolygon","localD","localZero","xmin","ymin","resetCursor","currPanel","preventDefault","rawE","mainShapeContain","updateCoverByMouse","eventParams","thisBrushOption","brushMode","determineBrushType","getCreatingRange","handleDragEnd","getLineRenderer","localTrack","ends","otherExtent","ne","sw","nw","se","panelOpts","enableGlobalPan","eachCover","brushOptionList","getKey","tmpIdPrefix","oldGetKey","addOrUpdate","newBrushOption","oldCovers","newCovers","cZ/t","isAroundZero","p0","p3","onet","B","t1","disc","K","t2","discSqrt","Y1","Y2","ONE_THIRD","T","ASqrt","THREE_SQRT","t3","p01","p12","p23","p012","p123","p0123","cubicProjectPoint","prev","d1","d2","_v0","_t","_v1","v2DistSquare","EPSILON_NUMERIC","_v2","divider","v2Create","cwCJ","clampCssByte","clampCssAngle","clampCssFloat","parseCssInt","parseCssFloat","cssHueToRgb","setRgba","g","copyRgba","putToCache","colorStr","rgbaArr","lastRemovedArr","colorCache","cached","kCSSColorTable","op","ep","fname","alpha","hsla2rgba","iv","hsla","rgba","rgba2hsla","H","S","G","vMin","vMax","deltaR","deltaG","deltaB","lift","fastMapToColor","normalizedValue","colors","leftIndex","rightIndex","leftColor","rightColor","dv","mapToColor","fullOutput","modifyHSL","modifyAlpha","arrColor","transparent","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","d/Zd","r1","r2","r3","r4","total","dCDA","classUtil","colorIdx","colorNameMap","colorPalette","e1yY","e36O","clazz","enableSubTypeDefaulter","entity","subTypeDefaulters","defaulter","componentTypeMain","hasSubTypes","enableTopologicalTravel","dependencyGetter","makeDepndencyGraph","fullNameList","graph","noEntryList","createDependencyGraphItem","originalDeps","availableDeps","getAvailableDependencies","entryCount","dependentName","predecessor","thatItem","successor","dep","targetNameList","removeEdge","succComponentType","removeEdgeAndAdd","targetNameSet","currComponentType","currVertex","isInTargetNameSet","eScH","getMarkerPosition","barMinAngle","f/vB","min2","max2","mathAbs","hasTypedArray","notSaveData","_saveData","_ctx","_xi","_yi","_x0","_y0","_ux","_uy","_len","_lineDash","_dashOffset","_dashIdx","_dashSum","exceedUnit","_needsDash","_dashedLineTo","_dashedBezierTo","_dashedQuadraticTo","arcTo","lineDashSum","appendSize","appendPathData","_expandData","_prevCmd","dash","dashSum","nDash","bezierLen","tmpLen","ux","uy","scaleX","scaleY","isEllipse","fIB7","lib","ORIGIN_METHOD","RATE","debounce","lastExec","getTime","timer","args","currCall","debounceNextCall","lastCall","thisDelay","thisDebounce","debounceDelay","fnAttr","throttleType","originFn","lastThrottleType","feXt","arrySlice","_$handlers","_h","newList","triggerWithContext","fzq8","checkClassType","superClass","IS_CONTAINER","host","hasOwn","RootClass","mandatoryMethods","ExtendedClass","makeContainer","registerClass","componentMainType","throwWhenNotFound","getClassesByMainType","originalExtend","g07m","rectContain","animateStyle","gE7w","gUUB","interpolate","v0","isLoop","segs","w2","w3","geKH","v2Min","v2Max","v2Scale","v2Distance","v2Add","constraint","prevPoint","nextPoint","cps","d0","hXDN","maskColor","mask","Arc","labelRect","when","hpyJ","compatLayoutProperties","LAYOUT_PROPERTIES","compatStyle","COMPATITABLE_COMPONENTS","COMPATITABLE_SERIES","clockWise","pointerColor","dataRange","visualMap","componentName","i4I6","LinkedList","head","linkedListProto","insert","entry","Entry","insertEntry","maxSize","_list","_map","_maxSize","_lastRemovedEntry","LRUProto","removed","leastUsedEntry","iiGm","showContent","alwaysShowContent","displayMode","confine","showDelay","hideDelay","borderRadius","ikqo","calculateDataExtent","seriesExtent","fixExtentByAxis","setAxisModel","isRestore","percentWindow","_percentWindow","_valueWindow","useOrigin","setMinMaxSpan","_minMaxSpan","_dataZoomModel","valueSpan","_dataExtent","_dimName","_axisIndex","isCoordSupported","getOtherAxisModel","coordSysIndexName","isCartesian","foundOtherAxisModel","otherAxisModel","boundValue","boundPercent","dataWindow","isInWindow","leftOut","rightOut","thisHasValue","thisLeftOut","thisRightOut","jBAq","returnFalse","createDom","newDom","newDomStyle","onselectstart","domBack","ctxBack","motionBlur","lastFrameAlpha","createBackBuffer","clearAll","haveMotionBLur","clearColorGradientOrPattern","__canvasGradient","fillRect","jTvm","chartInstance","echartsAPIList","kQ9+","linear","quadraticIn","quadraticOut","quadraticInOut","cubicIn","cubicOut","cubicInOut","quarticIn","quarticOut","quarticInOut","quinticIn","quinticOut","quinticInOut","sinusoidalIn","sinusoidalOut","sinusoidalInOut","exponentialIn","exponentialOut","exponentialInOut","circularIn","circularOut","circularInOut","elasticIn","elasticOut","elasticInOut","backIn","backOut","backInOut","bounceIn","bounceOut","bounceInOut","kawL","calculate","defaultGetZrXY","layerX","layerY","clientX","clientY","targetTouches","changedTouches","zrDelta","detail","isDomLevel2","attachEvent","detachEvent","stopPropagation","cancelBubble","returnValue","Dispatcher","kwh2","defaultSymbolType","legendSymbol","itemSymbolType","itemSymbolSize","lzeG","getAxisType","axisModelCreator","AxisModel","gridIndex","gridId","extraOption","n/gz","updateDataSelected","hasAnimation","toggleItemSelected","PiePiece","polyline","hoverIgnore","normalIgnore","getLabelStyle","piePieceProto","firstCreate","visualColor","lineJoin","_updateLabel","labelHoverModel","labelLineHoverModel","Pie","sectorGroup","_sectorGroup","isFirstRender","onSectorClick","piePiece","_createClipPath","itemLayout","nXqQ","newSnapshot","nfmd","isPointsSame","points1","points2","getSmooth","getAxisExtentWithGap","halfBandWidth","getStackedOnPoints","createGridClipShape","xExtent","yExtent","createPolarClipShape","angleAxis","getAngleAxis","radiusAxis","getRadiusAxis","radiusExtent","angleExtent","RADIAN","createClipShape","turnPointsIntoStep","stepTurnAt","baseIndex","stepPoints","stepPt","middle","stepPt2","getVisualGradient","visualMetaList","visualMeta","stops","stopLen","outerColors","minCoord","maxCoord","coordSpan","gradient","lineAnimationDiff","lineGroup","symbolDraw","_symbolDraw","_lineGroup","areaStyleModel","isCoordSysPolar","prevCoordSys","_coordSys","_polyline","_polygon","isAreaChart","isSymbolIgnore","_getSymbolIgnoreFunc","__temp","_step","_newPolygon","_stackedOnPoints","_points","_updateAnimation","_newPolyline","__points","updatedDataInfo","diffStatus","ptIdx","during","nw1Z","typeStr","objToString","TYPED_ARRAY","BUILTIN_OBJECT","isPrimitive","targetProp","sourceProp","isBuiltInObject","targetAndSources","overlay","baseClazz","F","clazzPrototype","isArrayLike","forEach","nativeForEach","nativeMap","memo","nativeReduce","nativeFilter","find","nativeSlice","ownerDocument","Function","message","primitiveKey","HashMap","[object Function]","[object RegExp]","[object Date]","[object Error]","[object CanvasGradient]","[object CanvasPattern]","[object Image]","[object Canvas]","[object Int8Array]","[object Uint8Array]","[object Uint8ClampedArray]","[object Int16Array]","[object Uint16Array]","[object Int32Array]","[object Uint32Array]","[object Float32Array]","[object Float64Array]","Object","arrayProto","prefixedKey","removeKey","o/Er","_coordinateSystems","coordinateSystemCreators","coordinateSystems","creater","coordinateSystemCreator","o0M/","oHN5","Animator","animatingShape","pathSplitted","animator","done","forwardToLast","_animateToShallow","objShallow","propertyCount","oge2","olP8","omlO","getLineDash","lineType","dotSize","dashSize","p+9T","makeEventPacket","eveType","EmptyProxy","isHover","displayable","SILENT","painterRoot","_hovered","lastHovered","hovered","hoveredTarget","lastHoveredTarget","innerDom","eventArgs","eventPacket","exclude","hoverCheckResult","_downel","_upel","pt00","axisTrigger","pwBP","firstDataNotNull","ifNeedCompleteOrdinalData","sampleItem","creators","registeredCoordSys","completeDimOpt","getDimensionsInfo","categoryIndex","createNameList","categoryAxesModels","isStackable","getDimTypeByAxis","categoryAxisModel","categoryDim","dataLen","xAxisType","yAxisType","isXAxisCateogry","isYAxisCategory","singleAxisType","single","polarModel","angleAxisModel","findAxisModel","radiusAxisModel","radiusAxisType","angleAxisType","isAngleAxisCateogry","isRadiusAxisCateogry","qLdl","getBorderLineDash","qYWS","_clips","_running","_time","_pauseStart","addClip","clips","getClips","removeClip","deferredEvents","deferredClips","_startLoop","getter","setter","qf1S","defaultGetter","defaultSetter","interpolateNumber","interpolateString","interpolateArray","arrDim","fillArr","arr0","arr1","arr0Len","arr1Len","arraySlice","isArraySame","catmullRomInterpolateArray","catmullRomInterpolate","cloneValue","rgba2String","getArrayDim","keyframes","lastValue","createTrackClip","oneTrackDone","_getter","_setter","useSpline","trackMaxTime","firstVal","isValueArray","isValueColor","isValueString","kfPercents","kfValues","prevValue","isAllValueEqual","colorArray","lastFrame","lastFramePercent","_loop","_tracks","_clipCount","_doneList","_onframeList","_clipList","tracks","isPaused","_doneCallback","doneList","lastClip","clipCount","oldOnFrame","clipList","rRE/","sEAT","initGlobalListeners","useHandler","dis","records","dispatchTooltipFinally","pendings","initialized","doEnter","onLeave","actuallyPayload","showLen","showTip","hideLen","hideTip","pendingList","svhf","t4wi","updateAxisPointer","axisView","AxisView","getAxisPointerClass","axisPointerClass","_axisPointer","disposeAxisPointer","axisPointerClazz","registerAxisPointerClass","t6Cc","InsideZoomView","coordInfo","dataZoomOption","_onPan","_onZoom","directionInfo","getDirectionInfo","percentDelta","signal","pixel","pixelLength","percentPoint","pixelStart","oldPoint","newPoint","pointToCoord","tPN/","tR6g","getTooltipPosition","tojz","cartesianAxisHelper","axisBuilderAttrs","selfBuilderAttrs","CartesianAxisView","oldAxisGroup","_axisGroup","axisBuilder","groupTransition","_splitLine","splitLineModel","lineColors","lineInterval","lineCount","colorIndex","_splitArea","splitAreaModel","areaColors","prevX","prevY","areaInterval","u4xi","ujyV","validDataCount","unitRadian","roseType","restAngle","valueSumLargerThanMinAngle","currentAngle","uliI","coordIndex","coordSysLists","uy5n","vGh9","labelDims","vd24","colorPaletteMixin","fillDataTextStyle","newSeriesOption","getLinkedData","multipleSeries","formattedValue","setEachItem","dimIdx","valStr","vertially","tooltipDims","colorEl","animationEnabled","getAxisTooltipData","vfQN","paths","_updatePathDirty","vnaK","wLby","getAxisDimIndex","viewHelper","CartesianAxisPointer","pixelValue","pointerShapeBuilder","currPosition","cursorOtherValue","tooltipOptions","targetShape","shadow","wmWp","legendSelectActionHandler","selectedMap","isToggleSelect","legendModel","isItemSelected","wvll","getDependencies","deps","arrayPush","optList","Class","xFPV","xG35","idStart","xI8J","dispatchSelectAction","dispatchHighlightAction","dataName","dispatchDownplayAction","symbolCreator","_symbolTypeStore","selectMode","itemAlign","legendDrawedMap","newline","legendSymbolType","_createItem","itemGroup","itemIcon","legendGlobalTooltipModel","hitRect","legendIndex","xLXz","illegalPoint","isIllegalPoint","inputAxesInfo","shouldHide","outputFinder","showValueMap","updaters","showPointer","showTooltip","coordSysContainsPoint","inputAxisInfo","findInputAxisInfo","processOnAxis","linkTriggers","tarAxisInfo","tarKey","srcAxisInfo","srcKey","srcValItem","makeMapperParam","updateModelActually","dispatchTooltipActually","dispatchHighDownActually","newValue","dontSnap","buildPayloadsBySeries","payloadBatch","snapToValue","seriesNestestValue","nestestValue","modelHelper","coordSysItem","coordSysId","coordSysIndex","coordSysType","coordSysMainType","outputAxesInfo","valItem","lastHighlights","newHighlights","toHighlight","toDownplay","y2WT","hasFillOrStroke","fillOrStroke","liftColor","cacheElementStl","__hoverStlDirty","__hoverStl","__normalStl","doSingleEnterHover","__isHover","doSingleLeaveHover","normalStl","doEnterHover","doLeaveHover","setElementHoverStl","hoverStl","onElementMouseOver","__hoverSilentOnTouch","__isEmphasis","onElementMouseOut","enterEmphasis","leaveEmphasis","animateOrSetProps","animatableModel","postfix","animationDelay","getAnimationDelayParams","pathTool","Ring","BezierCurve","CompoundPath","extendPath","resizePath","pathRect","subPixelOptimize","originX","originY","originWidth","originHeight","positiveOrNegative","doubledPosition","hoverSilentOnTouch","labelColor","gTextStyleModel","ancestor","mat","hBase","vBase","g1","g2","getAnimatableProps","elMap1","elMap","oldEl","newProp","clipRectByRect","targetRect","y60F","y9L0","shapeCompareFunc","_roots","_displayList","_displayListLen","includeIgnore","updateDisplayList","_updateAndAddDisplayable","userSetClipPath","currentClipPath","parentClipPath","children","_children","__storage","addChildrenToStorage","delChildrenFromStorage","_renderList","yMOk","_doAdd","addBefore","includeChildren","tmpMat","childRect","yToh","AXIS_DIMS","COORDS","coordType","createNameEach","attrs","capitalNames","capitalAttrs","nameObj","capital","forEachNode","forEachEdgeType","edgeIdGetter","isNodeAbsorded","isLinked","hasLink","edgeType","edgeId","absorb","sourceNode","processSingleNode","existsLink","yrSL","roundRectHelper","ys60","containLabel","zxuD","boxLayout","maxHeight","currentLineMaxSize","nextX","nextY","nextChild","nextChildRect","moveX","moveY","LOCATION_PARAMS","HV_NAMES","vbox","hbox","getAvailableSize","containerRect","containerHeight","verticalMargin","horizontalMargin","hv","boundingMode","elPos","sizeCalculable","hvIdx","targetOption","newParams","newValueCount","merged","mergedValueCount","hasProp","hResult","vResult","copyLayoutParams"],"mappings":"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/pC,MAAAlC,EAAA,KADA,CAIA,GAAA86D,GACAC,EAEAzmB,EACAC,EACAolB,EACAH,EACAC,EAEAt6D,EAAAw7D,EACAv7D,EAAAw7D,CAGA,QAAAC,GACA,QACAF,GAAA36D,EAAAisC,KACA2uB,GAAA56D,EAAAisC,KACAhiB,EAAA88B,EAAAE,EACAjnB,EAAAq6B,QAAApwC,EAAA0wC,EAAAC,EACA,MACA,SACAD,EAAA36D,EAAAisC,KACA2uB,EAAA56D,EAAAisC,KACAhiB,EAAA88B,EAAAE,EACAjnB,EAAAq6B,QAAApwC,EAAA0wC,EAAAC,EACA,MACA,SACAD,GAAA36D,EAAAisC,KACA2uB,GAAA56D,EAAAisC,KACAhiB,EAAA88B,EAAApmC,EACAqf,EAAAq6B,QAAApwC,EAAA0wC,EAAAC,GACAC,EAAA,GACA,MACA,SACAF,EAAA36D,EAAAisC,KACA2uB,EAAA56D,EAAAisC,KACAhiB,EAAA88B,EAAApmC,EACAqf,EAAAq6B,QAAApwC,EAAA0wC,EAAAC,GACAC,EAAA,GACA,MACA,SACAF,GAAA36D,EAAAisC,KACAhiB,EAAA88B,EAAAE,EACAjnB,EAAAq6B,QAAApwC,EAAA0wC,EAAAC,EACA,MACA,SACAD,EAAA36D,EAAAisC,KACAhiB,EAAA88B,EAAAE,EACAjnB,EAAAq6B,QAAApwC,EAAA0wC,EAAAC,EACA,MACA,SACAA,GAAA56D,EAAAisC,KACAhiB,EAAA88B,EAAAE,EACAjnB,EAAAq6B,QAAApwC,EAAA0wC,EAAAC,EACA,MACA,SACAA,EAAA56D,EAAAisC,KACAhiB,EAAA88B,EAAAE,EACAjnB,EAAAq6B,QAAApwC,EAAA0wC,EAAAC,EACA,MACA,SACA3wC,EAAA88B,EAAAG,EACAlnB,EAAAq6B,QACApwC,EAAAjqB,EAAAisC,KAAAjsC,EAAAisC,KAAAjsC,EAAAisC,KAAAjsC,EAAAisC,KAAAjsC,EAAAisC,KAAAjsC,EAAAisC,MAEA0uB,EAAA36D,EAAAisC,EAAA,GACA2uB,EAAA56D,EAAAisC,EAAA,EACA,MACA,SACAhiB,EAAA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","file":"static/js/echarts.fbb68525fb35cc2541ca.js","sourcesContent":["webpackJsonp([1],{\n\n/***/ \"+huS\":\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * @file Data zoom model\n */\n\n\n    module.exports = __webpack_require__(\"PtLt\").extend({\n\n        type: 'dataZoom.inside',\n\n        /**\n         * @protected\n         */\n        defaultOption: {\n            disabled: false,   // Whether disable this inside zoom.\n            zoomLock: false,   // Whether disable zoom but only pan.\n            zoomOnMouseWheel: true, // Can be: true / false / 'shift' / 'ctrl' / 'alt'.\n            moveOnMouseMove: true,   // Can be: true / false / 'shift' / 'ctrl' / 'alt'.\n            preventDefaultMouseMove: true\n        }\n    });\n\n\n/***/ }),\n\n/***/ \"+iiX\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n\n    var zrUtil = __webpack_require__(\"nw1Z\");\n    var Cartesian = __webpack_require__(\"HJZV\");\n\n    function Cartesian2D(name) {\n\n        Cartesian.call(this, name);\n    }\n\n    Cartesian2D.prototype = {\n\n        constructor: Cartesian2D,\n\n        type: 'cartesian2d',\n\n        /**\n         * @type {Array.<string>}\n         * @readOnly\n         */\n        dimensions: ['x', 'y'],\n\n        /**\n         * Base axis will be used on stacking.\n         *\n         * @return {module:echarts/coord/cartesian/Axis2D}\n         */\n        getBaseAxis: function () {\n            return this.getAxesByScale('ordinal')[0]\n                || this.getAxesByScale('time')[0]\n                || this.getAxis('x');\n        },\n\n        /**\n         * If contain point\n         * @param {Array.<number>} point\n         * @return {boolean}\n         */\n        containPoint: function (point) {\n            var axisX = this.getAxis('x');\n            var axisY = this.getAxis('y');\n            return axisX.contain(axisX.toLocalCoord(point[0]))\n                && axisY.contain(axisY.toLocalCoord(point[1]));\n        },\n\n        /**\n         * If contain data\n         * @param {Array.<number>} data\n         * @return {boolean}\n         */\n        containData: function (data) {\n            return this.getAxis('x').containData(data[0])\n                && this.getAxis('y').containData(data[1]);\n        },\n\n        /**\n         * Convert series data to an array of points\n         * @param {module:echarts/data/List} data\n         * @param {boolean} stack\n         * @return {Array}\n         *  Return array of points. For example:\n         *  `[[10, 10], [20, 20], [30, 30]]`\n         */\n        dataToPoints: function (data, stack) {\n            return data.mapArray(['x', 'y'], function (x, y) {\n                return this.dataToPoint([x, y]);\n            }, stack, this);\n        },\n\n        /**\n         * @param {Array.<number>} data\n         * @param {boolean} [clamp=false]\n         * @return {Array.<number>}\n         */\n        dataToPoint: function (data, clamp) {\n            var xAxis = this.getAxis('x');\n            var yAxis = this.getAxis('y');\n            return [\n                xAxis.toGlobalCoord(xAxis.dataToCoord(data[0], clamp)),\n                yAxis.toGlobalCoord(yAxis.dataToCoord(data[1], clamp))\n            ];\n        },\n\n        /**\n         * @param {Array.<number>} point\n         * @param {boolean} [clamp=false]\n         * @return {Array.<number>}\n         */\n        pointToData: function (point, clamp) {\n            var xAxis = this.getAxis('x');\n            var yAxis = this.getAxis('y');\n            return [\n                xAxis.coordToData(xAxis.toLocalCoord(point[0]), clamp),\n                yAxis.coordToData(yAxis.toLocalCoord(point[1]), clamp)\n            ];\n        },\n\n        /**\n         * Get other axis\n         * @param {module:echarts/coord/cartesian/Axis2D} axis\n         */\n        getOtherAxis: function (axis) {\n            return this.getAxis(axis.dim === 'x' ? 'y' : 'x');\n        }\n\n    };\n\n    zrUtil.inherits(Cartesian2D, Cartesian);\n\n    module.exports = Cartesian2D;\n\n\n/***/ }),\n\n/***/ \"0+1J\":\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * 直线\n * @module zrender/graphic/shape/Line\n */\n\n    module.exports = __webpack_require__(\"CC7E\").extend({\n\n        type: 'line',\n\n        shape: {\n            // Start point\n            x1: 0,\n            y1: 0,\n            // End point\n            x2: 0,\n            y2: 0,\n\n            percent: 1\n        },\n\n        style: {\n            stroke: '#000',\n            fill: null\n        },\n\n        buildPath: function (ctx, shape) {\n            var x1 = shape.x1;\n            var y1 = shape.y1;\n            var x2 = shape.x2;\n            var y2 = shape.y2;\n            var percent = shape.percent;\n\n            if (percent === 0) {\n                return;\n            }\n\n            ctx.moveTo(x1, y1);\n\n            if (percent < 1) {\n                x2 = x1 * (1 - percent) + x2 * percent;\n                y2 = y1 * (1 - percent) + y2 * percent;\n            }\n            ctx.lineTo(x2, y2);\n        },\n\n        /**\n         * Get point at percent\n         * @param  {number} percent\n         * @return {Array.<number>}\n         */\n        pointAt: function (p) {\n            var shape = this.shape;\n            return [\n                shape.x1 * (1 - p) + shape.x2 * p,\n                shape.y1 * (1 - p) + shape.y2 * p\n            ];\n        }\n    });\n\n\n\n/***/ }),\n\n/***/ \"0+Kq\":\n/***/ (function(module, exports) {\n\n/**\n * 数值处理模块\n * @module echarts/util/number\n */\n\n\n\n    var number = {};\n\n    var RADIAN_EPSILON = 1e-4;\n\n    function _trim(str) {\n        return str.replace(/^\\s+/, '').replace(/\\s+$/, '');\n    }\n\n    /**\n     * Linear mapping a value from domain to range\n     * @memberOf module:echarts/util/number\n     * @param  {(number|Array.<number>)} val\n     * @param  {Array.<number>} domain Domain extent domain[0] can be bigger than domain[1]\n     * @param  {Array.<number>} range  Range extent range[0] can be bigger than range[1]\n     * @param  {boolean} clamp\n     * @return {(number|Array.<number>}\n     */\n    number.linearMap = function (val, domain, range, clamp) {\n        var subDomain = domain[1] - domain[0];\n        var subRange = range[1] - range[0];\n\n        if (subDomain === 0) {\n            return subRange === 0\n                ? range[0]\n                : (range[0] + range[1]) / 2;\n        }\n\n        // Avoid accuracy problem in edge, such as\n        // 146.39 - 62.83 === 83.55999999999999.\n        // See echarts/test/ut/spec/util/number.js#linearMap#accuracyError\n        // It is a little verbose for efficiency considering this method\n        // is a hotspot.\n        if (clamp) {\n            if (subDomain > 0) {\n                if (val <= domain[0]) {\n                    return range[0];\n                }\n                else if (val >= domain[1]) {\n                    return range[1];\n                }\n            }\n            else {\n                if (val >= domain[0]) {\n                    return range[0];\n                }\n                else if (val <= domain[1]) {\n                    return range[1];\n                }\n            }\n        }\n        else {\n            if (val === domain[0]) {\n                return range[0];\n            }\n            if (val === domain[1]) {\n                return range[1];\n            }\n        }\n\n        return (val - domain[0]) / subDomain * subRange + range[0];\n    };\n\n    /**\n     * Convert a percent string to absolute number.\n     * Returns NaN if percent is not a valid string or number\n     * @memberOf module:echarts/util/number\n     * @param {string|number} percent\n     * @param {number} all\n     * @return {number}\n     */\n    number.parsePercent = function(percent, all) {\n        switch (percent) {\n            case 'center':\n            case 'middle':\n                percent = '50%';\n                break;\n            case 'left':\n            case 'top':\n                percent = '0%';\n                break;\n            case 'right':\n            case 'bottom':\n                percent = '100%';\n                break;\n        }\n        if (typeof percent === 'string') {\n            if (_trim(percent).match(/%$/)) {\n                return parseFloat(percent) / 100 * all;\n            }\n\n            return parseFloat(percent);\n        }\n\n        return percent == null ? NaN : +percent;\n    };\n\n    /**\n     * (1) Fix rounding error of float numbers.\n     * (2) Support return string to avoid scientific notation like '3.5e-7'.\n     *\n     * @param {number} x\n     * @param {number} [precision]\n     * @param {boolean} [returnStr]\n     * @return {number|string}\n     */\n    number.round = function (x, precision, returnStr) {\n        if (precision == null) {\n            precision = 10;\n        }\n        // Avoid range error\n        precision = Math.min(Math.max(0, precision), 20);\n        x = (+x).toFixed(precision);\n        return returnStr ? x : +x;\n    };\n\n    number.asc = function (arr) {\n        arr.sort(function (a, b) {\n            return a - b;\n        });\n        return arr;\n    };\n\n    /**\n     * Get precision\n     * @param {number} val\n     */\n    number.getPrecision = function (val) {\n        val = +val;\n        if (isNaN(val)) {\n            return 0;\n        }\n        // It is much faster than methods converting number to string as follows\n        //      var tmp = val.toString();\n        //      return tmp.length - 1 - tmp.indexOf('.');\n        // especially when precision is low\n        var e = 1;\n        var count = 0;\n        while (Math.round(val * e) / e !== val) {\n            e *= 10;\n            count++;\n        }\n        return count;\n    };\n\n    /**\n     * @param {string|number} val\n     * @return {number}\n     */\n    number.getPrecisionSafe = function (val) {\n        var str = val.toString();\n\n        // Consider scientific notation: '3.4e-12' '3.4e+12'\n        var eIndex = str.indexOf('e');\n        if (eIndex > 0) {\n            var precision = +str.slice(eIndex + 1);\n            return precision < 0 ? -precision : 0;\n        }\n        else {\n            var dotIndex = str.indexOf('.');\n            return dotIndex < 0 ? 0 : str.length - 1 - dotIndex;\n        }\n    };\n\n    /**\n     * Minimal dicernible data precisioin according to a single pixel.\n     *\n     * @param {Array.<number>} dataExtent\n     * @param {Array.<number>} pixelExtent\n     * @return {number} precision\n     */\n    number.getPixelPrecision = function (dataExtent, pixelExtent) {\n        var log = Math.log;\n        var LN10 = Math.LN10;\n        var dataQuantity = Math.floor(log(dataExtent[1] - dataExtent[0]) / LN10);\n        var sizeQuantity = Math.round(log(Math.abs(pixelExtent[1] - pixelExtent[0])) / LN10);\n        // toFixed() digits argument must be between 0 and 20.\n        var precision = Math.min(Math.max(-dataQuantity + sizeQuantity, 0), 20);\n        return !isFinite(precision) ? 20 : precision;\n    };\n\n    // Number.MAX_SAFE_INTEGER, ie do not support.\n    number.MAX_SAFE_INTEGER = 9007199254740991;\n\n    /**\n     * To 0 - 2 * PI, considering negative radian.\n     * @param {number} radian\n     * @return {number}\n     */\n    number.remRadian = function (radian) {\n        var pi2 = Math.PI * 2;\n        return (radian % pi2 + pi2) % pi2;\n    };\n\n    /**\n     * @param {type} radian\n     * @return {boolean}\n     */\n    number.isRadianAroundZero = function (val) {\n        return val > -RADIAN_EPSILON && val < RADIAN_EPSILON;\n    };\n\n    var TIME_REG = /^(?:(\\d{4})(?:[-\\/](\\d{1,2})(?:[-\\/](\\d{1,2})(?:[T ](\\d{1,2})(?::(\\d\\d)(?::(\\d\\d)(?:[.,](\\d+))?)?)?(Z|[\\+\\-]\\d\\d:?\\d\\d)?)?)?)?)?$/; // jshint ignore:line\n\n    /**\n     * @return {number} in minutes\n     */\n    number.getTimezoneOffset = function () {\n        return (new Date()).getTimezoneOffset();\n    };\n\n    /**\n     * @param {string|Date|number} value These values can be accepted:\n     *   + An instance of Date, represent a time in its own time zone.\n     *   + Or string in a subset of ISO 8601, only including:\n     *     + only year, month, date: '2012-03', '2012-03-01', '2012-03-01 05', '2012-03-01 05:06',\n     *     + separated with T or space: '2012-03-01T12:22:33.123', '2012-03-01 12:22:33.123',\n     *     + time zone: '2012-03-01T12:22:33Z', '2012-03-01T12:22:33+8000', '2012-03-01T12:22:33-05:00',\n     *     all of which will be treated as local time if time zone is not specified\n     *     (see <https://momentjs.com/>).\n     *   + Or other string format, including (all of which will be treated as loacal time):\n     *     '2012', '2012-3-1', '2012/3/1', '2012/03/01',\n     *     '2009/6/12 2:00', '2009/6/12 2:05:08', '2009/6/12 2:05:08.123'\n     *   + a timestamp, which represent a time in UTC.\n     * @return {Date} date\n     */\n    number.parseDate = function (value) {\n        if (value instanceof Date) {\n            return value;\n        }\n        else if (typeof value === 'string') {\n            // Different browsers parse date in different way, so we parse it manually.\n            // Some other issues:\n            // new Date('1970-01-01') is UTC,\n            // new Date('1970/01/01') and new Date('1970-1-01') is local.\n            // See issue #3623\n            var match = TIME_REG.exec(value);\n\n            if (!match) {\n                // return Invalid Date.\n                return new Date(NaN);\n            }\n\n            var timezoneOffset = number.getTimezoneOffset();\n            var timeOffset = !match[8]\n                ? 0\n                : match[8].toUpperCase() === 'Z'\n                ? timezoneOffset\n                : +match[8].slice(0, 3) * 60 + timezoneOffset;\n\n            // match[n] can only be string or undefined.\n            // But take care of '12' + 1 => '121'.\n            return new Date(\n                +match[1],\n                +(match[2] || 1) - 1,\n                +match[3] || 1,\n                +match[4] || 0,\n                +(match[5] || 0) - timeOffset,\n                +match[6] || 0,\n                +match[7] || 0\n            );\n        }\n        else if (value == null) {\n            return new Date(NaN);\n        }\n\n        return new Date(Math.round(value));\n    };\n\n    /**\n     * Quantity of a number. e.g. 0.1, 1, 10, 100\n     *\n     * @param  {number} val\n     * @return {number}\n     */\n    number.quantity = function (val) {\n        return Math.pow(10, quantityExponent(val));\n    };\n\n    function quantityExponent(val) {\n        return Math.floor(Math.log(val) / Math.LN10);\n    }\n\n    /**\n     * find a “nice” number approximately equal to x. Round the number if round = true,\n     * take ceiling if round = false. The primary observation is that the “nicest”\n     * numbers in decimal are 1, 2, and 5, and all power-of-ten multiples of these numbers.\n     *\n     * See \"Nice Numbers for Graph Labels\" of Graphic Gems.\n     *\n     * @param  {number} val Non-negative value.\n     * @param  {boolean} round\n     * @return {number}\n     */\n    number.nice = function (val, round) {\n        var exponent = quantityExponent(val);\n        var exp10 = Math.pow(10, exponent);\n        var f = val / exp10; // 1 <= f < 10\n        var nf;\n        if (round) {\n            if (f < 1.5) { nf = 1; }\n            else if (f < 2.5) { nf = 2; }\n            else if (f < 4) { nf = 3; }\n            else if (f < 7) { nf = 5; }\n            else { nf = 10; }\n        }\n        else {\n            if (f < 1) { nf = 1; }\n            else if (f < 2) { nf = 2; }\n            else if (f < 3) { nf = 3; }\n            else if (f < 5) { nf = 5; }\n            else { nf = 10; }\n        }\n        val = nf * exp10;\n\n        // Fix 3 * 0.1 === 0.30000000000000004 issue (see IEEE 754).\n        // 20 is the uppper bound of toFixed.\n        return exponent >= -20 ? +val.toFixed(exponent < 0 ? -exponent : 0) : val;\n    };\n\n    /**\n     * Order intervals asc, and split them when overlap.\n     * expect(numberUtil.reformIntervals([\n     *     {interval: [18, 62], close: [1, 1]},\n     *     {interval: [-Infinity, -70], close: [0, 0]},\n     *     {interval: [-70, -26], close: [1, 1]},\n     *     {interval: [-26, 18], close: [1, 1]},\n     *     {interval: [62, 150], close: [1, 1]},\n     *     {interval: [106, 150], close: [1, 1]},\n     *     {interval: [150, Infinity], close: [0, 0]}\n     * ])).toEqual([\n     *     {interval: [-Infinity, -70], close: [0, 0]},\n     *     {interval: [-70, -26], close: [1, 1]},\n     *     {interval: [-26, 18], close: [0, 1]},\n     *     {interval: [18, 62], close: [0, 1]},\n     *     {interval: [62, 150], close: [0, 1]},\n     *     {interval: [150, Infinity], close: [0, 0]}\n     * ]);\n     * @param {Array.<Object>} list, where `close` mean open or close\n     *        of the interval, and Infinity can be used.\n     * @return {Array.<Object>} The origin list, which has been reformed.\n     */\n    number.reformIntervals = function (list) {\n        list.sort(function (a, b) {\n            return littleThan(a, b, 0) ? -1 : 1;\n        });\n\n        var curr = -Infinity;\n        var currClose = 1;\n        for (var i = 0; i < list.length;) {\n            var interval = list[i].interval;\n            var close = list[i].close;\n\n            for (var lg = 0; lg < 2; lg++) {\n                if (interval[lg] <= curr) {\n                    interval[lg] = curr;\n                    close[lg] = !lg ? 1 - currClose : 1;\n                }\n                curr = interval[lg];\n                currClose = close[lg];\n            }\n\n            if (interval[0] === interval[1] && close[0] * close[1] !== 1) {\n                list.splice(i, 1);\n            }\n            else {\n                i++;\n            }\n        }\n\n        return list;\n\n        function littleThan(a, b, lg) {\n            return a.interval[lg] < b.interval[lg]\n                || (\n                    a.interval[lg] === b.interval[lg]\n                    && (\n                        (a.close[lg] - b.close[lg] === (!lg ? 1 : -1))\n                        || (!lg && littleThan(a, b, 1))\n                    )\n                );\n        }\n    };\n\n    /**\n     * parseFloat NaNs numeric-cast false positives (null|true|false|\"\")\n     * ...but misinterprets leading-number strings, particularly hex literals (\"0x...\")\n     * subtraction forces infinities to NaN\n     *\n     * @param {*} v\n     * @return {boolean}\n     */\n    number.isNumeric = function (v) {\n        return v - parseFloat(v) >= 0;\n    };\n\n    module.exports = number;\n\n\n/***/ }),\n\n/***/ \"020c\":\n/***/ (function(module, exports) {\n\n/**\n * echarts设备环境识别\n *\n * @desc echarts基于Canvas，纯Javascript图表库，提供直观，生动，可交互，可个性化定制的数据统计图表。\n * @author firede[firede@firede.us]\n * @desc thanks zepto.\n */\n\n    var env = {};\n    if (typeof navigator === 'undefined') {\n        // In node\n        env = {\n            browser: {},\n            os: {},\n            node: true,\n            // Assume canvas is supported\n            canvasSupported: true\n        };\n    }\n    else {\n        env = detect(navigator.userAgent);\n    }\n\n    module.exports = env;\n\n    // Zepto.js\n    // (c) 2010-2013 Thomas Fuchs\n    // Zepto.js may be freely distributed under the MIT license.\n\n    function detect(ua) {\n        var os = {};\n        var browser = {};\n        // var webkit = ua.match(/Web[kK]it[\\/]{0,1}([\\d.]+)/);\n        // var android = ua.match(/(Android);?[\\s\\/]+([\\d.]+)?/);\n        // var ipad = ua.match(/(iPad).*OS\\s([\\d_]+)/);\n        // var ipod = ua.match(/(iPod)(.*OS\\s([\\d_]+))?/);\n        // var iphone = !ipad && ua.match(/(iPhone\\sOS)\\s([\\d_]+)/);\n        // var webos = ua.match(/(webOS|hpwOS)[\\s\\/]([\\d.]+)/);\n        // var touchpad = webos && ua.match(/TouchPad/);\n        // var kindle = ua.match(/Kindle\\/([\\d.]+)/);\n        // var silk = ua.match(/Silk\\/([\\d._]+)/);\n        // var blackberry = ua.match(/(BlackBerry).*Version\\/([\\d.]+)/);\n        // var bb10 = ua.match(/(BB10).*Version\\/([\\d.]+)/);\n        // var rimtabletos = ua.match(/(RIM\\sTablet\\sOS)\\s([\\d.]+)/);\n        // var playbook = ua.match(/PlayBook/);\n        // var chrome = ua.match(/Chrome\\/([\\d.]+)/) || ua.match(/CriOS\\/([\\d.]+)/);\n        var firefox = ua.match(/Firefox\\/([\\d.]+)/);\n        // var safari = webkit && ua.match(/Mobile\\//) && !chrome;\n        // var webview = ua.match(/(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/) && !chrome;\n        var ie = ua.match(/MSIE\\s([\\d.]+)/)\n            // IE 11 Trident/7.0; rv:11.0\n            || ua.match(/Trident\\/.+?rv:(([\\d.]+))/);\n        var edge = ua.match(/Edge\\/([\\d.]+)/); // IE 12 and 12+\n\n        var weChat = (/micromessenger/i).test(ua);\n\n        // Todo: clean this up with a better OS/browser seperation:\n        // - discern (more) between multiple browsers on android\n        // - decide if kindle fire in silk mode is android or not\n        // - Firefox on Android doesn't specify the Android version\n        // - possibly devide in os, device and browser hashes\n\n        // if (browser.webkit = !!webkit) browser.version = webkit[1];\n\n        // if (android) os.android = true, os.version = android[2];\n        // if (iphone && !ipod) os.ios = os.iphone = true, os.version = iphone[2].replace(/_/g, '.');\n        // if (ipad) os.ios = os.ipad = true, os.version = ipad[2].replace(/_/g, '.');\n        // if (ipod) os.ios = os.ipod = true, os.version = ipod[3] ? ipod[3].replace(/_/g, '.') : null;\n        // if (webos) os.webos = true, os.version = webos[2];\n        // if (touchpad) os.touchpad = true;\n        // if (blackberry) os.blackberry = true, os.version = blackberry[2];\n        // if (bb10) os.bb10 = true, os.version = bb10[2];\n        // if (rimtabletos) os.rimtabletos = true, os.version = rimtabletos[2];\n        // if (playbook) browser.playbook = true;\n        // if (kindle) os.kindle = true, os.version = kindle[1];\n        // if (silk) browser.silk = true, browser.version = silk[1];\n        // if (!silk && os.android && ua.match(/Kindle Fire/)) browser.silk = true;\n        // if (chrome) browser.chrome = true, browser.version = chrome[1];\n        if (firefox) {\n            browser.firefox = true;\n            browser.version = firefox[1];\n        }\n        // if (safari && (ua.match(/Safari/) || !!os.ios)) browser.safari = true;\n        // if (webview) browser.webview = true;\n\n        if (ie) {\n            browser.ie = true;\n            browser.version = ie[1];\n        }\n\n        if (edge) {\n            browser.edge = true;\n            browser.version = edge[1];\n        }\n\n        // It is difficult to detect WeChat in Win Phone precisely, because ua can\n        // not be set on win phone. So we do not consider Win Phone.\n        if (weChat) {\n            browser.weChat = true;\n        }\n\n        // os.tablet = !!(ipad || playbook || (android && !ua.match(/Mobile/)) ||\n        //     (firefox && ua.match(/Tablet/)) || (ie && !ua.match(/Phone/) && ua.match(/Touch/)));\n        // os.phone  = !!(!os.tablet && !os.ipod && (android || iphone || webos ||\n        //     (chrome && ua.match(/Android/)) || (chrome && ua.match(/CriOS\\/([\\d.]+)/)) ||\n        //     (firefox && ua.match(/Mobile/)) || (ie && ua.match(/Touch/))));\n\n        return {\n            browser: browser,\n            os: os,\n            node: false,\n            // 原生canvas支持，改极端点了\n            // canvasSupported : !(browser.ie && parseFloat(browser.version) < 9)\n            canvasSupported : document.createElement('canvas').getContext ? true : false,\n            // @see <http://stackoverflow.com/questions/4817029/whats-the-best-way-to-detect-a-touch-screen-device-using-javascript>\n            // works on most browsers\n            // IE10/11 does not support touch event, and MS Edge supports them but not by\n            // default, so we dont check navigator.maxTouchPoints for them here.\n            touchEventsSupported: 'ontouchstart' in window && !browser.ie && !browser.edge,\n            // <http://caniuse.com/#search=pointer%20event>.\n            pointerEventsSupported: 'onpointerdown' in window\n                // Firefox supports pointer but not by default, only MS browsers are reliable on pointer\n                // events currently. So we dont use that on other browsers unless tested sufficiently.\n                // Although IE 10 supports pointer event, it use old style and is different from the\n                // standard. So we exclude that. (IE 10 is hardly used on touch device)\n                && (browser.edge || (browser.ie && browser.version >= 11))\n        };\n    }\n\n\n/***/ }),\n\n/***/ \"06Ck\":\n/***/ (function(module, exports) {\n\n// TODO Draggable for group\n// FIXME Draggable on element which has parent rotation or scale\n\n    function Draggable() {\n\n        this.on('mousedown', this._dragStart, this);\n        this.on('mousemove', this._drag, this);\n        this.on('mouseup', this._dragEnd, this);\n        this.on('globalout', this._dragEnd, this);\n        // this._dropTarget = null;\n        // this._draggingTarget = null;\n\n        // this._x = 0;\n        // this._y = 0;\n    }\n\n    Draggable.prototype = {\n\n        constructor: Draggable,\n\n        _dragStart: function (e) {\n            var draggingTarget = e.target;\n            if (draggingTarget && draggingTarget.draggable) {\n                this._draggingTarget = draggingTarget;\n                draggingTarget.dragging = true;\n                this._x = e.offsetX;\n                this._y = e.offsetY;\n\n                this.dispatchToElement(param(draggingTarget, e), 'dragstart', e.event);\n            }\n        },\n\n        _drag: function (e) {\n            var draggingTarget = this._draggingTarget;\n            if (draggingTarget) {\n\n                var x = e.offsetX;\n                var y = e.offsetY;\n\n                var dx = x - this._x;\n                var dy = y - this._y;\n                this._x = x;\n                this._y = y;\n\n                draggingTarget.drift(dx, dy, e);\n                this.dispatchToElement(param(draggingTarget, e), 'drag', e.event);\n\n                var dropTarget = this.findHover(x, y, draggingTarget).target;\n                var lastDropTarget = this._dropTarget;\n                this._dropTarget = dropTarget;\n\n                if (draggingTarget !== dropTarget) {\n                    if (lastDropTarget && dropTarget !== lastDropTarget) {\n                        this.dispatchToElement(param(lastDropTarget, e), 'dragleave', e.event);\n                    }\n                    if (dropTarget && dropTarget !== lastDropTarget) {\n                        this.dispatchToElement(param(dropTarget, e), 'dragenter', e.event);\n                    }\n                }\n            }\n        },\n\n        _dragEnd: function (e) {\n            var draggingTarget = this._draggingTarget;\n\n            if (draggingTarget) {\n                draggingTarget.dragging = false;\n            }\n\n            this.dispatchToElement(param(draggingTarget, e), 'dragend', e.event);\n\n            if (this._dropTarget) {\n                this.dispatchToElement(param(this._dropTarget, e), 'drop', e.event);\n            }\n\n            this._draggingTarget = null;\n            this._dropTarget = null;\n        }\n\n    };\n\n    function param(target, e) {\n        return {target: target, topTarget: e && e.topTarget};\n    }\n\n    module.exports = Draggable;\n\n\n/***/ }),\n\n/***/ \"0Mv9\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\n    var zrUtil = __webpack_require__(\"nw1Z\");\n    var graphic = __webpack_require__(\"y2WT\");\n    var modelUtil = __webpack_require__(\"LFYx\");\n    var brushHelper = __webpack_require__(\"EV4n\");\n\n    var each = zrUtil.each;\n    var indexOf = zrUtil.indexOf;\n    var curry = zrUtil.curry;\n\n    var COORD_CONVERTS = ['dataToPoint', 'pointToData'];\n\n    // FIXME\n    // how to genarialize to more coordinate systems.\n    var INCLUDE_FINDER_MAIN_TYPES = [\n        'grid', 'xAxis', 'yAxis', 'geo', 'graph',\n        'polar', 'radiusAxis', 'angleAxis', 'bmap'\n    ];\n\n    /**\n     * [option in constructor]:\n     * {\n     *     Index/Id/Name of geo, xAxis, yAxis, grid: See util/model#parseFinder.\n     * }\n     *\n     *\n     * [targetInfo]:\n     *\n     * There can be multiple axes in a single targetInfo. Consider the case\n     * of `grid` component, a targetInfo represents a grid which contains one or more\n     * cartesian and one or more axes. And consider the case of parallel system,\n     * which has multiple axes in a coordinate system.\n     * Can be {\n     *     panelId: ...,\n     *     coordSys: <a representitive cartesian in grid (first cartesian by default)>,\n     *     coordSyses: all cartesians.\n     *     gridModel: <grid component>\n     *     xAxes: correspond to coordSyses on index\n     *     yAxes: correspond to coordSyses on index\n     * }\n     * or {\n     *     panelId: ...,\n     *     coordSys: <geo coord sys>\n     *     coordSyses: [<geo coord sys>]\n     *     geoModel: <geo component>\n     * }\n     *\n     *\n     * [panelOpt]:\n     *\n     * Make from targetInfo. Input to BrushController.\n     * {\n     *     panelId: ...,\n     *     rect: ...\n     * }\n     *\n     *\n     * [area]:\n     *\n     * Generated by BrushController or user input.\n     * {\n     *     panelId: Used to locate coordInfo directly. If user inpput, no panelId.\n     *     brushType: determine how to convert to/from coord('rect' or 'polygon' or 'lineX/Y').\n     *     Index/Id/Name of geo, xAxis, yAxis, grid: See util/model#parseFinder.\n     *     range: pixel range.\n     *     coordRange: representitive coord range (the first one of coordRanges).\n     *     coordRanges: <Array> coord ranges, used in multiple cartesian in one grid.\n     * }\n     */\n\n    /**\n     * @param {Object} option contains Index/Id/Name of xAxis/yAxis/geo/grid\n     *        Each can be {number|Array.<number>}. like: {xAxisIndex: [3, 4]}\n     * @param {module:echarts/model/Global} ecModel\n     * @param {Object} [opt]\n     * @param {Array.<string>} [opt.include] include coordinate system types.\n     */\n    function BrushTargetManager(option, ecModel, opt) {\n        /**\n         * @private\n         * @type {Array.<Object>}\n         */\n        var targetInfoList = this._targetInfoList = [];\n        var info = {};\n        var foundCpts = parseFinder(ecModel, option);\n\n        each(targetInfoBuilders, function (builder, type) {\n            if (!opt || !opt.include || indexOf(opt.include, type) >= 0) {\n                builder(foundCpts, targetInfoList, info);\n            }\n        });\n    }\n\n    var proto = BrushTargetManager.prototype;\n\n    proto.setOutputRanges = function (areas, ecModel) {\n        this.matchOutputRanges(areas, ecModel, function (area, coordRange, coordSys) {\n            (area.coordRanges || (area.coordRanges = [])).push(coordRange);\n            // area.coordRange is the first of area.coordRanges\n            if (!area.coordRange) {\n                area.coordRange = coordRange;\n                // In 'category' axis, coord to pixel is not reversible, so we can not\n                // rebuild range by coordRange accrately, which may bring trouble when\n                // brushing only one item. So we use __rangeOffset to rebuilding range\n                // by coordRange. And this it only used in brush component so it is no\n                // need to be adapted to coordRanges.\n                var result = coordConvert[area.brushType](0, coordSys, coordRange);\n                area.__rangeOffset = {\n                    offset: diffProcessor[area.brushType](result.values, area.range, [1, 1]),\n                    xyMinMax: result.xyMinMax\n                };\n            }\n        });\n    };\n\n    proto.matchOutputRanges = function (areas, ecModel, cb) {\n        each(areas, function (area) {\n            var targetInfo = this.findTargetInfo(area, ecModel);\n\n            if (targetInfo && targetInfo !== true) {\n                zrUtil.each(\n                    targetInfo.coordSyses,\n                    function (coordSys) {\n                        var result = coordConvert[area.brushType](1, coordSys, area.range);\n                        cb(area, result.values, coordSys, ecModel);\n                    }\n                );\n            }\n        }, this);\n    };\n\n    proto.setInputRanges = function (areas, ecModel) {\n        each(areas, function (area) {\n            var targetInfo = this.findTargetInfo(area, ecModel);\n\n            if (__DEV__) {\n                zrUtil.assert(\n                    !targetInfo || targetInfo === true || area.coordRange,\n                    'coordRange must be specified when coord index specified.'\n                );\n                zrUtil.assert(\n                    !targetInfo || targetInfo !== true || area.range,\n                    'range must be specified in global brush.'\n                );\n            }\n\n            area.range = area.range || [];\n\n            // convert coordRange to global range and set panelId.\n            if (targetInfo && targetInfo !== true) {\n                area.panelId = targetInfo.panelId;\n                // (1) area.range shoule always be calculate from coordRange but does\n                // not keep its original value, for the sake of the dataZoom scenario,\n                // where area.coordRange remains unchanged but area.range may be changed.\n                // (2) Only support converting one coordRange to pixel range in brush\n                // component. So do not consider `coordRanges`.\n                // (3) About __rangeOffset, see comment above.\n                var result = coordConvert[area.brushType](0, targetInfo.coordSys, area.coordRange);\n                var rangeOffset = area.__rangeOffset;\n                area.range = rangeOffset\n                    ? diffProcessor[area.brushType](\n                        result.values,\n                        rangeOffset.offset,\n                        getScales(result.xyMinMax, rangeOffset.xyMinMax)\n                    )\n                    : result.values;\n            }\n        }, this);\n    };\n\n    proto.makePanelOpts = function (api, getDefaultBrushType) {\n        return zrUtil.map(this._targetInfoList, function (targetInfo) {\n            var rect = targetInfo.getPanelRect();\n            return {\n                panelId: targetInfo.panelId,\n                defaultBrushType: getDefaultBrushType && getDefaultBrushType(targetInfo),\n                clipPath: brushHelper.makeRectPanelClipPath(rect),\n                isTargetByCursor: brushHelper.makeRectIsTargetByCursor(\n                    rect, api, targetInfo.coordSysModel\n                ),\n                getLinearBrushOtherExtent: brushHelper.makeLinearBrushOtherExtent(rect)\n            };\n        });\n    };\n\n    proto.controlSeries = function (area, seriesModel, ecModel) {\n        // Check whether area is bound in coord, and series do not belong to that coord.\n        // If do not do this check, some brush (like lineX) will controll all axes.\n        var targetInfo = this.findTargetInfo(area, ecModel);\n        return targetInfo === true || (\n            targetInfo && indexOf(targetInfo.coordSyses, seriesModel.coordinateSystem) >= 0\n        );\n    };\n\n    /**\n     * If return Object, a coord found.\n     * If reutrn true, global found.\n     * Otherwise nothing found.\n     *\n     * @param {Object} area\n     * @param {Array} targetInfoList\n     * @return {Obejct|boolean}\n     */\n    proto.findTargetInfo = function (area, ecModel) {\n        var targetInfoList = this._targetInfoList;\n        var foundCpts = parseFinder(ecModel, area);\n\n        for (var i = 0; i < targetInfoList.length; i++) {\n            var targetInfo = targetInfoList[i];\n            var areaPanelId = area.panelId;\n            if (areaPanelId) {\n                if (targetInfo.panelId === areaPanelId) {\n                    return targetInfo;\n                }\n            }\n            else {\n                for (var i = 0; i < targetInfoMatchers.length; i++) {\n                    if (targetInfoMatchers[i](foundCpts, targetInfo)) {\n                        return targetInfo;\n                    }\n                }\n            }\n        }\n\n        return true;\n    };\n\n    function formatMinMax(minMax) {\n        minMax[0] > minMax[1] && minMax.reverse();\n        return minMax;\n    }\n\n    function parseFinder(ecModel, option) {\n        return modelUtil.parseFinder(\n            ecModel, option, {includeMainTypes: INCLUDE_FINDER_MAIN_TYPES}\n        );\n    }\n\n    var targetInfoBuilders = {\n\n        grid: function (foundCpts, targetInfoList) {\n            var xAxisModels = foundCpts.xAxisModels;\n            var yAxisModels = foundCpts.yAxisModels;\n            var gridModels = foundCpts.gridModels;\n            // Remove duplicated.\n            var gridModelMap = zrUtil.createHashMap();\n            var xAxesHas = {};\n            var yAxesHas = {};\n\n            if (!xAxisModels && !yAxisModels && !gridModels) {\n                return;\n            }\n\n            each(xAxisModels, function (axisModel) {\n                var gridModel = axisModel.axis.grid.model;\n                gridModelMap.set(gridModel.id, gridModel);\n                xAxesHas[gridModel.id] = true;\n            });\n            each(yAxisModels, function (axisModel) {\n                var gridModel = axisModel.axis.grid.model;\n                gridModelMap.set(gridModel.id, gridModel);\n                yAxesHas[gridModel.id] = true;\n            });\n            each(gridModels, function (gridModel) {\n                gridModelMap.set(gridModel.id, gridModel);\n                xAxesHas[gridModel.id] = true;\n                yAxesHas[gridModel.id] = true;\n            });\n\n            gridModelMap.each(function (gridModel) {\n                var grid = gridModel.coordinateSystem;\n                var cartesians = [];\n\n                each(grid.getCartesians(), function (cartesian, index) {\n                    if (indexOf(xAxisModels, cartesian.getAxis('x').model) >= 0\n                        || indexOf(yAxisModels, cartesian.getAxis('y').model) >= 0\n                    ) {\n                        cartesians.push(cartesian);\n                    }\n                });\n                targetInfoList.push({\n                    panelId: 'grid--' + gridModel.id,\n                    gridModel: gridModel,\n                    coordSysModel: gridModel,\n                    // Use the first one as the representitive coordSys.\n                    coordSys: cartesians[0],\n                    coordSyses: cartesians,\n                    getPanelRect: panelRectBuilder.grid,\n                    xAxisDeclared: xAxesHas[gridModel.id],\n                    yAxisDeclared: yAxesHas[gridModel.id]\n                });\n            });\n        },\n\n        geo: function (foundCpts, targetInfoList) {\n            each(foundCpts.geoModels, function (geoModel) {\n                var coordSys = geoModel.coordinateSystem;\n                targetInfoList.push({\n                    panelId: 'geo--' + geoModel.id,\n                    geoModel: geoModel,\n                    coordSysModel: geoModel,\n                    coordSys: coordSys,\n                    coordSyses: [coordSys],\n                    getPanelRect: panelRectBuilder.geo\n                });\n            });\n        }\n    };\n\n    var targetInfoMatchers = [\n\n        // grid\n        function (foundCpts, targetInfo) {\n            var xAxisModel = foundCpts.xAxisModel;\n            var yAxisModel = foundCpts.yAxisModel;\n            var gridModel = foundCpts.gridModel;\n\n            !gridModel && xAxisModel && (gridModel = xAxisModel.axis.grid.model);\n            !gridModel && yAxisModel && (gridModel = yAxisModel.axis.grid.model);\n\n            return gridModel && gridModel === targetInfo.gridModel;\n        },\n\n        // geo\n        function (foundCpts, targetInfo) {\n            var geoModel = foundCpts.geoModel;\n            return geoModel && geoModel === targetInfo.geoModel;\n        }\n    ];\n\n    var panelRectBuilder = {\n\n        grid: function () {\n            // grid is not Transformable.\n            return this.coordSys.grid.getRect().clone();\n        },\n\n        geo: function () {\n            var coordSys = this.coordSys;\n            var rect = coordSys.getBoundingRect().clone();\n            // geo roam and zoom transform\n            rect.applyTransform(graphic.getTransform(coordSys));\n            return rect;\n        }\n    };\n\n    var coordConvert = {\n\n        lineX: curry(axisConvert, 0),\n\n        lineY: curry(axisConvert, 1),\n\n        rect: function (to, coordSys, rangeOrCoordRange) {\n            var xminymin = coordSys[COORD_CONVERTS[to]]([rangeOrCoordRange[0][0], rangeOrCoordRange[1][0]]);\n            var xmaxymax = coordSys[COORD_CONVERTS[to]]([rangeOrCoordRange[0][1], rangeOrCoordRange[1][1]]);\n            var values = [\n                formatMinMax([xminymin[0], xmaxymax[0]]),\n                formatMinMax([xminymin[1], xmaxymax[1]])\n            ];\n            return {values: values, xyMinMax: values};\n        },\n\n        polygon: function (to, coordSys, rangeOrCoordRange) {\n            var xyMinMax = [[Infinity, -Infinity], [Infinity, -Infinity]];\n            var values = zrUtil.map(rangeOrCoordRange, function (item) {\n                var p = coordSys[COORD_CONVERTS[to]](item);\n                xyMinMax[0][0] = Math.min(xyMinMax[0][0], p[0]);\n                xyMinMax[1][0] = Math.min(xyMinMax[1][0], p[1]);\n                xyMinMax[0][1] = Math.max(xyMinMax[0][1], p[0]);\n                xyMinMax[1][1] = Math.max(xyMinMax[1][1], p[1]);\n                return p;\n            });\n            return {values: values, xyMinMax: xyMinMax};\n        }\n    };\n\n    function axisConvert(axisNameIndex, to, coordSys, rangeOrCoordRange) {\n        if (__DEV__) {\n            zrUtil.assert(\n                coordSys.type === 'cartesian2d',\n                'lineX/lineY brush is available only in cartesian2d.'\n            );\n        }\n\n        var axis = coordSys.getAxis(['x', 'y'][axisNameIndex]);\n        var values = formatMinMax(zrUtil.map([0, 1], function (i) {\n            return to\n                ? axis.coordToData(axis.toLocalCoord(rangeOrCoordRange[i]))\n                : axis.toGlobalCoord(axis.dataToCoord(rangeOrCoordRange[i]));\n        }));\n        var xyMinMax = [];\n        xyMinMax[axisNameIndex] = values;\n        xyMinMax[1 - axisNameIndex] = [NaN, NaN];\n\n        return {values: values, xyMinMax: xyMinMax};\n    }\n\n    var diffProcessor = {\n        lineX: curry(axisDiffProcessor, 0),\n\n        lineY: curry(axisDiffProcessor, 1),\n\n        rect: function (values, refer, scales) {\n            return [\n                [values[0][0] - scales[0] * refer[0][0], values[0][1] - scales[0] * refer[0][1]],\n                [values[1][0] - scales[1] * refer[1][0], values[1][1] - scales[1] * refer[1][1]]\n            ];\n        },\n\n        polygon: function (values, refer, scales) {\n            return zrUtil.map(values, function (item, idx) {\n                return [item[0] - scales[0] * refer[idx][0], item[1] - scales[1] * refer[idx][1]];\n            });\n        }\n    };\n\n    function axisDiffProcessor(axisNameIndex, values, refer, scales) {\n        return [\n            values[0] - scales[axisNameIndex] * refer[0],\n            values[1] - scales[axisNameIndex] * refer[1]\n        ];\n    }\n\n    // We have to process scale caused by dataZoom manually,\n    // although it might be not accurate.\n    function getScales(xyMinMaxCurr, xyMinMaxOrigin) {\n        var sizeCurr = getSize(xyMinMaxCurr);\n        var sizeOrigin = getSize(xyMinMaxOrigin);\n        var scales = [sizeCurr[0] / sizeOrigin[0], sizeCurr[1] / sizeOrigin[1]];\n        isNaN(scales[0]) && (scales[0] = 1);\n        isNaN(scales[1]) && (scales[1] = 1);\n        return scales;\n    }\n\n    function getSize(xyMinMax) {\n        return xyMinMax\n            ? [xyMinMax[0][1] - xyMinMax[0][0], xyMinMax[1][1] - xyMinMax[1][0]]\n            : [NaN, NaN];\n    }\n\n    module.exports = BrushTargetManager;\n\n\n/***/ }),\n\n/***/ \"0iiL\":\n/***/ (function(module, exports) {\n\n\n\n    /**\n     * @param {Array.<Object>} colorStops\n     */\n    var Gradient = function (colorStops) {\n\n        this.colorStops = colorStops || [];\n    };\n\n    Gradient.prototype = {\n\n        constructor: Gradient,\n\n        addColorStop: function (offset, color) {\n            this.colorStops.push({\n\n                offset: offset,\n\n                color: color\n            });\n        }\n    };\n\n    module.exports = Gradient;\n\n\n/***/ }),\n\n/***/ \"1/d/\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\n    var zrUtil = __webpack_require__(\"nw1Z\");\n    var Axis = __webpack_require__(\"X+UG\");\n\n    /**\n     * Extend axis 2d\n     * @constructor module:echarts/coord/cartesian/Axis2D\n     * @extends {module:echarts/coord/cartesian/Axis}\n     * @param {string} dim\n     * @param {*} scale\n     * @param {Array.<number>} coordExtent\n     * @param {string} axisType\n     * @param {string} position\n     */\n    var Axis2D = function (dim, scale, coordExtent, axisType, position) {\n        Axis.call(this, dim, scale, coordExtent);\n        /**\n         * Axis type\n         *  - 'category'\n         *  - 'value'\n         *  - 'time'\n         *  - 'log'\n         * @type {string}\n         */\n        this.type = axisType || 'value';\n\n        /**\n         * Axis position\n         *  - 'top'\n         *  - 'bottom'\n         *  - 'left'\n         *  - 'right'\n         */\n        this.position = position || 'bottom';\n    };\n\n    Axis2D.prototype = {\n\n        constructor: Axis2D,\n\n        /**\n         * Index of axis, can be used as key\n         */\n        index: 0,\n        /**\n         * If axis is on the zero position of the other axis\n         * @type {boolean}\n         */\n        onZero: false,\n\n        /**\n         * Axis model\n         * @param {module:echarts/coord/cartesian/AxisModel}\n         */\n        model: null,\n\n        isHorizontal: function () {\n            var position = this.position;\n            return position === 'top' || position === 'bottom';\n        },\n\n        /**\n         * Each item cooresponds to this.getExtent(), which\n         * means globalExtent[0] may greater than globalExtent[1],\n         * unless `asc` is input.\n         *\n         * @param {boolean} [asc]\n         * @return {Array.<number>}\n         */\n        getGlobalExtent: function (asc) {\n            var ret = this.getExtent();\n            ret[0] = this.toGlobalCoord(ret[0]);\n            ret[1] = this.toGlobalCoord(ret[1]);\n            asc && ret[0] > ret[1] && ret.reverse();\n            return ret;\n        },\n\n        getOtherAxis: function () {\n            this.grid.getOtherAxis();\n        },\n\n        /**\n         * If label is ignored.\n         * Automatically used when axis is category and label can not be all shown\n         * @param  {number}  idx\n         * @return {boolean}\n         */\n        isLabelIgnored: function (idx) {\n            if (this.type === 'category') {\n                var labelInterval = this.getLabelInterval();\n                return ((typeof labelInterval === 'function')\n                    && !labelInterval(idx, this.scale.getLabel(idx)))\n                    || idx % (labelInterval + 1);\n            }\n        },\n\n        /**\n         * @override\n         */\n        pointToData: function (point, clamp) {\n            return this.coordToData(this.toLocalCoord(point[this.dim === 'x' ? 0 : 1]), clamp);\n        },\n\n        /**\n         * Transform global coord to local coord,\n         * i.e. var localCoord = axis.toLocalCoord(80);\n         * designate by module:echarts/coord/cartesian/Grid.\n         * @type {Function}\n         */\n        toLocalCoord: null,\n\n        /**\n         * Transform global coord to local coord,\n         * i.e. var globalCoord = axis.toLocalCoord(40);\n         * designate by module:echarts/coord/cartesian/Grid.\n         * @type {Function}\n         */\n        toGlobalCoord: null\n\n    };\n    zrUtil.inherits(Axis2D, Axis);\n\n    module.exports = Axis2D;\n\n\n/***/ }),\n\n/***/ \"1QxH\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n// TODO boundaryGap\n\n\n    __webpack_require__(\"lzeG\");\n\n    __webpack_require__(\"tojz\");\n\n\n/***/ }),\n\n/***/ 2:\n/***/ (function(module, exports, __webpack_require__) {\n\n__webpack_require__(\"Cwwa\");\n__webpack_require__(\"EcM6\");\n__webpack_require__(\"66V3\");\n__webpack_require__(\"3N82\");\n__webpack_require__(\"rRE/\");\n__webpack_require__(\"9Ree\");\n__webpack_require__(\"XEbH\");\n__webpack_require__(\"y60F\");\nmodule.exports = __webpack_require__(\"MVgO\");\n\n\n/***/ }),\n\n/***/ \"29ze\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n\n    var zrUtil = __webpack_require__(\"nw1Z\");\n    var Model = __webpack_require__(\"Q4Sk\");\n\n    var LegendModel = __webpack_require__(\"Cwwa\").extendComponentModel({\n\n        type: 'legend',\n\n        dependencies: ['series'],\n\n        layoutMode: {\n            type: 'box',\n            ignoreSize: true\n        },\n\n        init: function (option, parentModel, ecModel) {\n            this.mergeDefaultAndTheme(option, ecModel);\n\n            option.selected = option.selected || {};\n        },\n\n        mergeOption: function (option) {\n            LegendModel.superCall(this, 'mergeOption', option);\n        },\n\n        optionUpdated: function () {\n            this._updateData(this.ecModel);\n\n            var legendData = this._data;\n\n            // If selectedMode is single, try to select one\n            if (legendData[0] && this.get('selectedMode') === 'single') {\n                var hasSelected = false;\n                // If has any selected in option.selected\n                for (var i = 0; i < legendData.length; i++) {\n                    var name = legendData[i].get('name');\n                    if (this.isSelected(name)) {\n                        // Force to unselect others\n                        this.select(name);\n                        hasSelected = true;\n                        break;\n                    }\n                }\n                // Try select the first if selectedMode is single\n                !hasSelected && this.select(legendData[0].get('name'));\n            }\n        },\n\n        _updateData: function (ecModel) {\n            var legendData = zrUtil.map(this.get('data') || [], function (dataItem) {\n                // Can be string or number\n                if (typeof dataItem === 'string' || typeof dataItem === 'number') {\n                    dataItem = {\n                        name: dataItem\n                    };\n                }\n                return new Model(dataItem, this, this.ecModel);\n            }, this);\n            this._data = legendData;\n\n            var availableNames = zrUtil.map(ecModel.getSeries(), function (series) {\n                return series.name;\n            });\n            ecModel.eachSeries(function (seriesModel) {\n                if (seriesModel.legendDataProvider) {\n                    var data = seriesModel.legendDataProvider();\n                    availableNames = availableNames.concat(data.mapArray(data.getName));\n                }\n            });\n            /**\n             * @type {Array.<string>}\n             * @private\n             */\n            this._availableNames = availableNames;\n        },\n\n        /**\n         * @return {Array.<module:echarts/model/Model>}\n         */\n        getData: function () {\n            return this._data;\n        },\n\n        /**\n         * @param {string} name\n         */\n        select: function (name) {\n            var selected = this.option.selected;\n            var selectedMode = this.get('selectedMode');\n            if (selectedMode === 'single') {\n                var data = this._data;\n                zrUtil.each(data, function (dataItem) {\n                    selected[dataItem.get('name')] = false;\n                });\n            }\n            selected[name] = true;\n        },\n\n        /**\n         * @param {string} name\n         */\n        unSelect: function (name) {\n            if (this.get('selectedMode') !== 'single') {\n                this.option.selected[name] = false;\n            }\n        },\n\n        /**\n         * @param {string} name\n         */\n        toggleSelected: function (name) {\n            var selected = this.option.selected;\n            // Default is true\n            if (!selected.hasOwnProperty(name)) {\n                selected[name] = true;\n            }\n            this[selected[name] ? 'unSelect' : 'select'](name);\n        },\n\n        /**\n         * @param {string} name\n         */\n        isSelected: function (name) {\n            var selected = this.option.selected;\n            return !(selected.hasOwnProperty(name) && !selected[name])\n                && zrUtil.indexOf(this._availableNames, name) >= 0;\n        },\n\n        defaultOption: {\n            // 一级层叠\n            zlevel: 0,\n            // 二级层叠\n            z: 4,\n            show: true,\n\n            // 布局方式，默认为水平布局，可选为：\n            // 'horizontal' | 'vertical'\n            orient: 'horizontal',\n\n            left: 'center',\n            // right: 'center',\n\n            top: 'top',\n            // bottom: 'top',\n\n            // 水平对齐\n            // 'auto' | 'left' | 'right'\n            // 默认为 'auto', 根据 x 的位置判断是左对齐还是右对齐\n            align: 'auto',\n\n            backgroundColor: 'rgba(0,0,0,0)',\n            // 图例边框颜色\n            borderColor: '#ccc',\n            // 图例边框线宽，单位px，默认为0（无边框）\n            borderWidth: 0,\n            // 图例内边距，单位px，默认各方向内边距为5，\n            // 接受数组分别设定上右下左边距，同css\n            padding: 5,\n            // 各个item之间的间隔，单位px，默认为10，\n            // 横向布局时为水平间隔，纵向布局时为纵向间隔\n            itemGap: 10,\n            // 图例图形宽度\n            itemWidth: 25,\n            // 图例图形高度\n            itemHeight: 14,\n\n            // 图例关闭时候的颜色\n            inactiveColor: '#ccc',\n\n            textStyle: {\n                // 图例文字颜色\n                color: '#333'\n            },\n            // formatter: '',\n            // 选择模式，默认开启图例开关\n            selectedMode: true,\n            // 配置默认选中状态，可配合LEGEND.SELECTED事件做动态数据载入\n            // selected: null,\n            // 图例内容（详见legend.data，数组中每一项代表一个item\n            // data: [],\n\n            // Tooltip 相关配置\n            tooltip: {\n                show: false\n            }\n        }\n    });\n\n    module.exports = LegendModel;\n\n\n/***/ }),\n\n/***/ \"2c/z\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\n    var normalizeRadian = __webpack_require__(\"u4xi\").normalizeRadian;\n    var PI2 = Math.PI * 2;\n\n    module.exports = {\n        /**\n         * 圆弧描边包含判断\n         * @param  {number}  cx\n         * @param  {number}  cy\n         * @param  {number}  r\n         * @param  {number}  startAngle\n         * @param  {number}  endAngle\n         * @param  {boolean}  anticlockwise\n         * @param  {number} lineWidth\n         * @param  {number}  x\n         * @param  {number}  y\n         * @return {Boolean}\n         */\n        containStroke: function (\n            cx, cy, r, startAngle, endAngle, anticlockwise,\n            lineWidth, x, y\n        ) {\n\n            if (lineWidth === 0) {\n                return false;\n            }\n            var _l = lineWidth;\n\n            x -= cx;\n            y -= cy;\n            var d = Math.sqrt(x * x + y * y);\n\n            if ((d - _l > r) || (d + _l < r)) {\n                return false;\n            }\n            if (Math.abs(startAngle - endAngle) % PI2 < 1e-4) {\n                // Is a circle\n                return true;\n            }\n            if (anticlockwise) {\n                var tmp = startAngle;\n                startAngle = normalizeRadian(endAngle);\n                endAngle = normalizeRadian(tmp);\n            } else {\n                startAngle = normalizeRadian(startAngle);\n                endAngle = normalizeRadian(endAngle);\n            }\n            if (startAngle > endAngle) {\n                endAngle += PI2;\n            }\n\n            var angle = Math.atan2(y, x);\n            if (angle < 0) {\n                angle += PI2;\n            }\n            return (angle >= startAngle && angle <= endAngle)\n                || (angle + PI2 >= startAngle && angle + PI2 <= endAngle);\n        }\n    };\n\n\n/***/ }),\n\n/***/ \"2iN9\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\n    var echarts = __webpack_require__(\"Cwwa\");\n    var zrUtil = __webpack_require__(\"nw1Z\");\n    module.exports = function (seriesType, actionInfos) {\n        zrUtil.each(actionInfos, function (actionInfo) {\n            actionInfo.update = 'updateView';\n            /**\n             * @payload\n             * @property {string} seriesName\n             * @property {string} name\n             */\n            echarts.registerAction(actionInfo, function (payload, ecModel) {\n                var selected = {};\n                ecModel.eachComponent(\n                    {mainType: 'series', subType: seriesType, query: payload},\n                    function (seriesModel) {\n                        if (seriesModel[actionInfo.method]) {\n                            seriesModel[actionInfo.method](payload.name);\n                        }\n                        var data = seriesModel.getData();\n                        // Create selected map\n                        data.each(function (idx) {\n                            var name = data.getName(idx);\n                            selected[name] = seriesModel.isSelected(name) || false;\n                        });\n                    }\n                );\n                return {\n                    name: payload.name,\n                    selected: selected\n                };\n            });\n        });\n    };\n\n\n/***/ }),\n\n/***/ \"2p/A\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n\n    var history = __webpack_require__(\"nXqQ\");\n\n    function Restore(model) {\n        this.model = model;\n    }\n\n    Restore.defaultOption = {\n        show: true,\n        icon: 'M3.8,33.4 M47,18.9h9.8V8.7 M56.3,20.1 C52.1,9,40.5,0.6,26.8,2.1C12.6,3.7,1.6,16.2,2.1,30.6 M13,41.1H3.1v10.2 M3.7,39.9c4.2,11.1,15.8,19.5,29.5,18 c14.2-1.6,25.2-14.1,24.7-28.5',\n        title: '还原'\n    };\n\n    var proto = Restore.prototype;\n\n    proto.onclick = function (ecModel, api, type) {\n        history.clear(ecModel);\n\n        api.dispatchAction({\n            type: 'restore',\n            from: this.uid\n        });\n    };\n\n\n    __webpack_require__(\"M5+E\").register('restore', Restore);\n\n\n    __webpack_require__(\"Cwwa\").registerAction(\n        {type: 'restore', event: 'restore', update: 'prepareAndUpdate'},\n        function (payload, ecModel) {\n            ecModel.resetOption('recreate');\n        }\n    );\n\n    module.exports = Restore;\n\n\n/***/ }),\n\n/***/ \"3N82\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\n    var zrUtil = __webpack_require__(\"nw1Z\");\n    var echarts = __webpack_require__(\"Cwwa\");\n\n    __webpack_require__(\"7fUZ\");\n    __webpack_require__(\"n/gz\");\n\n    __webpack_require__(\"2iN9\")('pie', [{\n        type: 'pieToggleSelect',\n        event: 'pieselectchanged',\n        method: 'toggleSelected'\n    }, {\n        type: 'pieSelect',\n        event: 'pieselected',\n        method: 'select'\n    }, {\n        type: 'pieUnSelect',\n        event: 'pieunselected',\n        method: 'unSelect'\n    }]);\n\n    echarts.registerVisual(zrUtil.curry(__webpack_require__(\"UFrj\"), 'pie'));\n\n    echarts.registerLayout(zrUtil.curry(\n        __webpack_require__(\"ujyV\"), 'pie'\n    ));\n\n    echarts.registerProcessor(zrUtil.curry(__webpack_require__(\"7Etz\"), 'pie'));\n\n\n/***/ }),\n\n/***/ \"3qaN\":\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * 圆弧\n * @module zrender/graphic/shape/Arc\n */\n \n\n    module.exports = __webpack_require__(\"CC7E\").extend({\n\n        type: 'arc',\n\n        shape: {\n\n            cx: 0,\n\n            cy: 0,\n\n            r: 0,\n\n            startAngle: 0,\n\n            endAngle: Math.PI * 2,\n\n            clockwise: true\n        },\n\n        style: {\n\n            stroke: '#000',\n\n            fill: null\n        },\n\n        buildPath: function (ctx, shape) {\n\n            var x = shape.cx;\n            var y = shape.cy;\n            var r = Math.max(shape.r, 0);\n            var startAngle = shape.startAngle;\n            var endAngle = shape.endAngle;\n            var clockwise = shape.clockwise;\n\n            var unitX = Math.cos(startAngle);\n            var unitY = Math.sin(startAngle);\n\n            ctx.moveTo(unitX * r + x, unitY * r + y);\n            ctx.arc(x, y, r, startAngle, endAngle, !clockwise);\n        }\n    });\n\n\n/***/ }),\n\n/***/ \"3rnY\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\n    var textContain = __webpack_require__(\"45MQ\");\n    var graphicUtil = __webpack_require__(\"y2WT\");\n\n    module.exports = {\n        /**\n         * Get color property or get color from option.textStyle.color\n         * @return {string}\n         */\n        getTextColor: function () {\n            var ecModel = this.ecModel;\n            return this.getShallow('color')\n                || (ecModel && ecModel.get('textStyle.color'));\n        },\n\n        /**\n         * Create font string from fontStyle, fontWeight, fontSize, fontFamily\n         * @return {string}\n         */\n        getFont: function () {\n            return graphicUtil.getFont({\n                fontStyle: this.getShallow('fontStyle'),\n                fontWeight: this.getShallow('fontWeight'),\n                fontSize: this.getShallow('fontSize'),\n                fontFamily: this.getShallow('fontFamily')\n            }, this.ecModel);\n        },\n\n        getTextRect: function (text) {\n            return textContain.getBoundingRect(\n                text,\n                this.getFont(),\n                this.getShallow('align'),\n                this.getShallow('baseline')\n            );\n        },\n\n        truncateText: function (text, containerWidth, ellipsis, options) {\n            return textContain.truncateText(\n                text, containerWidth, this.getFont(), ellipsis, options\n            );\n        }\n    };\n\n\n/***/ }),\n\n/***/ \"3z8c\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n/**\n * @module zrender/Element\n */\n\n\n    var guid = __webpack_require__(\"xG35\");\n    var Eventful = __webpack_require__(\"feXt\");\n    var Transformable = __webpack_require__(\"V5JR\");\n    var Animatable = __webpack_require__(\"oHN5\");\n    var zrUtil = __webpack_require__(\"nw1Z\");\n\n    /**\n     * @alias module:zrender/Element\n     * @constructor\n     * @extends {module:zrender/mixin/Animatable}\n     * @extends {module:zrender/mixin/Transformable}\n     * @extends {module:zrender/mixin/Eventful}\n     */\n    var Element = function (opts) {\n\n        Transformable.call(this, opts);\n        Eventful.call(this, opts);\n        Animatable.call(this, opts);\n\n        /**\n         * 画布元素ID\n         * @type {string}\n         */\n        this.id = opts.id || guid();\n    };\n\n    Element.prototype = {\n\n        /**\n         * 元素类型\n         * Element type\n         * @type {string}\n         */\n        type: 'element',\n\n        /**\n         * 元素名字\n         * Element name\n         * @type {string}\n         */\n        name: '',\n\n        /**\n         * ZRender 实例对象，会在 element 添加到 zrender 实例中后自动赋值\n         * ZRender instance will be assigned when element is associated with zrender\n         * @name module:/zrender/Element#__zr\n         * @type {module:zrender/ZRender}\n         */\n        __zr: null,\n\n        /**\n         * 图形是否忽略，为true时忽略图形的绘制以及事件触发\n         * If ignore drawing and events of the element object\n         * @name module:/zrender/Element#ignore\n         * @type {boolean}\n         * @default false\n         */\n        ignore: false,\n\n        /**\n         * 用于裁剪的路径(shape)，所有 Group 内的路径在绘制时都会被这个路径裁剪\n         * 该路径会继承被裁减对象的变换\n         * @type {module:zrender/graphic/Path}\n         * @see http://www.w3.org/TR/2dcontext/#clipping-region\n         * @readOnly\n         */\n        clipPath: null,\n\n        /**\n         * Drift element\n         * @param  {number} dx dx on the global space\n         * @param  {number} dy dy on the global space\n         */\n        drift: function (dx, dy) {\n            switch (this.draggable) {\n                case 'horizontal':\n                    dy = 0;\n                    break;\n                case 'vertical':\n                    dx = 0;\n                    break;\n            }\n\n            var m = this.transform;\n            if (!m) {\n                m = this.transform = [1, 0, 0, 1, 0, 0];\n            }\n            m[4] += dx;\n            m[5] += dy;\n\n            this.decomposeTransform();\n            this.dirty(false);\n        },\n\n        /**\n         * Hook before update\n         */\n        beforeUpdate: function () {},\n        /**\n         * Hook after update\n         */\n        afterUpdate: function () {},\n        /**\n         * Update each frame\n         */\n        update: function () {\n            this.updateTransform();\n        },\n\n        /**\n         * @param  {Function} cb\n         * @param  {}   context\n         */\n        traverse: function (cb, context) {},\n\n        /**\n         * @protected\n         */\n        attrKV: function (key, value) {\n            if (key === 'position' || key === 'scale' || key === 'origin') {\n                // Copy the array\n                if (value) {\n                    var target = this[key];\n                    if (!target) {\n                        target = this[key] = [];\n                    }\n                    target[0] = value[0];\n                    target[1] = value[1];\n                }\n            }\n            else {\n                this[key] = value;\n            }\n        },\n\n        /**\n         * Hide the element\n         */\n        hide: function () {\n            this.ignore = true;\n            this.__zr && this.__zr.refresh();\n        },\n\n        /**\n         * Show the element\n         */\n        show: function () {\n            this.ignore = false;\n            this.__zr && this.__zr.refresh();\n        },\n\n        /**\n         * @param {string|Object} key\n         * @param {*} value\n         */\n        attr: function (key, value) {\n            if (typeof key === 'string') {\n                this.attrKV(key, value);\n            }\n            else if (zrUtil.isObject(key)) {\n                for (var name in key) {\n                    if (key.hasOwnProperty(name)) {\n                        this.attrKV(name, key[name]);\n                    }\n                }\n            }\n\n            this.dirty(false);\n\n            return this;\n        },\n\n        /**\n         * @param {module:zrender/graphic/Path} clipPath\n         */\n        setClipPath: function (clipPath) {\n            var zr = this.__zr;\n            if (zr) {\n                clipPath.addSelfToZr(zr);\n            }\n\n            // Remove previous clip path\n            if (this.clipPath && this.clipPath !== clipPath) {\n                this.removeClipPath();\n            }\n\n            this.clipPath = clipPath;\n            clipPath.__zr = zr;\n            clipPath.__clipTarget = this;\n\n            this.dirty(false);\n        },\n\n        /**\n         */\n        removeClipPath: function () {\n            var clipPath = this.clipPath;\n            if (clipPath) {\n                if (clipPath.__zr) {\n                    clipPath.removeSelfFromZr(clipPath.__zr);\n                }\n\n                clipPath.__zr = null;\n                clipPath.__clipTarget = null;\n                this.clipPath = null;\n\n                this.dirty(false);\n            }\n        },\n\n        /**\n         * Add self from zrender instance.\n         * Not recursively because it will be invoked when element added to storage.\n         * @param {module:zrender/ZRender} zr\n         */\n        addSelfToZr: function (zr) {\n            this.__zr = zr;\n            // 添加动画\n            var animators = this.animators;\n            if (animators) {\n                for (var i = 0; i < animators.length; i++) {\n                    zr.animation.addAnimator(animators[i]);\n                }\n            }\n\n            if (this.clipPath) {\n                this.clipPath.addSelfToZr(zr);\n            }\n        },\n\n        /**\n         * Remove self from zrender instance.\n         * Not recursively because it will be invoked when element added to storage.\n         * @param {module:zrender/ZRender} zr\n         */\n        removeSelfFromZr: function (zr) {\n            this.__zr = null;\n            // 移除动画\n            var animators = this.animators;\n            if (animators) {\n                for (var i = 0; i < animators.length; i++) {\n                    zr.animation.removeAnimator(animators[i]);\n                }\n            }\n\n            if (this.clipPath) {\n                this.clipPath.removeSelfFromZr(zr);\n            }\n        }\n    };\n\n    zrUtil.mixin(Element, Animatable);\n    zrUtil.mixin(Element, Transformable);\n    zrUtil.mixin(Element, Eventful);\n\n    module.exports = Element;\n\n\n/***/ }),\n\n/***/ \"45MQ\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\n    var textWidthCache = {};\n    var textWidthCacheCounter = 0;\n    var TEXT_CACHE_MAX = 5000;\n\n    var util = __webpack_require__(\"nw1Z\");\n    var BoundingRect = __webpack_require__(\"W4Cx\");\n    var retrieve = util.retrieve;\n\n    function getTextWidth(text, textFont) {\n        var key = text + ':' + textFont;\n        if (textWidthCache[key]) {\n            return textWidthCache[key];\n        }\n\n        var textLines = (text + '').split('\\n');\n        var width = 0;\n\n        for (var i = 0, l = textLines.length; i < l; i++) {\n            // measureText 可以被覆盖以兼容不支持 Canvas 的环境\n            width = Math.max(textContain.measureText(textLines[i], textFont).width, width);\n        }\n\n        if (textWidthCacheCounter > TEXT_CACHE_MAX) {\n            textWidthCacheCounter = 0;\n            textWidthCache = {};\n        }\n        textWidthCacheCounter++;\n        textWidthCache[key] = width;\n\n        return width;\n    }\n\n    function getTextRect(text, textFont, textAlign, textBaseline) {\n        var textLineLen = ((text || '') + '').split('\\n').length;\n\n        var width = getTextWidth(text, textFont);\n        // FIXME 高度计算比较粗暴\n        var lineHeight = getTextWidth('国', textFont);\n        var height = textLineLen * lineHeight;\n\n        var rect = new BoundingRect(0, 0, width, height);\n        // Text has a special line height property\n        rect.lineHeight = lineHeight;\n\n        switch (textBaseline) {\n            case 'bottom':\n            case 'alphabetic':\n                rect.y -= lineHeight;\n                break;\n            case 'middle':\n                rect.y -= lineHeight / 2;\n                break;\n            // case 'hanging':\n            // case 'top':\n        }\n\n        // FIXME Right to left language\n        switch (textAlign) {\n            case 'end':\n            case 'right':\n                rect.x -= rect.width;\n                break;\n            case 'center':\n                rect.x -= rect.width / 2;\n                break;\n            // case 'start':\n            // case 'left':\n        }\n\n        return rect;\n    }\n\n    function adjustTextPositionOnRect(textPosition, rect, textRect, distance) {\n\n        var x = rect.x;\n        var y = rect.y;\n\n        var height = rect.height;\n        var width = rect.width;\n\n        var textHeight = textRect.height;\n\n        var lineHeight = textRect.lineHeight;\n        var halfHeight = height / 2 - textHeight / 2 + lineHeight;\n\n        var textAlign = 'left';\n\n        switch (textPosition) {\n            case 'left':\n                x -= distance;\n                y += halfHeight;\n                textAlign = 'right';\n                break;\n            case 'right':\n                x += distance + width;\n                y += halfHeight;\n                textAlign = 'left';\n                break;\n            case 'top':\n                x += width / 2;\n                y -= distance + textHeight - lineHeight;\n                textAlign = 'center';\n                break;\n            case 'bottom':\n                x += width / 2;\n                y += height + distance + lineHeight;\n                textAlign = 'center';\n                break;\n            case 'inside':\n                x += width / 2;\n                y += halfHeight;\n                textAlign = 'center';\n                break;\n            case 'insideLeft':\n                x += distance;\n                y += halfHeight;\n                textAlign = 'left';\n                break;\n            case 'insideRight':\n                x += width - distance;\n                y += halfHeight;\n                textAlign = 'right';\n                break;\n            case 'insideTop':\n                x += width / 2;\n                y += distance + lineHeight;\n                textAlign = 'center';\n                break;\n            case 'insideBottom':\n                x += width / 2;\n                y += height - textHeight - distance + lineHeight;\n                textAlign = 'center';\n                break;\n            case 'insideTopLeft':\n                x += distance;\n                y += distance + lineHeight;\n                textAlign = 'left';\n                break;\n            case 'insideTopRight':\n                x += width - distance;\n                y += distance + lineHeight;\n                textAlign = 'right';\n                break;\n            case 'insideBottomLeft':\n                x += distance;\n                y += height - textHeight - distance + lineHeight;\n                break;\n            case 'insideBottomRight':\n                x += width - distance;\n                y += height - textHeight - distance + lineHeight;\n                textAlign = 'right';\n                break;\n        }\n\n        return {\n            x: x,\n            y: y,\n            textAlign: textAlign,\n            textBaseline: 'alphabetic'\n        };\n    }\n\n    /**\n     * Show ellipsis if overflow.\n     *\n     * @param  {string} text\n     * @param  {string} containerWidth\n     * @param  {string} textFont\n     * @param  {number} [ellipsis='...']\n     * @param  {Object} [options]\n     * @param  {number} [options.maxIterations=3]\n     * @param  {number} [options.minChar=0] If truncate result are less\n     *                  then minChar, ellipsis will not show, which is\n     *                  better for user hint in some cases.\n     * @param  {number} [options.placeholder=''] When all truncated, use the placeholder.\n     * @return {string}\n     */\n    function truncateText(text, containerWidth, textFont, ellipsis, options) {\n        if (!containerWidth) {\n            return '';\n        }\n\n        options = options || {};\n\n        ellipsis = retrieve(ellipsis, '...');\n        var maxIterations = retrieve(options.maxIterations, 2);\n        var minChar = retrieve(options.minChar, 0);\n        // FIXME\n        // Other languages?\n        var cnCharWidth = getTextWidth('国', textFont);\n        // FIXME\n        // Consider proportional font?\n        var ascCharWidth = getTextWidth('a', textFont);\n        var placeholder = retrieve(options.placeholder, '');\n\n        // Example 1: minChar: 3, text: 'asdfzxcv', truncate result: 'asdf', but not: 'a...'.\n        // Example 2: minChar: 3, text: '维度', truncate result: '维', but not: '...'.\n        var contentWidth = containerWidth = Math.max(0, containerWidth - 1); // Reserve some gap.\n        for (var i = 0; i < minChar && contentWidth >= ascCharWidth; i++) {\n            contentWidth -= ascCharWidth;\n        }\n\n        var ellipsisWidth = getTextWidth(ellipsis);\n        if (ellipsisWidth > contentWidth) {\n            ellipsis = '';\n            ellipsisWidth = 0;\n        }\n\n        contentWidth = containerWidth - ellipsisWidth;\n\n        var textLines = (text + '').split('\\n');\n\n        for (var i = 0, len = textLines.length; i < len; i++) {\n            var textLine = textLines[i];\n            var lineWidth = getTextWidth(textLine, textFont);\n\n            if (lineWidth <= containerWidth) {\n                continue;\n            }\n\n            for (var j = 0;; j++) {\n                if (lineWidth <= contentWidth || j >= maxIterations) {\n                    textLine += ellipsis;\n                    break;\n                }\n\n                var subLength = j === 0\n                    ? estimateLength(textLine, contentWidth, ascCharWidth, cnCharWidth)\n                    : lineWidth > 0\n                    ? Math.floor(textLine.length * contentWidth / lineWidth)\n                    : 0;\n\n                textLine = textLine.substr(0, subLength);\n                lineWidth = getTextWidth(textLine, textFont);\n            }\n\n            if (textLine === '') {\n                textLine = placeholder;\n            }\n\n            textLines[i] = textLine;\n        }\n\n        return textLines.join('\\n');\n    }\n\n    function estimateLength(text, contentWidth, ascCharWidth, cnCharWidth) {\n        var width = 0;\n        var i = 0;\n        for (var len = text.length; i < len && width < contentWidth; i++) {\n            var charCode = text.charCodeAt(i);\n            width += (0 <= charCode && charCode <= 127) ? ascCharWidth : cnCharWidth;\n        }\n        return i;\n    }\n\n    var textContain = {\n\n        getWidth: getTextWidth,\n\n        getBoundingRect: getTextRect,\n\n        adjustTextPositionOnRect: adjustTextPositionOnRect,\n\n        truncateText: truncateText,\n\n        measureText: function (text, textFont) {\n            var ctx = util.getContext();\n            ctx.font = textFont || '12px sans-serif';\n            return ctx.measureText(text);\n        }\n    };\n\n    module.exports = textContain;\n\n\n/***/ }),\n\n/***/ \"46R8\":\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * Text element\n * @module zrender/graphic/Text\n *\n * TODO Wrapping\n *\n * Text not support gradient\n */\n\n\n\n    var Displayable = __webpack_require__(\"g07m\");\n    var zrUtil = __webpack_require__(\"nw1Z\");\n    var textContain = __webpack_require__(\"45MQ\");\n\n    /**\n     * @alias zrender/graphic/Text\n     * @extends module:zrender/graphic/Displayable\n     * @constructor\n     * @param {Object} opts\n     */\n    var Text = function (opts) {\n        Displayable.call(this, opts);\n    };\n\n    Text.prototype = {\n\n        constructor: Text,\n\n        type: 'text',\n\n        brush: function (ctx, prevEl) {\n            var style = this.style;\n            var x = style.x || 0;\n            var y = style.y || 0;\n            // Convert to string\n            var text = style.text;\n\n            // Convert to string\n            text != null && (text += '');\n\n            // Always bind style\n            style.bind(ctx, this, prevEl);\n\n            if (text) {\n\n                this.setTransform(ctx);\n\n                var textBaseline;\n                var textAlign = style.textAlign;\n                var font = style.textFont || style.font;\n                if (style.textVerticalAlign) {\n                    var rect = textContain.getBoundingRect(\n                        text, font, style.textAlign, 'top'\n                    );\n                    // Ignore textBaseline\n                    textBaseline = 'middle';\n                    switch (style.textVerticalAlign) {\n                        case 'middle':\n                            y -= rect.height / 2 - rect.lineHeight / 2;\n                            break;\n                        case 'bottom':\n                            y -= rect.height - rect.lineHeight / 2;\n                            break;\n                        default:\n                            y += rect.lineHeight / 2;\n                    }\n                }\n                else {\n                    textBaseline = style.textBaseline;\n                }\n\n                // TODO Invalid font\n                ctx.font = font || '12px sans-serif';\n                ctx.textAlign = textAlign || 'left';\n                // Use canvas default left textAlign. Giving invalid value will cause state not change\n                if (ctx.textAlign !== textAlign) {\n                    ctx.textAlign = 'left';\n                }\n                // FIXME in text contain default is top\n                ctx.textBaseline = textBaseline || 'alphabetic';\n                // Use canvas default alphabetic baseline\n                if (ctx.textBaseline !== textBaseline) {\n                    ctx.textBaseline = 'alphabetic';\n                }\n\n                var lineHeight = textContain.measureText('国', ctx.font).width;\n\n                var textLines = text.split('\\n');\n                for (var i = 0; i < textLines.length; i++) {\n                    // Fill after stroke so the outline will not cover the main part.\n                    style.hasStroke() && ctx.strokeText(textLines[i], x, y);\n                    style.hasFill() && ctx.fillText(textLines[i], x, y);\n                    y += lineHeight;\n                }\n\n                this.restoreTransform(ctx);\n            }\n        },\n\n        getBoundingRect: function () {\n            var style = this.style;\n            if (!this._rect) {\n                var textVerticalAlign = style.textVerticalAlign;\n                var rect = textContain.getBoundingRect(\n                    style.text + '', style.textFont || style.font, style.textAlign,\n                    textVerticalAlign ? 'top' : style.textBaseline\n                );\n                switch (textVerticalAlign) {\n                    case 'middle':\n                        rect.y -= rect.height / 2;\n                        break;\n                    case 'bottom':\n                        rect.y -= rect.height;\n                        break;\n                }\n                rect.x += style.x || 0;\n                rect.y += style.y || 0;\n                if (style.hasStroke()) {\n                    var w = style.lineWidth;\n                    rect.x -= w / 2;\n                    rect.y -= w / 2;\n                    rect.width += w;\n                    rect.height += w;\n                }\n                this._rect = rect;\n            }\n\n            return this._rect;\n        }\n    };\n\n    zrUtil.inherits(Text, Displayable);\n\n    module.exports = Text;\n\n\n/***/ }),\n\n/***/ \"4oXW\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\n    var zrUtil = __webpack_require__(\"nw1Z\");\n    var numberUtil = __webpack_require__(\"0+Kq\");\n    var textContain = __webpack_require__(\"45MQ\");\n\n    var formatUtil = {};\n\n    /**\n     * 每三位默认加,格式化\n     * @param {string|number} x\n     * @return {string}\n     */\n    formatUtil.addCommas = function (x) {\n        if (isNaN(x)) {\n            return '-';\n        }\n        x = (x + '').split('.');\n        return x[0].replace(/(\\d{1,3})(?=(?:\\d{3})+(?!\\d))/g,'$1,')\n               + (x.length > 1 ? ('.' + x[1]) : '');\n    };\n\n    /**\n     * @param {string} str\n     * @param {boolean} [upperCaseFirst=false]\n     * @return {string} str\n     */\n    formatUtil.toCamelCase = function (str, upperCaseFirst) {\n        str = (str || '').toLowerCase().replace(/-(.)/g, function(match, group1) {\n            return group1.toUpperCase();\n        });\n\n        if (upperCaseFirst && str) {\n            str = str.charAt(0).toUpperCase() + str.slice(1);\n        }\n\n        return str;\n    };\n\n    /**\n     * Normalize css liked array configuration\n     * e.g.\n     *  3 => [3, 3, 3, 3]\n     *  [4, 2] => [4, 2, 4, 2]\n     *  [4, 3, 2] => [4, 3, 2, 3]\n     * @param {number|Array.<number>} val\n     */\n    formatUtil.normalizeCssArray = function (val) {\n        var len = val.length;\n        if (typeof (val) === 'number') {\n            return [val, val, val, val];\n        }\n        else if (len === 2) {\n            // vertical | horizontal\n            return [val[0], val[1], val[0], val[1]];\n        }\n        else if (len === 3) {\n            // top | horizontal | bottom\n            return [val[0], val[1], val[2], val[1]];\n        }\n        return val;\n    };\n\n    var encodeHTML = formatUtil.encodeHTML = function (source) {\n        return String(source)\n            .replace(/&/g, '&amp;')\n            .replace(/</g, '&lt;')\n            .replace(/>/g, '&gt;')\n            .replace(/\"/g, '&quot;')\n            .replace(/'/g, '&#39;');\n    };\n\n    var TPL_VAR_ALIAS = ['a', 'b', 'c', 'd', 'e', 'f', 'g'];\n\n    var wrapVar = function (varName, seriesIdx) {\n        return '{' + varName + (seriesIdx == null ? '' : seriesIdx) + '}';\n    };\n\n    /**\n     * Template formatter\n     * @param {string} tpl\n     * @param {Array.<Object>|Object} paramsList\n     * @param {boolean} [encode=false]\n     * @return {string}\n     */\n    formatUtil.formatTpl = function (tpl, paramsList, encode) {\n        if (!zrUtil.isArray(paramsList)) {\n            paramsList = [paramsList];\n        }\n        var seriesLen = paramsList.length;\n        if (!seriesLen) {\n            return '';\n        }\n\n        var $vars = paramsList[0].$vars || [];\n        for (var i = 0; i < $vars.length; i++) {\n            var alias = TPL_VAR_ALIAS[i];\n            var val = wrapVar(alias, 0);\n            tpl = tpl.replace(wrapVar(alias), encode ? encodeHTML(val) : val);\n        }\n        for (var seriesIdx = 0; seriesIdx < seriesLen; seriesIdx++) {\n            for (var k = 0; k < $vars.length; k++) {\n                var val = paramsList[seriesIdx][$vars[k]];\n                tpl = tpl.replace(\n                    wrapVar(TPL_VAR_ALIAS[k], seriesIdx),\n                    encode ? encodeHTML(val) : val\n                );\n            }\n        }\n\n        return tpl;\n    };\n\n    /**\n     * simple Template formatter\n     *\n     * @param {string} tpl\n     * @param {Object} param\n     * @param {boolean} [encode=false]\n     * @return {string}\n     */\n    formatUtil.formatTplSimple = function (tpl, param, encode) {\n        zrUtil.each(param, function (value, key) {\n            tpl = tpl.replace(\n                '{' + key + '}',\n                encode ? encodeHTML(value) : value\n            );\n        });\n        return tpl;\n    };\n\n    /**\n     * @param {string} color\n     * @param {string} [extraCssText]\n     * @return {string}\n     */\n    formatUtil.getTooltipMarker = function (color, extraCssText) {\n        return color\n            ? '<span style=\"display:inline-block;margin-right:5px;'\n                + 'border-radius:10px;width:9px;height:9px;background-color:'\n                + formatUtil.encodeHTML(color) + ';' + (extraCssText || '') + '\"></span>'\n            : '';\n    };\n\n    /**\n     * @param {string} str\n     * @return {string}\n     * @inner\n     */\n    var s2d = function (str) {\n        return str < 10 ? ('0' + str) : str;\n    };\n\n    /**\n     * ISO Date format\n     * @param {string} tpl\n     * @param {number} value\n     * @param {boolean} [isUTC=false] Default in local time.\n     *           see `module:echarts/scale/Time`\n     *           and `module:echarts/util/number#parseDate`.\n     * @inner\n     */\n    formatUtil.formatTime = function (tpl, value, isUTC) {\n        if (tpl === 'week'\n            || tpl === 'month'\n            || tpl === 'quarter'\n            || tpl === 'half-year'\n            || tpl === 'year'\n        ) {\n            tpl = 'MM-dd\\nyyyy';\n        }\n\n        var date = numberUtil.parseDate(value);\n        var utc = isUTC ? 'UTC' : '';\n        var y = date['get' + utc + 'FullYear']();\n        var M = date['get' + utc + 'Month']() + 1;\n        var d = date['get' + utc + 'Date']();\n        var h = date['get' + utc + 'Hours']();\n        var m = date['get' + utc + 'Minutes']();\n        var s = date['get' + utc + 'Seconds']();\n\n        tpl = tpl.replace('MM', s2d(M))\n            .toLowerCase()\n            .replace('yyyy', y)\n            .replace('yy', y % 100)\n            .replace('dd', s2d(d))\n            .replace('d', d)\n            .replace('hh', s2d(h))\n            .replace('h', h)\n            .replace('mm', s2d(m))\n            .replace('m', m)\n            .replace('ss', s2d(s))\n            .replace('s', s);\n\n        return tpl;\n    };\n\n    /**\n     * Capital first\n     * @param {string} str\n     * @return {string}\n     */\n    formatUtil.capitalFirst = function (str) {\n        return str ? str.charAt(0).toUpperCase() + str.substr(1) : str;\n    };\n\n    formatUtil.truncateText = textContain.truncateText;\n\n    module.exports = formatUtil;\n\n\n\n/***/ }),\n\n/***/ \"4obY\":\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * Image element\n * @module zrender/graphic/Image\n */\n\n\n\n    var Displayable = __webpack_require__(\"g07m\");\n    var BoundingRect = __webpack_require__(\"W4Cx\");\n    var zrUtil = __webpack_require__(\"nw1Z\");\n\n    var LRU = __webpack_require__(\"i4I6\");\n    var globalImageCache = new LRU(50);\n    /**\n     * @alias zrender/graphic/Image\n     * @extends module:zrender/graphic/Displayable\n     * @constructor\n     * @param {Object} opts\n     */\n    function ZImage(opts) {\n        Displayable.call(this, opts);\n    }\n\n    ZImage.prototype = {\n\n        constructor: ZImage,\n\n        type: 'image',\n\n        brush: function (ctx, prevEl) {\n            var style = this.style;\n            var src = style.image;\n            var image;\n\n            // Must bind each time\n            style.bind(ctx, this, prevEl);\n            // style.image is a url string\n            if (typeof src === 'string') {\n                image = this._image;\n            }\n            // style.image is an HTMLImageElement or HTMLCanvasElement or Canvas\n            else {\n                image = src;\n            }\n            // FIXME Case create many images with src\n            if (!image && src) {\n                // Try get from global image cache\n                var cachedImgObj = globalImageCache.get(src);\n                if (!cachedImgObj) {\n                    // Create a new image\n                    image = new Image();\n                    image.onload = function () {\n                        image.onload = null;\n                        for (var i = 0; i < cachedImgObj.pending.length; i++) {\n                            cachedImgObj.pending[i].dirty();\n                        }\n                    };\n                    cachedImgObj = {\n                        image: image,\n                        pending: [this]\n                    };\n                    image.src = src;\n                    globalImageCache.put(src, cachedImgObj);\n                    this._image = image;\n                    return;\n                }\n                else {\n                    image = cachedImgObj.image;\n                    this._image = image;\n                    // Image is not complete finish, add to pending list\n                    if (!image.width || !image.height) {\n                        cachedImgObj.pending.push(this);\n                        return;\n                    }\n                }\n            }\n\n            if (image) {\n                // 图片已经加载完成\n                // if (image.nodeName.toUpperCase() == 'IMG') {\n                //     if (!image.complete) {\n                //         return;\n                //     }\n                // }\n                // Else is canvas\n\n                var x = style.x || 0;\n                var y = style.y || 0;\n                // 图片加载失败\n                if (!image.width || !image.height) {\n                    return;\n                }\n                var width = style.width;\n                var height = style.height;\n                var aspect = image.width / image.height;\n                if (width == null && height != null) {\n                    // Keep image/height ratio\n                    width = height * aspect;\n                }\n                else if (height == null && width != null) {\n                    height = width / aspect;\n                }\n                else if (width == null && height == null) {\n                    width = image.width;\n                    height = image.height;\n                }\n\n                // 设置transform\n                this.setTransform(ctx);\n\n                if (style.sWidth && style.sHeight) {\n                    var sx = style.sx || 0;\n                    var sy = style.sy || 0;\n                    ctx.drawImage(\n                        image,\n                        sx, sy, style.sWidth, style.sHeight,\n                        x, y, width, height\n                    );\n                }\n                else if (style.sx && style.sy) {\n                    var sx = style.sx;\n                    var sy = style.sy;\n                    var sWidth = width - sx;\n                    var sHeight = height - sy;\n                    ctx.drawImage(\n                        image,\n                        sx, sy, sWidth, sHeight,\n                        x, y, width, height\n                    );\n                }\n                else {\n                    ctx.drawImage(image, x, y, width, height);\n                }\n\n                this.restoreTransform(ctx);\n\n                // Draw rect text\n                if (style.text != null) {\n                    this.drawRectText(ctx, this.getBoundingRect());\n                }\n\n            }\n        },\n\n        getBoundingRect: function () {\n            var style = this.style;\n            if (! this._rect) {\n                this._rect = new BoundingRect(\n                    style.x || 0, style.y || 0, style.width || 0, style.height || 0\n                );\n            }\n            return this._rect;\n        }\n    };\n\n    zrUtil.inherits(ZImage, Displayable);\n\n    module.exports = ZImage;\n\n\n/***/ }),\n\n/***/ \"5hg5\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// TODO Parse shadow style\n// TODO Only shallow path support\n\n    var zrUtil = __webpack_require__(\"nw1Z\");\n\n    module.exports = function (properties) {\n        // Normalize\n        for (var i = 0; i < properties.length; i++) {\n            if (!properties[i][1]) {\n               properties[i][1] = properties[i][0];\n            }\n        }\n        return function (excludes, includes) {\n            var style = {};\n            for (var i = 0; i < properties.length; i++) {\n                var propName = properties[i][1];\n                if ((excludes && zrUtil.indexOf(excludes, propName) >= 0)\n                    || (includes && zrUtil.indexOf(includes, propName) < 0)\n                ) {\n                    continue;\n                }\n                var val = this.getShallow(propName);\n                if (val != null) {\n                    style[properties[i][0]] = val;\n                }\n            }\n            return style;\n        };\n    };\n\n\n/***/ }),\n\n/***/ \"61Fv\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n/**\n * 贝塞尔曲线\n * @module zrender/shape/BezierCurve\n */\n\n\n    var curveTool = __webpack_require__(\"cZ/t\");\n    var vec2 = __webpack_require__(\"Krco\");\n    var quadraticSubdivide = curveTool.quadraticSubdivide;\n    var cubicSubdivide = curveTool.cubicSubdivide;\n    var quadraticAt = curveTool.quadraticAt;\n    var cubicAt = curveTool.cubicAt;\n    var quadraticDerivativeAt = curveTool.quadraticDerivativeAt;\n    var cubicDerivativeAt = curveTool.cubicDerivativeAt;\n\n    var out = [];\n\n    function someVectorAt(shape, t, isTangent) {\n        var cpx2 = shape.cpx2;\n        var cpy2 = shape.cpy2;\n        if (cpx2 === null || cpy2 === null) {\n            return [\n                (isTangent ? cubicDerivativeAt : cubicAt)(shape.x1, shape.cpx1, shape.cpx2, shape.x2, t),\n                (isTangent ? cubicDerivativeAt : cubicAt)(shape.y1, shape.cpy1, shape.cpy2, shape.y2, t)\n            ];\n        }\n        else {\n            return [\n                (isTangent ? quadraticDerivativeAt : quadraticAt)(shape.x1, shape.cpx1, shape.x2, t),\n                (isTangent ? quadraticDerivativeAt : quadraticAt)(shape.y1, shape.cpy1, shape.y2, t)\n            ];\n        }\n    }\n    module.exports = __webpack_require__(\"CC7E\").extend({\n\n        type: 'bezier-curve',\n\n        shape: {\n            x1: 0,\n            y1: 0,\n            x2: 0,\n            y2: 0,\n            cpx1: 0,\n            cpy1: 0,\n            // cpx2: 0,\n            // cpy2: 0\n\n            // Curve show percent, for animating\n            percent: 1\n        },\n\n        style: {\n            stroke: '#000',\n            fill: null\n        },\n\n        buildPath: function (ctx, shape) {\n            var x1 = shape.x1;\n            var y1 = shape.y1;\n            var x2 = shape.x2;\n            var y2 = shape.y2;\n            var cpx1 = shape.cpx1;\n            var cpy1 = shape.cpy1;\n            var cpx2 = shape.cpx2;\n            var cpy2 = shape.cpy2;\n            var percent = shape.percent;\n            if (percent === 0) {\n                return;\n            }\n\n            ctx.moveTo(x1, y1);\n\n            if (cpx2 == null || cpy2 == null) {\n                if (percent < 1) {\n                    quadraticSubdivide(\n                        x1, cpx1, x2, percent, out\n                    );\n                    cpx1 = out[1];\n                    x2 = out[2];\n                    quadraticSubdivide(\n                        y1, cpy1, y2, percent, out\n                    );\n                    cpy1 = out[1];\n                    y2 = out[2];\n                }\n\n                ctx.quadraticCurveTo(\n                    cpx1, cpy1,\n                    x2, y2\n                );\n            }\n            else {\n                if (percent < 1) {\n                    cubicSubdivide(\n                        x1, cpx1, cpx2, x2, percent, out\n                    );\n                    cpx1 = out[1];\n                    cpx2 = out[2];\n                    x2 = out[3];\n                    cubicSubdivide(\n                        y1, cpy1, cpy2, y2, percent, out\n                    );\n                    cpy1 = out[1];\n                    cpy2 = out[2];\n                    y2 = out[3];\n                }\n                ctx.bezierCurveTo(\n                    cpx1, cpy1,\n                    cpx2, cpy2,\n                    x2, y2\n                );\n            }\n        },\n\n        /**\n         * Get point at percent\n         * @param  {number} t\n         * @return {Array.<number>}\n         */\n        pointAt: function (t) {\n            return someVectorAt(this.shape, t, false);\n        },\n\n        /**\n         * Get tangent at percent\n         * @param  {number} t\n         * @return {Array.<number>}\n         */\n        tangentAt: function (t) {\n            var p = someVectorAt(this.shape, t, true);\n            return vec2.normalize(p, p);\n        }\n    });\n\n\n\n/***/ }),\n\n/***/ \"66V3\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\n    var zrUtil = __webpack_require__(\"nw1Z\");\n    var echarts = __webpack_require__(\"Cwwa\");\n    var PRIORITY = echarts.PRIORITY;\n\n    __webpack_require__(\"MpSj\");\n    __webpack_require__(\"nfmd\");\n\n    echarts.registerVisual(zrUtil.curry(\n        __webpack_require__(\"kwh2\"), 'line', 'circle', 'line'\n    ));\n    echarts.registerLayout(zrUtil.curry(\n        __webpack_require__(\"K0Lg\"), 'line'\n    ));\n\n    // Down sample after filter\n    echarts.registerProcessor(PRIORITY.PROCESSOR.STATISTIC, zrUtil.curry(\n        __webpack_require__(\"BBXc\"), 'line'\n    ));\n\n    // In case developer forget to include grid component\n    __webpack_require__(\"olP8\");\n\n\n/***/ }),\n\n/***/ \"6UAp\":\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * 动画主控制器\n * @config target 动画对象，可以是数组，如果是数组的话会批量分发onframe等事件\n * @config life(1000) 动画时长\n * @config delay(0) 动画延迟时间\n * @config loop(true)\n * @config gap(0) 循环的间隔时间\n * @config onframe\n * @config easing(optional)\n * @config ondestroy(optional)\n * @config onrestart(optional)\n *\n * TODO pause\n */\n\n\n    var easingFuncs = __webpack_require__(\"kQ9+\");\n\n    function Clip(options) {\n\n        this._target = options.target;\n\n        // 生命周期\n        this._life = options.life || 1000;\n        // 延时\n        this._delay = options.delay || 0;\n        // 开始时间\n        // this._startTime = new Date().getTime() + this._delay;// 单位毫秒\n        this._initialized = false;\n\n        // 是否循环\n        this.loop = options.loop == null ? false : options.loop;\n\n        this.gap = options.gap || 0;\n\n        this.easing = options.easing || 'Linear';\n\n        this.onframe = options.onframe;\n        this.ondestroy = options.ondestroy;\n        this.onrestart = options.onrestart;\n\n        this._pausedTime = 0;\n        this._paused = false;\n    }\n\n    Clip.prototype = {\n\n        constructor: Clip,\n\n        step: function (globalTime, deltaTime) {\n            // Set startTime on first step, or _startTime may has milleseconds different between clips\n            // PENDING\n            if (!this._initialized) {\n                this._startTime = globalTime + this._delay;\n                this._initialized = true;\n            }\n\n            if (this._paused) {\n                this._pausedTime += deltaTime;\n                return;\n            }\n\n            var percent = (globalTime - this._startTime - this._pausedTime) / this._life;\n\n            // 还没开始\n            if (percent < 0) {\n                return;\n            }\n\n            percent = Math.min(percent, 1);\n\n            var easing = this.easing;\n            var easingFunc = typeof easing == 'string' ? easingFuncs[easing] : easing;\n            var schedule = typeof easingFunc === 'function'\n                ? easingFunc(percent)\n                : percent;\n\n            this.fire('frame', schedule);\n\n            // 结束\n            if (percent == 1) {\n                if (this.loop) {\n                    this.restart (globalTime);\n                    // 重新开始周期\n                    // 抛出而不是直接调用事件直到 stage.update 后再统一调用这些事件\n                    return 'restart';\n                }\n\n                // 动画完成将这个控制器标识为待删除\n                // 在Animation.update中进行批量删除\n                this._needsRemove = true;\n                return 'destroy';\n            }\n\n            return null;\n        },\n\n        restart: function (globalTime) {\n            var remainder = (globalTime - this._startTime - this._pausedTime) % this._life;\n            this._startTime = globalTime - remainder + this.gap;\n            this._pausedTime = 0;\n\n            this._needsRemove = false;\n        },\n\n        fire: function (eventType, arg) {\n            eventType = 'on' + eventType;\n            if (this[eventType]) {\n                this[eventType](this._target, arg);\n            }\n        },\n\n        pause: function () {\n            this._paused = true;\n        },\n\n        resume: function () {\n            this._paused = false;\n        }\n    };\n\n    module.exports = Clip;\n\n\n\n/***/ }),\n\n/***/ \"7Etz\":\n/***/ (function(module, exports) {\n\n\n    module.exports = function (seriesType, ecModel) {\n        var legendModels = ecModel.findComponents({\n            mainType: 'legend'\n        });\n        if (!legendModels || !legendModels.length) {\n            return;\n        }\n        ecModel.eachSeriesByType(seriesType, function (series) {\n            var data = series.getData();\n            data.filterSelf(function (idx) {\n                var name = data.getName(idx);\n                // If in any legend component the status is not selected.\n                for (var i = 0; i < legendModels.length; i++) {\n                    if (!legendModels[i].isSelected(name)) {\n                        return false;\n                    }\n                }\n                return true;\n            }, this);\n        }, this);\n    };\n\n\n/***/ }),\n\n/***/ \"7RWD\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\n    module.exports = {\n        getAreaStyle: __webpack_require__(\"5hg5\")(\n            [\n                ['fill', 'color'],\n                ['shadowBlur'],\n                ['shadowOffsetX'],\n                ['shadowOffsetY'],\n                ['opacity'],\n                ['shadowColor']\n            ]\n        )\n    };\n\n\n/***/ }),\n\n/***/ \"7fUZ\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n\n    var List = __webpack_require__(\"LgKv\");\n    var zrUtil = __webpack_require__(\"nw1Z\");\n    var modelUtil = __webpack_require__(\"LFYx\");\n    var completeDimensions = __webpack_require__(\"Qajf\");\n\n    var dataSelectableMixin = __webpack_require__(\"SUqx\");\n\n    var PieSeries = __webpack_require__(\"Cwwa\").extendSeriesModel({\n\n        type: 'series.pie',\n\n        // Overwrite\n        init: function (option) {\n            PieSeries.superApply(this, 'init', arguments);\n\n            // Enable legend selection for each data item\n            // Use a function instead of direct access because data reference may changed\n            this.legendDataProvider = function () {\n                return this.getRawData();\n            };\n\n            this.updateSelectedMap(option.data);\n\n            this._defaultLabelLine(option);\n        },\n\n        // Overwrite\n        mergeOption: function (newOption) {\n            PieSeries.superCall(this, 'mergeOption', newOption);\n            this.updateSelectedMap(this.option.data);\n        },\n\n        getInitialData: function (option, ecModel) {\n            var dimensions = completeDimensions(['value'], option.data);\n            var list = new List(dimensions, this);\n            list.initData(option.data);\n            return list;\n        },\n\n        // Overwrite\n        getDataParams: function (dataIndex) {\n            var data = this.getData();\n            var params = PieSeries.superCall(this, 'getDataParams', dataIndex);\n            var sum = data.getSum('value');\n            // FIXME toFixed?\n            //\n            // Percent is 0 if sum is 0\n            params.percent = !sum ? 0 : +(data.get('value', dataIndex) / sum * 100).toFixed(2);\n\n            params.$vars.push('percent');\n            return params;\n        },\n\n        _defaultLabelLine: function (option) {\n            // Extend labelLine emphasis\n            modelUtil.defaultEmphasis(option.labelLine, ['show']);\n\n            var labelLineNormalOpt = option.labelLine.normal;\n            var labelLineEmphasisOpt = option.labelLine.emphasis;\n            // Not show label line if `label.normal.show = false`\n            labelLineNormalOpt.show = labelLineNormalOpt.show\n                && option.label.normal.show;\n            labelLineEmphasisOpt.show = labelLineEmphasisOpt.show\n                && option.label.emphasis.show;\n        },\n\n        defaultOption: {\n            zlevel: 0,\n            z: 2,\n            legendHoverLink: true,\n\n            hoverAnimation: true,\n            // 默认全局居中\n            center: ['50%', '50%'],\n            radius: [0, '75%'],\n            // 默认顺时针\n            clockwise: true,\n            startAngle: 90,\n            // 最小角度改为0\n            minAngle: 0,\n            // 选中是扇区偏移量\n            selectedOffset: 10,\n\n            // If use strategy to avoid label overlapping\n            avoidLabelOverlap: true,\n            // 选择模式，默认关闭，可选single，multiple\n            // selectedMode: false,\n            // 南丁格尔玫瑰图模式，'radius'（半径） | 'area'（面积）\n            // roseType: null,\n\n            // If still show when all data zero.\n            stillShowZeroSum: true,\n\n            label: {\n                normal: {\n                    // If rotate around circle\n                    rotate: false,\n                    show: true,\n                    // 'outer', 'inside', 'center'\n                    position: 'outer'\n                    // formatter: 标签文本格式器，同Tooltip.formatter，不支持异步回调\n                    // textStyle: null      // 默认使用全局文本样式，详见TEXTSTYLE\n                    // distance: 当position为inner时有效，为label位置到圆心的距离与圆半径(环状图为内外半径和)的比例系数\n                },\n                emphasis: {}\n            },\n            // Enabled when label.normal.position is 'outer'\n            labelLine: {\n                normal: {\n                    show: true,\n                    // 引导线两段中的第一段长度\n                    length: 15,\n                    // 引导线两段中的第二段长度\n                    length2: 15,\n                    smooth: false,\n                    lineStyle: {\n                        // color: 各异,\n                        width: 1,\n                        type: 'solid'\n                    }\n                }\n            },\n            itemStyle: {\n                normal: {\n                    borderWidth: 1\n                },\n                emphasis: {}\n            },\n\n            // Animation type canbe expansion, scale\n            animationType: 'expansion',\n\n            animationEasing: 'cubicOut',\n\n            data: []\n        }\n    });\n\n    zrUtil.mixin(PieSeries, dataSelectableMixin);\n\n    module.exports = PieSeries;\n\n\n/***/ }),\n\n/***/ \"7zxc\":\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * DataZoom component entry\n */\n\n\n    __webpack_require__(\"ZRRT\");\n\n    __webpack_require__(\"PtLt\");\n    __webpack_require__(\"uliI\");\n\n    __webpack_require__(\"o0M/\");\n    __webpack_require__(\"Vlf+\");\n\n    __webpack_require__(\"bv/E\");\n    __webpack_require__(\"HN64\");\n\n\n\n/***/ }),\n\n/***/ \"89FV\":\n/***/ (function(module, exports) {\n\n\n\n    // var arrayDiff = require('zrender/lib/core/arrayDiff');\n    // 'zrender/core/arrayDiff' has been used before, but it did\n    // not do well in performance when roam with fixed dataZoom window.\n\n    function sign(val) {\n        return val >= 0 ? 1 : -1;\n    }\n\n    function getStackedOnPoint(coordSys, data, idx) {\n        var baseAxis = coordSys.getBaseAxis();\n        var valueAxis = coordSys.getOtherAxis(baseAxis);\n        var valueStart = baseAxis.onZero\n            ? 0 : valueAxis.scale.getExtent()[0];\n\n        var valueDim = valueAxis.dim;\n        var baseDataOffset = valueDim === 'x' || valueDim === 'radius' ? 1 : 0;\n\n        var stackedOnSameSign;\n        var stackedOn = data.stackedOn;\n        var val = data.get(valueDim, idx);\n        // Find first stacked value with same sign\n        while (stackedOn &&\n            sign(stackedOn.get(valueDim, idx)) === sign(val)\n        ) {\n            stackedOnSameSign = stackedOn;\n            break;\n        }\n        var stackedData = [];\n        stackedData[baseDataOffset] = data.get(baseAxis.dim, idx);\n        stackedData[1 - baseDataOffset] = stackedOnSameSign\n            ? stackedOnSameSign.get(valueDim, idx, true) : valueStart;\n\n        return coordSys.dataToPoint(stackedData);\n    }\n\n    // function convertToIntId(newIdList, oldIdList) {\n    //     // Generate int id instead of string id.\n    //     // Compare string maybe slow in score function of arrDiff\n\n    //     // Assume id in idList are all unique\n    //     var idIndicesMap = {};\n    //     var idx = 0;\n    //     for (var i = 0; i < newIdList.length; i++) {\n    //         idIndicesMap[newIdList[i]] = idx;\n    //         newIdList[i] = idx++;\n    //     }\n    //     for (var i = 0; i < oldIdList.length; i++) {\n    //         var oldId = oldIdList[i];\n    //         // Same with newIdList\n    //         if (idIndicesMap[oldId]) {\n    //             oldIdList[i] = idIndicesMap[oldId];\n    //         }\n    //         else {\n    //             oldIdList[i] = idx++;\n    //         }\n    //     }\n    // }\n\n    function diffData(oldData, newData) {\n        var diffResult = [];\n\n        newData.diff(oldData)\n            .add(function (idx) {\n                diffResult.push({cmd: '+', idx: idx});\n            })\n            .update(function (newIdx, oldIdx) {\n                diffResult.push({cmd: '=', idx: oldIdx, idx1: newIdx});\n            })\n            .remove(function (idx) {\n                diffResult.push({cmd: '-', idx: idx});\n            })\n            .execute();\n\n        return diffResult;\n    }\n\n    module.exports = function (\n        oldData, newData,\n        oldStackedOnPoints, newStackedOnPoints,\n        oldCoordSys, newCoordSys\n    ) {\n        var diff = diffData(oldData, newData);\n\n        // var newIdList = newData.mapArray(newData.getId);\n        // var oldIdList = oldData.mapArray(oldData.getId);\n\n        // convertToIntId(newIdList, oldIdList);\n\n        // // FIXME One data ?\n        // diff = arrayDiff(oldIdList, newIdList);\n\n        var currPoints = [];\n        var nextPoints = [];\n        // Points for stacking base line\n        var currStackedPoints = [];\n        var nextStackedPoints = [];\n\n        var status = [];\n        var sortedIndices = [];\n        var rawIndices = [];\n        var dims = newCoordSys.dimensions;\n        for (var i = 0; i < diff.length; i++) {\n            var diffItem = diff[i];\n            var pointAdded = true;\n\n            // FIXME, animation is not so perfect when dataZoom window moves fast\n            // Which is in case remvoing or add more than one data in the tail or head\n            switch (diffItem.cmd) {\n                case '=':\n                    var currentPt = oldData.getItemLayout(diffItem.idx);\n                    var nextPt = newData.getItemLayout(diffItem.idx1);\n                    // If previous data is NaN, use next point directly\n                    if (isNaN(currentPt[0]) || isNaN(currentPt[1])) {\n                        currentPt = nextPt.slice();\n                    }\n                    currPoints.push(currentPt);\n                    nextPoints.push(nextPt);\n\n                    currStackedPoints.push(oldStackedOnPoints[diffItem.idx]);\n                    nextStackedPoints.push(newStackedOnPoints[diffItem.idx1]);\n\n                    rawIndices.push(newData.getRawIndex(diffItem.idx1));\n                    break;\n                case '+':\n                    var idx = diffItem.idx;\n                    currPoints.push(\n                        oldCoordSys.dataToPoint([\n                            newData.get(dims[0], idx, true), newData.get(dims[1], idx, true)\n                        ])\n                    );\n\n                    nextPoints.push(newData.getItemLayout(idx).slice());\n\n                    currStackedPoints.push(\n                        getStackedOnPoint(oldCoordSys, newData, idx)\n                    );\n                    nextStackedPoints.push(newStackedOnPoints[idx]);\n\n                    rawIndices.push(newData.getRawIndex(idx));\n                    break;\n                case '-':\n                    var idx = diffItem.idx;\n                    var rawIndex = oldData.getRawIndex(idx);\n                    // Data is replaced. In the case of dynamic data queue\n                    // FIXME FIXME FIXME\n                    if (rawIndex !== idx) {\n                        currPoints.push(oldData.getItemLayout(idx));\n                        nextPoints.push(newCoordSys.dataToPoint([\n                            oldData.get(dims[0], idx, true), oldData.get(dims[1], idx, true)\n                        ]));\n\n                        currStackedPoints.push(oldStackedOnPoints[idx]);\n                        nextStackedPoints.push(\n                            getStackedOnPoint(\n                                newCoordSys, oldData, idx\n                            )\n                        );\n\n                        rawIndices.push(rawIndex);\n                    }\n                    else {\n                        pointAdded = false;\n                    }\n            }\n\n            // Original indices\n            if (pointAdded) {\n                status.push(diffItem);\n                sortedIndices.push(sortedIndices.length);\n            }\n        }\n\n        // Diff result may be crossed if all items are changed\n        // Sort by data index\n        sortedIndices.sort(function (a, b) {\n            return rawIndices[a] - rawIndices[b];\n        });\n\n        var sortedCurrPoints = [];\n        var sortedNextPoints = [];\n\n        var sortedCurrStackedPoints = [];\n        var sortedNextStackedPoints = [];\n\n        var sortedStatus = [];\n        for (var i = 0; i < sortedIndices.length; i++) {\n            var idx = sortedIndices[i];\n            sortedCurrPoints[i] = currPoints[idx];\n            sortedNextPoints[i] = nextPoints[idx];\n\n            sortedCurrStackedPoints[i] = currStackedPoints[idx];\n            sortedNextStackedPoints[i] = nextStackedPoints[idx];\n\n            sortedStatus[i] = status[idx];\n        }\n\n        return {\n            current: sortedCurrPoints,\n            next: sortedNextPoints,\n\n            stackedOnCurrent: sortedCurrStackedPoints,\n            stackedOnNext: sortedNextStackedPoints,\n\n            status: sortedStatus\n        };\n    };\n\n\n/***/ }),\n\n/***/ \"8MHU\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\n    var env = __webpack_require__(\"020c\");\n\n    function SaveAsImage (model) {\n        this.model = model;\n    }\n\n    SaveAsImage.defaultOption = {\n        show: true,\n        icon: 'M4.7,22.9L29.3,45.5L54.7,23.4M4.6,43.6L4.6,58L53.8,58L53.8,43.6M29.2,45.1L29.2,0',\n        title: '保存为图片',\n        type: 'png',\n        // Default use option.backgroundColor\n        // backgroundColor: '#fff',\n        name: '',\n        excludeComponents: ['toolbox'],\n        pixelRatio: 1,\n        lang: ['右键另存为图片']\n    };\n\n    SaveAsImage.prototype.unusable = !env.canvasSupported;\n\n    var proto = SaveAsImage.prototype;\n\n    proto.onclick = function (ecModel, api) {\n        var model = this.model;\n        var title = model.get('name') || ecModel.get('title.0.text') || 'echarts';\n        var $a = document.createElement('a');\n        var type = model.get('type', true) || 'png';\n        $a.download = title + '.' + type;\n        $a.target = '_blank';\n        var url = api.getConnectedDataURL({\n            type: type,\n            backgroundColor: model.get('backgroundColor', true)\n                || ecModel.get('backgroundColor') || '#fff',\n            excludeComponents: model.get('excludeComponents'),\n            pixelRatio: model.get('pixelRatio')\n        });\n        $a.href = url;\n        // Chrome and Firefox\n        if (typeof MouseEvent === 'function' && !env.browser.ie && !env.browser.edge) {\n            var evt = new MouseEvent('click', {\n                view: window,\n                bubbles: true,\n                cancelable: false\n            });\n            $a.dispatchEvent(evt);\n        }\n        // IE\n        else {\n            var lang = model.get('lang');\n            var html = ''\n                + '<body style=\"margin:0;\">'\n                + '<img src=\"' + url + '\" style=\"max-width:100%;\" title=\"' + ((lang && lang[0]) || '') + '\" />'\n                + '</body>';\n            var tab = window.open();\n            tab.document.write(html);\n        }\n    };\n\n    __webpack_require__(\"M5+E\").register(\n        'saveAsImage', SaveAsImage\n    );\n\n    module.exports = SaveAsImage;\n\n\n/***/ }),\n\n/***/ \"8ig/\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\n    var zrUtil = __webpack_require__(\"nw1Z\");\n\n    var defaultOption = {\n        show: true,\n        zlevel: 0,                  // 一级层叠\n        z: 0,                       // 二级层叠\n        // 反向坐标轴\n        inverse: false,\n\n        // 坐标轴名字，默认为空\n        name: '',\n        // 坐标轴名字位置，支持'start' | 'middle' | 'end'\n        nameLocation: 'end',\n        // 坐标轴名字旋转，degree。\n        nameRotate: null, // Adapt to axis rotate, when nameLocation is 'middle'.\n        nameTruncate: {\n            maxWidth: null,\n            ellipsis: '...',\n            placeholder: '.'\n        },\n        // 坐标轴文字样式，默认取全局样式\n        nameTextStyle: {},\n        // 文字与轴线距离\n        nameGap: 15,\n\n        silent: false, // Default false to support tooltip.\n        triggerEvent: false, // Default false to avoid legacy user event listener fail.\n\n        tooltip: {\n            show: false\n        },\n\n        axisPointer: {},\n\n        // 坐标轴线\n        axisLine: {\n            // 默认显示，属性show控制显示与否\n            show: true,\n            onZero: true,\n            // 属性lineStyle控制线条样式\n            lineStyle: {\n                color: '#333',\n                width: 1,\n                type: 'solid'\n            }\n        },\n        // 坐标轴小标记\n        axisTick: {\n            // 属性show控制显示与否，默认显示\n            show: true,\n            // 控制小标记是否在grid里\n            inside: false,\n            // 属性length控制线长\n            length: 5,\n            // 属性lineStyle控制线条样式\n            lineStyle: {\n                width: 1\n            }\n        },\n        // 坐标轴文本标签，详见axis.axisLabel\n        axisLabel: {\n            show: true,\n            // 控制文本标签是否在grid里\n            inside: false,\n            rotate: 0,\n            showMinLabel: null, // true | false | null (auto)\n            showMaxLabel: null, // true | false | null (auto)\n            margin: 8,\n            // formatter: null,\n            // 其余属性默认使用全局文本样式，详见TEXTSTYLE\n            textStyle: {\n                fontSize: 12\n            }\n        },\n        // 分隔线\n        splitLine: {\n            // 默认显示，属性show控制显示与否\n            show: true,\n            // 属性lineStyle（详见lineStyle）控制线条样式\n            lineStyle: {\n                color: ['#ccc'],\n                width: 1,\n                type: 'solid'\n            }\n        },\n        // 分隔区域\n        splitArea: {\n            // 默认不显示，属性show控制显示与否\n            show: false,\n            // 属性areaStyle（详见areaStyle）控制区域样式\n            areaStyle: {\n                color: ['rgba(250,250,250,0.3)','rgba(200,200,200,0.3)']\n            }\n        }\n    };\n\n    var categoryAxis = zrUtil.merge({\n        // 类目起始和结束两端空白策略\n        boundaryGap: true,\n        // splitArea: {\n            // show: false\n        // },\n        splitLine: {\n            show: false\n        },\n        // 坐标轴小标记\n        axisTick: {\n            // If tick is align with label when boundaryGap is true\n            alignWithLabel: false,\n            interval: 'auto'\n        },\n        // 坐标轴文本标签，详见axis.axisLabel\n        axisLabel: {\n            interval: 'auto'\n        }\n    }, defaultOption);\n\n    var valueAxis = zrUtil.merge({\n        // 数值起始和结束两端空白策略\n        boundaryGap: [0, 0],\n        // 最小值, 设置成 'dataMin' 则从数据中计算最小值\n        // min: null,\n        // 最大值，设置成 'dataMax' 则从数据中计算最大值\n        // max: null,\n        // Readonly prop, specifies start value of the range when using data zoom.\n        // rangeStart: null\n        // Readonly prop, specifies end value of the range when using data zoom.\n        // rangeEnd: null\n        // 脱离0值比例，放大聚焦到最终_min，_max区间\n        // scale: false,\n        // 分割段数，默认为5\n        splitNumber: 5\n        // Minimum interval\n        // minInterval: null\n    }, defaultOption);\n\n    // FIXME\n    var timeAxis = zrUtil.defaults({\n        scale: true,\n        min: 'dataMin',\n        max: 'dataMax'\n    }, valueAxis);\n\n    var logAxis = zrUtil.defaults({\n        scale: true,\n        logBase: 10\n    }, valueAxis);\n\n    module.exports = {\n        categoryAxis: categoryAxis,\n        valueAxis: valueAxis,\n        timeAxis: timeAxis,\n        logAxis: logAxis\n    };\n\n\n/***/ }),\n\n/***/ \"8vhn\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\n    var curve = __webpack_require__(\"cZ/t\");\n\n    module.exports = {\n        /**\n         * 二次贝塞尔曲线描边包含判断\n         * @param  {number}  x0\n         * @param  {number}  y0\n         * @param  {number}  x1\n         * @param  {number}  y1\n         * @param  {number}  x2\n         * @param  {number}  y2\n         * @param  {number}  lineWidth\n         * @param  {number}  x\n         * @param  {number}  y\n         * @return {boolean}\n         */\n        containStroke: function (x0, y0, x1, y1, x2, y2, lineWidth, x, y) {\n            if (lineWidth === 0) {\n                return false;\n            }\n            var _l = lineWidth;\n            // Quick reject\n            if (\n                (y > y0 + _l && y > y1 + _l && y > y2 + _l)\n                || (y < y0 - _l && y < y1 - _l && y < y2 - _l)\n                || (x > x0 + _l && x > x1 + _l && x > x2 + _l)\n                || (x < x0 - _l && x < x1 - _l && x < x2 - _l)\n            ) {\n                return false;\n            }\n            var d = curve.quadraticProjectPoint(\n                x0, y0, x1, y1, x2, y2,\n                x, y, null\n            );\n            return d <= _l / 2;\n        }\n    };\n\n\n/***/ }),\n\n/***/ \"9Ree\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n\n    var echarts = __webpack_require__(\"Cwwa\");\n    var graphic = __webpack_require__(\"y2WT\");\n    var layout = __webpack_require__(\"zxuD\");\n\n    // Model\n    echarts.extendComponentModel({\n\n        type: 'title',\n\n        layoutMode: {type: 'box', ignoreSize: true},\n\n        defaultOption: {\n            // 一级层叠\n            zlevel: 0,\n            // 二级层叠\n            z: 6,\n            show: true,\n\n            text: '',\n            // 超链接跳转\n            // link: null,\n            // 仅支持self | blank\n            target: 'blank',\n            subtext: '',\n\n            // 超链接跳转\n            // sublink: null,\n            // 仅支持self | blank\n            subtarget: 'blank',\n\n            // 'center' ¦ 'left' ¦ 'right'\n            // ¦ {number}（x坐标，单位px）\n            left: 0,\n            // 'top' ¦ 'bottom' ¦ 'center'\n            // ¦ {number}（y坐标，单位px）\n            top: 0,\n\n            // 水平对齐\n            // 'auto' | 'left' | 'right' | 'center'\n            // 默认根据 left 的位置判断是左对齐还是右对齐\n            // textAlign: null\n            //\n            // 垂直对齐\n            // 'auto' | 'top' | 'bottom' | 'middle'\n            // 默认根据 top 位置判断是上对齐还是下对齐\n            // textBaseline: null\n\n            backgroundColor: 'rgba(0,0,0,0)',\n\n            // 标题边框颜色\n            borderColor: '#ccc',\n\n            // 标题边框线宽，单位px，默认为0（无边框）\n            borderWidth: 0,\n\n            // 标题内边距，单位px，默认各方向内边距为5，\n            // 接受数组分别设定上右下左边距，同css\n            padding: 5,\n\n            // 主副标题纵向间隔，单位px，默认为10，\n            itemGap: 10,\n            textStyle: {\n                fontSize: 18,\n                fontWeight: 'bolder',\n                color: '#333'\n            },\n            subtextStyle: {\n                color: '#aaa'\n            }\n        }\n    });\n\n    // View\n    echarts.extendComponentView({\n\n        type: 'title',\n\n        render: function (titleModel, ecModel, api) {\n            this.group.removeAll();\n\n            if (!titleModel.get('show')) {\n                return;\n            }\n\n            var group = this.group;\n\n            var textStyleModel = titleModel.getModel('textStyle');\n            var subtextStyleModel = titleModel.getModel('subtextStyle');\n\n            var textAlign = titleModel.get('textAlign');\n            var textBaseline = titleModel.get('textBaseline');\n\n            var textEl = new graphic.Text({\n                style: {\n                    text: titleModel.get('text'),\n                    textFont: textStyleModel.getFont(),\n                    fill: textStyleModel.getTextColor()\n                },\n                z2: 10\n            });\n\n            var textRect = textEl.getBoundingRect();\n\n            var subText = titleModel.get('subtext');\n            var subTextEl = new graphic.Text({\n                style: {\n                    text: subText,\n                    textFont: subtextStyleModel.getFont(),\n                    fill: subtextStyleModel.getTextColor(),\n                    y: textRect.height + titleModel.get('itemGap'),\n                    textBaseline: 'top'\n                },\n                z2: 10\n            });\n\n            var link = titleModel.get('link');\n            var sublink = titleModel.get('sublink');\n\n            textEl.silent = !link;\n            subTextEl.silent = !sublink;\n\n            if (link) {\n                textEl.on('click', function () {\n                    window.open(link, '_' + titleModel.get('target'));\n                });\n            }\n            if (sublink) {\n                subTextEl.on('click', function () {\n                    window.open(sublink, '_' + titleModel.get('subtarget'));\n                });\n            }\n\n            group.add(textEl);\n            subText && group.add(subTextEl);\n            // If no subText, but add subTextEl, there will be an empty line.\n\n            var groupRect = group.getBoundingRect();\n            var layoutOption = titleModel.getBoxLayoutParams();\n            layoutOption.width = groupRect.width;\n            layoutOption.height = groupRect.height;\n            var layoutRect = layout.getLayoutRect(\n                layoutOption, {\n                    width: api.getWidth(),\n                    height: api.getHeight()\n                }, titleModel.get('padding')\n            );\n            // Adjust text align based on position\n            if (!textAlign) {\n                // Align left if title is on the left. center and right is same\n                textAlign = titleModel.get('left') || titleModel.get('right');\n                if (textAlign === 'middle') {\n                    textAlign = 'center';\n                }\n                // Adjust layout by text align\n                if (textAlign === 'right') {\n                    layoutRect.x += layoutRect.width;\n                }\n                else if (textAlign === 'center') {\n                    layoutRect.x += layoutRect.width / 2;\n                }\n            }\n            if (!textBaseline) {\n                textBaseline = titleModel.get('top') || titleModel.get('bottom');\n                if (textBaseline === 'center') {\n                    textBaseline = 'middle';\n                }\n                if (textBaseline === 'bottom') {\n                    layoutRect.y += layoutRect.height;\n                }\n                else if (textBaseline === 'middle') {\n                    layoutRect.y += layoutRect.height / 2;\n                }\n\n                textBaseline = textBaseline || 'top';\n            }\n\n            group.attr('position', [layoutRect.x, layoutRect.y]);\n            var alignStyle = {\n                textAlign: textAlign,\n                textVerticalAlign: textBaseline\n            };\n            textEl.setStyle(alignStyle);\n            subTextEl.setStyle(alignStyle);\n\n            // Render background\n            // Get groupRect again because textAlign has been changed\n            groupRect = group.getBoundingRect();\n            var padding = layoutRect.margin;\n            var style = titleModel.getItemStyle(['color', 'opacity']);\n            style.fill = titleModel.get('backgroundColor');\n            var rect = new graphic.Rect({\n                shape: {\n                    x: groupRect.x - padding[3],\n                    y: groupRect.y - padding[0],\n                    width: groupRect.width + padding[1] + padding[3],\n                    height: groupRect.height + padding[0] + padding[2]\n                },\n                style: style,\n                silent: true\n            });\n            graphic.subPixelOptimizeRect(rect);\n\n            group.add(rect);\n        }\n    });\n\n\n/***/ }),\n\n/***/ \"A+Of\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\n    var TooltipContent = __webpack_require__(\"H0dg\");\n    var zrUtil = __webpack_require__(\"nw1Z\");\n    var formatUtil = __webpack_require__(\"4oXW\");\n    var numberUtil = __webpack_require__(\"0+Kq\");\n    var graphic = __webpack_require__(\"y2WT\");\n    var findPointFromSeries = __webpack_require__(\"tR6g\");\n    var layoutUtil = __webpack_require__(\"zxuD\");\n    var env = __webpack_require__(\"020c\");\n    var Model = __webpack_require__(\"Q4Sk\");\n    var globalListener = __webpack_require__(\"sEAT\");\n    var axisHelper = __webpack_require__(\"bL7R\");\n    var axisPointerViewHelper = __webpack_require__(\"XrCg\");\n\n    var bind = zrUtil.bind;\n    var each = zrUtil.each;\n    var parsePercent = numberUtil.parsePercent;\n\n\n    var proxyRect = new graphic.Rect({\n        shape: {x: -1, y: -1, width: 2, height: 2}\n    });\n\n    __webpack_require__(\"Cwwa\").extendComponentView({\n\n        type: 'tooltip',\n\n        init: function (ecModel, api) {\n            if (env.node) {\n                return;\n            }\n            var tooltipContent = new TooltipContent(api.getDom(), api);\n            this._tooltipContent = tooltipContent;\n        },\n\n        render: function (tooltipModel, ecModel, api) {\n            if (env.node) {\n                return;\n            }\n\n            // Reset\n            this.group.removeAll();\n\n            /**\n             * @private\n             * @type {module:echarts/component/tooltip/TooltipModel}\n             */\n            this._tooltipModel = tooltipModel;\n\n            /**\n             * @private\n             * @type {module:echarts/model/Global}\n             */\n            this._ecModel = ecModel;\n\n            /**\n             * @private\n             * @type {module:echarts/ExtensionAPI}\n             */\n            this._api = api;\n\n            /**\n             * Should be cleaned when render.\n             * @private\n             * @type {Array.<Array.<Object>>}\n             */\n            this._lastDataByCoordSys = null;\n\n            /**\n             * @private\n             * @type {boolean}\n             */\n            this._alwaysShowContent = tooltipModel.get('alwaysShowContent');\n\n            var tooltipContent = this._tooltipContent;\n            tooltipContent.update();\n            tooltipContent.setEnterable(tooltipModel.get('enterable'));\n\n            this._initGlobalListener();\n\n            this._keepShow();\n        },\n\n        _initGlobalListener: function () {\n            var tooltipModel = this._tooltipModel;\n            var triggerOn = tooltipModel.get('triggerOn');\n\n            globalListener.register(\n                'itemTooltip',\n                this._api,\n                bind(function (currTrigger, e, dispatchAction) {\n                    // If 'none', it is not controlled by mouse totally.\n                    if (triggerOn !== 'none') {\n                        if (triggerOn.indexOf(currTrigger) >= 0) {\n                            this._tryShow(e, dispatchAction);\n                        }\n                        else if (currTrigger === 'leave') {\n                            this._hide(dispatchAction);\n                        }\n                    }\n                }, this)\n            );\n        },\n\n        _keepShow: function () {\n            var tooltipModel = this._tooltipModel;\n            var ecModel = this._ecModel;\n            var api = this._api;\n\n            // Try to keep the tooltip show when refreshing\n            if (this._lastX != null\n                && this._lastY != null\n                // When user is willing to control tooltip totally using API,\n                // self.manuallyShowTip({x, y}) might cause tooltip hide,\n                // which is not expected.\n                && tooltipModel.get('triggerOn') !== 'none'\n            ) {\n                var self = this;\n                clearTimeout(this._refreshUpdateTimeout);\n                this._refreshUpdateTimeout = setTimeout(function () {\n                    // Show tip next tick after other charts are rendered\n                    // In case highlight action has wrong result\n                    // FIXME\n                    self.manuallyShowTip(tooltipModel, ecModel, api, {\n                        x: self._lastX,\n                        y: self._lastY\n                    });\n                });\n            }\n        },\n\n        /**\n         * Show tip manually by\n         * dispatchAction({\n         *     type: 'showTip',\n         *     x: 10,\n         *     y: 10\n         * });\n         * Or\n         * dispatchAction({\n         *      type: 'showTip',\n         *      seriesIndex: 0,\n         *      dataIndex or dataIndexInside or name\n         * });\n         *\n         *  TODO Batch\n         */\n        manuallyShowTip: function (tooltipModel, ecModel, api, payload) {\n            if (payload.from === this.uid || env.node) {\n                return;\n            }\n\n            var dispatchAction = makeDispatchAction(payload, api);\n\n            // Reset ticket\n            this._ticket = '';\n\n            // When triggered from axisPointer.\n            var dataByCoordSys = payload.dataByCoordSys;\n\n            if (payload.tooltip && payload.x != null && payload.y != null) {\n                var el = proxyRect;\n                el.position = [payload.x, payload.y];\n                el.update();\n                el.tooltip = payload.tooltip;\n                // Manually show tooltip while view is not using zrender elements.\n                this._tryShow({\n                    offsetX: payload.x,\n                    offsetY: payload.y,\n                    target: el\n                }, dispatchAction);\n            }\n            else if (dataByCoordSys) {\n                this._tryShow({\n                    offsetX: payload.x,\n                    offsetY: payload.y,\n                    position: payload.position,\n                    event: {},\n                    dataByCoordSys: payload.dataByCoordSys,\n                    tooltipOption: payload.tooltipOption\n                }, dispatchAction);\n            }\n            else if (payload.seriesIndex != null) {\n\n                if (this._manuallyAxisShowTip(tooltipModel, ecModel, api, payload)) {\n                    return;\n                }\n\n                var pointInfo = findPointFromSeries(payload, ecModel);\n                var cx = pointInfo.point[0];\n                var cy = pointInfo.point[1];\n                if (cx != null && cy != null) {\n                    this._tryShow({\n                        offsetX: cx,\n                        offsetY: cy,\n                        position: payload.position,\n                        target: pointInfo.el,\n                        event: {}\n                    }, dispatchAction);\n                }\n            }\n            else if (payload.x != null && payload.y != null) {\n                // FIXME\n                // should wrap dispatchAction like `axisPointer/globalListener` ?\n                api.dispatchAction({\n                    type: 'updateAxisPointer',\n                    x: payload.x,\n                    y: payload.y\n                });\n\n                this._tryShow({\n                    offsetX: payload.x,\n                    offsetY: payload.y,\n                    position: payload.position,\n                    target: api.getZr().findHover(payload.x, payload.y).target,\n                    event: {}\n                }, dispatchAction);\n            }\n        },\n\n        manuallyHideTip: function (tooltipModel, ecModel, api, payload) {\n            var tooltipContent = this._tooltipContent;\n\n            if (!this._alwaysShowContent) {\n                tooltipContent.hideLater(this._tooltipModel.get('hideDelay'));\n            }\n\n            this._lastX = this._lastY = null;\n\n            if (payload.from !== this.uid) {\n                this._hide(makeDispatchAction(payload, api));\n            }\n        },\n\n        // Be compatible with previous design, that is, when tooltip.type is 'axis' and\n        // dispatchAction 'showTip' with seriesIndex and dataIndex will trigger axis pointer\n        // and tooltip.\n        _manuallyAxisShowTip: function (tooltipModel, ecModel, api, payload) {\n            var seriesIndex = payload.seriesIndex;\n            var dataIndex = payload.dataIndex;\n            var coordSysAxesInfo = ecModel.getComponent('axisPointer').coordSysAxesInfo;\n\n            if (seriesIndex == null || dataIndex == null || coordSysAxesInfo == null) {\n                return;\n            }\n\n            var seriesModel = ecModel.getSeriesByIndex(seriesIndex);\n            if (!seriesModel) {\n                return;\n            }\n\n            var data = seriesModel.getData();\n            var tooltipModel = buildTooltipModel([\n                data.getItemModel(dataIndex),\n                seriesModel,\n                (seriesModel.coordinateSystem || {}).model,\n                tooltipModel\n            ]);\n\n            if (tooltipModel.get('trigger') !== 'axis') {\n                return;\n            }\n\n            api.dispatchAction({\n                type: 'updateAxisPointer',\n                seriesIndex: seriesIndex,\n                dataIndex: dataIndex\n            });\n\n            return true;\n        },\n\n        _tryShow: function (e, dispatchAction) {\n            var el = e.target;\n            var tooltipModel = this._tooltipModel;\n\n            if (!tooltipModel) {\n                return;\n            }\n\n            // Save mouse x, mouse y. So we can try to keep showing the tip if chart is refreshed\n            this._lastX = e.offsetX;\n            this._lastY = e.offsetY;\n\n            var dataByCoordSys = e.dataByCoordSys;\n            if (dataByCoordSys && dataByCoordSys.length) {\n                this._showAxisTooltip(dataByCoordSys, e);\n            }\n            // Always show item tooltip if mouse is on the element with dataIndex\n            else if (el && el.dataIndex != null) {\n                this._lastDataByCoordSys = null;\n                this._showSeriesItemTooltip(e, el, dispatchAction);\n            }\n            // Tooltip provided directly. Like legend.\n            else if (el && el.tooltip) {\n                this._lastDataByCoordSys = null;\n                this._showComponentItemTooltip(e, el, dispatchAction);\n            }\n            else {\n                this._lastDataByCoordSys = null;\n                this._hide(dispatchAction);\n            }\n        },\n\n        _showOrMove: function (tooltipModel, cb) {\n            // showDelay is used in this case: tooltip.enterable is set\n            // as true. User intent to move mouse into tooltip and click\n            // something. `showDelay` makes it easyer to enter the content\n            // but tooltip do not move immediately.\n            var delay = tooltipModel.get('showDelay');\n            cb = zrUtil.bind(cb, this);\n            clearTimeout(this._showTimout);\n            delay > 0\n                ? (this._showTimout = setTimeout(cb, delay))\n                : cb();\n        },\n\n        _showAxisTooltip: function (dataByCoordSys, e) {\n            var ecModel = this._ecModel;\n            var globalTooltipModel = this._tooltipModel;\n            var point = [e.offsetX, e.offsetY];\n            var singleDefaultHTML = [];\n            var singleParamsList = [];\n            var singleTooltipModel = buildTooltipModel([\n                e.tooltipOption,\n                globalTooltipModel\n            ]);\n\n            each(dataByCoordSys, function (itemCoordSys) {\n                // var coordParamList = [];\n                // var coordDefaultHTML = [];\n                // var coordTooltipModel = buildTooltipModel([\n                //     e.tooltipOption,\n                //     itemCoordSys.tooltipOption,\n                //     ecModel.getComponent(itemCoordSys.coordSysMainType, itemCoordSys.coordSysIndex),\n                //     globalTooltipModel\n                // ]);\n                // var displayMode = coordTooltipModel.get('displayMode');\n                // var paramsList = displayMode === 'single' ? singleParamsList : [];\n\n                each(itemCoordSys.dataByAxis, function (item) {\n                    var axisModel = ecModel.getComponent(item.axisDim + 'Axis', item.axisIndex);\n                    var axisValue = item.value;\n                    var seriesDefaultHTML = [];\n\n                    if (!axisModel || axisValue == null) {\n                        return;\n                    }\n\n                    var valueLabel = axisPointerViewHelper.getValueLabel(\n                        axisValue, axisModel.axis, ecModel,\n                        item.seriesDataIndices,\n                        item.valueLabelOpt\n                    );\n\n                    zrUtil.each(item.seriesDataIndices, function (idxItem) {\n                        var series = ecModel.getSeriesByIndex(idxItem.seriesIndex);\n                        var dataIndex = idxItem.dataIndexInside;\n                        var dataParams = series && series.getDataParams(dataIndex);\n                        dataParams.axisDim = item.axisDim;\n                        dataParams.axisIndex = item.axisIndex;\n                        dataParams.axisType = item.axisType;\n                        dataParams.axisId = item.axisId;\n                        dataParams.axisValue = axisHelper.getAxisRawValue(axisModel.axis, axisValue);\n                        dataParams.axisValueLabel = valueLabel;\n\n                        if (dataParams) {\n                            singleParamsList.push(dataParams);\n                            seriesDefaultHTML.push(series.formatTooltip(dataIndex, true));\n                        }\n                    });\n\n                    // Default tooltip content\n                    // FIXME\n                    // (1) shold be the first data which has name?\n                    // (2) themeRiver, firstDataIndex is array, and first line is unnecessary.\n                    var firstLine = valueLabel;\n                    singleDefaultHTML.push(\n                        (firstLine ? formatUtil.encodeHTML(firstLine) + '<br />' : '')\n                        + seriesDefaultHTML.join('<br />')\n                    );\n                });\n            }, this);\n\n            // In most case, the second axis is shown upper than the first one.\n            singleDefaultHTML.reverse();\n            singleDefaultHTML = singleDefaultHTML.join('<br /><br />');\n\n            var positionExpr = e.position;\n            this._showOrMove(singleTooltipModel, function () {\n                if (this._updateContentNotChangedOnAxis(dataByCoordSys)) {\n                    this._updatePosition(\n                        singleTooltipModel,\n                        positionExpr,\n                        point[0], point[1],\n                        this._tooltipContent,\n                        singleParamsList\n                    );\n                }\n                else {\n                    this._showTooltipContent(\n                        singleTooltipModel, singleDefaultHTML, singleParamsList, Math.random(),\n                        point[0], point[1], positionExpr\n                    );\n                }\n            });\n\n            // Do not trigger events here, because this branch only be entered\n            // from dispatchAction.\n        },\n\n        _showSeriesItemTooltip: function (e, el, dispatchAction) {\n            var ecModel = this._ecModel;\n            // Use dataModel in element if possible\n            // Used when mouseover on a element like markPoint or edge\n            // In which case, the data is not main data in series.\n            var seriesIndex = el.seriesIndex;\n            var seriesModel = ecModel.getSeriesByIndex(seriesIndex);\n\n            // For example, graph link.\n            var dataModel = el.dataModel || seriesModel;\n            var dataIndex = el.dataIndex;\n            var dataType = el.dataType;\n            var data = dataModel.getData();\n\n            var tooltipModel = buildTooltipModel([\n                data.getItemModel(dataIndex),\n                dataModel,\n                seriesModel && (seriesModel.coordinateSystem || {}).model,\n                this._tooltipModel\n            ]);\n\n            var tooltipTrigger = tooltipModel.get('trigger');\n            if (tooltipTrigger != null && tooltipTrigger !== 'item') {\n                return;\n            }\n\n            var params = dataModel.getDataParams(dataIndex, dataType);\n            var defaultHtml = dataModel.formatTooltip(dataIndex, false, dataType);\n            var asyncTicket = 'item_' + dataModel.name + '_' + dataIndex;\n\n            this._showOrMove(tooltipModel, function () {\n                this._showTooltipContent(\n                    tooltipModel, defaultHtml, params, asyncTicket,\n                    e.offsetX, e.offsetY, e.position, e.target\n                );\n            });\n\n            // FIXME\n            // duplicated showtip if manuallyShowTip is called from dispatchAction.\n            dispatchAction({\n                type: 'showTip',\n                dataIndexInside: dataIndex,\n                dataIndex: data.getRawIndex(dataIndex),\n                seriesIndex: seriesIndex,\n                from: this.uid\n            });\n        },\n\n        _showComponentItemTooltip: function (e, el, dispatchAction) {\n            var tooltipOpt = el.tooltip;\n            if (typeof tooltipOpt === 'string') {\n                var content = tooltipOpt;\n                tooltipOpt = {\n                    content: content,\n                    // Fixed formatter\n                    formatter: content\n                };\n            }\n            var subTooltipModel = new Model(tooltipOpt, this._tooltipModel, this._ecModel);\n            var defaultHtml = subTooltipModel.get('content');\n            var asyncTicket = Math.random();\n\n            // Do not check whether `trigger` is 'none' here, because `trigger`\n            // only works on cooridinate system. In fact, we have not found case\n            // that requires setting `trigger` nothing on component yet.\n\n            this._showOrMove(subTooltipModel, function () {\n                this._showTooltipContent(\n                    subTooltipModel, defaultHtml, subTooltipModel.get('formatterParams') || {},\n                    asyncTicket, e.offsetX, e.offsetY, e.position, el\n                );\n            });\n\n            // If not dispatch showTip, tip may be hide triggered by axis.\n            dispatchAction({\n                type: 'showTip',\n                from: this.uid\n            });\n        },\n\n        _showTooltipContent: function (\n            tooltipModel, defaultHtml, params, asyncTicket, x, y, positionExpr, el\n        ) {\n            // Reset ticket\n            this._ticket = '';\n\n            if (!tooltipModel.get('showContent') || !tooltipModel.get('show')) {\n                return;\n            }\n\n            var tooltipContent = this._tooltipContent;\n\n            var formatter = tooltipModel.get('formatter');\n            positionExpr = positionExpr || tooltipModel.get('position');\n            var html = defaultHtml;\n\n            if (formatter && typeof formatter === 'string') {\n                html = formatUtil.formatTpl(formatter, params, true);\n            }\n            else if (typeof formatter === 'function') {\n                var callback = bind(function (cbTicket, html) {\n                    if (cbTicket === this._ticket) {\n                        tooltipContent.setContent(html);\n                        this._updatePosition(\n                            tooltipModel, positionExpr, x, y, tooltipContent, params, el\n                        );\n                    }\n                }, this);\n                this._ticket = asyncTicket;\n                html = formatter(params, asyncTicket, callback);\n            }\n\n            tooltipContent.setContent(html);\n            tooltipContent.show(tooltipModel);\n\n            this._updatePosition(\n                tooltipModel, positionExpr, x, y, tooltipContent, params, el\n            );\n        },\n\n        /**\n         * @param  {string|Function|Array.<number>} positionExpr\n         * @param  {number} x Mouse x\n         * @param  {number} y Mouse y\n         * @param  {boolean} confine Whether confine tooltip content in view rect.\n         * @param  {Object|<Array.<Object>} params\n         * @param  {module:zrender/Element} el target element\n         * @param  {module:echarts/ExtensionAPI} api\n         * @return {Array.<number>}\n         */\n        _updatePosition: function (tooltipModel, positionExpr, x, y, content, params, el) {\n            var viewWidth = this._api.getWidth();\n            var viewHeight = this._api.getHeight();\n            positionExpr = positionExpr || tooltipModel.get('position');\n\n            var contentSize = content.getSize();\n            var align = tooltipModel.get('align');\n            var vAlign = tooltipModel.get('verticalAlign');\n            var rect = el && el.getBoundingRect().clone();\n            el && rect.applyTransform(el.transform);\n\n            if (typeof positionExpr === 'function') {\n                // Callback of position can be an array or a string specify the position\n                positionExpr = positionExpr([x, y], params, content.el, rect, {\n                    viewSize: [viewWidth, viewHeight],\n                    contentSize: contentSize.slice()\n                });\n            }\n\n            if (zrUtil.isArray(positionExpr)) {\n                x = parsePercent(positionExpr[0], viewWidth);\n                y = parsePercent(positionExpr[1], viewHeight);\n            }\n            else if (zrUtil.isObject(positionExpr)) {\n                positionExpr.width = contentSize[0];\n                positionExpr.height = contentSize[1];\n                var layoutRect = layoutUtil.getLayoutRect(\n                    positionExpr, {width: viewWidth, height: viewHeight}\n                );\n                x = layoutRect.x;\n                y = layoutRect.y;\n                align = null;\n                // When positionExpr is left/top/right/bottom,\n                // align and verticalAlign will not work.\n                vAlign = null;\n            }\n            // Specify tooltip position by string 'top' 'bottom' 'left' 'right' around graphic element\n            else if (typeof positionExpr === 'string' && el) {\n                var pos = calcTooltipPosition(\n                    positionExpr, rect, contentSize\n                );\n                x = pos[0];\n                y = pos[1];\n            }\n            else {\n                var pos = refixTooltipPosition(\n                    x, y, content.el, viewWidth, viewHeight, align ? null : 20, vAlign ? null : 20\n                );\n                x = pos[0];\n                y = pos[1];\n            }\n\n            align && (x -= isCenterAlign(align) ? contentSize[0] / 2 : align === 'right' ? contentSize[0] : 0);\n            vAlign && (y -= isCenterAlign(vAlign) ? contentSize[1] / 2 : vAlign === 'bottom' ? contentSize[1] : 0);\n\n            if (tooltipModel.get('confine')) {\n                var pos = confineTooltipPosition(\n                    x, y, content.el, viewWidth, viewHeight\n                );\n                x = pos[0];\n                y = pos[1];\n            }\n\n            content.moveTo(x, y);\n        },\n\n        // FIXME\n        // Should we remove this but leave this to user?\n        _updateContentNotChangedOnAxis: function (dataByCoordSys) {\n            var lastCoordSys = this._lastDataByCoordSys;\n            var contentNotChanged = !!lastCoordSys\n                && lastCoordSys.length === dataByCoordSys.length;\n\n            contentNotChanged && each(lastCoordSys, function (lastItemCoordSys, indexCoordSys) {\n                var lastDataByAxis = lastItemCoordSys.dataByAxis || {};\n                var thisItemCoordSys = dataByCoordSys[indexCoordSys] || {};\n                var thisDataByAxis = thisItemCoordSys.dataByAxis || [];\n                contentNotChanged &= lastDataByAxis.length === thisDataByAxis.length;\n\n                contentNotChanged && each(lastDataByAxis, function (lastItem, indexAxis) {\n                    var thisItem = thisDataByAxis[indexAxis] || {};\n                    var lastIndices = lastItem.seriesDataIndices || [];\n                    var newIndices = thisItem.seriesDataIndices || [];\n\n                    contentNotChanged &=\n                        lastItem.value === thisItem.value\n                        && lastItem.axisType === thisItem.axisType\n                        && lastItem.axisId === thisItem.axisId\n                        && lastIndices.length === newIndices.length;\n\n                    contentNotChanged && each(lastIndices, function (lastIdxItem, j) {\n                        var newIdxItem = newIndices[j];\n                        contentNotChanged &=\n                            lastIdxItem.seriesIndex === newIdxItem.seriesIndex\n                            && lastIdxItem.dataIndex === newIdxItem.dataIndex;\n                    });\n                });\n            });\n\n            this._lastDataByCoordSys = dataByCoordSys;\n\n            return !!contentNotChanged;\n        },\n\n        _hide: function (dispatchAction) {\n            // Do not directly hideLater here, because this behavior may be prevented\n            // in dispatchAction when showTip is dispatched.\n\n            // FIXME\n            // duplicated hideTip if manuallyHideTip is called from dispatchAction.\n            this._lastDataByCoordSys = null;\n            dispatchAction({\n                type: 'hideTip',\n                from: this.uid\n            });\n        },\n\n        dispose: function (ecModel, api) {\n            if (env.node) {\n                return;\n            }\n            this._tooltipContent.hide();\n            globalListener.unregister('itemTooltip', api);\n        }\n    });\n\n\n    /**\n     * @param {Array.<Object|module:echarts/model/Model>} modelCascade\n     * From top to bottom. (the last one should be globalTooltipModel);\n     */\n    function buildTooltipModel(modelCascade) {\n        var resultModel = modelCascade.pop();\n        while (modelCascade.length) {\n            var tooltipOpt = modelCascade.pop();\n            if (tooltipOpt) {\n                if (tooltipOpt instanceof Model) {\n                    tooltipOpt = tooltipOpt.get('tooltip', true);\n                }\n                // In each data item tooltip can be simply write:\n                // {\n                //  value: 10,\n                //  tooltip: 'Something you need to know'\n                // }\n                if (typeof tooltipOpt === 'string') {\n                    tooltipOpt = {formatter: tooltipOpt};\n                }\n                resultModel = new Model(tooltipOpt, resultModel, resultModel.ecModel);\n            }\n        }\n        return resultModel;\n    }\n\n    function makeDispatchAction(payload, api) {\n        return payload.dispatchAction || zrUtil.bind(api.dispatchAction, api);\n    }\n\n    function refixTooltipPosition(x, y, el, viewWidth, viewHeight, gapH, gapV) {\n        var width = el.clientWidth;\n        var height = el.clientHeight;\n\n        if (gapH != null) {\n            if (x + width + gapH > viewWidth) {\n                x -= width + gapH;\n            }\n            else {\n                x += gapH;\n            }\n        }\n        if (gapV != null) {\n            if (y + height + gapV > viewHeight) {\n                y -= height + gapV;\n            }\n            else {\n                y += gapV;\n            }\n        }\n        return [x, y];\n    }\n\n    function confineTooltipPosition(x, y, el, viewWidth, viewHeight) {\n        var width = el.clientWidth;\n        var height = el.clientHeight;\n\n        x = Math.min(x + width, viewWidth) - width;\n        y = Math.min(y + height, viewHeight) - height;\n        x = Math.max(x, 0);\n        y = Math.max(y, 0);\n\n        return [x, y];\n    }\n\n    function calcTooltipPosition(position, rect, contentSize) {\n        var domWidth = contentSize[0];\n        var domHeight = contentSize[1];\n        var gap = 5;\n        var x = 0;\n        var y = 0;\n        var rectWidth = rect.width;\n        var rectHeight = rect.height;\n        switch (position) {\n            case 'inside':\n                x = rect.x + rectWidth / 2 - domWidth / 2;\n                y = rect.y + rectHeight / 2 - domHeight / 2;\n                break;\n            case 'top':\n                x = rect.x + rectWidth / 2 - domWidth / 2;\n                y = rect.y - domHeight - gap;\n                break;\n            case 'bottom':\n                x = rect.x + rectWidth / 2 - domWidth / 2;\n                y = rect.y + rectHeight + gap;\n                break;\n            case 'left':\n                x = rect.x - domWidth - gap;\n                y = rect.y + rectHeight / 2 - domHeight / 2;\n                break;\n            case 'right':\n                x = rect.x + rectWidth + gap;\n                y = rect.y + rectHeight / 2 - domHeight / 2;\n        }\n        return [x, y];\n    }\n\n    function isCenterAlign(align) {\n        return align === 'center' || align === 'middle';\n    }\n\n\n\n/***/ }),\n\n/***/ \"BBXc\":\n/***/ (function(module, exports) {\n\n\n    var samplers = {\n        average: function (frame) {\n            var sum = 0;\n            var count = 0;\n            for (var i = 0; i < frame.length; i++) {\n                if (!isNaN(frame[i])) {\n                    sum += frame[i];\n                    count++;\n                }\n            }\n            // Return NaN if count is 0\n            return count === 0 ? NaN : sum / count;\n        },\n        sum: function (frame) {\n            var sum = 0;\n            for (var i = 0; i < frame.length; i++) {\n                // Ignore NaN\n                sum += frame[i] || 0;\n            }\n            return sum;\n        },\n        max: function (frame) {\n            var max = -Infinity;\n            for (var i = 0; i < frame.length; i++) {\n                frame[i] > max && (max = frame[i]);\n            }\n            return max;\n        },\n        min: function (frame) {\n            var min = Infinity;\n            for (var i = 0; i < frame.length; i++) {\n                frame[i] < min && (min = frame[i]);\n            }\n            return min;\n        },\n        // TODO\n        // Median\n        nearest: function (frame) {\n            return frame[0];\n        }\n    };\n\n    var indexSampler = function (frame, value) {\n        return Math.round(frame.length / 2);\n    };\n    module.exports = function (seriesType, ecModel, api) {\n        ecModel.eachSeriesByType(seriesType, function (seriesModel) {\n            var data = seriesModel.getData();\n            var sampling = seriesModel.get('sampling');\n            var coordSys = seriesModel.coordinateSystem;\n            // Only cartesian2d support down sampling\n            if (coordSys.type === 'cartesian2d' && sampling) {\n                var baseAxis = coordSys.getBaseAxis();\n                var valueAxis = coordSys.getOtherAxis(baseAxis);\n                var extent = baseAxis.getExtent();\n                // Coordinste system has been resized\n                var size = extent[1] - extent[0];\n                var rate = Math.round(data.count() / size);\n                if (rate > 1) {\n                    var sampler;\n                    if (typeof sampling === 'string') {\n                        sampler = samplers[sampling];\n                    }\n                    else if (typeof sampling === 'function') {\n                        sampler = sampling;\n                    }\n                    if (sampler) {\n                        data = data.downSample(\n                            valueAxis.dim, 1 / rate, sampler, indexSampler\n                        );\n                        seriesModel.setData(data);\n                    }\n                }\n            }\n        }, this);\n    };\n\n\n/***/ }),\n\n/***/ \"BIYt\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\n        var config = __webpack_require__(\"xFPV\");\n\n        /**\n         * @exports zrender/tool/log\n         * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)\n         */\n        module.exports = function() {\n            if (config.debugMode === 0) {\n                return;\n            }\n            else if (config.debugMode == 1) {\n                for (var k in arguments) {\n                    throw new Error(arguments[k]);\n                }\n            }\n            else if (config.debugMode > 1) {\n                for (var k in arguments) {\n                    console.log(arguments[k]);\n                }\n            }\n        };\n\n        /* for debug\n        return function(mes) {\n            document.getElementById('wrong-message').innerHTML =\n                mes + ' ' + (new Date() - 0)\n                + '<br/>'\n                + document.getElementById('wrong-message').innerHTML;\n        };\n        */\n    \n\n\n/***/ }),\n\n/***/ \"BOb8\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\n    var Group = __webpack_require__(\"yMOk\");\n    var componentUtil = __webpack_require__(\"e36O\");\n    var clazzUtil = __webpack_require__(\"fzq8\");\n    var modelUtil = __webpack_require__(\"LFYx\");\n    var zrUtil = __webpack_require__(\"nw1Z\");\n\n    function Chart() {\n\n        /**\n         * @type {module:zrender/container/Group}\n         * @readOnly\n         */\n        this.group = new Group();\n\n        /**\n         * @type {string}\n         * @readOnly\n         */\n        this.uid = componentUtil.getUID('viewChart');\n    }\n\n    Chart.prototype = {\n\n        type: 'chart',\n\n        /**\n         * Init the chart\n         * @param  {module:echarts/model/Global} ecModel\n         * @param  {module:echarts/ExtensionAPI} api\n         */\n        init: function (ecModel, api) {},\n\n        /**\n         * Render the chart\n         * @param  {module:echarts/model/Series} seriesModel\n         * @param  {module:echarts/model/Global} ecModel\n         * @param  {module:echarts/ExtensionAPI} api\n         * @param  {Object} payload\n         */\n        render: function (seriesModel, ecModel, api, payload) {},\n\n        /**\n         * Highlight series or specified data item\n         * @param  {module:echarts/model/Series} seriesModel\n         * @param  {module:echarts/model/Global} ecModel\n         * @param  {module:echarts/ExtensionAPI} api\n         * @param  {Object} payload\n         */\n        highlight: function (seriesModel, ecModel, api, payload) {\n            toggleHighlight(seriesModel.getData(), payload, 'emphasis');\n        },\n\n        /**\n         * Downplay series or specified data item\n         * @param  {module:echarts/model/Series} seriesModel\n         * @param  {module:echarts/model/Global} ecModel\n         * @param  {module:echarts/ExtensionAPI} api\n         * @param  {Object} payload\n         */\n        downplay: function (seriesModel, ecModel, api, payload) {\n            toggleHighlight(seriesModel.getData(), payload, 'normal');\n        },\n\n        /**\n         * Remove self\n         * @param  {module:echarts/model/Global} ecModel\n         * @param  {module:echarts/ExtensionAPI} api\n         */\n        remove: function (ecModel, api) {\n            this.group.removeAll();\n        },\n\n        /**\n         * Dispose self\n         * @param  {module:echarts/model/Global} ecModel\n         * @param  {module:echarts/ExtensionAPI} api\n         */\n        dispose: function () {}\n\n        /**\n         * The view contains the given point.\n         * @interface\n         * @param {Array.<number>} point\n         * @return {boolean}\n         */\n        // containPoint: function () {}\n\n    };\n\n    var chartProto = Chart.prototype;\n    chartProto.updateView\n        = chartProto.updateLayout\n        = chartProto.updateVisual\n        = function (seriesModel, ecModel, api, payload) {\n            this.render(seriesModel, ecModel, api, payload);\n        };\n\n    /**\n     * Set state of single element\n     * @param  {module:zrender/Element} el\n     * @param  {string} state\n     */\n    function elSetState(el, state) {\n        if (el) {\n            el.trigger(state);\n            if (el.type === 'group') {\n                for (var i = 0; i < el.childCount(); i++) {\n                    elSetState(el.childAt(i), state);\n                }\n            }\n        }\n    }\n    /**\n     * @param  {module:echarts/data/List} data\n     * @param  {Object} payload\n     * @param  {string} state 'normal'|'emphasis'\n     * @inner\n     */\n    function toggleHighlight(data, payload, state) {\n        var dataIndex = modelUtil.queryDataIndex(data, payload);\n\n        if (dataIndex != null) {\n            zrUtil.each(modelUtil.normalizeToArray(dataIndex), function (dataIdx) {\n                elSetState(data.getItemGraphicEl(dataIdx), state);\n            });\n        }\n        else {\n            data.eachItemGraphicEl(function (el) {\n                elSetState(el, state);\n            });\n        }\n    }\n\n    // Enable Chart.extend.\n    clazzUtil.enableClassExtend(Chart, ['dispose']);\n\n    // Add capability of registerClass, getClass, hasClass, registerSubTypeDefaulter and so on.\n    clazzUtil.enableClassManagement(Chart, {registerWhenExtend: true});\n\n    module.exports = Chart;\n\n\n/***/ }),\n\n/***/ \"BgTn\":\n/***/ (function(module, exports) {\n\n\n\n    module.exports = (typeof window !== 'undefined' &&\n                ((window.requestAnimationFrame && window.requestAnimationFrame.bind(window))\n                // https://github.com/ecomfe/zrender/issues/189#issuecomment-224919809\n                || (window.msRequestAnimationFrame && window.msRequestAnimationFrame.bind(window))\n                || window.mozRequestAnimationFrame\n                || window.webkitRequestAnimationFrame)\n            )\n            || function (func) {\n                setTimeout(func, 16);\n            };\n\n\n\n/***/ }),\n\n/***/ \"BzeQ\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n\n    var zrUtil = __webpack_require__(\"nw1Z\");\n    var numberUtil = __webpack_require__(\"0+Kq\");\n    var parsePercent = numberUtil.parsePercent;\n\n    var STACK_PREFIX = '__ec_stack_';\n\n    function getSeriesStackId(seriesModel) {\n        return seriesModel.get('stack') || STACK_PREFIX + seriesModel.seriesIndex;\n    }\n\n    function getAxisKey(axis) {\n        return axis.dim + axis.index;\n    }\n\n    /**\n     * @param {Object} opt\n     * @param {module:echarts/coord/Axis} opt.axis Only support category axis currently.\n     * @param {number} opt.count Positive interger.\n     * @param {number} [opt.barWidth]\n     * @param {number} [opt.barMaxWidth]\n     * @param {number} [opt.barGap]\n     * @param {number} [opt.barCategoryGap]\n     * @return {Object} {width, offset, offsetCenter} If axis.type is not 'category', return undefined.\n     */\n    function getLayoutOnAxis(opt, api) {\n        var params = [];\n        var baseAxis = opt.axis;\n        var axisKey = 'axis0';\n\n        if (baseAxis.type !== 'category') {\n            return;\n        }\n        var bandWidth = baseAxis.getBandWidth();\n\n        for (var i = 0; i < opt.count || 0; i++) {\n            params.push(zrUtil.defaults({\n                bandWidth: bandWidth,\n                axisKey: axisKey,\n                stackId: STACK_PREFIX + i\n            }, opt));\n        }\n        var widthAndOffsets = doCalBarWidthAndOffset(params, api);\n\n        var result = [];\n        for (var i = 0; i < opt.count; i++) {\n            var item = widthAndOffsets[axisKey][STACK_PREFIX + i];\n            item.offsetCenter = item.offset + item.width / 2;\n            result.push(item);\n        }\n\n        return result;\n    }\n\n    function calBarWidthAndOffset(barSeries, api) {\n        var seriesInfoList = zrUtil.map(barSeries, function (seriesModel) {\n            var data = seriesModel.getData();\n            var cartesian = seriesModel.coordinateSystem;\n            var baseAxis = cartesian.getBaseAxis();\n            var axisExtent = baseAxis.getExtent();\n            var bandWidth = baseAxis.type === 'category'\n                ? baseAxis.getBandWidth()\n                : (Math.abs(axisExtent[1] - axisExtent[0]) / data.count());\n\n            var barWidth = parsePercent(\n                seriesModel.get('barWidth'), bandWidth\n            );\n            var barMaxWidth = parsePercent(\n                seriesModel.get('barMaxWidth'), bandWidth\n            );\n            var barGap = seriesModel.get('barGap');\n            var barCategoryGap = seriesModel.get('barCategoryGap');\n\n            return {\n                bandWidth: bandWidth,\n                barWidth: barWidth,\n                barMaxWidth: barMaxWidth,\n                barGap: barGap,\n                barCategoryGap: barCategoryGap,\n                axisKey: getAxisKey(baseAxis),\n                stackId: getSeriesStackId(seriesModel)\n            };\n        });\n\n        return doCalBarWidthAndOffset(seriesInfoList, api);\n    }\n\n    function doCalBarWidthAndOffset(seriesInfoList, api) {\n        // Columns info on each category axis. Key is cartesian name\n        var columnsMap = {};\n\n        zrUtil.each(seriesInfoList, function (seriesInfo, idx) {\n            var axisKey = seriesInfo.axisKey;\n            var bandWidth = seriesInfo.bandWidth;\n            var columnsOnAxis = columnsMap[axisKey] || {\n                bandWidth: bandWidth,\n                remainedWidth: bandWidth,\n                autoWidthCount: 0,\n                categoryGap: '20%',\n                gap: '30%',\n                stacks: {}\n            };\n            var stacks = columnsOnAxis.stacks;\n            columnsMap[axisKey] = columnsOnAxis;\n\n            var stackId = seriesInfo.stackId;\n\n            if (!stacks[stackId]) {\n                columnsOnAxis.autoWidthCount++;\n            }\n            stacks[stackId] = stacks[stackId] || {\n                width: 0,\n                maxWidth: 0\n            };\n\n            // Caution: In a single coordinate system, these barGrid attributes\n            // will be shared by series. Consider that they have default values,\n            // only the attributes set on the last series will work.\n            // Do not change this fact unless there will be a break change.\n\n            // TODO\n            var barWidth = seriesInfo.barWidth;\n            if (barWidth && !stacks[stackId].width) {\n                barWidth = Math.min(columnsOnAxis.remainedWidth, barWidth);\n                stacks[stackId].width = barWidth;\n                columnsOnAxis.remainedWidth -= barWidth;\n            }\n\n            var barMaxWidth = seriesInfo.barMaxWidth;\n            barMaxWidth && (stacks[stackId].maxWidth = barMaxWidth);\n            var barGap = seriesInfo.barGap;\n            (barGap != null) && (columnsOnAxis.gap = barGap);\n            var barCategoryGap = seriesInfo.barCategoryGap;\n            (barCategoryGap != null) && (columnsOnAxis.categoryGap = barCategoryGap);\n        });\n\n        var result = {};\n\n        zrUtil.each(columnsMap, function (columnsOnAxis, coordSysName) {\n\n            result[coordSysName] = {};\n\n            var stacks = columnsOnAxis.stacks;\n            var bandWidth = columnsOnAxis.bandWidth;\n            var categoryGap = parsePercent(columnsOnAxis.categoryGap, bandWidth);\n            var barGapPercent = parsePercent(columnsOnAxis.gap, 1);\n\n            var remainedWidth = columnsOnAxis.remainedWidth;\n            var autoWidthCount = columnsOnAxis.autoWidthCount;\n            var autoWidth = (remainedWidth - categoryGap)\n                / (autoWidthCount + (autoWidthCount - 1) * barGapPercent);\n            autoWidth = Math.max(autoWidth, 0);\n\n            // Find if any auto calculated bar exceeded maxBarWidth\n            zrUtil.each(stacks, function (column, stack) {\n                var maxWidth = column.maxWidth;\n                if (maxWidth && maxWidth < autoWidth) {\n                    maxWidth = Math.min(maxWidth, remainedWidth);\n                    if (column.width) {\n                        maxWidth = Math.min(maxWidth, column.width);\n                    }\n                    remainedWidth -= maxWidth;\n                    column.width = maxWidth;\n                    autoWidthCount--;\n                }\n            });\n\n            // Recalculate width again\n            autoWidth = (remainedWidth - categoryGap)\n                / (autoWidthCount + (autoWidthCount - 1) * barGapPercent);\n            autoWidth = Math.max(autoWidth, 0);\n\n            var widthSum = 0;\n            var lastColumn;\n            zrUtil.each(stacks, function (column, idx) {\n                if (!column.width) {\n                    column.width = autoWidth;\n                }\n                lastColumn = column;\n                widthSum += column.width * (1 + barGapPercent);\n            });\n            if (lastColumn) {\n                widthSum -= lastColumn.width * barGapPercent;\n            }\n\n            var offset = -widthSum / 2;\n            zrUtil.each(stacks, function (column, stackId) {\n                result[coordSysName][stackId] = result[coordSysName][stackId] || {\n                    offset: offset,\n                    width: column.width\n                };\n\n                offset += column.width * (1 + barGapPercent);\n            });\n        });\n\n        return result;\n    }\n\n    /**\n     * @param {string} seriesType\n     * @param {module:echarts/model/Global} ecModel\n     * @param {module:echarts/ExtensionAPI} api\n     */\n    function barLayoutGrid(seriesType, ecModel, api) {\n\n        var barWidthAndOffset = calBarWidthAndOffset(\n            zrUtil.filter(\n                ecModel.getSeriesByType(seriesType),\n                function (seriesModel) {\n                    return !ecModel.isSeriesFiltered(seriesModel)\n                        && seriesModel.coordinateSystem\n                        && seriesModel.coordinateSystem.type === 'cartesian2d';\n                }\n            )\n        );\n\n        var lastStackCoords = {};\n        var lastStackCoordsOrigin = {};\n\n        ecModel.eachSeriesByType(seriesType, function (seriesModel) {\n\n            // Check series coordinate, do layout for cartesian2d only\n            if (seriesModel.coordinateSystem.type !== 'cartesian2d') {\n                return;\n            }\n\n            var data = seriesModel.getData();\n            var cartesian = seriesModel.coordinateSystem;\n            var baseAxis = cartesian.getBaseAxis();\n\n            var stackId = getSeriesStackId(seriesModel);\n            var columnLayoutInfo = barWidthAndOffset[getAxisKey(baseAxis)][stackId];\n            var columnOffset = columnLayoutInfo.offset;\n            var columnWidth = columnLayoutInfo.width;\n            var valueAxis = cartesian.getOtherAxis(baseAxis);\n\n            var barMinHeight = seriesModel.get('barMinHeight') || 0;\n\n            var valueAxisStart = baseAxis.onZero\n                ? valueAxis.toGlobalCoord(valueAxis.dataToCoord(0))\n                : valueAxis.getGlobalExtent()[0];\n\n            var coords = cartesian.dataToPoints(data, true);\n            lastStackCoords[stackId] = lastStackCoords[stackId] || [];\n            lastStackCoordsOrigin[stackId] = lastStackCoordsOrigin[stackId] || []; // Fix #4243\n\n            data.setLayout({\n                offset: columnOffset,\n                size: columnWidth\n            });\n\n            data.each(valueAxis.dim, function (value, idx) {\n                if (isNaN(value)) {\n                    return;\n                }\n\n                if (!lastStackCoords[stackId][idx]) {\n                    lastStackCoords[stackId][idx] = {\n                        p: valueAxisStart, // Positive stack\n                        n: valueAxisStart  // Negative stack\n                    };\n                    lastStackCoordsOrigin[stackId][idx] = {\n                        p: valueAxisStart, // Positive stack\n                        n: valueAxisStart  // Negative stack\n                    };\n                }\n                var sign = value >= 0 ? 'p' : 'n';\n                var coord = coords[idx];\n                var lastCoord = lastStackCoords[stackId][idx][sign];\n                var lastCoordOrigin = lastStackCoordsOrigin[stackId][idx][sign];\n                var x;\n                var y;\n                var width;\n                var height;\n\n                if (valueAxis.isHorizontal()) {\n                    x = lastCoord;\n                    y = coord[1] + columnOffset;\n                    width = coord[0] - lastCoordOrigin;\n                    height = columnWidth;\n\n                    lastStackCoordsOrigin[stackId][idx][sign] += width;\n                    if (Math.abs(width) < barMinHeight) {\n                        width = (width < 0 ? -1 : 1) * barMinHeight;\n                    }\n                    lastStackCoords[stackId][idx][sign] += width;\n                }\n                else {\n                    x = coord[0] + columnOffset;\n                    y = lastCoord;\n                    width = columnWidth;\n                    height = coord[1] - lastCoordOrigin;\n\n                    lastStackCoordsOrigin[stackId][idx][sign] += height;\n                    if (Math.abs(height) < barMinHeight) {\n                        // Include zero to has a positive bar\n                        height = (height <= 0 ? -1 : 1) * barMinHeight;\n                    }\n                    lastStackCoords[stackId][idx][sign] += height;\n                }\n\n                data.setItemLayout(idx, {\n                    x: x,\n                    y: y,\n                    width: width,\n                    height: height\n                });\n            }, true);\n\n        }, this);\n    }\n\n    barLayoutGrid.getLayoutOnAxis = getLayoutOnAxis;\n\n    module.exports = barLayoutGrid;\n\n\n/***/ }),\n\n/***/ \"CC7E\":\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * Path element\n * @module zrender/graphic/Path\n */\n\n\n\n    var Displayable = __webpack_require__(\"g07m\");\n    var zrUtil = __webpack_require__(\"nw1Z\");\n    var PathProxy = __webpack_require__(\"f/vB\");\n    var pathContain = __webpack_require__(\"J2oE\");\n\n    var Pattern = __webpack_require__(\"D8ol\");\n    var getCanvasPattern = Pattern.prototype.getCanvasPattern;\n\n    var abs = Math.abs;\n\n    var pathProxyForDraw = new PathProxy(true);\n    /**\n     * @alias module:zrender/graphic/Path\n     * @extends module:zrender/graphic/Displayable\n     * @constructor\n     * @param {Object} opts\n     */\n    function Path(opts) {\n        Displayable.call(this, opts);\n\n        /**\n         * @type {module:zrender/core/PathProxy}\n         * @readOnly\n         */\n        this.path = null;\n    }\n\n    Path.prototype = {\n\n        constructor: Path,\n\n        type: 'path',\n\n        __dirtyPath: true,\n\n        strokeContainThreshold: 5,\n\n        brush: function (ctx, prevEl) {\n            var style = this.style;\n            var path = this.path || pathProxyForDraw;\n            var hasStroke = style.hasStroke();\n            var hasFill = style.hasFill();\n            var fill = style.fill;\n            var stroke = style.stroke;\n            var hasFillGradient = hasFill && !!(fill.colorStops);\n            var hasStrokeGradient = hasStroke && !!(stroke.colorStops);\n            var hasFillPattern = hasFill && !!(fill.image);\n            var hasStrokePattern = hasStroke && !!(stroke.image);\n\n            style.bind(ctx, this, prevEl);\n            this.setTransform(ctx);\n\n            if (this.__dirty) {\n                var rect;\n                // Update gradient because bounding rect may changed\n                if (hasFillGradient) {\n                    rect = rect || this.getBoundingRect();\n                    this._fillGradient = style.getGradient(ctx, fill, rect);\n                }\n                if (hasStrokeGradient) {\n                    rect = rect || this.getBoundingRect();\n                    this._strokeGradient = style.getGradient(ctx, stroke, rect);\n                }\n            }\n            // Use the gradient or pattern\n            if (hasFillGradient) {\n                // PENDING If may have affect the state\n                ctx.fillStyle = this._fillGradient;\n            }\n            else if (hasFillPattern) {\n                ctx.fillStyle = getCanvasPattern.call(fill, ctx);\n            }\n            if (hasStrokeGradient) {\n                ctx.strokeStyle = this._strokeGradient;\n            }\n            else if (hasStrokePattern) {\n                ctx.strokeStyle = getCanvasPattern.call(stroke, ctx);\n            }\n\n            var lineDash = style.lineDash;\n            var lineDashOffset = style.lineDashOffset;\n\n            var ctxLineDash = !!ctx.setLineDash;\n\n            // Update path sx, sy\n            var scale = this.getGlobalScale();\n            path.setScale(scale[0], scale[1]);\n\n            // Proxy context\n            // Rebuild path in following 2 cases\n            // 1. Path is dirty\n            // 2. Path needs javascript implemented lineDash stroking.\n            //    In this case, lineDash information will not be saved in PathProxy\n            if (this.__dirtyPath\n                || (lineDash && !ctxLineDash && hasStroke)\n            ) {\n                path.beginPath(ctx);\n\n                // Setting line dash before build path\n                if (lineDash && !ctxLineDash) {\n                    path.setLineDash(lineDash);\n                    path.setLineDashOffset(lineDashOffset);\n                }\n\n                this.buildPath(path, this.shape, false);\n\n                // Clear path dirty flag\n                if (this.path) {\n                    this.__dirtyPath = false;\n                }\n            }\n            else {\n                // Replay path building\n                ctx.beginPath();\n                this.path.rebuildPath(ctx);\n            }\n\n            hasFill && path.fill(ctx);\n\n            if (lineDash && ctxLineDash) {\n                ctx.setLineDash(lineDash);\n                ctx.lineDashOffset = lineDashOffset;\n            }\n\n            hasStroke && path.stroke(ctx);\n\n            if (lineDash && ctxLineDash) {\n                // PENDING\n                // Remove lineDash\n                ctx.setLineDash([]);\n            }\n\n\n            this.restoreTransform(ctx);\n\n            // Draw rect text\n            if (style.text != null) {\n                // var rect = this.getBoundingRect();\n                this.drawRectText(ctx, this.getBoundingRect());\n            }\n        },\n\n        // When bundling path, some shape may decide if use moveTo to begin a new subpath or closePath\n        // Like in circle\n        buildPath: function (ctx, shapeCfg, inBundle) {},\n\n        createPathProxy: function () {\n            this.path = new PathProxy();\n        },\n\n        getBoundingRect: function () {\n            var rect = this._rect;\n            var style = this.style;\n            var needsUpdateRect = !rect;\n            if (needsUpdateRect) {\n                var path = this.path;\n                if (!path) {\n                    // Create path on demand.\n                    path = this.path = new PathProxy();\n                }\n                if (this.__dirtyPath) {\n                    path.beginPath();\n                    this.buildPath(path, this.shape, false);\n                }\n                rect = path.getBoundingRect();\n            }\n            this._rect = rect;\n\n            if (style.hasStroke()) {\n                // Needs update rect with stroke lineWidth when\n                // 1. Element changes scale or lineWidth\n                // 2. Shape is changed\n                var rectWithStroke = this._rectWithStroke || (this._rectWithStroke = rect.clone());\n                if (this.__dirty || needsUpdateRect) {\n                    rectWithStroke.copy(rect);\n                    // FIXME Must after updateTransform\n                    var w = style.lineWidth;\n                    // PENDING, Min line width is needed when line is horizontal or vertical\n                    var lineScale = style.strokeNoScale ? this.getLineScale() : 1;\n\n                    // Only add extra hover lineWidth when there are no fill\n                    if (!style.hasFill()) {\n                        w = Math.max(w, this.strokeContainThreshold || 4);\n                    }\n                    // Consider line width\n                    // Line scale can't be 0;\n                    if (lineScale > 1e-10) {\n                        rectWithStroke.width += w / lineScale;\n                        rectWithStroke.height += w / lineScale;\n                        rectWithStroke.x -= w / lineScale / 2;\n                        rectWithStroke.y -= w / lineScale / 2;\n                    }\n                }\n\n                // Return rect with stroke\n                return rectWithStroke;\n            }\n\n            return rect;\n        },\n\n        contain: function (x, y) {\n            var localPos = this.transformCoordToLocal(x, y);\n            var rect = this.getBoundingRect();\n            var style = this.style;\n            x = localPos[0];\n            y = localPos[1];\n\n            if (rect.contain(x, y)) {\n                var pathData = this.path.data;\n                if (style.hasStroke()) {\n                    var lineWidth = style.lineWidth;\n                    var lineScale = style.strokeNoScale ? this.getLineScale() : 1;\n                    // Line scale can't be 0;\n                    if (lineScale > 1e-10) {\n                        // Only add extra hover lineWidth when there are no fill\n                        if (!style.hasFill()) {\n                            lineWidth = Math.max(lineWidth, this.strokeContainThreshold);\n                        }\n                        if (pathContain.containStroke(\n                            pathData, lineWidth / lineScale, x, y\n                        )) {\n                            return true;\n                        }\n                    }\n                }\n                if (style.hasFill()) {\n                    return pathContain.contain(pathData, x, y);\n                }\n            }\n            return false;\n        },\n\n        /**\n         * @param  {boolean} dirtyPath\n         */\n        dirty: function (dirtyPath) {\n            if (dirtyPath == null) {\n                dirtyPath = true;\n            }\n            // Only mark dirty, not mark clean\n            if (dirtyPath) {\n                this.__dirtyPath = dirtyPath;\n                this._rect = null;\n            }\n\n            this.__dirty = true;\n\n            this.__zr && this.__zr.refresh();\n\n            // Used as a clipping path\n            if (this.__clipTarget) {\n                this.__clipTarget.dirty();\n            }\n        },\n\n        /**\n         * Alias for animate('shape')\n         * @param {boolean} loop\n         */\n        animateShape: function (loop) {\n            return this.animate('shape', loop);\n        },\n\n        // Overwrite attrKV\n        attrKV: function (key, value) {\n            // FIXME\n            if (key === 'shape') {\n                this.setShape(value);\n                this.__dirtyPath = true;\n                this._rect = null;\n            }\n            else {\n                Displayable.prototype.attrKV.call(this, key, value);\n            }\n        },\n\n        /**\n         * @param {Object|string} key\n         * @param {*} value\n         */\n        setShape: function (key, value) {\n            var shape = this.shape;\n            // Path from string may not have shape\n            if (shape) {\n                if (zrUtil.isObject(key)) {\n                    for (var name in key) {\n                        if (key.hasOwnProperty(name)) {\n                            shape[name] = key[name];\n                        }\n                    }\n                }\n                else {\n                    shape[key] = value;\n                }\n                this.dirty(true);\n            }\n            return this;\n        },\n\n        getLineScale: function () {\n            var m = this.transform;\n            // Get the line scale.\n            // Determinant of `m` means how much the area is enlarged by the\n            // transformation. So its square root can be used as a scale factor\n            // for width.\n            return m && abs(m[0] - 1) > 1e-10 && abs(m[3] - 1) > 1e-10\n                ? Math.sqrt(abs(m[0] * m[3] - m[2] * m[1]))\n                : 1;\n        }\n    };\n\n    /**\n     * 扩展一个 Path element, 比如星形，圆等。\n     * Extend a path element\n     * @param {Object} props\n     * @param {string} props.type Path type\n     * @param {Function} props.init Initialize\n     * @param {Function} props.buildPath Overwrite buildPath method\n     * @param {Object} [props.style] Extended default style config\n     * @param {Object} [props.shape] Extended default shape config\n     */\n    Path.extend = function (defaults) {\n        var Sub = function (opts) {\n            Path.call(this, opts);\n\n            if (defaults.style) {\n                // Extend default style\n                this.style.extendFrom(defaults.style, false);\n            }\n\n            // Extend default shape\n            var defaultShape = defaults.shape;\n            if (defaultShape) {\n                this.shape = this.shape || {};\n                var thisShape = this.shape;\n                for (var name in defaultShape) {\n                    if (\n                        ! thisShape.hasOwnProperty(name)\n                        && defaultShape.hasOwnProperty(name)\n                    ) {\n                        thisShape[name] = defaultShape[name];\n                    }\n                }\n            }\n\n            defaults.init && defaults.init.call(this, opts);\n        };\n\n        zrUtil.inherits(Sub, Path);\n\n        // FIXME 不能 extend position, rotation 等引用对象\n        for (var name in defaults) {\n            // Extending prototype values and methods\n            if (name !== 'style' && name !== 'shape') {\n                Sub.prototype[name] = defaults[name];\n            }\n        }\n\n        return Sub;\n    };\n\n    zrUtil.inherits(Path, Displayable);\n\n    module.exports = Path;\n\n\n/***/ }),\n\n/***/ \"Cwwa\":\n/***/ (function(module, exports, __webpack_require__) {\n\n/* WEBPACK VAR INJECTION */(function(global) {// Enable DEV mode when using source code without build. which has no __DEV__ variable\n// In build process 'typeof __DEV__' will be replace with 'boolean'\n// So this code will be removed or disabled anyway after built.\nif (typeof __DEV__ === 'undefined') {\n    // In browser\n    if (typeof window !== 'undefined') {\n        window.__DEV__ = true;\n    }\n    // In node\n    else if (typeof global !== 'undefined') {\n        global.__DEV__ = true;\n    }\n}\n\n/*!\n * ECharts, a javascript interactive chart library.\n *\n * Copyright (c) 2015, Baidu Inc.\n * All rights reserved.\n *\n * LICENSE\n * https://github.com/ecomfe/echarts/blob/master/LICENSE.txt\n */\n\n/**\n * @module echarts\n */\n\n\n    var env = __webpack_require__(\"020c\");\n\n    var GlobalModel = __webpack_require__(\"MU/F\");\n    var ExtensionAPI = __webpack_require__(\"jTvm\");\n    var CoordinateSystemManager = __webpack_require__(\"o/Er\");\n    var OptionManager = __webpack_require__(\"Fhmo\");\n\n    var ComponentModel = __webpack_require__(\"wvll\");\n    var SeriesModel = __webpack_require__(\"vd24\");\n\n    var ComponentView = __webpack_require__(\"D9oD\");\n    var ChartView = __webpack_require__(\"BOb8\");\n    var graphic = __webpack_require__(\"y2WT\");\n    var modelUtil = __webpack_require__(\"LFYx\");\n    var throttle = __webpack_require__(\"fIB7\");\n\n    var zrender = __webpack_require__(\"QXe6\");\n    var zrUtil = __webpack_require__(\"nw1Z\");\n    var colorTool = __webpack_require__(\"cwCJ\");\n    var Eventful = __webpack_require__(\"feXt\");\n    var timsort = __webpack_require__(\"TQiH\");\n\n    var each = zrUtil.each;\n    var parseClassType = ComponentModel.parseClassType;\n\n    var PRIORITY_PROCESSOR_FILTER = 1000;\n    var PRIORITY_PROCESSOR_STATISTIC = 5000;\n\n\n    var PRIORITY_VISUAL_LAYOUT = 1000;\n    var PRIORITY_VISUAL_GLOBAL = 2000;\n    var PRIORITY_VISUAL_CHART = 3000;\n    var PRIORITY_VISUAL_COMPONENT = 4000;\n    // FIXME\n    // necessary?\n    var PRIORITY_VISUAL_BRUSH = 5000;\n\n    // Main process have three entries: `setOption`, `dispatchAction` and `resize`,\n    // where they must not be invoked nestedly, except the only case: invoke\n    // dispatchAction with updateMethod \"none\" in main process.\n    // This flag is used to carry out this rule.\n    // All events will be triggered out side main process (i.e. when !this[IN_MAIN_PROCESS]).\n    var IN_MAIN_PROCESS = '__flagInMainProcess';\n    var HAS_GRADIENT_OR_PATTERN_BG = '__hasGradientOrPatternBg';\n    var OPTION_UPDATED = '__optionUpdated';\n    var ACTION_REG = /^[a-zA-Z0-9_]+$/;\n\n    function createRegisterEventWithLowercaseName(method) {\n        return function (eventName, handler, context) {\n            // Event name is all lowercase\n            eventName = eventName && eventName.toLowerCase();\n            Eventful.prototype[method].call(this, eventName, handler, context);\n        };\n    }\n\n    /**\n     * @module echarts~MessageCenter\n     */\n    function MessageCenter() {\n        Eventful.call(this);\n    }\n    MessageCenter.prototype.on = createRegisterEventWithLowercaseName('on');\n    MessageCenter.prototype.off = createRegisterEventWithLowercaseName('off');\n    MessageCenter.prototype.one = createRegisterEventWithLowercaseName('one');\n    zrUtil.mixin(MessageCenter, Eventful);\n\n    /**\n     * @module echarts~ECharts\n     */\n    function ECharts(dom, theme, opts) {\n        opts = opts || {};\n\n        // Get theme by name\n        if (typeof theme === 'string') {\n            theme = themeStorage[theme];\n        }\n\n        /**\n         * @type {string}\n         */\n        this.id;\n        /**\n         * Group id\n         * @type {string}\n         */\n        this.group;\n        /**\n         * @type {HTMLDomElement}\n         * @private\n         */\n        this._dom = dom;\n        /**\n         * @type {module:zrender/ZRender}\n         * @private\n         */\n        var zr = this._zr = zrender.init(dom, {\n            renderer: opts.renderer || 'canvas',\n            devicePixelRatio: opts.devicePixelRatio,\n            width: opts.width,\n            height: opts.height\n        });\n\n        /**\n         * Expect 60 pfs.\n         * @type {Function}\n         * @private\n         */\n        this._throttledZrFlush = throttle.throttle(zrUtil.bind(zr.flush, zr), 17);\n\n        /**\n         * @type {Object}\n         * @private\n         */\n        this._theme = zrUtil.clone(theme);\n\n        /**\n         * @type {Array.<module:echarts/view/Chart>}\n         * @private\n         */\n        this._chartsViews = [];\n\n        /**\n         * @type {Object.<string, module:echarts/view/Chart>}\n         * @private\n         */\n        this._chartsMap = {};\n\n        /**\n         * @type {Array.<module:echarts/view/Component>}\n         * @private\n         */\n        this._componentsViews = [];\n\n        /**\n         * @type {Object.<string, module:echarts/view/Component>}\n         * @private\n         */\n        this._componentsMap = {};\n\n        /**\n         * @type {module:echarts/CoordinateSystem}\n         * @private\n         */\n        this._coordSysMgr = new CoordinateSystemManager();\n\n        /**\n         * @type {module:echarts/ExtensionAPI}\n         * @private\n         */\n        this._api = createExtensionAPI(this);\n\n        Eventful.call(this);\n\n        /**\n         * @type {module:echarts~MessageCenter}\n         * @private\n         */\n        this._messageCenter = new MessageCenter();\n\n        // Init mouse events\n        this._initEvents();\n\n        // In case some people write `window.onresize = chart.resize`\n        this.resize = zrUtil.bind(this.resize, this);\n\n        // Can't dispatch action during rendering procedure\n        this._pendingActions = [];\n        // Sort on demand\n        function prioritySortFunc(a, b) {\n            return a.prio - b.prio;\n        }\n        timsort(visualFuncs, prioritySortFunc);\n        timsort(dataProcessorFuncs, prioritySortFunc);\n\n        zr.animation.on('frame', this._onframe, this);\n\n        // ECharts instance can be used as value.\n        zrUtil.setAsPrimitive(this);\n    }\n\n    var echartsProto = ECharts.prototype;\n\n    echartsProto._onframe = function () {\n        // Lazy update\n        if (this[OPTION_UPDATED]) {\n            var silent = this[OPTION_UPDATED].silent;\n\n            this[IN_MAIN_PROCESS] = true;\n\n            updateMethods.prepareAndUpdate.call(this);\n\n            this[IN_MAIN_PROCESS] = false;\n\n            this[OPTION_UPDATED] = false;\n\n            flushPendingActions.call(this, silent);\n\n            triggerUpdatedEvent.call(this, silent);\n        }\n    };\n    /**\n     * @return {HTMLDomElement}\n     */\n    echartsProto.getDom = function () {\n        return this._dom;\n    };\n\n    /**\n     * @return {module:zrender~ZRender}\n     */\n    echartsProto.getZr = function () {\n        return this._zr;\n    };\n\n    /**\n     * Usage:\n     * chart.setOption(option, notMerge, lazyUpdate);\n     * chart.setOption(option, {\n     *     notMerge: ...,\n     *     lazyUpdate: ...,\n     *     silent: ...\n     * });\n     *\n     * @param {Object} option\n     * @param {Object|boolean} [opts] opts or notMerge.\n     * @param {boolean} [opts.notMerge=false]\n     * @param {boolean} [opts.lazyUpdate=false] Useful when setOption frequently.\n     */\n    echartsProto.setOption = function (option, notMerge, lazyUpdate) {\n        if (__DEV__) {\n            zrUtil.assert(!this[IN_MAIN_PROCESS], '`setOption` should not be called during main process.');\n        }\n\n        var silent;\n        if (zrUtil.isObject(notMerge)) {\n            lazyUpdate = notMerge.lazyUpdate;\n            silent = notMerge.silent;\n            notMerge = notMerge.notMerge;\n        }\n\n        this[IN_MAIN_PROCESS] = true;\n\n        if (!this._model || notMerge) {\n            var optionManager = new OptionManager(this._api);\n            var theme = this._theme;\n            var ecModel = this._model = new GlobalModel(null, null, theme, optionManager);\n            ecModel.init(null, null, theme, optionManager);\n        }\n\n        this._model.setOption(option, optionPreprocessorFuncs);\n\n        if (lazyUpdate) {\n            this[OPTION_UPDATED] = {silent: silent};\n            this[IN_MAIN_PROCESS] = false;\n        }\n        else {\n            updateMethods.prepareAndUpdate.call(this);\n            // Ensure zr refresh sychronously, and then pixel in canvas can be\n            // fetched after `setOption`.\n            this._zr.flush();\n\n            this[OPTION_UPDATED] = false;\n            this[IN_MAIN_PROCESS] = false;\n\n            flushPendingActions.call(this, silent);\n            triggerUpdatedEvent.call(this, silent);\n        }\n    };\n\n    /**\n     * @DEPRECATED\n     */\n    echartsProto.setTheme = function () {\n        console.log('ECharts#setTheme() is DEPRECATED in ECharts 3.0');\n    };\n\n    /**\n     * @return {module:echarts/model/Global}\n     */\n    echartsProto.getModel = function () {\n        return this._model;\n    };\n\n    /**\n     * @return {Object}\n     */\n    echartsProto.getOption = function () {\n        return this._model && this._model.getOption();\n    };\n\n    /**\n     * @return {number}\n     */\n    echartsProto.getWidth = function () {\n        return this._zr.getWidth();\n    };\n\n    /**\n     * @return {number}\n     */\n    echartsProto.getHeight = function () {\n        return this._zr.getHeight();\n    };\n\n    /**\n     * @return {number}\n     */\n    echartsProto.getDevicePixelRatio = function () {\n        return this._zr.painter.dpr || window.devicePixelRatio || 1;\n    };\n\n    /**\n     * Get canvas which has all thing rendered\n     * @param {Object} opts\n     * @param {string} [opts.backgroundColor]\n     */\n    echartsProto.getRenderedCanvas = function (opts) {\n        if (!env.canvasSupported) {\n            return;\n        }\n        opts = opts || {};\n        opts.pixelRatio = opts.pixelRatio || 1;\n        opts.backgroundColor = opts.backgroundColor\n            || this._model.get('backgroundColor');\n        var zr = this._zr;\n        var list = zr.storage.getDisplayList();\n        // Stop animations\n        zrUtil.each(list, function (el) {\n            el.stopAnimation(true);\n        });\n        return zr.painter.getRenderedCanvas(opts);\n    };\n    /**\n     * @return {string}\n     * @param {Object} opts\n     * @param {string} [opts.type='png']\n     * @param {string} [opts.pixelRatio=1]\n     * @param {string} [opts.backgroundColor]\n     * @param {string} [opts.excludeComponents]\n     */\n    echartsProto.getDataURL = function (opts) {\n        opts = opts || {};\n        var excludeComponents = opts.excludeComponents;\n        var ecModel = this._model;\n        var excludesComponentViews = [];\n        var self = this;\n\n        each(excludeComponents, function (componentType) {\n            ecModel.eachComponent({\n                mainType: componentType\n            }, function (component) {\n                var view = self._componentsMap[component.__viewId];\n                if (!view.group.ignore) {\n                    excludesComponentViews.push(view);\n                    view.group.ignore = true;\n                }\n            });\n        });\n\n        var url = this.getRenderedCanvas(opts).toDataURL(\n            'image/' + (opts && opts.type || 'png')\n        );\n\n        each(excludesComponentViews, function (view) {\n            view.group.ignore = false;\n        });\n        return url;\n    };\n\n\n    /**\n     * @return {string}\n     * @param {Object} opts\n     * @param {string} [opts.type='png']\n     * @param {string} [opts.pixelRatio=1]\n     * @param {string} [opts.backgroundColor]\n     */\n    echartsProto.getConnectedDataURL = function (opts) {\n        if (!env.canvasSupported) {\n            return;\n        }\n        var groupId = this.group;\n        var mathMin = Math.min;\n        var mathMax = Math.max;\n        var MAX_NUMBER = Infinity;\n        if (connectedGroups[groupId]) {\n            var left = MAX_NUMBER;\n            var top = MAX_NUMBER;\n            var right = -MAX_NUMBER;\n            var bottom = -MAX_NUMBER;\n            var canvasList = [];\n            var dpr = (opts && opts.pixelRatio) || 1;\n\n            zrUtil.each(instances, function (chart, id) {\n                if (chart.group === groupId) {\n                    var canvas = chart.getRenderedCanvas(\n                        zrUtil.clone(opts)\n                    );\n                    var boundingRect = chart.getDom().getBoundingClientRect();\n                    left = mathMin(boundingRect.left, left);\n                    top = mathMin(boundingRect.top, top);\n                    right = mathMax(boundingRect.right, right);\n                    bottom = mathMax(boundingRect.bottom, bottom);\n                    canvasList.push({\n                        dom: canvas,\n                        left: boundingRect.left,\n                        top: boundingRect.top\n                    });\n                }\n            });\n\n            left *= dpr;\n            top *= dpr;\n            right *= dpr;\n            bottom *= dpr;\n            var width = right - left;\n            var height = bottom - top;\n            var targetCanvas = zrUtil.createCanvas();\n            targetCanvas.width = width;\n            targetCanvas.height = height;\n            var zr = zrender.init(targetCanvas);\n\n            each(canvasList, function (item) {\n                var img = new graphic.Image({\n                    style: {\n                        x: item.left * dpr - left,\n                        y: item.top * dpr - top,\n                        image: item.dom\n                    }\n                });\n                zr.add(img);\n            });\n            zr.refreshImmediately();\n\n            return targetCanvas.toDataURL('image/' + (opts && opts.type || 'png'));\n        }\n        else {\n            return this.getDataURL(opts);\n        }\n    };\n\n    /**\n     * Convert from logical coordinate system to pixel coordinate system.\n     * See CoordinateSystem#convertToPixel.\n     * @param {string|Object} finder\n     *        If string, e.g., 'geo', means {geoIndex: 0}.\n     *        If Object, could contain some of these properties below:\n     *        {\n     *            seriesIndex / seriesId / seriesName,\n     *            geoIndex / geoId, geoName,\n     *            bmapIndex / bmapId / bmapName,\n     *            xAxisIndex / xAxisId / xAxisName,\n     *            yAxisIndex / yAxisId / yAxisName,\n     *            gridIndex / gridId / gridName,\n     *            ... (can be extended)\n     *        }\n     * @param {Array|number} value\n     * @return {Array|number} result\n     */\n    echartsProto.convertToPixel = zrUtil.curry(doConvertPixel, 'convertToPixel');\n\n    /**\n     * Convert from pixel coordinate system to logical coordinate system.\n     * See CoordinateSystem#convertFromPixel.\n     * @param {string|Object} finder\n     *        If string, e.g., 'geo', means {geoIndex: 0}.\n     *        If Object, could contain some of these properties below:\n     *        {\n     *            seriesIndex / seriesId / seriesName,\n     *            geoIndex / geoId / geoName,\n     *            bmapIndex / bmapId / bmapName,\n     *            xAxisIndex / xAxisId / xAxisName,\n     *            yAxisIndex / yAxisId / yAxisName\n     *            gridIndex / gridId / gridName,\n     *            ... (can be extended)\n     *        }\n     * @param {Array|number} value\n     * @return {Array|number} result\n     */\n    echartsProto.convertFromPixel = zrUtil.curry(doConvertPixel, 'convertFromPixel');\n\n    function doConvertPixel(methodName, finder, value) {\n        var ecModel = this._model;\n        var coordSysList = this._coordSysMgr.getCoordinateSystems();\n        var result;\n\n        finder = modelUtil.parseFinder(ecModel, finder);\n\n        for (var i = 0; i < coordSysList.length; i++) {\n            var coordSys = coordSysList[i];\n            if (coordSys[methodName]\n                && (result = coordSys[methodName](ecModel, finder, value)) != null\n            ) {\n                return result;\n            }\n        }\n\n        if (__DEV__) {\n            console.warn(\n                'No coordinate system that supports ' + methodName + ' found by the given finder.'\n            );\n        }\n    }\n\n    /**\n     * Is the specified coordinate systems or components contain the given pixel point.\n     * @param {string|Object} finder\n     *        If string, e.g., 'geo', means {geoIndex: 0}.\n     *        If Object, could contain some of these properties below:\n     *        {\n     *            seriesIndex / seriesId / seriesName,\n     *            geoIndex / geoId / geoName,\n     *            bmapIndex / bmapId / bmapName,\n     *            xAxisIndex / xAxisId / xAxisName,\n     *            yAxisIndex / yAxisId / yAxisName,\n     *            gridIndex / gridId / gridName,\n     *            ... (can be extended)\n     *        }\n     * @param {Array|number} value\n     * @return {boolean} result\n     */\n    echartsProto.containPixel = function (finder, value) {\n        var ecModel = this._model;\n        var result;\n\n        finder = modelUtil.parseFinder(ecModel, finder);\n\n        zrUtil.each(finder, function (models, key) {\n            key.indexOf('Models') >= 0 && zrUtil.each(models, function (model) {\n                var coordSys = model.coordinateSystem;\n                if (coordSys && coordSys.containPoint) {\n                    result |= !!coordSys.containPoint(value);\n                }\n                else if (key === 'seriesModels') {\n                    var view = this._chartsMap[model.__viewId];\n                    if (view && view.containPoint) {\n                        result |= view.containPoint(value, model);\n                    }\n                    else {\n                        if (__DEV__) {\n                            console.warn(key + ': ' + (view\n                                ? 'The found component do not support containPoint.'\n                                : 'No view mapping to the found component.'\n                            ));\n                        }\n                    }\n                }\n                else {\n                    if (__DEV__) {\n                        console.warn(key + ': containPoint is not supported');\n                    }\n                }\n            }, this);\n        }, this);\n\n        return !!result;\n    };\n\n    /**\n     * Get visual from series or data.\n     * @param {string|Object} finder\n     *        If string, e.g., 'series', means {seriesIndex: 0}.\n     *        If Object, could contain some of these properties below:\n     *        {\n     *            seriesIndex / seriesId / seriesName,\n     *            dataIndex / dataIndexInside\n     *        }\n     *        If dataIndex is not specified, series visual will be fetched,\n     *        but not data item visual.\n     *        If all of seriesIndex, seriesId, seriesName are not specified,\n     *        visual will be fetched from first series.\n     * @param {string} visualType 'color', 'symbol', 'symbolSize'\n     */\n    echartsProto.getVisual = function (finder, visualType) {\n        var ecModel = this._model;\n\n        finder = modelUtil.parseFinder(ecModel, finder, {defaultMainType: 'series'});\n\n        var seriesModel = finder.seriesModel;\n\n        if (__DEV__) {\n            if (!seriesModel) {\n                console.warn('There is no specified seires model');\n            }\n        }\n\n        var data = seriesModel.getData();\n\n        var dataIndexInside = finder.hasOwnProperty('dataIndexInside')\n            ? finder.dataIndexInside\n            : finder.hasOwnProperty('dataIndex')\n            ? data.indexOfRawIndex(finder.dataIndex)\n            : null;\n\n        return dataIndexInside != null\n            ? data.getItemVisual(dataIndexInside, visualType)\n            : data.getVisual(visualType);\n    };\n\n    /**\n     * Get view of corresponding component model\n     * @param  {module:echarts/model/Component} componentModel\n     * @return {module:echarts/view/Component}\n     */\n    echartsProto.getViewOfComponentModel = function (componentModel) {\n        return this._componentsMap[componentModel.__viewId];\n    };\n\n    /**\n     * Get view of corresponding series model\n     * @param  {module:echarts/model/Series} seriesModel\n     * @return {module:echarts/view/Chart}\n     */\n    echartsProto.getViewOfSeriesModel = function (seriesModel) {\n        return this._chartsMap[seriesModel.__viewId];\n    };\n\n\n    var updateMethods = {\n\n        /**\n         * @param {Object} payload\n         * @private\n         */\n        update: function (payload) {\n            // console.profile && console.profile('update');\n\n            var ecModel = this._model;\n            var api = this._api;\n            var coordSysMgr = this._coordSysMgr;\n            var zr = this._zr;\n            // update before setOption\n            if (!ecModel) {\n                return;\n            }\n\n            // Fixme First time update ?\n            ecModel.restoreData();\n\n            // TODO\n            // Save total ecModel here for undo/redo (after restoring data and before processing data).\n            // Undo (restoration of total ecModel) can be carried out in 'action' or outside API call.\n\n            // Create new coordinate system each update\n            // In LineView may save the old coordinate system and use it to get the orignal point\n            coordSysMgr.create(this._model, this._api);\n\n            processData.call(this, ecModel, api);\n\n            stackSeriesData.call(this, ecModel);\n\n            coordSysMgr.update(ecModel, api);\n\n            doVisualEncoding.call(this, ecModel, payload);\n\n            doRender.call(this, ecModel, payload);\n\n            // Set background\n            var backgroundColor = ecModel.get('backgroundColor') || 'transparent';\n\n            var painter = zr.painter;\n            // TODO all use clearColor ?\n            if (painter.isSingleCanvas && painter.isSingleCanvas()) {\n                zr.configLayer(0, {\n                    clearColor: backgroundColor\n                });\n            }\n            else {\n                // In IE8\n                if (!env.canvasSupported) {\n                    var colorArr = colorTool.parse(backgroundColor);\n                    backgroundColor = colorTool.stringify(colorArr, 'rgb');\n                    if (colorArr[3] === 0) {\n                        backgroundColor = 'transparent';\n                    }\n                }\n                if (backgroundColor.colorStops || backgroundColor.image) {\n                    // Gradient background\n                    // FIXME Fixed layer？\n                    zr.configLayer(0, {\n                        clearColor: backgroundColor\n                    });\n                    this[HAS_GRADIENT_OR_PATTERN_BG] = true;\n\n                    this._dom.style.background = 'transparent';\n                }\n                else {\n                    if (this[HAS_GRADIENT_OR_PATTERN_BG]) {\n                        zr.configLayer(0, {\n                            clearColor: null\n                        });\n                    }\n                    this[HAS_GRADIENT_OR_PATTERN_BG] = false;\n\n                    this._dom.style.background = backgroundColor;\n                }\n            }\n\n            each(postUpdateFuncs, function (func) {\n                func(ecModel, api);\n            });\n\n            // console.profile && console.profileEnd('update');\n        },\n\n        /**\n         * @param {Object} payload\n         * @private\n         */\n        updateView: function (payload) {\n            var ecModel = this._model;\n\n            // update before setOption\n            if (!ecModel) {\n                return;\n            }\n\n            ecModel.eachSeries(function (seriesModel) {\n                seriesModel.getData().clearAllVisual();\n            });\n\n            doVisualEncoding.call(this, ecModel, payload);\n\n            invokeUpdateMethod.call(this, 'updateView', ecModel, payload);\n        },\n\n        /**\n         * @param {Object} payload\n         * @private\n         */\n        updateVisual: function (payload) {\n            var ecModel = this._model;\n\n            // update before setOption\n            if (!ecModel) {\n                return;\n            }\n\n            ecModel.eachSeries(function (seriesModel) {\n                seriesModel.getData().clearAllVisual();\n            });\n\n            doVisualEncoding.call(this, ecModel, payload, true);\n\n            invokeUpdateMethod.call(this, 'updateVisual', ecModel, payload);\n        },\n\n        /**\n         * @param {Object} payload\n         * @private\n         */\n        updateLayout: function (payload) {\n            var ecModel = this._model;\n\n            // update before setOption\n            if (!ecModel) {\n                return;\n            }\n\n            doLayout.call(this, ecModel, payload);\n\n            invokeUpdateMethod.call(this, 'updateLayout', ecModel, payload);\n        },\n\n        /**\n         * @param {Object} payload\n         * @private\n         */\n        prepareAndUpdate: function (payload) {\n            var ecModel = this._model;\n\n            prepareView.call(this, 'component', ecModel);\n\n            prepareView.call(this, 'chart', ecModel);\n\n            updateMethods.update.call(this, payload);\n        }\n    };\n\n    /**\n     * @private\n     */\n    function updateDirectly(ecIns, method, payload, mainType, subType) {\n        var ecModel = ecIns._model;\n\n        // broadcast\n        if (!mainType) {\n            each(ecIns._componentsViews.concat(ecIns._chartsViews), callView);\n            return;\n        }\n\n        var query = {};\n        query[mainType + 'Id'] = payload[mainType + 'Id'];\n        query[mainType + 'Index'] = payload[mainType + 'Index'];\n        query[mainType + 'Name'] = payload[mainType + 'Name'];\n\n        var condition = {mainType: mainType, query: query};\n        subType && (condition.subType = subType); // subType may be '' by parseClassType;\n\n        // If dispatchAction before setOption, do nothing.\n        ecModel && ecModel.eachComponent(condition, function (model, index) {\n            callView(ecIns[\n                mainType === 'series' ? '_chartsMap' : '_componentsMap'\n            ][model.__viewId]);\n        }, ecIns);\n\n        function callView(view) {\n            view && view.__alive && view[method] && view[method](\n                view.__model, ecModel, ecIns._api, payload\n            );\n        }\n    }\n\n    /**\n     * Resize the chart\n     * @param {Object} opts\n     * @param {number} [opts.width] Can be 'auto' (the same as null/undefined)\n     * @param {number} [opts.height] Can be 'auto' (the same as null/undefined)\n     * @param {boolean} [opts.silent=false]\n     */\n    echartsProto.resize = function (opts) {\n        if (__DEV__) {\n            zrUtil.assert(!this[IN_MAIN_PROCESS], '`resize` should not be called during main process.');\n        }\n\n        this[IN_MAIN_PROCESS] = true;\n\n        this._zr.resize(opts);\n\n        var optionChanged = this._model && this._model.resetOption('media');\n        var updateMethod = optionChanged ? 'prepareAndUpdate' : 'update';\n\n        updateMethods[updateMethod].call(this);\n\n        // Resize loading effect\n        this._loadingFX && this._loadingFX.resize();\n\n        this[IN_MAIN_PROCESS] = false;\n\n        var silent = opts && opts.silent;\n\n        flushPendingActions.call(this, silent);\n\n        triggerUpdatedEvent.call(this, silent);\n    };\n\n    /**\n     * Show loading effect\n     * @param  {string} [name='default']\n     * @param  {Object} [cfg]\n     */\n    echartsProto.showLoading = function (name, cfg) {\n        if (zrUtil.isObject(name)) {\n            cfg = name;\n            name = '';\n        }\n        name = name || 'default';\n\n        this.hideLoading();\n        if (!loadingEffects[name]) {\n            if (__DEV__) {\n                console.warn('Loading effects ' + name + ' not exists.');\n            }\n            return;\n        }\n        var el = loadingEffects[name](this._api, cfg);\n        var zr = this._zr;\n        this._loadingFX = el;\n\n        zr.add(el);\n    };\n\n    /**\n     * Hide loading effect\n     */\n    echartsProto.hideLoading = function () {\n        this._loadingFX && this._zr.remove(this._loadingFX);\n        this._loadingFX = null;\n    };\n\n    /**\n     * @param {Object} eventObj\n     * @return {Object}\n     */\n    echartsProto.makeActionFromEvent = function (eventObj) {\n        var payload = zrUtil.extend({}, eventObj);\n        payload.type = eventActionMap[eventObj.type];\n        return payload;\n    };\n\n    /**\n     * @pubilc\n     * @param {Object} payload\n     * @param {string} [payload.type] Action type\n     * @param {Object|boolean} [opt] If pass boolean, means opt.silent\n     * @param {boolean} [opt.silent=false] Whether trigger events.\n     * @param {boolean} [opt.flush=undefined]\n     *                  true: Flush immediately, and then pixel in canvas can be fetched\n     *                      immediately. Caution: it might affect performance.\n     *                  false: Not not flush.\n     *                  undefined: Auto decide whether perform flush.\n     */\n    echartsProto.dispatchAction = function (payload, opt) {\n        if (!zrUtil.isObject(opt)) {\n            opt = {silent: !!opt};\n        }\n\n        if (!actions[payload.type]) {\n            return;\n        }\n\n        // May dispatchAction in rendering procedure\n        if (this[IN_MAIN_PROCESS]) {\n            this._pendingActions.push(payload);\n            return;\n        }\n\n        doDispatchAction.call(this, payload, opt.silent);\n\n        if (opt.flush) {\n            this._zr.flush(true);\n        }\n        else if (opt.flush !== false && env.browser.weChat) {\n            // In WeChat embeded browser, `requestAnimationFrame` and `setInterval`\n            // hang when sliding page (on touch event), which cause that zr does not\n            // refresh util user interaction finished, which is not expected.\n            // But `dispatchAction` may be called too frequently when pan on touch\n            // screen, which impacts performance if do not throttle them.\n            this._throttledZrFlush();\n        }\n\n        flushPendingActions.call(this, opt.silent);\n\n        triggerUpdatedEvent.call(this, opt.silent);\n    };\n\n    function doDispatchAction(payload, silent) {\n        var payloadType = payload.type;\n        var escapeConnect = payload.escapeConnect;\n        var actionWrap = actions[payloadType];\n        var actionInfo = actionWrap.actionInfo;\n\n        var cptType = (actionInfo.update || 'update').split(':');\n        var updateMethod = cptType.pop();\n        cptType = cptType[0] != null && parseClassType(cptType[0]);\n\n        this[IN_MAIN_PROCESS] = true;\n\n        var payloads = [payload];\n        var batched = false;\n        // Batch action\n        if (payload.batch) {\n            batched = true;\n            payloads = zrUtil.map(payload.batch, function (item) {\n                item = zrUtil.defaults(zrUtil.extend({}, item), payload);\n                item.batch = null;\n                return item;\n            });\n        }\n\n        var eventObjBatch = [];\n        var eventObj;\n        var isHighDown = payloadType === 'highlight' || payloadType === 'downplay';\n\n        each(payloads, function (batchItem) {\n            // Action can specify the event by return it.\n            eventObj = actionWrap.action(batchItem, this._model, this._api);\n            // Emit event outside\n            eventObj = eventObj || zrUtil.extend({}, batchItem);\n            // Convert type to eventType\n            eventObj.type = actionInfo.event || eventObj.type;\n            eventObjBatch.push(eventObj);\n\n            // light update does not perform data process, layout and visual.\n            if (isHighDown) {\n                // method, payload, mainType, subType\n                updateDirectly(this, updateMethod, batchItem, 'series');\n            }\n            else if (cptType) {\n                updateDirectly(this, updateMethod, batchItem, cptType.main, cptType.sub);\n            }\n        }, this);\n\n        if (updateMethod !== 'none' && !isHighDown && !cptType) {\n            // Still dirty\n            if (this[OPTION_UPDATED]) {\n                // FIXME Pass payload ?\n                updateMethods.prepareAndUpdate.call(this, payload);\n                this[OPTION_UPDATED] = false;\n            }\n            else {\n                updateMethods[updateMethod].call(this, payload);\n            }\n        }\n\n        // Follow the rule of action batch\n        if (batched) {\n            eventObj = {\n                type: actionInfo.event || payloadType,\n                escapeConnect: escapeConnect,\n                batch: eventObjBatch\n            };\n        }\n        else {\n            eventObj = eventObjBatch[0];\n        }\n\n        this[IN_MAIN_PROCESS] = false;\n\n        !silent && this._messageCenter.trigger(eventObj.type, eventObj);\n    }\n\n    function flushPendingActions(silent) {\n        var pendingActions = this._pendingActions;\n        while (pendingActions.length) {\n            var payload = pendingActions.shift();\n            doDispatchAction.call(this, payload, silent);\n        }\n    }\n\n    function triggerUpdatedEvent(silent) {\n        !silent && this.trigger('updated');\n    }\n\n    /**\n     * Register event\n     * @method\n     */\n    echartsProto.on = createRegisterEventWithLowercaseName('on');\n    echartsProto.off = createRegisterEventWithLowercaseName('off');\n    echartsProto.one = createRegisterEventWithLowercaseName('one');\n\n    /**\n     * @param {string} methodName\n     * @private\n     */\n    function invokeUpdateMethod(methodName, ecModel, payload) {\n        var api = this._api;\n\n        // Update all components\n        each(this._componentsViews, function (component) {\n            var componentModel = component.__model;\n            component[methodName](componentModel, ecModel, api, payload);\n\n            updateZ(componentModel, component);\n        }, this);\n\n        // Upate all charts\n        ecModel.eachSeries(function (seriesModel, idx) {\n            var chart = this._chartsMap[seriesModel.__viewId];\n            chart[methodName](seriesModel, ecModel, api, payload);\n\n            updateZ(seriesModel, chart);\n\n            updateProgressiveAndBlend(seriesModel, chart);\n        }, this);\n\n        // If use hover layer\n        updateHoverLayerStatus(this._zr, ecModel);\n\n        // Post render\n        each(postUpdateFuncs, function (func) {\n            func(ecModel, api);\n        });\n    }\n\n    /**\n     * Prepare view instances of charts and components\n     * @param  {module:echarts/model/Global} ecModel\n     * @private\n     */\n    function prepareView(type, ecModel) {\n        var isComponent = type === 'component';\n        var viewList = isComponent ? this._componentsViews : this._chartsViews;\n        var viewMap = isComponent ? this._componentsMap : this._chartsMap;\n        var zr = this._zr;\n\n        for (var i = 0; i < viewList.length; i++) {\n            viewList[i].__alive = false;\n        }\n\n        ecModel[isComponent ? 'eachComponent' : 'eachSeries'](function (componentType, model) {\n            if (isComponent) {\n                if (componentType === 'series') {\n                    return;\n                }\n            }\n            else {\n                model = componentType;\n            }\n\n            // Consider: id same and type changed.\n            var viewId = '_ec_' + model.id + '_' + model.type;\n            var view = viewMap[viewId];\n            if (!view) {\n                var classType = parseClassType(model.type);\n                var Clazz = isComponent\n                    ? ComponentView.getClass(classType.main, classType.sub)\n                    : ChartView.getClass(classType.sub);\n                if (Clazz) {\n                    view = new Clazz();\n                    view.init(ecModel, this._api);\n                    viewMap[viewId] = view;\n                    viewList.push(view);\n                    zr.add(view.group);\n                }\n                else {\n                    // Error\n                    return;\n                }\n            }\n\n            model.__viewId = view.__id = viewId;\n            view.__alive = true;\n            view.__model = model;\n            view.group.__ecComponentInfo = {\n                mainType: model.mainType,\n                index: model.componentIndex\n            };\n        }, this);\n\n        for (var i = 0; i < viewList.length;) {\n            var view = viewList[i];\n            if (!view.__alive) {\n                zr.remove(view.group);\n                view.dispose(ecModel, this._api);\n                viewList.splice(i, 1);\n                delete viewMap[view.__id];\n                view.__id = view.group.__ecComponentInfo = null;\n            }\n            else {\n                i++;\n            }\n        }\n    }\n\n    /**\n     * Processor data in each series\n     *\n     * @param {module:echarts/model/Global} ecModel\n     * @private\n     */\n    function processData(ecModel, api) {\n        each(dataProcessorFuncs, function (process) {\n            process.func(ecModel, api);\n        });\n    }\n\n    /**\n     * @private\n     */\n    function stackSeriesData(ecModel) {\n        var stackedDataMap = {};\n        ecModel.eachSeries(function (series) {\n            var stack = series.get('stack');\n            var data = series.getData();\n            if (stack && data.type === 'list') {\n                var previousStack = stackedDataMap[stack];\n                // Avoid conflict with Object.prototype\n                if (stackedDataMap.hasOwnProperty(stack) && previousStack) {\n                    data.stackedOn = previousStack;\n                }\n                stackedDataMap[stack] = data;\n            }\n        });\n    }\n\n    /**\n     * Layout before each chart render there series, special visual encoding stage\n     *\n     * @param {module:echarts/model/Global} ecModel\n     * @private\n     */\n    function doLayout(ecModel, payload) {\n        var api = this._api;\n        each(visualFuncs, function (visual) {\n            if (visual.isLayout) {\n                visual.func(ecModel, api, payload);\n            }\n        });\n    }\n\n    /**\n     * Encode visual infomation from data after data processing\n     *\n     * @param {module:echarts/model/Global} ecModel\n     * @param {object} layout\n     * @param {boolean} [excludesLayout]\n     * @private\n     */\n    function doVisualEncoding(ecModel, payload, excludesLayout) {\n        var api = this._api;\n        ecModel.clearColorPalette();\n        ecModel.eachSeries(function (seriesModel) {\n            seriesModel.clearColorPalette();\n        });\n        each(visualFuncs, function (visual) {\n            (!excludesLayout || !visual.isLayout)\n                && visual.func(ecModel, api, payload);\n        });\n    }\n\n    /**\n     * Render each chart and component\n     * @private\n     */\n    function doRender(ecModel, payload) {\n        var api = this._api;\n        // Render all components\n        each(this._componentsViews, function (componentView) {\n            var componentModel = componentView.__model;\n            componentView.render(componentModel, ecModel, api, payload);\n\n            updateZ(componentModel, componentView);\n        }, this);\n\n        each(this._chartsViews, function (chart) {\n            chart.__alive = false;\n        }, this);\n\n        // Render all charts\n        ecModel.eachSeries(function (seriesModel, idx) {\n            var chartView = this._chartsMap[seriesModel.__viewId];\n            chartView.__alive = true;\n            chartView.render(seriesModel, ecModel, api, payload);\n\n            chartView.group.silent = !!seriesModel.get('silent');\n\n            updateZ(seriesModel, chartView);\n\n            updateProgressiveAndBlend(seriesModel, chartView);\n\n        }, this);\n\n        // If use hover layer\n        updateHoverLayerStatus(this._zr, ecModel);\n\n        // Remove groups of unrendered charts\n        each(this._chartsViews, function (chart) {\n            if (!chart.__alive) {\n                chart.remove(ecModel, api);\n            }\n        }, this);\n    }\n\n    var MOUSE_EVENT_NAMES = [\n        'click', 'dblclick', 'mouseover', 'mouseout', 'mousemove',\n        'mousedown', 'mouseup', 'globalout', 'contextmenu'\n    ];\n    /**\n     * @private\n     */\n    echartsProto._initEvents = function () {\n        each(MOUSE_EVENT_NAMES, function (eveName) {\n            this._zr.on(eveName, function (e) {\n                var ecModel = this.getModel();\n                var el = e.target;\n                var params;\n\n                // no e.target when 'globalout'.\n                if (eveName === 'globalout') {\n                    params = {};\n                }\n                else if (el && el.dataIndex != null) {\n                    var dataModel = el.dataModel || ecModel.getSeriesByIndex(el.seriesIndex);\n                    params = dataModel && dataModel.getDataParams(el.dataIndex, el.dataType) || {};\n                }\n                // If element has custom eventData of components\n                else if (el && el.eventData) {\n                    params = zrUtil.extend({}, el.eventData);\n                }\n\n                if (params) {\n                    params.event = e;\n                    params.type = eveName;\n                    this.trigger(eveName, params);\n                }\n\n            }, this);\n        }, this);\n\n        each(eventActionMap, function (actionType, eventType) {\n            this._messageCenter.on(eventType, function (event) {\n                this.trigger(eventType, event);\n            }, this);\n        }, this);\n    };\n\n    /**\n     * @return {boolean}\n     */\n    echartsProto.isDisposed = function () {\n        return this._disposed;\n    };\n\n    /**\n     * Clear\n     */\n    echartsProto.clear = function () {\n        this.setOption({ series: [] }, true);\n    };\n\n    /**\n     * Dispose instance\n     */\n    echartsProto.dispose = function () {\n        if (this._disposed) {\n            if (__DEV__) {\n                console.warn('Instance ' + this.id + ' has been disposed');\n            }\n            return;\n        }\n        this._disposed = true;\n\n        var api = this._api;\n        var ecModel = this._model;\n\n        each(this._componentsViews, function (component) {\n            component.dispose(ecModel, api);\n        });\n        each(this._chartsViews, function (chart) {\n            chart.dispose(ecModel, api);\n        });\n\n        // Dispose after all views disposed\n        this._zr.dispose();\n\n        delete instances[this.id];\n    };\n\n    zrUtil.mixin(ECharts, Eventful);\n\n    function updateHoverLayerStatus(zr, ecModel) {\n        var storage = zr.storage;\n        var elCount = 0;\n        storage.traverse(function (el) {\n            if (!el.isGroup) {\n                elCount++;\n            }\n        });\n        if (elCount > ecModel.get('hoverLayerThreshold') && !env.node) {\n            storage.traverse(function (el) {\n                if (!el.isGroup) {\n                    el.useHoverLayer = true;\n                }\n            });\n        }\n    }\n\n    /**\n     * Update chart progressive and blend.\n     * @param {module:echarts/model/Series|module:echarts/model/Component} model\n     * @param {module:echarts/view/Component|module:echarts/view/Chart} view\n     */\n    function updateProgressiveAndBlend(seriesModel, chartView) {\n        // Progressive configuration\n        var elCount = 0;\n        chartView.group.traverse(function (el) {\n            if (el.type !== 'group' && !el.ignore) {\n                elCount++;\n            }\n        });\n        var frameDrawNum = +seriesModel.get('progressive');\n        var needProgressive = elCount > seriesModel.get('progressiveThreshold') && frameDrawNum && !env.node;\n        if (needProgressive) {\n            chartView.group.traverse(function (el) {\n                // FIXME marker and other components\n                if (!el.isGroup) {\n                    el.progressive = needProgressive ?\n                        Math.floor(elCount++ / frameDrawNum) : -1;\n                    if (needProgressive) {\n                        el.stopAnimation(true);\n                    }\n                }\n            });\n        }\n\n        // Blend configration\n        var blendMode = seriesModel.get('blendMode') || null;\n        if (__DEV__) {\n            if (!env.canvasSupported && blendMode && blendMode !== 'source-over') {\n                console.warn('Only canvas support blendMode');\n            }\n        }\n        chartView.group.traverse(function (el) {\n            // FIXME marker and other components\n            if (!el.isGroup) {\n                el.setStyle('blend', blendMode);\n            }\n        });\n    }\n\n    /**\n     * @param {module:echarts/model/Series|module:echarts/model/Component} model\n     * @param {module:echarts/view/Component|module:echarts/view/Chart} view\n     */\n    function updateZ(model, view) {\n        var z = model.get('z');\n        var zlevel = model.get('zlevel');\n        // Set z and zlevel\n        view.group.traverse(function (el) {\n            if (el.type !== 'group') {\n                z != null && (el.z = z);\n                zlevel != null && (el.zlevel = zlevel);\n            }\n        });\n    }\n\n    function createExtensionAPI(ecInstance) {\n        var coordSysMgr = ecInstance._coordSysMgr;\n        return zrUtil.extend(new ExtensionAPI(ecInstance), {\n            // Inject methods\n            getCoordinateSystems: zrUtil.bind(\n                coordSysMgr.getCoordinateSystems, coordSysMgr\n            ),\n            getComponentByElement: function (el) {\n                while (el) {\n                    var modelInfo = el.__ecComponentInfo;\n                    if (modelInfo != null) {\n                        return ecInstance._model.getComponent(modelInfo.mainType, modelInfo.index);\n                    }\n                    el = el.parent;\n                }\n            }\n        });\n    }\n\n    /**\n     * @type {Object} key: actionType.\n     * @inner\n     */\n    var actions = {};\n\n    /**\n     * Map eventType to actionType\n     * @type {Object}\n     */\n    var eventActionMap = {};\n\n    /**\n     * Data processor functions of each stage\n     * @type {Array.<Object.<string, Function>>}\n     * @inner\n     */\n    var dataProcessorFuncs = [];\n\n    /**\n     * @type {Array.<Function>}\n     * @inner\n     */\n    var optionPreprocessorFuncs = [];\n\n    /**\n     * @type {Array.<Function>}\n     * @inner\n     */\n    var postUpdateFuncs = [];\n\n    /**\n     * Visual encoding functions of each stage\n     * @type {Array.<Object.<string, Function>>}\n     * @inner\n     */\n    var visualFuncs = [];\n    /**\n     * Theme storage\n     * @type {Object.<key, Object>}\n     */\n    var themeStorage = {};\n    /**\n     * Loading effects\n     */\n    var loadingEffects = {};\n\n\n    var instances = {};\n    var connectedGroups = {};\n\n    var idBase = new Date() - 0;\n    var groupIdBase = new Date() - 0;\n    var DOM_ATTRIBUTE_KEY = '_echarts_instance_';\n\n    /**\n     * @alias module:echarts\n     */\n    var echarts = {\n        /**\n         * @type {number}\n         */\n        version: '3.6.1',\n        dependencies: {\n            zrender: '3.5.1'\n        }\n    };\n\n    function enableConnect(chart) {\n        var STATUS_PENDING = 0;\n        var STATUS_UPDATING = 1;\n        var STATUS_UPDATED = 2;\n        var STATUS_KEY = '__connectUpdateStatus';\n\n        function updateConnectedChartsStatus(charts, status) {\n            for (var i = 0; i < charts.length; i++) {\n                var otherChart = charts[i];\n                otherChart[STATUS_KEY] = status;\n            }\n        }\n\n        zrUtil.each(eventActionMap, function (actionType, eventType) {\n            chart._messageCenter.on(eventType, function (event) {\n                if (connectedGroups[chart.group] && chart[STATUS_KEY] !== STATUS_PENDING) {\n                    if (event && event.escapeConnect) {\n                        return;\n                    }\n\n                    var action = chart.makeActionFromEvent(event);\n                    var otherCharts = [];\n\n                    zrUtil.each(instances, function (otherChart) {\n                        if (otherChart !== chart && otherChart.group === chart.group) {\n                            otherCharts.push(otherChart);\n                        }\n                    });\n\n                    updateConnectedChartsStatus(otherCharts, STATUS_PENDING);\n                    each(otherCharts, function (otherChart) {\n                        if (otherChart[STATUS_KEY] !== STATUS_UPDATING) {\n                            otherChart.dispatchAction(action);\n                        }\n                    });\n                    updateConnectedChartsStatus(otherCharts, STATUS_UPDATED);\n                }\n            });\n        });\n    }\n\n    /**\n     * @param {HTMLDomElement} dom\n     * @param {Object} [theme]\n     * @param {Object} opts\n     * @param {number} [opts.devicePixelRatio] Use window.devicePixelRatio by default\n     * @param {string} [opts.renderer] Currently only 'canvas' is supported.\n     * @param {number} [opts.width] Use clientWidth of the input `dom` by default.\n     *                              Can be 'auto' (the same as null/undefined)\n     * @param {number} [opts.height] Use clientHeight of the input `dom` by default.\n     *                               Can be 'auto' (the same as null/undefined)\n     */\n    echarts.init = function (dom, theme, opts) {\n        if (__DEV__) {\n            // Check version\n            if ((zrender.version.replace('.', '') - 0) < (echarts.dependencies.zrender.replace('.', '') - 0)) {\n                throw new Error(\n                    'ZRender ' + zrender.version\n                    + ' is too old for ECharts ' + echarts.version\n                    + '. Current version need ZRender '\n                    + echarts.dependencies.zrender + '+'\n                );\n            }\n\n            if (!dom) {\n                throw new Error('Initialize failed: invalid dom.');\n            }\n        }\n\n        var existInstance = echarts.getInstanceByDom(dom);\n        if (existInstance) {\n            if (__DEV__) {\n                console.warn('There is a chart instance already initialized on the dom.');\n            }\n            return existInstance;\n        }\n\n        if (__DEV__) {\n            if (zrUtil.isDom(dom)\n                && dom.nodeName.toUpperCase() !== 'CANVAS'\n                && (\n                    (!dom.clientWidth && (!opts || opts.width == null))\n                    || (!dom.clientHeight && (!opts || opts.height == null))\n                )\n            ) {\n                console.warn('Can\\'t get dom width or height');\n            }\n        }\n\n        var chart = new ECharts(dom, theme, opts);\n        chart.id = 'ec_' + idBase++;\n        instances[chart.id] = chart;\n\n        if (dom.setAttribute) {\n            dom.setAttribute(DOM_ATTRIBUTE_KEY, chart.id);\n        }\n        else {\n            dom[DOM_ATTRIBUTE_KEY] = chart.id;\n        }\n\n        enableConnect(chart);\n\n        return chart;\n    };\n\n    /**\n     * @return {string|Array.<module:echarts~ECharts>} groupId\n     */\n    echarts.connect = function (groupId) {\n        // Is array of charts\n        if (zrUtil.isArray(groupId)) {\n            var charts = groupId;\n            groupId = null;\n            // If any chart has group\n            zrUtil.each(charts, function (chart) {\n                if (chart.group != null) {\n                    groupId = chart.group;\n                }\n            });\n            groupId = groupId || ('g_' + groupIdBase++);\n            zrUtil.each(charts, function (chart) {\n                chart.group = groupId;\n            });\n        }\n        connectedGroups[groupId] = true;\n        return groupId;\n    };\n\n    /**\n     * @DEPRECATED\n     * @return {string} groupId\n     */\n    echarts.disConnect = function (groupId) {\n        connectedGroups[groupId] = false;\n    };\n\n    /**\n     * @return {string} groupId\n     */\n    echarts.disconnect = echarts.disConnect;\n\n    /**\n     * Dispose a chart instance\n     * @param  {module:echarts~ECharts|HTMLDomElement|string} chart\n     */\n    echarts.dispose = function (chart) {\n        if (typeof chart === 'string') {\n            chart = instances[chart];\n        }\n        else if (!(chart instanceof ECharts)){\n            // Try to treat as dom\n            chart = echarts.getInstanceByDom(chart);\n        }\n        if ((chart instanceof ECharts) && !chart.isDisposed()) {\n            chart.dispose();\n        }\n    };\n\n    /**\n     * @param  {HTMLDomElement} dom\n     * @return {echarts~ECharts}\n     */\n    echarts.getInstanceByDom = function (dom) {\n        var key;\n        if (dom.getAttribute) {\n            key = dom.getAttribute(DOM_ATTRIBUTE_KEY);\n        }\n        else {\n            key = dom[DOM_ATTRIBUTE_KEY];\n        }\n        return instances[key];\n    };\n\n    /**\n     * @param {string} key\n     * @return {echarts~ECharts}\n     */\n    echarts.getInstanceById = function (key) {\n        return instances[key];\n    };\n\n    /**\n     * Register theme\n     */\n    echarts.registerTheme = function (name, theme) {\n        themeStorage[name] = theme;\n    };\n\n    /**\n     * Register option preprocessor\n     * @param {Function} preprocessorFunc\n     */\n    echarts.registerPreprocessor = function (preprocessorFunc) {\n        optionPreprocessorFuncs.push(preprocessorFunc);\n    };\n\n    /**\n     * @param {number} [priority=1000]\n     * @param {Function} processorFunc\n     */\n    echarts.registerProcessor = function (priority, processorFunc) {\n        if (typeof priority === 'function') {\n            processorFunc = priority;\n            priority = PRIORITY_PROCESSOR_FILTER;\n        }\n        if (__DEV__) {\n            if (isNaN(priority)) {\n                throw new Error('Unkown processor priority');\n            }\n        }\n        dataProcessorFuncs.push({\n            prio: priority,\n            func: processorFunc\n        });\n    };\n\n    /**\n     * Register postUpdater\n     * @param {Function} postUpdateFunc\n     */\n    echarts.registerPostUpdate = function (postUpdateFunc) {\n        postUpdateFuncs.push(postUpdateFunc);\n    };\n\n    /**\n     * Usage:\n     * registerAction('someAction', 'someEvent', function () { ... });\n     * registerAction('someAction', function () { ... });\n     * registerAction(\n     *     {type: 'someAction', event: 'someEvent', update: 'updateView'},\n     *     function () { ... }\n     * );\n     *\n     * @param {(string|Object)} actionInfo\n     * @param {string} actionInfo.type\n     * @param {string} [actionInfo.event]\n     * @param {string} [actionInfo.update]\n     * @param {string} [eventName]\n     * @param {Function} action\n     */\n    echarts.registerAction = function (actionInfo, eventName, action) {\n        if (typeof eventName === 'function') {\n            action = eventName;\n            eventName = '';\n        }\n        var actionType = zrUtil.isObject(actionInfo)\n            ? actionInfo.type\n            : ([actionInfo, actionInfo = {\n                event: eventName\n            }][0]);\n\n        // Event name is all lowercase\n        actionInfo.event = (actionInfo.event || actionType).toLowerCase();\n        eventName = actionInfo.event;\n\n        // Validate action type and event name.\n        zrUtil.assert(ACTION_REG.test(actionType) && ACTION_REG.test(eventName));\n\n        if (!actions[actionType]) {\n            actions[actionType] = {action: action, actionInfo: actionInfo};\n        }\n        eventActionMap[eventName] = actionType;\n    };\n\n    /**\n     * @param {string} type\n     * @param {*} CoordinateSystem\n     */\n    echarts.registerCoordinateSystem = function (type, CoordinateSystem) {\n        CoordinateSystemManager.register(type, CoordinateSystem);\n    };\n\n    /**\n     * Layout is a special stage of visual encoding\n     * Most visual encoding like color are common for different chart\n     * But each chart has it's own layout algorithm\n     *\n     * @param {number} [priority=1000]\n     * @param {Function} layoutFunc\n     */\n    echarts.registerLayout = function (priority, layoutFunc) {\n        if (typeof priority === 'function') {\n            layoutFunc = priority;\n            priority = PRIORITY_VISUAL_LAYOUT;\n        }\n        if (__DEV__) {\n            if (isNaN(priority)) {\n                throw new Error('Unkown layout priority');\n            }\n        }\n        visualFuncs.push({\n            prio: priority,\n            func: layoutFunc,\n            isLayout: true\n        });\n    };\n\n    /**\n     * @param {number} [priority=3000]\n     * @param {Function} visualFunc\n     */\n    echarts.registerVisual = function (priority, visualFunc) {\n        if (typeof priority === 'function') {\n            visualFunc = priority;\n            priority = PRIORITY_VISUAL_CHART;\n        }\n        if (__DEV__) {\n            if (isNaN(priority)) {\n                throw new Error('Unkown visual priority');\n            }\n        }\n        visualFuncs.push({\n            prio: priority,\n            func: visualFunc\n        });\n    };\n\n    /**\n     * @param {string} name\n     */\n    echarts.registerLoading = function (name, loadingFx) {\n        loadingEffects[name] = loadingFx;\n    };\n\n    /**\n     * @param {Object} opts\n     * @param {string} [superClass]\n     */\n    echarts.extendComponentModel = function (opts/*, superClass*/) {\n        // var Clazz = ComponentModel;\n        // if (superClass) {\n        //     var classType = parseClassType(superClass);\n        //     Clazz = ComponentModel.getClass(classType.main, classType.sub, true);\n        // }\n        return ComponentModel.extend(opts);\n    };\n\n    /**\n     * @param {Object} opts\n     * @param {string} [superClass]\n     */\n    echarts.extendComponentView = function (opts/*, superClass*/) {\n        // var Clazz = ComponentView;\n        // if (superClass) {\n        //     var classType = parseClassType(superClass);\n        //     Clazz = ComponentView.getClass(classType.main, classType.sub, true);\n        // }\n        return ComponentView.extend(opts);\n    };\n\n    /**\n     * @param {Object} opts\n     * @param {string} [superClass]\n     */\n    echarts.extendSeriesModel = function (opts/*, superClass*/) {\n        // var Clazz = SeriesModel;\n        // if (superClass) {\n        //     superClass = 'series.' + superClass.replace('series.', '');\n        //     var classType = parseClassType(superClass);\n        //     Clazz = ComponentModel.getClass(classType.main, classType.sub, true);\n        // }\n        return SeriesModel.extend(opts);\n    };\n\n    /**\n     * @param {Object} opts\n     * @param {string} [superClass]\n     */\n    echarts.extendChartView = function (opts/*, superClass*/) {\n        // var Clazz = ChartView;\n        // if (superClass) {\n        //     superClass = superClass.replace('series.', '');\n        //     var classType = parseClassType(superClass);\n        //     Clazz = ChartView.getClass(classType.main, true);\n        // }\n        return ChartView.extend(opts);\n    };\n\n    /**\n     * ZRender need a canvas context to do measureText.\n     * But in node environment canvas may be created by node-canvas.\n     * So we need to specify how to create a canvas instead of using document.createElement('canvas')\n     *\n     * Be careful of using it in the browser.\n     *\n     * @param {Function} creator\n     * @example\n     *     var Canvas = require('canvas');\n     *     var echarts = require('echarts');\n     *     echarts.setCanvasCreator(function () {\n     *         // Small size is enough.\n     *         return new Canvas(32, 32);\n     *     });\n     */\n    echarts.setCanvasCreator = function (creator) {\n        zrUtil.createCanvas = creator;\n    };\n\n    echarts.registerVisual(PRIORITY_VISUAL_GLOBAL, __webpack_require__(\"T3k4\"));\n    echarts.registerPreprocessor(__webpack_require__(\"hpyJ\"));\n    echarts.registerLoading('default', __webpack_require__(\"hXDN\"));\n\n    // Default action\n    echarts.registerAction({\n        type: 'highlight',\n        event: 'highlight',\n        update: 'highlight'\n    }, zrUtil.noop);\n    echarts.registerAction({\n        type: 'downplay',\n        event: 'downplay',\n        update: 'downplay'\n    }, zrUtil.noop);\n\n\n    // --------\n    // Exports\n    // --------\n    echarts.zrender = zrender;\n\n    echarts.List = __webpack_require__(\"LgKv\");\n    echarts.Model = __webpack_require__(\"Q4Sk\");\n\n    echarts.Axis = __webpack_require__(\"X+UG\");\n\n    echarts.graphic = __webpack_require__(\"y2WT\");\n    echarts.number = __webpack_require__(\"0+Kq\");\n    echarts.format = __webpack_require__(\"4oXW\");\n    echarts.throttle = throttle.throttle;\n    echarts.matrix = __webpack_require__(\"GjIh\");\n    echarts.vector = __webpack_require__(\"Krco\");\n    echarts.color = __webpack_require__(\"cwCJ\");\n\n    echarts.util = {};\n    each([\n            'map', 'each', 'filter', 'indexOf', 'inherits', 'reduce', 'filter',\n            'bind', 'curry', 'isArray', 'isString', 'isObject', 'isFunction',\n            'extend', 'defaults', 'clone', 'merge'\n        ],\n        function (name) {\n            echarts.util[name] = zrUtil[name];\n        }\n    );\n\n    echarts.helper = __webpack_require__(\"XZzg\");\n\n\n    // PRIORITY\n    echarts.PRIORITY = {\n        PROCESSOR: {\n            FILTER: PRIORITY_PROCESSOR_FILTER,\n            STATISTIC: PRIORITY_PROCESSOR_STATISTIC\n        },\n        VISUAL: {\n            LAYOUT: PRIORITY_VISUAL_LAYOUT,\n            GLOBAL: PRIORITY_VISUAL_GLOBAL,\n            CHART: PRIORITY_VISUAL_CHART,\n            COMPONENT: PRIORITY_VISUAL_COMPONENT,\n            BRUSH: PRIORITY_VISUAL_BRUSH\n        }\n    };\n\n    module.exports = echarts;\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(\"BxF/\")))\n\n/***/ }),\n\n/***/ \"D2ou\":\n/***/ (function(module, exports) {\n\n\n    module.exports = {\n        /**\n         * 线段包含判断\n         * @param  {number}  x0\n         * @param  {number}  y0\n         * @param  {number}  x1\n         * @param  {number}  y1\n         * @param  {number}  lineWidth\n         * @param  {number}  x\n         * @param  {number}  y\n         * @return {boolean}\n         */\n        containStroke: function (x0, y0, x1, y1, lineWidth, x, y) {\n            if (lineWidth === 0) {\n                return false;\n            }\n            var _l = lineWidth;\n            var _a = 0;\n            var _b = x0;\n            // Quick reject\n            if (\n                (y > y0 + _l && y > y1 + _l)\n                || (y < y0 - _l && y < y1 - _l)\n                || (x > x0 + _l && x > x1 + _l)\n                || (x < x0 - _l && x < x1 - _l)\n            ) {\n                return false;\n            }\n\n            if (x0 !== x1) {\n                _a = (y0 - y1) / (x0 - x1);\n                _b = (x0 * y1 - x1 * y0) / (x0 - x1) ;\n            }\n            else {\n                return Math.abs(x - x0) <= _l / 2;\n            }\n            var tmp = _a * x - y + _b;\n            var _s = tmp * tmp / (_a * _a + 1);\n            return _s <= _l / 2 * _l / 2;\n        }\n    };\n\n\n/***/ }),\n\n/***/ \"D8ol\":\n/***/ (function(module, exports) {\n\n\n\n    var Pattern = function (image, repeat) {\n        // Should do nothing more in this constructor. Because gradient can be\n        // declard by `color: {image: ...}`, where this constructor will not be called.\n\n        this.image = image;\n        this.repeat = repeat;\n\n        // Can be cloned\n        this.type = 'pattern';\n    };\n\n    Pattern.prototype.getCanvasPattern = function (ctx) {\n        return ctx.createPattern(this.image, this.repeat || 'repeat');\n    };\n\n    module.exports = Pattern;\n\n\n/***/ }),\n\n/***/ \"D9oD\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\n    var Group = __webpack_require__(\"yMOk\");\n    var componentUtil = __webpack_require__(\"e36O\");\n    var clazzUtil = __webpack_require__(\"fzq8\");\n\n    var Component = function () {\n        /**\n         * @type {module:zrender/container/Group}\n         * @readOnly\n         */\n        this.group = new Group();\n\n        /**\n         * @type {string}\n         * @readOnly\n         */\n        this.uid = componentUtil.getUID('viewComponent');\n    };\n\n    Component.prototype = {\n\n        constructor: Component,\n\n        init: function (ecModel, api) {},\n\n        render: function (componentModel, ecModel, api, payload) {},\n\n        dispose: function () {}\n\n    };\n\n    var componentProto = Component.prototype;\n    componentProto.updateView\n        = componentProto.updateLayout\n        = componentProto.updateVisual\n        = function (seriesModel, ecModel, api, payload) {\n            // Do nothing;\n        };\n    // Enable Component.extend.\n    clazzUtil.enableClassExtend(Component);\n\n    // Enable capability of registerClass, getClass, hasClass, registerSubTypeDefaulter and so on.\n    clazzUtil.enableClassManagement(Component, {registerWhenExtend: true});\n\n    module.exports = Component;\n\n\n/***/ }),\n\n/***/ \"DAQg\":\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * @author Yi Shen(https://github.com/pissang)\n */\n\n\n    var vec2 = __webpack_require__(\"Krco\");\n    var curve = __webpack_require__(\"cZ/t\");\n\n    var bbox = {};\n    var mathMin = Math.min;\n    var mathMax = Math.max;\n    var mathSin = Math.sin;\n    var mathCos = Math.cos;\n\n    var start = vec2.create();\n    var end = vec2.create();\n    var extremity = vec2.create();\n\n    var PI2 = Math.PI * 2;\n    /**\n     * 从顶点数组中计算出最小包围盒，写入`min`和`max`中\n     * @module zrender/core/bbox\n     * @param {Array<Object>} points 顶点数组\n     * @param {number} min\n     * @param {number} max\n     */\n    bbox.fromPoints = function(points, min, max) {\n        if (points.length === 0) {\n            return;\n        }\n        var p = points[0];\n        var left = p[0];\n        var right = p[0];\n        var top = p[1];\n        var bottom = p[1];\n        var i;\n\n        for (i = 1; i < points.length; i++) {\n            p = points[i];\n            left = mathMin(left, p[0]);\n            right = mathMax(right, p[0]);\n            top = mathMin(top, p[1]);\n            bottom = mathMax(bottom, p[1]);\n        }\n\n        min[0] = left;\n        min[1] = top;\n        max[0] = right;\n        max[1] = bottom;\n    };\n\n    /**\n     * @memberOf module:zrender/core/bbox\n     * @param {number} x0\n     * @param {number} y0\n     * @param {number} x1\n     * @param {number} y1\n     * @param {Array.<number>} min\n     * @param {Array.<number>} max\n     */\n    bbox.fromLine = function (x0, y0, x1, y1, min, max) {\n        min[0] = mathMin(x0, x1);\n        min[1] = mathMin(y0, y1);\n        max[0] = mathMax(x0, x1);\n        max[1] = mathMax(y0, y1);\n    };\n\n    var xDim = [];\n    var yDim = [];\n    /**\n     * 从三阶贝塞尔曲线(p0, p1, p2, p3)中计算出最小包围盒，写入`min`和`max`中\n     * @memberOf module:zrender/core/bbox\n     * @param {number} x0\n     * @param {number} y0\n     * @param {number} x1\n     * @param {number} y1\n     * @param {number} x2\n     * @param {number} y2\n     * @param {number} x3\n     * @param {number} y3\n     * @param {Array.<number>} min\n     * @param {Array.<number>} max\n     */\n    bbox.fromCubic = function(\n        x0, y0, x1, y1, x2, y2, x3, y3, min, max\n    ) {\n        var cubicExtrema = curve.cubicExtrema;\n        var cubicAt = curve.cubicAt;\n        var i;\n        var n = cubicExtrema(x0, x1, x2, x3, xDim);\n        min[0] = Infinity;\n        min[1] = Infinity;\n        max[0] = -Infinity;\n        max[1] = -Infinity;\n\n        for (i = 0; i < n; i++) {\n            var x = cubicAt(x0, x1, x2, x3, xDim[i]);\n            min[0] = mathMin(x, min[0]);\n            max[0] = mathMax(x, max[0]);\n        }\n        n = cubicExtrema(y0, y1, y2, y3, yDim);\n        for (i = 0; i < n; i++) {\n            var y = cubicAt(y0, y1, y2, y3, yDim[i]);\n            min[1] = mathMin(y, min[1]);\n            max[1] = mathMax(y, max[1]);\n        }\n\n        min[0] = mathMin(x0, min[0]);\n        max[0] = mathMax(x0, max[0]);\n        min[0] = mathMin(x3, min[0]);\n        max[0] = mathMax(x3, max[0]);\n\n        min[1] = mathMin(y0, min[1]);\n        max[1] = mathMax(y0, max[1]);\n        min[1] = mathMin(y3, min[1]);\n        max[1] = mathMax(y3, max[1]);\n    };\n\n    /**\n     * 从二阶贝塞尔曲线(p0, p1, p2)中计算出最小包围盒，写入`min`和`max`中\n     * @memberOf module:zrender/core/bbox\n     * @param {number} x0\n     * @param {number} y0\n     * @param {number} x1\n     * @param {number} y1\n     * @param {number} x2\n     * @param {number} y2\n     * @param {Array.<number>} min\n     * @param {Array.<number>} max\n     */\n    bbox.fromQuadratic = function(x0, y0, x1, y1, x2, y2, min, max) {\n        var quadraticExtremum = curve.quadraticExtremum;\n        var quadraticAt = curve.quadraticAt;\n        // Find extremities, where derivative in x dim or y dim is zero\n        var tx =\n            mathMax(\n                mathMin(quadraticExtremum(x0, x1, x2), 1), 0\n            );\n        var ty =\n            mathMax(\n                mathMin(quadraticExtremum(y0, y1, y2), 1), 0\n            );\n\n        var x = quadraticAt(x0, x1, x2, tx);\n        var y = quadraticAt(y0, y1, y2, ty);\n\n        min[0] = mathMin(x0, x2, x);\n        min[1] = mathMin(y0, y2, y);\n        max[0] = mathMax(x0, x2, x);\n        max[1] = mathMax(y0, y2, y);\n    };\n\n    /**\n     * 从圆弧中计算出最小包围盒，写入`min`和`max`中\n     * @method\n     * @memberOf module:zrender/core/bbox\n     * @param {number} x\n     * @param {number} y\n     * @param {number} rx\n     * @param {number} ry\n     * @param {number} startAngle\n     * @param {number} endAngle\n     * @param {number} anticlockwise\n     * @param {Array.<number>} min\n     * @param {Array.<number>} max\n     */\n    bbox.fromArc = function (\n        x, y, rx, ry, startAngle, endAngle, anticlockwise, min, max\n    ) {\n        var vec2Min = vec2.min;\n        var vec2Max = vec2.max;\n\n        var diff = Math.abs(startAngle - endAngle);\n\n\n        if (diff % PI2 < 1e-4 && diff > 1e-4) {\n            // Is a circle\n            min[0] = x - rx;\n            min[1] = y - ry;\n            max[0] = x + rx;\n            max[1] = y + ry;\n            return;\n        }\n\n        start[0] = mathCos(startAngle) * rx + x;\n        start[1] = mathSin(startAngle) * ry + y;\n\n        end[0] = mathCos(endAngle) * rx + x;\n        end[1] = mathSin(endAngle) * ry + y;\n\n        vec2Min(min, start, end);\n        vec2Max(max, start, end);\n\n        // Thresh to [0, Math.PI * 2]\n        startAngle = startAngle % (PI2);\n        if (startAngle < 0) {\n            startAngle = startAngle + PI2;\n        }\n        endAngle = endAngle % (PI2);\n        if (endAngle < 0) {\n            endAngle = endAngle + PI2;\n        }\n\n        if (startAngle > endAngle && !anticlockwise) {\n            endAngle += PI2;\n        }\n        else if (startAngle < endAngle && anticlockwise) {\n            startAngle += PI2;\n        }\n        if (anticlockwise) {\n            var tmp = endAngle;\n            endAngle = startAngle;\n            startAngle = tmp;\n        }\n\n        // var number = 0;\n        // var step = (anticlockwise ? -Math.PI : Math.PI) / 2;\n        for (var angle = 0; angle < endAngle; angle += Math.PI / 2) {\n            if (angle > startAngle) {\n                extremity[0] = mathCos(angle) * rx + x;\n                extremity[1] = mathSin(angle) * ry + y;\n\n                vec2Min(min, extremity, min);\n                vec2Max(max, extremity, max);\n            }\n        }\n    };\n\n    module.exports = bbox;\n\n\n\n/***/ }),\n\n/***/ \"DQU+\":\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * @module echarts/component/helper/RoamController\n */\n\n\n    var Eventful = __webpack_require__(\"feXt\");\n    var zrUtil = __webpack_require__(\"nw1Z\");\n    var eventTool = __webpack_require__(\"kawL\");\n    var interactionMutex = __webpack_require__(\"NPNz\");\n\n    /**\n     * @alias module:echarts/component/helper/RoamController\n     * @constructor\n     * @mixin {module:zrender/mixin/Eventful}\n     *\n     * @param {module:zrender/zrender~ZRender} zr\n     */\n    function RoamController(zr) {\n\n        /**\n         * @type {Function}\n         */\n        this.pointerChecker;\n\n        /**\n         * @type {module:zrender}\n         */\n        this._zr = zr;\n\n        /**\n         * @type {Object}\n         */\n        this._opt = {};\n\n        // Avoid two roamController bind the same handler\n        var bind = zrUtil.bind;\n        var mousedownHandler = bind(mousedown, this);\n        var mousemoveHandler = bind(mousemove, this);\n        var mouseupHandler = bind(mouseup, this);\n        var mousewheelHandler = bind(mousewheel, this);\n        var pinchHandler = bind(pinch, this);\n\n        Eventful.call(this);\n\n        /**\n         * @param {Function} pointerChecker\n         *                   input: x, y\n         *                   output: boolean\n         */\n        this.setPointerChecker = function (pointerChecker) {\n            this.pointerChecker = pointerChecker;\n        };\n\n        /**\n         * Notice: only enable needed types. For example, if 'zoom'\n         * is not needed, 'zoom' should not be enabled, otherwise\n         * default mousewheel behaviour (scroll page) will be disabled.\n         *\n         * @param  {boolean|string} [controlType=true] Specify the control type,\n         *                          which can be null/undefined or true/false\n         *                          or 'pan/move' or 'zoom'/'scale'\n         * @param {Object} [opt]\n         * @param {Object} [opt.zoomOnMouseWheel=true]\n         * @param {Object} [opt.moveOnMouseMove=true]\n         * @param {Object} [opt.preventDefaultMouseMove=true] When pan.\n         */\n        this.enable = function (controlType, opt) {\n\n            // Disable previous first\n            this.disable();\n\n            this._opt = zrUtil.defaults(zrUtil.clone(opt) || {}, {\n                zoomOnMouseWheel: true,\n                moveOnMouseMove: true,\n                preventDefaultMouseMove: true\n            });\n\n            if (controlType == null) {\n                controlType = true;\n            }\n\n            if (controlType === true || (controlType === 'move' || controlType === 'pan')) {\n                zr.on('mousedown', mousedownHandler);\n                zr.on('mousemove', mousemoveHandler);\n                zr.on('mouseup', mouseupHandler);\n            }\n            if (controlType === true || (controlType === 'scale' || controlType === 'zoom')) {\n                zr.on('mousewheel', mousewheelHandler);\n                zr.on('pinch', pinchHandler);\n            }\n        };\n\n        this.disable = function () {\n            zr.off('mousedown', mousedownHandler);\n            zr.off('mousemove', mousemoveHandler);\n            zr.off('mouseup', mouseupHandler);\n            zr.off('mousewheel', mousewheelHandler);\n            zr.off('pinch', pinchHandler);\n        };\n\n        this.dispose = this.disable;\n\n        this.isDragging = function () {\n            return this._dragging;\n        };\n\n        this.isPinching = function () {\n            return this._pinching;\n        };\n    }\n\n    zrUtil.mixin(RoamController, Eventful);\n\n\n    function mousedown(e) {\n        if (e.target && e.target.draggable) {\n            return;\n        }\n\n        var x = e.offsetX;\n        var y = e.offsetY;\n\n        // Only check on mosedown, but not mousemove.\n        // Mouse can be out of target when mouse moving.\n        if (this.pointerChecker && this.pointerChecker(e, x, y)) {\n            this._x = x;\n            this._y = y;\n            this._dragging = true;\n        }\n    }\n\n    function mousemove(e) {\n        if (!checkKeyBinding(this, 'moveOnMouseMove', e) || !this._dragging) {\n            return;\n        }\n\n        if (e.gestureEvent === 'pinch') {\n            return;\n        }\n\n        if (interactionMutex.isTaken(this._zr, 'globalPan')) {\n            return;\n        }\n\n        var x = e.offsetX;\n        var y = e.offsetY;\n\n        var oldX = this._x;\n        var oldY = this._y;\n\n        var dx = x - oldX;\n        var dy = y - oldY;\n\n        this._x = x;\n        this._y = y;\n\n        this._opt.preventDefaultMouseMove && eventTool.stop(e.event);\n\n        this.trigger('pan', dx, dy, oldX, oldY, x, y);\n    }\n\n    function mouseup(e) {\n        this._dragging = false;\n    }\n\n    function mousewheel(e) {\n        // wheelDelta maybe -0 in chrome mac.\n        if (!checkKeyBinding(this, 'zoomOnMouseWheel', e) || e.wheelDelta === 0) {\n            return;\n        }\n\n        // Convenience:\n        // Mac and VM Windows on Mac: scroll up: zoom out.\n        // Windows: scroll up: zoom in.\n        var zoomDelta = e.wheelDelta > 0 ? 1.1 : 1 / 1.1;\n        zoom.call(this, e, zoomDelta, e.offsetX, e.offsetY);\n    }\n\n    function pinch(e) {\n        if (interactionMutex.isTaken(this._zr, 'globalPan')) {\n            return;\n        }\n        var zoomDelta = e.pinchScale > 1 ? 1.1 : 1 / 1.1;\n        zoom.call(this, e, zoomDelta, e.pinchX, e.pinchY);\n    }\n\n    function zoom(e, zoomDelta, zoomX, zoomY) {\n        if (this.pointerChecker && this.pointerChecker(e, zoomX, zoomY)) {\n            // When mouse is out of roamController rect,\n            // default befavoius should not be be disabled, otherwise\n            // page sliding is disabled, contrary to expectation.\n            eventTool.stop(e.event);\n\n            this.trigger('zoom', zoomDelta, zoomX, zoomY);\n        }\n    }\n\n    function checkKeyBinding(roamController, prop, e) {\n        var setting = roamController._opt[prop];\n        return setting\n            && (!zrUtil.isString(setting) || e.event[setting + 'Key']);\n    }\n\n    module.exports = RoamController;\n\n\n/***/ }),\n\n/***/ \"EV4n\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\n    var cursorHelper = __webpack_require__(\"XQWN\");\n    var BoundingRect = __webpack_require__(\"W4Cx\");\n    var graphicUtil = __webpack_require__(\"y2WT\");\n\n    var helper = {};\n\n    helper.makeRectPanelClipPath = function (rect) {\n        rect = normalizeRect(rect);\n        return function (localPoints, transform) {\n            return graphicUtil.clipPointsByRect(localPoints, rect);\n        };\n    };\n\n    helper.makeLinearBrushOtherExtent = function (rect, specifiedXYIndex) {\n        rect = normalizeRect(rect);\n        return function (xyIndex) {\n            var idx = specifiedXYIndex != null ? specifiedXYIndex : xyIndex;\n            var brushWidth = idx ? rect.width : rect.height;\n            var base = idx ? rect.x : rect.y;\n            return [base, base + (brushWidth || 0)];\n        };\n    };\n\n    helper.makeRectIsTargetByCursor = function (rect, api, targetModel) {\n        rect = normalizeRect(rect);\n        return function (e, localCursorPoint, transform) {\n            return rect.contain(localCursorPoint[0], localCursorPoint[1])\n                && !cursorHelper.onIrrelevantElement(e, api, targetModel);\n        };\n    };\n\n    // Consider width/height is negative.\n    function normalizeRect(rect) {\n        return BoundingRect.create(rect);\n    }\n\n    module.exports = helper;\n\n\n\n/***/ }),\n\n/***/ \"EXqP\":\n/***/ (function(module, exports) {\n\n\n   module.exports = function (ecModel) {\n        var legendModels = ecModel.findComponents({\n            mainType: 'legend'\n        });\n        if (legendModels && legendModels.length) {\n            ecModel.filterSeries(function (series) {\n                // If in any legend component the status is not selected.\n                // Because in legend series is assumed selected when it is not in the legend data.\n                for (var i = 0; i < legendModels.length; i++) {\n                    if (!legendModels[i].isSelected(series.name)) {\n                        return false;\n                    }\n                }\n                return true;\n            });\n        }\n    };\n\n\n/***/ }),\n\n/***/ \"EcM6\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\n    var zrUtil = __webpack_require__(\"nw1Z\");\n\n    __webpack_require__(\"OfUh\");\n\n    __webpack_require__(\"S+o0\");\n    __webpack_require__(\"ad5Q\");\n\n    var barLayoutGrid = __webpack_require__(\"BzeQ\");\n    var echarts = __webpack_require__(\"Cwwa\");\n\n    echarts.registerLayout(zrUtil.curry(barLayoutGrid, 'bar'));\n\n    // Visual coding for legend\n    echarts.registerVisual(function (ecModel) {\n        ecModel.eachSeriesByType('bar', function (seriesModel) {\n            var data = seriesModel.getData();\n            data.setVisual('legendSymbol', 'roundRect');\n        });\n    });\n\n    // In case developer forget to include grid component\n    __webpack_require__(\"olP8\");\n\n\n/***/ }),\n\n/***/ \"EtPY\":\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * 圆环\n * @module zrender/graphic/shape/Ring\n */\n\n\n    module.exports = __webpack_require__(\"CC7E\").extend({\n\n        type: 'ring',\n\n        shape: {\n            cx: 0,\n            cy: 0,\n            r: 0,\n            r0: 0\n        },\n\n        buildPath: function (ctx, shape) {\n            var x = shape.cx;\n            var y = shape.cy;\n            var PI2 = Math.PI * 2;\n            ctx.moveTo(x + shape.r, y);\n            ctx.arc(x, y, shape.r, 0, PI2, false);\n            ctx.moveTo(x + shape.r0, y);\n            ctx.arc(x, y, shape.r0, 0, PI2, true);\n        }\n    });\n\n\n\n/***/ }),\n\n/***/ \"Fhmo\":\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * ECharts option manager\n *\n * @module {echarts/model/OptionManager}\n */\n\n\n\n    var zrUtil = __webpack_require__(\"nw1Z\");\n    var modelUtil = __webpack_require__(\"LFYx\");\n    var ComponentModel = __webpack_require__(\"wvll\");\n    var each = zrUtil.each;\n    var clone = zrUtil.clone;\n    var map = zrUtil.map;\n    var merge = zrUtil.merge;\n\n    var QUERY_REG = /^(min|max)?(.+)$/;\n\n    /**\n     * TERM EXPLANATIONS:\n     *\n     * [option]:\n     *\n     *     An object that contains definitions of components. For example:\n     *     var option = {\n     *         title: {...},\n     *         legend: {...},\n     *         visualMap: {...},\n     *         series: [\n     *             {data: [...]},\n     *             {data: [...]},\n     *             ...\n     *         ]\n     *     };\n     *\n     * [rawOption]:\n     *\n     *     An object input to echarts.setOption. 'rawOption' may be an\n     *     'option', or may be an object contains multi-options. For example:\n     *     var option = {\n     *         baseOption: {\n     *             title: {...},\n     *             legend: {...},\n     *             series: [\n     *                 {data: [...]},\n     *                 {data: [...]},\n     *                 ...\n     *             ]\n     *         },\n     *         timeline: {...},\n     *         options: [\n     *             {title: {...}, series: {data: [...]}},\n     *             {title: {...}, series: {data: [...]}},\n     *             ...\n     *         ],\n     *         media: [\n     *             {\n     *                 query: {maxWidth: 320},\n     *                 option: {series: {x: 20}, visualMap: {show: false}}\n     *             },\n     *             {\n     *                 query: {minWidth: 320, maxWidth: 720},\n     *                 option: {series: {x: 500}, visualMap: {show: true}}\n     *             },\n     *             {\n     *                 option: {series: {x: 1200}, visualMap: {show: true}}\n     *             }\n     *         ]\n     *     };\n     *\n     * @alias module:echarts/model/OptionManager\n     * @param {module:echarts/ExtensionAPI} api\n     */\n    function OptionManager(api) {\n\n        /**\n         * @private\n         * @type {module:echarts/ExtensionAPI}\n         */\n        this._api = api;\n\n        /**\n         * @private\n         * @type {Array.<number>}\n         */\n        this._timelineOptions = [];\n\n        /**\n         * @private\n         * @type {Array.<Object>}\n         */\n        this._mediaList = [];\n\n        /**\n         * @private\n         * @type {Object}\n         */\n        this._mediaDefault;\n\n        /**\n         * -1, means default.\n         * empty means no media.\n         * @private\n         * @type {Array.<number>}\n         */\n        this._currentMediaIndices = [];\n\n        /**\n         * @private\n         * @type {Object}\n         */\n        this._optionBackup;\n\n        /**\n         * @private\n         * @type {Object}\n         */\n        this._newBaseOption;\n    }\n\n    // timeline.notMerge is not supported in ec3. Firstly there is rearly\n    // case that notMerge is needed. Secondly supporting 'notMerge' requires\n    // rawOption cloned and backuped when timeline changed, which does no\n    // good to performance. What's more, that both timeline and setOption\n    // method supply 'notMerge' brings complex and some problems.\n    // Consider this case:\n    // (step1) chart.setOption({timeline: {notMerge: false}, ...}, false);\n    // (step2) chart.setOption({timeline: {notMerge: true}, ...}, false);\n\n    OptionManager.prototype = {\n\n        constructor: OptionManager,\n\n        /**\n         * @public\n         * @param {Object} rawOption Raw option.\n         * @param {module:echarts/model/Global} ecModel\n         * @param {Array.<Function>} optionPreprocessorFuncs\n         * @return {Object} Init option\n         */\n        setOption: function (rawOption, optionPreprocessorFuncs) {\n            rawOption = clone(rawOption, true);\n\n            // FIXME\n            // 如果 timeline options 或者 media 中设置了某个属性，而baseOption中没有设置，则进行警告。\n\n            var oldOptionBackup = this._optionBackup;\n            var newParsedOption = parseRawOption.call(\n                this, rawOption, optionPreprocessorFuncs, !oldOptionBackup\n            );\n            this._newBaseOption = newParsedOption.baseOption;\n\n            // For setOption at second time (using merge mode);\n            if (oldOptionBackup) {\n                // Only baseOption can be merged.\n                mergeOption(oldOptionBackup.baseOption, newParsedOption.baseOption);\n\n                // For simplicity, timeline options and media options do not support merge,\n                // that is, if you `setOption` twice and both has timeline options, the latter\n                // timeline opitons will not be merged to the formers, but just substitude them.\n                if (newParsedOption.timelineOptions.length) {\n                    oldOptionBackup.timelineOptions = newParsedOption.timelineOptions;\n                }\n                if (newParsedOption.mediaList.length) {\n                    oldOptionBackup.mediaList = newParsedOption.mediaList;\n                }\n                if (newParsedOption.mediaDefault) {\n                    oldOptionBackup.mediaDefault = newParsedOption.mediaDefault;\n                }\n            }\n            else {\n                this._optionBackup = newParsedOption;\n            }\n        },\n\n        /**\n         * @param {boolean} isRecreate\n         * @return {Object}\n         */\n        mountOption: function (isRecreate) {\n            var optionBackup = this._optionBackup;\n\n            // TODO\n            // 如果没有reset功能则不clone。\n\n            this._timelineOptions = map(optionBackup.timelineOptions, clone);\n            this._mediaList = map(optionBackup.mediaList, clone);\n            this._mediaDefault = clone(optionBackup.mediaDefault);\n            this._currentMediaIndices = [];\n\n            return clone(isRecreate\n                // this._optionBackup.baseOption, which is created at the first `setOption`\n                // called, and is merged into every new option by inner method `mergeOption`\n                // each time `setOption` called, can be only used in `isRecreate`, because\n                // its reliability is under suspicion. In other cases option merge is\n                // performed by `model.mergeOption`.\n                ? optionBackup.baseOption : this._newBaseOption\n            );\n        },\n\n        /**\n         * @param {module:echarts/model/Global} ecModel\n         * @return {Object}\n         */\n        getTimelineOption: function (ecModel) {\n            var option;\n            var timelineOptions = this._timelineOptions;\n\n            if (timelineOptions.length) {\n                // getTimelineOption can only be called after ecModel inited,\n                // so we can get currentIndex from timelineModel.\n                var timelineModel = ecModel.getComponent('timeline');\n                if (timelineModel) {\n                    option = clone(\n                        timelineOptions[timelineModel.getCurrentIndex()],\n                        true\n                    );\n                }\n            }\n\n            return option;\n        },\n\n        /**\n         * @param {module:echarts/model/Global} ecModel\n         * @return {Array.<Object>}\n         */\n        getMediaOption: function (ecModel) {\n            var ecWidth = this._api.getWidth();\n            var ecHeight = this._api.getHeight();\n            var mediaList = this._mediaList;\n            var mediaDefault = this._mediaDefault;\n            var indices = [];\n            var result = [];\n\n            // No media defined.\n            if (!mediaList.length && !mediaDefault) {\n                return result;\n            }\n\n            // Multi media may be applied, the latter defined media has higher priority.\n            for (var i = 0, len = mediaList.length; i < len; i++) {\n                if (applyMediaQuery(mediaList[i].query, ecWidth, ecHeight)) {\n                    indices.push(i);\n                }\n            }\n\n            // FIXME\n            // 是否mediaDefault应该强制用户设置，否则可能修改不能回归。\n            if (!indices.length && mediaDefault) {\n                indices = [-1];\n            }\n\n            if (indices.length && !indicesEquals(indices, this._currentMediaIndices)) {\n                result = map(indices, function (index) {\n                    return clone(\n                        index === -1 ? mediaDefault.option : mediaList[index].option\n                    );\n                });\n            }\n            // Otherwise return nothing.\n\n            this._currentMediaIndices = indices;\n\n            return result;\n        }\n    };\n\n    function parseRawOption(rawOption, optionPreprocessorFuncs, isNew) {\n        var timelineOptions = [];\n        var mediaList = [];\n        var mediaDefault;\n        var baseOption;\n\n        // Compatible with ec2.\n        var timelineOpt = rawOption.timeline;\n\n        if (rawOption.baseOption) {\n            baseOption = rawOption.baseOption;\n        }\n\n        // For timeline\n        if (timelineOpt || rawOption.options) {\n            baseOption = baseOption || {};\n            timelineOptions = (rawOption.options || []).slice();\n        }\n\n        // For media query\n        if (rawOption.media) {\n            baseOption = baseOption || {};\n            var media = rawOption.media;\n            each(media, function (singleMedia) {\n                if (singleMedia && singleMedia.option) {\n                    if (singleMedia.query) {\n                        mediaList.push(singleMedia);\n                    }\n                    else if (!mediaDefault) {\n                        // Use the first media default.\n                        mediaDefault = singleMedia;\n                    }\n                }\n            });\n        }\n\n        // For normal option\n        if (!baseOption) {\n            baseOption = rawOption;\n        }\n\n        // Set timelineOpt to baseOption in ec3,\n        // which is convenient for merge option.\n        if (!baseOption.timeline) {\n            baseOption.timeline = timelineOpt;\n        }\n\n        // Preprocess.\n        each([baseOption].concat(timelineOptions)\n            .concat(zrUtil.map(mediaList, function (media) {\n                return media.option;\n            })),\n            function (option) {\n                each(optionPreprocessorFuncs, function (preProcess) {\n                    preProcess(option, isNew);\n                });\n            }\n        );\n\n        return {\n            baseOption: baseOption,\n            timelineOptions: timelineOptions,\n            mediaDefault: mediaDefault,\n            mediaList: mediaList\n        };\n    }\n\n    /**\n     * @see <http://www.w3.org/TR/css3-mediaqueries/#media1>\n     * Support: width, height, aspectRatio\n     * Can use max or min as prefix.\n     */\n    function applyMediaQuery(query, ecWidth, ecHeight) {\n        var realMap = {\n            width: ecWidth,\n            height: ecHeight,\n            aspectratio: ecWidth / ecHeight // lowser case for convenientce.\n        };\n\n        var applicatable = true;\n\n        zrUtil.each(query, function (value, attr) {\n            var matched = attr.match(QUERY_REG);\n\n            if (!matched || !matched[1] || !matched[2]) {\n                return;\n            }\n\n            var operator = matched[1];\n            var realAttr = matched[2].toLowerCase();\n\n            if (!compare(realMap[realAttr], value, operator)) {\n                applicatable = false;\n            }\n        });\n\n        return applicatable;\n    }\n\n    function compare(real, expect, operator) {\n        if (operator === 'min') {\n            return real >= expect;\n        }\n        else if (operator === 'max') {\n            return real <= expect;\n        }\n        else { // Equals\n            return real === expect;\n        }\n    }\n\n    function indicesEquals(indices1, indices2) {\n        // indices is always order by asc and has only finite number.\n        return indices1.join(',') === indices2.join(',');\n    }\n\n    /**\n     * Consider case:\n     * `chart.setOption(opt1);`\n     * Then user do some interaction like dataZoom, dataView changing.\n     * `chart.setOption(opt2);`\n     * Then user press 'reset button' in toolbox.\n     *\n     * After doing that all of the interaction effects should be reset, the\n     * chart should be the same as the result of invoke\n     * `chart.setOption(opt1); chart.setOption(opt2);`.\n     *\n     * Although it is not able ensure that\n     * `chart.setOption(opt1); chart.setOption(opt2);` is equivalents to\n     * `chart.setOption(merge(opt1, opt2));` exactly,\n     * this might be the only simple way to implement that feature.\n     *\n     * MEMO: We've considered some other approaches:\n     * 1. Each model handle its self restoration but not uniform treatment.\n     *     (Too complex in logic and error-prone)\n     * 2. Use a shadow ecModel. (Performace expensive)\n     */\n    function mergeOption(oldOption, newOption) {\n        newOption = newOption || {};\n\n        each(newOption, function (newCptOpt, mainType) {\n            if (newCptOpt == null) {\n                return;\n            }\n\n            var oldCptOpt = oldOption[mainType];\n\n            if (!ComponentModel.hasClass(mainType)) {\n                oldOption[mainType] = merge(oldCptOpt, newCptOpt, true);\n            }\n            else {\n                newCptOpt = modelUtil.normalizeToArray(newCptOpt);\n                oldCptOpt = modelUtil.normalizeToArray(oldCptOpt);\n\n                var mapResult = modelUtil.mappingToExists(oldCptOpt, newCptOpt);\n\n                oldOption[mainType] = map(mapResult, function (item) {\n                    return (item.option && item.exist)\n                        ? merge(item.exist, item.option, true)\n                        : (item.exist || item.option);\n                });\n            }\n        });\n    }\n\n    module.exports = OptionManager;\n\n\n/***/ }),\n\n/***/ \"FjKD\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\n    var zrUtil = __webpack_require__(\"nw1Z\");\n\n    var POSSIBLE_STYLES = [\n        'areaStyle', 'lineStyle', 'nodeStyle', 'linkStyle',\n        'chordStyle', 'label', 'labelLine'\n    ];\n\n    function compatItemStyle(opt) {\n        var itemStyleOpt = opt && opt.itemStyle;\n        if (itemStyleOpt) {\n            zrUtil.each(POSSIBLE_STYLES, function (styleName) {\n                var normalItemStyleOpt = itemStyleOpt.normal;\n                var emphasisItemStyleOpt = itemStyleOpt.emphasis;\n                if (normalItemStyleOpt && normalItemStyleOpt[styleName]) {\n                    opt[styleName] = opt[styleName] || {};\n                    if (!opt[styleName].normal) {\n                        opt[styleName].normal = normalItemStyleOpt[styleName];\n                    }\n                    else {\n                        zrUtil.merge(opt[styleName].normal, normalItemStyleOpt[styleName]);\n                    }\n                    normalItemStyleOpt[styleName] = null;\n                }\n                if (emphasisItemStyleOpt && emphasisItemStyleOpt[styleName]) {\n                    opt[styleName] = opt[styleName] || {};\n                    if (!opt[styleName].emphasis) {\n                        opt[styleName].emphasis = emphasisItemStyleOpt[styleName];\n                    }\n                    else {\n                        zrUtil.merge(opt[styleName].emphasis, emphasisItemStyleOpt[styleName]);\n                    }\n                    emphasisItemStyleOpt[styleName] = null;\n                }\n            });\n        }\n    }\n\n    module.exports = function (seriesOpt) {\n        if (!seriesOpt) {\n            return;\n        }\n        compatItemStyle(seriesOpt);\n        compatItemStyle(seriesOpt.markPoint);\n        compatItemStyle(seriesOpt.markLine);\n        var data = seriesOpt.data;\n        if (data) {\n            for (var i = 0; i < data.length; i++) {\n                compatItemStyle(data[i]);\n            }\n            // mark point data\n            var markPoint = seriesOpt.markPoint;\n            if (markPoint && markPoint.data) {\n                var mpData = markPoint.data;\n                for (var i = 0; i < mpData.length; i++) {\n                    compatItemStyle(mpData[i]);\n                }\n            }\n            // mark line data\n            var markLine = seriesOpt.markLine;\n            if (markLine && markLine.data) {\n                var mlData = markLine.data;\n                for (var i = 0; i < mlData.length; i++) {\n                    if (zrUtil.isArray(mlData[i])) {\n                        compatItemStyle(mlData[i][0]);\n                        compatItemStyle(mlData[i][1]);\n                    }\n                    else {\n                        compatItemStyle(mlData[i]);\n                    }\n                }\n            }\n        }\n    };\n\n\n/***/ }),\n\n/***/ \"GEOw\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n\n    var zrUtil = __webpack_require__(\"nw1Z\");\n\n    function MagicType(model) {\n        this.model = model;\n    }\n\n    MagicType.defaultOption = {\n        show: true,\n        type: [],\n        // Icon group\n        icon: {\n            line: 'M4.1,28.9h7.1l9.3-22l7.4,38l9.7-19.7l3,12.8h14.9M4.1,58h51.4',\n            bar: 'M6.7,22.9h10V48h-10V22.9zM24.9,13h10v35h-10V13zM43.2,2h10v46h-10V2zM3.1,58h53.7',\n            stack: 'M8.2,38.4l-8.4,4.1l30.6,15.3L60,42.5l-8.1-4.1l-21.5,11L8.2,38.4z M51.9,30l-8.1,4.2l-13.4,6.9l-13.9-6.9L8.2,30l-8.4,4.2l8.4,4.2l22.2,11l21.5-11l8.1-4.2L51.9,30z M51.9,21.7l-8.1,4.2L35.7,30l-5.3,2.8L24.9,30l-8.4-4.1l-8.3-4.2l-8.4,4.2L8.2,30l8.3,4.2l13.9,6.9l13.4-6.9l8.1-4.2l8.1-4.1L51.9,21.7zM30.4,2.2L-0.2,17.5l8.4,4.1l8.3,4.2l8.4,4.2l5.5,2.7l5.3-2.7l8.1-4.2l8.1-4.2l8.1-4.1L30.4,2.2z', // jshint ignore:line\n            tiled: 'M2.3,2.2h22.8V25H2.3V2.2z M35,2.2h22.8V25H35V2.2zM2.3,35h22.8v22.8H2.3V35z M35,35h22.8v22.8H35V35z'\n        },\n        title: {\n            line: '切换为折线图',\n            bar: '切换为柱状图',\n            stack: '切换为堆叠',\n            tiled: '切换为平铺'\n        },\n        option: {},\n        seriesIndex: {}\n    };\n\n    var proto = MagicType.prototype;\n\n    proto.getIcons = function () {\n        var model = this.model;\n        var availableIcons = model.get('icon');\n        var icons = {};\n        zrUtil.each(model.get('type'), function (type) {\n            if (availableIcons[type]) {\n                icons[type] = availableIcons[type];\n            }\n        });\n        return icons;\n    };\n\n    var seriesOptGenreator = {\n        'line': function (seriesType, seriesId, seriesModel, model) {\n            if (seriesType === 'bar') {\n                return zrUtil.merge({\n                    id: seriesId,\n                    type: 'line',\n                    // Preserve data related option\n                    data: seriesModel.get('data'),\n                    stack: seriesModel.get('stack'),\n                    markPoint: seriesModel.get('markPoint'),\n                    markLine: seriesModel.get('markLine')\n                }, model.get('option.line') || {}, true);\n            }\n        },\n        'bar': function (seriesType, seriesId, seriesModel, model) {\n            if (seriesType === 'line') {\n                return zrUtil.merge({\n                    id: seriesId,\n                    type: 'bar',\n                    // Preserve data related option\n                    data: seriesModel.get('data'),\n                    stack: seriesModel.get('stack'),\n                    markPoint: seriesModel.get('markPoint'),\n                    markLine: seriesModel.get('markLine')\n                }, model.get('option.bar') || {}, true);\n            }\n        },\n        'stack': function (seriesType, seriesId, seriesModel, model) {\n            if (seriesType === 'line' || seriesType === 'bar') {\n                return zrUtil.merge({\n                    id: seriesId,\n                    stack: '__ec_magicType_stack__'\n                }, model.get('option.stack') || {}, true);\n            }\n        },\n        'tiled': function (seriesType, seriesId, seriesModel, model) {\n            if (seriesType === 'line' || seriesType === 'bar') {\n                return zrUtil.merge({\n                    id: seriesId,\n                    stack: ''\n                }, model.get('option.tiled') || {}, true);\n            }\n        }\n    };\n\n    var radioTypes = [\n        ['line', 'bar'],\n        ['stack', 'tiled']\n    ];\n\n    proto.onclick = function (ecModel, api, type) {\n        var model = this.model;\n        var seriesIndex = model.get('seriesIndex.' + type);\n        // Not supported magicType\n        if (!seriesOptGenreator[type]) {\n            return;\n        }\n        var newOption = {\n            series: []\n        };\n        var generateNewSeriesTypes = function (seriesModel) {\n            var seriesType = seriesModel.subType;\n            var seriesId = seriesModel.id;\n            var newSeriesOpt = seriesOptGenreator[type](\n                seriesType, seriesId, seriesModel, model\n            );\n            if (newSeriesOpt) {\n                // PENDING If merge original option?\n                zrUtil.defaults(newSeriesOpt, seriesModel.option);\n                newOption.series.push(newSeriesOpt);\n            }\n            // Modify boundaryGap\n            var coordSys = seriesModel.coordinateSystem;\n            if (coordSys && coordSys.type === 'cartesian2d' && (type === 'line' || type === 'bar')) {\n                var categoryAxis = coordSys.getAxesByScale('ordinal')[0];\n                if (categoryAxis) {\n                    var axisDim = categoryAxis.dim;\n                    var axisType = axisDim + 'Axis';\n                    var axisModel = ecModel.queryComponents({\n                        mainType: axisType,\n                        index: seriesModel.get(name + 'Index'),\n                        id: seriesModel.get(name + 'Id')\n                    })[0];\n                    var axisIndex = axisModel.componentIndex;\n\n                    newOption[axisType] = newOption[axisType] || [];\n                    for (var i = 0; i <= axisIndex; i++) {\n                        newOption[axisType][axisIndex] = newOption[axisType][axisIndex] || {};\n                    }\n                    newOption[axisType][axisIndex].boundaryGap = type === 'bar' ? true : false;\n                }\n            }\n        };\n\n        zrUtil.each(radioTypes, function (radio) {\n            if (zrUtil.indexOf(radio, type) >= 0) {\n                zrUtil.each(radio, function (item) {\n                    model.setIconStatus(item, 'normal');\n                });\n            }\n        });\n\n        model.setIconStatus(type, 'emphasis');\n\n        ecModel.eachComponent(\n            {\n                mainType: 'series',\n                query: seriesIndex == null ? null : {\n                    seriesIndex: seriesIndex\n                }\n            }, generateNewSeriesTypes\n        );\n        api.dispatchAction({\n            type: 'changeMagicType',\n            currentType: type,\n            newOption: newOption\n        });\n    };\n\n    var echarts = __webpack_require__(\"Cwwa\");\n    echarts.registerAction({\n        type: 'changeMagicType',\n        event: 'magicTypeChanged',\n        update: 'prepareAndUpdate'\n    }, function (payload, ecModel) {\n        ecModel.mergeOption(payload.newOption);\n    });\n\n    __webpack_require__(\"M5+E\").register('magicType', MagicType);\n\n    module.exports = MagicType;\n\n\n/***/ }),\n\n/***/ \"GjIh\":\n/***/ (function(module, exports) {\n\n\n    var ArrayCtor = typeof Float32Array === 'undefined'\n        ? Array\n        : Float32Array;\n    /**\n     * 3x2矩阵操作类\n     * @exports zrender/tool/matrix\n     */\n    var matrix = {\n        /**\n         * 创建一个单位矩阵\n         * @return {Float32Array|Array.<number>}\n         */\n        create : function() {\n            var out = new ArrayCtor(6);\n            matrix.identity(out);\n\n            return out;\n        },\n        /**\n         * 设置矩阵为单位矩阵\n         * @param {Float32Array|Array.<number>} out\n         */\n        identity : function(out) {\n            out[0] = 1;\n            out[1] = 0;\n            out[2] = 0;\n            out[3] = 1;\n            out[4] = 0;\n            out[5] = 0;\n            return out;\n        },\n        /**\n         * 复制矩阵\n         * @param {Float32Array|Array.<number>} out\n         * @param {Float32Array|Array.<number>} m\n         */\n        copy: function(out, m) {\n            out[0] = m[0];\n            out[1] = m[1];\n            out[2] = m[2];\n            out[3] = m[3];\n            out[4] = m[4];\n            out[5] = m[5];\n            return out;\n        },\n        /**\n         * 矩阵相乘\n         * @param {Float32Array|Array.<number>} out\n         * @param {Float32Array|Array.<number>} m1\n         * @param {Float32Array|Array.<number>} m2\n         */\n        mul : function (out, m1, m2) {\n            // Consider matrix.mul(m, m2, m);\n            // where out is the same as m2.\n            // So use temp variable to escape error.\n            var out0 = m1[0] * m2[0] + m1[2] * m2[1];\n            var out1 = m1[1] * m2[0] + m1[3] * m2[1];\n            var out2 = m1[0] * m2[2] + m1[2] * m2[3];\n            var out3 = m1[1] * m2[2] + m1[3] * m2[3];\n            var out4 = m1[0] * m2[4] + m1[2] * m2[5] + m1[4];\n            var out5 = m1[1] * m2[4] + m1[3] * m2[5] + m1[5];\n            out[0] = out0;\n            out[1] = out1;\n            out[2] = out2;\n            out[3] = out3;\n            out[4] = out4;\n            out[5] = out5;\n            return out;\n        },\n        /**\n         * 平移变换\n         * @param {Float32Array|Array.<number>} out\n         * @param {Float32Array|Array.<number>} a\n         * @param {Float32Array|Array.<number>} v\n         */\n        translate : function(out, a, v) {\n            out[0] = a[0];\n            out[1] = a[1];\n            out[2] = a[2];\n            out[3] = a[3];\n            out[4] = a[4] + v[0];\n            out[5] = a[5] + v[1];\n            return out;\n        },\n        /**\n         * 旋转变换\n         * @param {Float32Array|Array.<number>} out\n         * @param {Float32Array|Array.<number>} a\n         * @param {number} rad\n         */\n        rotate : function(out, a, rad) {\n            var aa = a[0];\n            var ac = a[2];\n            var atx = a[4];\n            var ab = a[1];\n            var ad = a[3];\n            var aty = a[5];\n            var st = Math.sin(rad);\n            var ct = Math.cos(rad);\n\n            out[0] = aa * ct + ab * st;\n            out[1] = -aa * st + ab * ct;\n            out[2] = ac * ct + ad * st;\n            out[3] = -ac * st + ct * ad;\n            out[4] = ct * atx + st * aty;\n            out[5] = ct * aty - st * atx;\n            return out;\n        },\n        /**\n         * 缩放变换\n         * @param {Float32Array|Array.<number>} out\n         * @param {Float32Array|Array.<number>} a\n         * @param {Float32Array|Array.<number>} v\n         */\n        scale : function(out, a, v) {\n            var vx = v[0];\n            var vy = v[1];\n            out[0] = a[0] * vx;\n            out[1] = a[1] * vy;\n            out[2] = a[2] * vx;\n            out[3] = a[3] * vy;\n            out[4] = a[4] * vx;\n            out[5] = a[5] * vy;\n            return out;\n        },\n        /**\n         * 求逆矩阵\n         * @param {Float32Array|Array.<number>} out\n         * @param {Float32Array|Array.<number>} a\n         */\n        invert : function(out, a) {\n\n            var aa = a[0];\n            var ac = a[2];\n            var atx = a[4];\n            var ab = a[1];\n            var ad = a[3];\n            var aty = a[5];\n\n            var det = aa * ad - ab * ac;\n            if (!det) {\n                return null;\n            }\n            det = 1.0 / det;\n\n            out[0] = ad * det;\n            out[1] = -ab * det;\n            out[2] = -ac * det;\n            out[3] = aa * det;\n            out[4] = (ac * aty - ad * atx) * det;\n            out[5] = (ab * atx - aa * aty) * det;\n            return out;\n        }\n    };\n\n    module.exports = matrix;\n\n\n\n/***/ }),\n\n/***/ \"GmGe\":\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * Log scale\n * @module echarts/scale/Log\n */\n\n\n    var zrUtil = __webpack_require__(\"nw1Z\");\n    var Scale = __webpack_require__(\"Tpbs\");\n    var numberUtil = __webpack_require__(\"0+Kq\");\n\n    // Use some method of IntervalScale\n    var IntervalScale = __webpack_require__(\"L5YH\");\n\n    var scaleProto = Scale.prototype;\n    var intervalScaleProto = IntervalScale.prototype;\n\n    var getPrecisionSafe = numberUtil.getPrecisionSafe;\n    var roundingErrorFix = numberUtil.round;\n\n    var mathFloor = Math.floor;\n    var mathCeil = Math.ceil;\n    var mathPow = Math.pow;\n\n    var mathLog = Math.log;\n\n    var LogScale = Scale.extend({\n\n        type: 'log',\n\n        base: 10,\n\n        $constructor: function () {\n            Scale.apply(this, arguments);\n            this._originalScale = new IntervalScale();\n        },\n\n        /**\n         * @return {Array.<number>}\n         */\n        getTicks: function () {\n            var originalScale = this._originalScale;\n            var extent = this._extent;\n            var originalExtent = originalScale.getExtent();\n\n            return zrUtil.map(intervalScaleProto.getTicks.call(this), function (val) {\n                var powVal = numberUtil.round(mathPow(this.base, val));\n\n                // Fix #4158\n                powVal = (val === extent[0] && originalScale.__fixMin)\n                    ? fixRoundingError(powVal, originalExtent[0])\n                    : powVal;\n                powVal = (val === extent[1] && originalScale.__fixMax)\n                    ? fixRoundingError(powVal, originalExtent[1])\n                    : powVal;\n\n                return powVal;\n            }, this);\n        },\n\n        /**\n         * @param {number} val\n         * @return {string}\n         */\n        getLabel: intervalScaleProto.getLabel,\n\n        /**\n         * @param  {number} val\n         * @return {number}\n         */\n        scale: function (val) {\n            val = scaleProto.scale.call(this, val);\n            return mathPow(this.base, val);\n        },\n\n        /**\n         * @param {number} start\n         * @param {number} end\n         */\n        setExtent: function (start, end) {\n            var base = this.base;\n            start = mathLog(start) / mathLog(base);\n            end = mathLog(end) / mathLog(base);\n            intervalScaleProto.setExtent.call(this, start, end);\n        },\n\n        /**\n         * @return {number} end\n         */\n        getExtent: function () {\n            var base = this.base;\n            var extent = scaleProto.getExtent.call(this);\n            extent[0] = mathPow(base, extent[0]);\n            extent[1] = mathPow(base, extent[1]);\n\n            // Fix #4158\n            var originalScale = this._originalScale;\n            var originalExtent = originalScale.getExtent();\n            originalScale.__fixMin && (extent[0] = fixRoundingError(extent[0], originalExtent[0]));\n            originalScale.__fixMax && (extent[1] = fixRoundingError(extent[1], originalExtent[1]));\n\n            return extent;\n        },\n\n        /**\n         * @param  {Array.<number>} extent\n         */\n        unionExtent: function (extent) {\n            this._originalScale.unionExtent(extent);\n\n            var base = this.base;\n            extent[0] = mathLog(extent[0]) / mathLog(base);\n            extent[1] = mathLog(extent[1]) / mathLog(base);\n            scaleProto.unionExtent.call(this, extent);\n        },\n\n        /**\n         * @override\n         */\n        unionExtentFromData: function (data, dim) {\n            this.unionExtent(data.getDataExtent(dim, true, function (val) {\n                return val > 0;\n            }));\n        },\n\n        /**\n         * Update interval and extent of intervals for nice ticks\n         * @param  {number} [approxTickNum = 10] Given approx tick number\n         */\n        niceTicks: function (approxTickNum) {\n            approxTickNum = approxTickNum || 10;\n            var extent = this._extent;\n            var span = extent[1] - extent[0];\n            if (span === Infinity || span <= 0) {\n                return;\n            }\n\n            var interval = numberUtil.quantity(span);\n            var err = approxTickNum / span * interval;\n\n            // Filter ticks to get closer to the desired count.\n            if (err <= 0.5) {\n                interval *= 10;\n            }\n\n            // Interval should be integer\n            while (!isNaN(interval) && Math.abs(interval) < 1 && Math.abs(interval) > 0) {\n                interval *= 10;\n            }\n\n            var niceExtent = [\n                numberUtil.round(mathCeil(extent[0] / interval) * interval),\n                numberUtil.round(mathFloor(extent[1] / interval) * interval)\n            ];\n\n            this._interval = interval;\n            this._niceExtent = niceExtent;\n        },\n\n        /**\n         * Nice extent.\n         * @override\n         */\n        niceExtent: function (opt) {\n            intervalScaleProto.niceExtent.call(this, opt);\n\n            var originalScale = this._originalScale;\n            originalScale.__fixMin = opt.fixMin;\n            originalScale.__fixMax = opt.fixMax;\n        }\n\n    });\n\n    zrUtil.each(['contain', 'normalize'], function (methodName) {\n        LogScale.prototype[methodName] = function (val) {\n            val = mathLog(val) / mathLog(this.base);\n            return scaleProto[methodName].call(this, val);\n        };\n    });\n\n    LogScale.create = function () {\n        return new LogScale();\n    };\n\n    function fixRoundingError(val, originalVal) {\n        return roundingErrorFix(val, getPrecisionSafe(originalVal));\n    }\n\n    module.exports = LogScale;\n\n\n/***/ }),\n\n/***/ \"H0dg\":\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * @module echarts/component/tooltip/TooltipContent\n */\n\n\n    var zrUtil = __webpack_require__(\"nw1Z\");\n    var zrColor = __webpack_require__(\"cwCJ\");\n    var eventUtil = __webpack_require__(\"kawL\");\n    var formatUtil = __webpack_require__(\"4oXW\");\n    var each = zrUtil.each;\n    var toCamelCase = formatUtil.toCamelCase;\n    var env = __webpack_require__(\"020c\");\n\n    var vendors = ['', '-webkit-', '-moz-', '-o-'];\n\n    var gCssText = 'position:absolute;display:block;border-style:solid;white-space:nowrap;z-index:9999999;';\n\n    /**\n     * @param {number} duration\n     * @return {string}\n     * @inner\n     */\n    function assembleTransition(duration) {\n        var transitionCurve = 'cubic-bezier(0.23, 1, 0.32, 1)';\n        var transitionText = 'left ' + duration + 's ' + transitionCurve + ','\n                            + 'top ' + duration + 's ' + transitionCurve;\n        return zrUtil.map(vendors, function (vendorPrefix) {\n            return vendorPrefix + 'transition:' + transitionText;\n        }).join(';');\n    }\n\n    /**\n     * @param {Object} textStyle\n     * @return {string}\n     * @inner\n     */\n    function assembleFont(textStyleModel) {\n        var cssText = [];\n\n        var fontSize = textStyleModel.get('fontSize');\n        var color = textStyleModel.getTextColor();\n\n        color && cssText.push('color:' + color);\n\n        cssText.push('font:' + textStyleModel.getFont());\n\n        fontSize &&\n            cssText.push('line-height:' + Math.round(fontSize * 3 / 2) + 'px');\n\n        each(['decoration', 'align'], function (name) {\n            var val = textStyleModel.get(name);\n            val && cssText.push('text-' + name + ':' + val);\n        });\n\n        return cssText.join(';');\n    }\n\n    /**\n     * @param {Object} tooltipModel\n     * @return {string}\n     * @inner\n     */\n    function assembleCssText(tooltipModel) {\n\n        var cssText = [];\n\n        var transitionDuration = tooltipModel.get('transitionDuration');\n        var backgroundColor = tooltipModel.get('backgroundColor');\n        var textStyleModel = tooltipModel.getModel('textStyle');\n        var padding = tooltipModel.get('padding');\n\n        // Animation transition. Do not animate when transitionDuration is 0.\n        transitionDuration &&\n            cssText.push(assembleTransition(transitionDuration));\n\n        if (backgroundColor) {\n            if (env.canvasSupported) {\n                cssText.push('background-Color:' + backgroundColor);\n            }\n            else {\n                // for ie\n                cssText.push(\n                    'background-Color:#' + zrColor.toHex(backgroundColor)\n                );\n                cssText.push('filter:alpha(opacity=70)');\n            }\n        }\n\n        // Border style\n        each(['width', 'color', 'radius'], function (name) {\n            var borderName = 'border-' + name;\n            var camelCase = toCamelCase(borderName);\n            var val = tooltipModel.get(camelCase);\n            val != null &&\n                cssText.push(borderName + ':' + val + (name === 'color' ? '' : 'px'));\n        });\n\n        // Text style\n        cssText.push(assembleFont(textStyleModel));\n\n        // Padding\n        if (padding != null) {\n            cssText.push('padding:' + formatUtil.normalizeCssArray(padding).join('px ') + 'px');\n        }\n\n        return cssText.join(';') + ';';\n    }\n\n    /**\n     * @alias module:echarts/component/tooltip/TooltipContent\n     * @constructor\n     */\n    function TooltipContent(container, api) {\n        var el = document.createElement('div');\n        var zr = this._zr = api.getZr();\n\n        this.el = el;\n\n        this._x = api.getWidth() / 2;\n        this._y = api.getHeight() / 2;\n\n        container.appendChild(el);\n\n        this._container = container;\n\n        this._show = false;\n\n        /**\n         * @private\n         */\n        this._hideTimeout;\n\n        var self = this;\n        el.onmouseenter = function () {\n            // clear the timeout in hideLater and keep showing tooltip\n            if (self._enterable) {\n                clearTimeout(self._hideTimeout);\n                self._show = true;\n            }\n            self._inContent = true;\n        };\n        el.onmousemove = function (e) {\n            e = e || window.event;\n            if (!self._enterable) {\n                // Try trigger zrender event to avoid mouse\n                // in and out shape too frequently\n                var handler = zr.handler;\n                eventUtil.normalizeEvent(container, e, true);\n                handler.dispatch('mousemove', e);\n            }\n        };\n        el.onmouseleave = function () {\n            if (self._enterable) {\n                if (self._show) {\n                    self.hideLater(self._hideDelay);\n                }\n            }\n            self._inContent = false;\n        };\n    }\n\n    TooltipContent.prototype = {\n\n        constructor: TooltipContent,\n\n        /**\n         * @private\n         * @type {boolean}\n         */\n        _enterable: true,\n\n        /**\n         * Update when tooltip is rendered\n         */\n        update: function () {\n            // FIXME\n            // Move this logic to ec main?\n            var container = this._container;\n            var stl = container.currentStyle\n                || document.defaultView.getComputedStyle(container);\n            var domStyle = container.style;\n            if (domStyle.position !== 'absolute' && stl.position !== 'absolute') {\n                domStyle.position = 'relative';\n            }\n            // Hide the tooltip\n            // PENDING\n            // this.hide();\n        },\n\n        show: function (tooltipModel) {\n            clearTimeout(this._hideTimeout);\n            var el = this.el;\n\n            el.style.cssText = gCssText + assembleCssText(tooltipModel)\n                // http://stackoverflow.com/questions/21125587/css3-transition-not-working-in-chrome-anymore\n                + ';left:' + this._x + 'px;top:' + this._y + 'px;'\n                + (tooltipModel.get('extraCssText') || '');\n\n            el.style.display = el.innerHTML ?  'block' : 'none';\n\n            this._show = true;\n        },\n\n        setContent: function (content) {\n            this.el.innerHTML = content == null ? '' : content;\n        },\n\n        setEnterable: function (enterable) {\n            this._enterable = enterable;\n        },\n\n        getSize: function () {\n            var el = this.el;\n            return [el.clientWidth, el.clientHeight];\n        },\n\n        moveTo: function (x, y) {\n            // xy should be based on canvas root. But tooltipContent is\n            // the sibling of canvas root. So padding of ec container\n            // should be considered here.\n            var zr = this._zr;\n            var viewportRoot;\n            if (zr && zr.painter && (viewportRoot = zr.painter.getViewportRoot())) {\n                x += viewportRoot.offsetLeft || 0;\n                y += viewportRoot.offsetTop || 0;\n            }\n\n            var style = this.el.style;\n            style.left = x + 'px';\n            style.top = y + 'px';\n\n            this._x = x;\n            this._y = y;\n        },\n\n        hide: function () {\n            this.el.style.display = 'none';\n            this._show = false;\n        },\n\n        hideLater: function (time) {\n            if (this._show && !(this._inContent && this._enterable)) {\n                if (time) {\n                    this._hideDelay = time;\n                    // Set show false to avoid invoke hideLater mutiple times\n                    this._show = false;\n                    this._hideTimeout = setTimeout(zrUtil.bind(this.hide, this), time);\n                }\n                else {\n                    this.hide();\n                }\n            }\n        },\n\n        isShow: function () {\n            return this._show;\n        }\n    };\n\n    module.exports = TooltipContent;\n\n\n/***/ }),\n\n/***/ \"HJZV\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n/**\n * Cartesian coordinate system\n * @module  echarts/coord/Cartesian\n *\n */\n\n\n    var zrUtil = __webpack_require__(\"nw1Z\");\n\n    function dimAxisMapper(dim) {\n        return this._axes[dim];\n    }\n\n    /**\n     * @alias module:echarts/coord/Cartesian\n     * @constructor\n     */\n    var Cartesian = function (name) {\n        this._axes = {};\n\n        this._dimList = [];\n\n        /**\n         * @type {string}\n         */\n        this.name = name || '';\n    };\n\n    Cartesian.prototype = {\n\n        constructor: Cartesian,\n\n        type: 'cartesian',\n\n        /**\n         * Get axis\n         * @param  {number|string} dim\n         * @return {module:echarts/coord/Cartesian~Axis}\n         */\n        getAxis: function (dim) {\n            return this._axes[dim];\n        },\n\n        /**\n         * Get axes list\n         * @return {Array.<module:echarts/coord/Cartesian~Axis>}\n         */\n        getAxes: function () {\n            return zrUtil.map(this._dimList, dimAxisMapper, this);\n        },\n\n        /**\n         * Get axes list by given scale type\n         */\n        getAxesByScale: function (scaleType) {\n            scaleType = scaleType.toLowerCase();\n            return zrUtil.filter(\n                this.getAxes(),\n                function (axis) {\n                    return axis.scale.type === scaleType;\n                }\n            );\n        },\n\n        /**\n         * Add axis\n         * @param {module:echarts/coord/Cartesian.Axis}\n         */\n        addAxis: function (axis) {\n            var dim = axis.dim;\n\n            this._axes[dim] = axis;\n\n            this._dimList.push(dim);\n        },\n\n        /**\n         * Convert data to coord in nd space\n         * @param {Array.<number>|Object.<string, number>} val\n         * @return {Array.<number>|Object.<string, number>}\n         */\n        dataToCoord: function (val) {\n            return this._dataCoordConvert(val, 'dataToCoord');\n        },\n\n        /**\n         * Convert coord in nd space to data\n         * @param  {Array.<number>|Object.<string, number>} val\n         * @return {Array.<number>|Object.<string, number>}\n         */\n        coordToData: function (val) {\n            return this._dataCoordConvert(val, 'coordToData');\n        },\n\n        _dataCoordConvert: function (input, method) {\n            var dimList = this._dimList;\n\n            var output = input instanceof Array ? [] : {};\n\n            for (var i = 0; i < dimList.length; i++) {\n                var dim = dimList[i];\n                var axis = this._axes[dim];\n\n                output[dim] = axis[method](input[dim]);\n            }\n\n            return output;\n        }\n    };\n\n    module.exports = Cartesian;\n\n\n/***/ }),\n\n/***/ \"HN64\":\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * @file Data zoom action\n */\n\n\n    var zrUtil = __webpack_require__(\"nw1Z\");\n    var helper = __webpack_require__(\"yToh\");\n    var echarts = __webpack_require__(\"Cwwa\");\n\n\n    echarts.registerAction('dataZoom', function (payload, ecModel) {\n\n        var linkedNodesFinder = helper.createLinkedNodesFinder(\n            zrUtil.bind(ecModel.eachComponent, ecModel, 'dataZoom'),\n            helper.eachAxisDim,\n            function (model, dimNames) {\n                return model.get(dimNames.axisIndex);\n            }\n        );\n\n        var effectedModels = [];\n\n        ecModel.eachComponent(\n            {mainType: 'dataZoom', query: payload},\n            function (model, index) {\n                effectedModels.push.apply(\n                    effectedModels, linkedNodesFinder(model).nodes\n                );\n            }\n        );\n\n        zrUtil.each(effectedModels, function (dataZoomModel, index) {\n            dataZoomModel.setRawRange({\n                start: payload.start,\n                end: payload.end,\n                startValue: payload.startValue,\n                endValue: payload.endValue\n            });\n        });\n\n    });\n\n\n\n/***/ }),\n\n/***/ \"J2oE\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n\n    var CMD = __webpack_require__(\"f/vB\").CMD;\n    var line = __webpack_require__(\"D2ou\");\n    var cubic = __webpack_require__(\"uy5n\");\n    var quadratic = __webpack_require__(\"8vhn\");\n    var arc = __webpack_require__(\"2c/z\");\n    var normalizeRadian = __webpack_require__(\"u4xi\").normalizeRadian;\n    var curve = __webpack_require__(\"cZ/t\");\n\n    var windingLine = __webpack_require__(\"e1yY\");\n\n    var containStroke = line.containStroke;\n\n    var PI2 = Math.PI * 2;\n\n    var EPSILON = 1e-4;\n\n    function isAroundEqual(a, b) {\n        return Math.abs(a - b) < EPSILON;\n    }\n\n    // 临时数组\n    var roots = [-1, -1, -1];\n    var extrema = [-1, -1];\n\n    function swapExtrema() {\n        var tmp = extrema[0];\n        extrema[0] = extrema[1];\n        extrema[1] = tmp;\n    }\n\n    function windingCubic(x0, y0, x1, y1, x2, y2, x3, y3, x, y) {\n        // Quick reject\n        if (\n            (y > y0 && y > y1 && y > y2 && y > y3)\n            || (y < y0 && y < y1 && y < y2 && y < y3)\n        ) {\n            return 0;\n        }\n        var nRoots = curve.cubicRootAt(y0, y1, y2, y3, y, roots);\n        if (nRoots === 0) {\n            return 0;\n        }\n        else {\n            var w = 0;\n            var nExtrema = -1;\n            var y0_, y1_;\n            for (var i = 0; i < nRoots; i++) {\n                var t = roots[i];\n\n                // Avoid winding error when intersection point is the connect point of two line of polygon\n                var unit = (t === 0 || t === 1) ? 0.5 : 1;\n\n                var x_ = curve.cubicAt(x0, x1, x2, x3, t);\n                if (x_ < x) { // Quick reject\n                    continue;\n                }\n                if (nExtrema < 0) {\n                    nExtrema = curve.cubicExtrema(y0, y1, y2, y3, extrema);\n                    if (extrema[1] < extrema[0] && nExtrema > 1) {\n                        swapExtrema();\n                    }\n                    y0_ = curve.cubicAt(y0, y1, y2, y3, extrema[0]);\n                    if (nExtrema > 1) {\n                        y1_ = curve.cubicAt(y0, y1, y2, y3, extrema[1]);\n                    }\n                }\n                if (nExtrema == 2) {\n                    // 分成三段单调函数\n                    if (t < extrema[0]) {\n                        w += y0_ < y0 ? unit : -unit;\n                    }\n                    else if (t < extrema[1]) {\n                        w += y1_ < y0_ ? unit : -unit;\n                    }\n                    else {\n                        w += y3 < y1_ ? unit : -unit;\n                    }\n                }\n                else {\n                    // 分成两段单调函数\n                    if (t < extrema[0]) {\n                        w += y0_ < y0 ? unit : -unit;\n                    }\n                    else {\n                        w += y3 < y0_ ? unit : -unit;\n                    }\n                }\n            }\n            return w;\n        }\n    }\n\n    function windingQuadratic(x0, y0, x1, y1, x2, y2, x, y) {\n        // Quick reject\n        if (\n            (y > y0 && y > y1 && y > y2)\n            || (y < y0 && y < y1 && y < y2)\n        ) {\n            return 0;\n        }\n        var nRoots = curve.quadraticRootAt(y0, y1, y2, y, roots);\n        if (nRoots === 0) {\n            return 0;\n        }\n        else {\n            var t = curve.quadraticExtremum(y0, y1, y2);\n            if (t >= 0 && t <= 1) {\n                var w = 0;\n                var y_ = curve.quadraticAt(y0, y1, y2, t);\n                for (var i = 0; i < nRoots; i++) {\n                    // Remove one endpoint.\n                    var unit = (roots[i] === 0 || roots[i] === 1) ? 0.5 : 1;\n\n                    var x_ = curve.quadraticAt(x0, x1, x2, roots[i]);\n                    if (x_ < x) {   // Quick reject\n                        continue;\n                    }\n                    if (roots[i] < t) {\n                        w += y_ < y0 ? unit : -unit;\n                    }\n                    else {\n                        w += y2 < y_ ? unit : -unit;\n                    }\n                }\n                return w;\n            }\n            else {\n                // Remove one endpoint.\n                var unit = (roots[0] === 0 || roots[0] === 1) ? 0.5 : 1;\n\n                var x_ = curve.quadraticAt(x0, x1, x2, roots[0]);\n                if (x_ < x) {   // Quick reject\n                    return 0;\n                }\n                return y2 < y0 ? unit : -unit;\n            }\n        }\n    }\n\n    // TODO\n    // Arc 旋转\n    function windingArc(\n        cx, cy, r, startAngle, endAngle, anticlockwise, x, y\n    ) {\n        y -= cy;\n        if (y > r || y < -r) {\n            return 0;\n        }\n        var tmp = Math.sqrt(r * r - y * y);\n        roots[0] = -tmp;\n        roots[1] = tmp;\n\n        var diff = Math.abs(startAngle - endAngle);\n        if (diff < 1e-4) {\n            return 0;\n        }\n        if (diff % PI2 < 1e-4) {\n            // Is a circle\n            startAngle = 0;\n            endAngle = PI2;\n            var dir = anticlockwise ? 1 : -1;\n            if (x >= roots[0] + cx && x <= roots[1] + cx) {\n                return dir;\n            } else {\n                return 0;\n            }\n        }\n\n        if (anticlockwise) {\n            var tmp = startAngle;\n            startAngle = normalizeRadian(endAngle);\n            endAngle = normalizeRadian(tmp);\n        }\n        else {\n            startAngle = normalizeRadian(startAngle);\n            endAngle = normalizeRadian(endAngle);\n        }\n        if (startAngle > endAngle) {\n            endAngle += PI2;\n        }\n\n        var w = 0;\n        for (var i = 0; i < 2; i++) {\n            var x_ = roots[i];\n            if (x_ + cx > x) {\n                var angle = Math.atan2(y, x_);\n                var dir = anticlockwise ? 1 : -1;\n                if (angle < 0) {\n                    angle = PI2 + angle;\n                }\n                if (\n                    (angle >= startAngle && angle <= endAngle)\n                    || (angle + PI2 >= startAngle && angle + PI2 <= endAngle)\n                ) {\n                    if (angle > Math.PI / 2 && angle < Math.PI * 1.5) {\n                        dir = -dir;\n                    }\n                    w += dir;\n                }\n            }\n        }\n        return w;\n    }\n\n    function containPath(data, lineWidth, isStroke, x, y) {\n        var w = 0;\n        var xi = 0;\n        var yi = 0;\n        var x0 = 0;\n        var y0 = 0;\n\n        for (var i = 0; i < data.length;) {\n            var cmd = data[i++];\n            // Begin a new subpath\n            if (cmd === CMD.M && i > 1) {\n                // Close previous subpath\n                if (!isStroke) {\n                    w += windingLine(xi, yi, x0, y0, x, y);\n                }\n                // 如果被任何一个 subpath 包含\n                // if (w !== 0) {\n                //     return true;\n                // }\n            }\n\n            if (i == 1) {\n                // 如果第一个命令是 L, C, Q\n                // 则 previous point 同绘制命令的第一个 point\n                //\n                // 第一个命令为 Arc 的情况下会在后面特殊处理\n                xi = data[i];\n                yi = data[i + 1];\n\n                x0 = xi;\n                y0 = yi;\n            }\n\n            switch (cmd) {\n                case CMD.M:\n                    // moveTo 命令重新创建一个新的 subpath, 并且更新新的起点\n                    // 在 closePath 的时候使用\n                    x0 = data[i++];\n                    y0 = data[i++];\n                    xi = x0;\n                    yi = y0;\n                    break;\n                case CMD.L:\n                    if (isStroke) {\n                        if (containStroke(xi, yi, data[i], data[i + 1], lineWidth, x, y)) {\n                            return true;\n                        }\n                    }\n                    else {\n                        // NOTE 在第一个命令为 L, C, Q 的时候会计算出 NaN\n                        w += windingLine(xi, yi, data[i], data[i + 1], x, y) || 0;\n                    }\n                    xi = data[i++];\n                    yi = data[i++];\n                    break;\n                case CMD.C:\n                    if (isStroke) {\n                        if (cubic.containStroke(xi, yi,\n                            data[i++], data[i++], data[i++], data[i++], data[i], data[i + 1],\n                            lineWidth, x, y\n                        )) {\n                            return true;\n                        }\n                    }\n                    else {\n                        w += windingCubic(\n                            xi, yi,\n                            data[i++], data[i++], data[i++], data[i++], data[i], data[i + 1],\n                            x, y\n                        ) || 0;\n                    }\n                    xi = data[i++];\n                    yi = data[i++];\n                    break;\n                case CMD.Q:\n                    if (isStroke) {\n                        if (quadratic.containStroke(xi, yi,\n                            data[i++], data[i++], data[i], data[i + 1],\n                            lineWidth, x, y\n                        )) {\n                            return true;\n                        }\n                    }\n                    else {\n                        w += windingQuadratic(\n                            xi, yi,\n                            data[i++], data[i++], data[i], data[i + 1],\n                            x, y\n                        ) || 0;\n                    }\n                    xi = data[i++];\n                    yi = data[i++];\n                    break;\n                case CMD.A:\n                    // TODO Arc 判断的开销比较大\n                    var cx = data[i++];\n                    var cy = data[i++];\n                    var rx = data[i++];\n                    var ry = data[i++];\n                    var theta = data[i++];\n                    var dTheta = data[i++];\n                    // TODO Arc 旋转\n                    var psi = data[i++];\n                    var anticlockwise = 1 - data[i++];\n                    var x1 = Math.cos(theta) * rx + cx;\n                    var y1 = Math.sin(theta) * ry + cy;\n                    // 不是直接使用 arc 命令\n                    if (i > 1) {\n                        w += windingLine(xi, yi, x1, y1, x, y);\n                    }\n                    else {\n                        // 第一个命令起点还未定义\n                        x0 = x1;\n                        y0 = y1;\n                    }\n                    // zr 使用scale来模拟椭圆, 这里也对x做一定的缩放\n                    var _x = (x - cx) * ry / rx + cx;\n                    if (isStroke) {\n                        if (arc.containStroke(\n                            cx, cy, ry, theta, theta + dTheta, anticlockwise,\n                            lineWidth, _x, y\n                        )) {\n                            return true;\n                        }\n                    }\n                    else {\n                        w += windingArc(\n                            cx, cy, ry, theta, theta + dTheta, anticlockwise,\n                            _x, y\n                        );\n                    }\n                    xi = Math.cos(theta + dTheta) * rx + cx;\n                    yi = Math.sin(theta + dTheta) * ry + cy;\n                    break;\n                case CMD.R:\n                    x0 = xi = data[i++];\n                    y0 = yi = data[i++];\n                    var width = data[i++];\n                    var height = data[i++];\n                    var x1 = x0 + width;\n                    var y1 = y0 + height;\n                    if (isStroke) {\n                        if (containStroke(x0, y0, x1, y0, lineWidth, x, y)\n                          || containStroke(x1, y0, x1, y1, lineWidth, x, y)\n                          || containStroke(x1, y1, x0, y1, lineWidth, x, y)\n                          || containStroke(x0, y1, x0, y0, lineWidth, x, y)\n                        ) {\n                            return true;\n                        }\n                    }\n                    else {\n                        // FIXME Clockwise ?\n                        w += windingLine(x1, y0, x1, y1, x, y);\n                        w += windingLine(x0, y1, x0, y0, x, y);\n                    }\n                    break;\n                case CMD.Z:\n                    if (isStroke) {\n                        if (containStroke(\n                            xi, yi, x0, y0, lineWidth, x, y\n                        )) {\n                            return true;\n                        }\n                    }\n                    else {\n                        // Close a subpath\n                        w += windingLine(xi, yi, x0, y0, x, y);\n                        // 如果被任何一个 subpath 包含\n                        // FIXME subpaths may overlap\n                        // if (w !== 0) {\n                        //     return true;\n                        // }\n                    }\n                    xi = x0;\n                    yi = y0;\n                    break;\n            }\n        }\n        if (!isStroke && !isAroundEqual(yi, y0)) {\n            w += windingLine(xi, yi, x0, y0, x, y) || 0;\n        }\n        return w !== 0;\n    }\n\n    module.exports = {\n        contain: function (pathData, x, y) {\n            return containPath(pathData, 0, false, x, y);\n        },\n\n        containStroke: function (pathData, lineWidth, x, y) {\n            return containPath(pathData, lineWidth, true, x, y);\n        }\n    };\n\n\n/***/ }),\n\n/***/ \"JEU6\":\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * @module echarts/chart/helper/Symbol\n */\n\n\n    var zrUtil = __webpack_require__(\"nw1Z\");\n    var symbolUtil = __webpack_require__(\"LDr7\");\n    var graphic = __webpack_require__(\"y2WT\");\n    var numberUtil = __webpack_require__(\"0+Kq\");\n    var labelHelper = __webpack_require__(\"vGh9\");\n\n    function getSymbolSize(data, idx) {\n        var symbolSize = data.getItemVisual(idx, 'symbolSize');\n        return symbolSize instanceof Array\n            ? symbolSize.slice()\n            : [+symbolSize, +symbolSize];\n    }\n\n    function getScale(symbolSize) {\n        return [symbolSize[0] / 2, symbolSize[1] / 2];\n    }\n\n    /**\n     * @constructor\n     * @alias {module:echarts/chart/helper/Symbol}\n     * @param {module:echarts/data/List} data\n     * @param {number} idx\n     * @extends {module:zrender/graphic/Group}\n     */\n    function Symbol(data, idx, seriesScope) {\n        graphic.Group.call(this);\n\n        this.updateData(data, idx, seriesScope);\n    }\n\n    var symbolProto = Symbol.prototype;\n\n    function driftSymbol(dx, dy) {\n        this.parent.drift(dx, dy);\n    }\n\n    symbolProto._createSymbol = function (symbolType, data, idx, symbolSize) {\n        // Remove paths created before\n        this.removeAll();\n\n        var seriesModel = data.hostModel;\n        var color = data.getItemVisual(idx, 'color');\n\n        // var symbolPath = symbolUtil.createSymbol(\n        //     symbolType, -0.5, -0.5, 1, 1, color\n        // );\n        // If width/height are set too small (e.g., set to 1) on ios10\n        // and macOS Sierra, a circle stroke become a rect, no matter what\n        // the scale is set. So we set width/height as 2. See #4150.\n        var symbolPath = symbolUtil.createSymbol(\n            symbolType, -1, -1, 2, 2, color\n        );\n\n        symbolPath.attr({\n            z2: 100,\n            culling: true,\n            scale: [0, 0]\n        });\n        // Rewrite drift method\n        symbolPath.drift = driftSymbol;\n\n        graphic.initProps(symbolPath, {\n            scale: getScale(symbolSize)\n        }, seriesModel, idx);\n        this._symbolType = symbolType;\n\n        this.add(symbolPath);\n    };\n\n    /**\n     * Stop animation\n     * @param {boolean} toLastFrame\n     */\n    symbolProto.stopSymbolAnimation = function (toLastFrame) {\n        this.childAt(0).stopAnimation(toLastFrame);\n    };\n\n    /**\n     * Get symbol path element\n     */\n    symbolProto.getSymbolPath = function () {\n        return this.childAt(0);\n    };\n\n    /**\n     * Get scale(aka, current symbol size).\n     * Including the change caused by animation\n     */\n    symbolProto.getScale = function () {\n        return this.childAt(0).scale;\n    };\n\n    /**\n     * Highlight symbol\n     */\n    symbolProto.highlight = function () {\n        this.childAt(0).trigger('emphasis');\n    };\n\n    /**\n     * Downplay symbol\n     */\n    symbolProto.downplay = function () {\n        this.childAt(0).trigger('normal');\n    };\n\n    /**\n     * @param {number} zlevel\n     * @param {number} z\n     */\n    symbolProto.setZ = function (zlevel, z) {\n        var symbolPath = this.childAt(0);\n        symbolPath.zlevel = zlevel;\n        symbolPath.z = z;\n    };\n\n    symbolProto.setDraggable = function (draggable) {\n        var symbolPath = this.childAt(0);\n        symbolPath.draggable = draggable;\n        symbolPath.cursor = draggable ? 'move' : 'pointer';\n    };\n\n    /**\n     * Update symbol properties\n     * @param  {module:echarts/data/List} data\n     * @param  {number} idx\n     */\n    symbolProto.updateData = function (data, idx, seriesScope) {\n        this.silent = false;\n\n        var symbolType = data.getItemVisual(idx, 'symbol') || 'circle';\n        var seriesModel = data.hostModel;\n        var symbolSize = getSymbolSize(data, idx);\n\n        if (symbolType !== this._symbolType) {\n            this._createSymbol(symbolType, data, idx, symbolSize);\n        }\n        else {\n            var symbolPath = this.childAt(0);\n            symbolPath.silent = false;\n            graphic.updateProps(symbolPath, {\n                scale: getScale(symbolSize)\n            }, seriesModel, idx);\n        }\n        this._updateCommon(data, idx, symbolSize, seriesScope);\n        this._seriesModel = seriesModel;\n    };\n\n    // Update common properties\n    var normalStyleAccessPath = ['itemStyle', 'normal'];\n    var emphasisStyleAccessPath = ['itemStyle', 'emphasis'];\n    var normalLabelAccessPath = ['label', 'normal'];\n    var emphasisLabelAccessPath = ['label', 'emphasis'];\n\n    symbolProto._updateCommon = function (data, idx, symbolSize, seriesScope) {\n        var symbolPath = this.childAt(0);\n        var seriesModel = data.hostModel;\n        var color = data.getItemVisual(idx, 'color');\n\n        // Reset style\n        if (symbolPath.type !== 'image') {\n            symbolPath.useStyle({\n                strokeNoScale: true\n            });\n        }\n\n        seriesScope = seriesScope || null;\n\n        var itemStyle = seriesScope && seriesScope.itemStyle;\n        var hoverItemStyle = seriesScope && seriesScope.hoverItemStyle;\n        var symbolRotate = seriesScope && seriesScope.symbolRotate;\n        var symbolOffset = seriesScope && seriesScope.symbolOffset;\n        var labelModel = seriesScope && seriesScope.labelModel;\n        var hoverLabelModel = seriesScope && seriesScope.hoverLabelModel;\n        var hoverAnimation = seriesScope && seriesScope.hoverAnimation;\n\n        if (!seriesScope || data.hasItemOption) {\n            var itemModel = data.getItemModel(idx);\n\n            // Color must be excluded.\n            // Because symbol provide setColor individually to set fill and stroke\n            itemStyle = itemModel.getModel(normalStyleAccessPath).getItemStyle(['color']);\n            hoverItemStyle = itemModel.getModel(emphasisStyleAccessPath).getItemStyle();\n\n            symbolRotate = itemModel.getShallow('symbolRotate');\n            symbolOffset = itemModel.getShallow('symbolOffset');\n\n            labelModel = itemModel.getModel(normalLabelAccessPath);\n            hoverLabelModel = itemModel.getModel(emphasisLabelAccessPath);\n            hoverAnimation = itemModel.getShallow('hoverAnimation');\n        }\n        else {\n            hoverItemStyle = zrUtil.extend({}, hoverItemStyle);\n        }\n\n        var elStyle = symbolPath.style;\n\n        symbolPath.attr('rotation', (symbolRotate || 0) * Math.PI / 180 || 0);\n\n        if (symbolOffset) {\n            symbolPath.attr('position', [\n                numberUtil.parsePercent(symbolOffset[0], symbolSize[0]),\n                numberUtil.parsePercent(symbolOffset[1], symbolSize[1])\n            ]);\n        }\n\n        // PENDING setColor before setStyle!!!\n        symbolPath.setColor(color);\n\n        symbolPath.setStyle(itemStyle);\n\n        var opacity = data.getItemVisual(idx, 'opacity');\n        if (opacity != null) {\n            elStyle.opacity = opacity;\n        }\n\n        var valueDim = labelHelper.findLabelValueDim(data);\n        labelHelper.setTextToStyle(\n            data, idx, valueDim, elStyle, seriesModel, labelModel, color\n        );\n        labelHelper.setTextToStyle(\n            data, idx, valueDim, hoverItemStyle, seriesModel, hoverLabelModel, color\n        );\n\n        symbolPath.off('mouseover')\n            .off('mouseout')\n            .off('emphasis')\n            .off('normal');\n\n        symbolPath.hoverStyle = hoverItemStyle;\n\n        graphic.setHoverStyle(symbolPath);\n\n        var scale = getScale(symbolSize);\n\n        if (hoverAnimation && seriesModel.isAnimationEnabled()) {\n            var onEmphasis = function() {\n                var ratio = scale[1] / scale[0];\n                this.animateTo({\n                    scale: [\n                        Math.max(scale[0] * 1.1, scale[0] + 3),\n                        Math.max(scale[1] * 1.1, scale[1] + 3 * ratio)\n                    ]\n                }, 400, 'elasticOut');\n            };\n            var onNormal = function() {\n                this.animateTo({\n                    scale: scale\n                }, 400, 'elasticOut');\n            };\n            symbolPath.on('mouseover', onEmphasis)\n                .on('mouseout', onNormal)\n                .on('emphasis', onEmphasis)\n                .on('normal', onNormal);\n        }\n    };\n\n    symbolProto.fadeOut = function (cb) {\n        var symbolPath = this.childAt(0);\n        // Avoid mistaken hover when fading out\n        this.silent = symbolPath.silent = true;\n        // Not show text when animating\n        symbolPath.style.text = '';\n        graphic.updateProps(symbolPath, {\n            scale: [0, 0]\n        }, this._seriesModel, this.dataIndex, cb);\n    };\n\n    zrUtil.inherits(Symbol, graphic.Group);\n\n    module.exports = Symbol;\n\n\n/***/ }),\n\n/***/ \"JKcJ\":\n/***/ (function(module, exports) {\n\n/**\n * @module zrender/graphic/Style\n */\n\n\n    var STYLE_COMMON_PROPS = [\n        ['shadowBlur', 0], ['shadowOffsetX', 0], ['shadowOffsetY', 0], ['shadowColor', '#000'],\n        ['lineCap', 'butt'], ['lineJoin', 'miter'], ['miterLimit', 10]\n    ];\n\n    // var SHADOW_PROPS = STYLE_COMMON_PROPS.slice(0, 4);\n    // var LINE_PROPS = STYLE_COMMON_PROPS.slice(4);\n\n    var Style = function (opts) {\n        this.extendFrom(opts);\n    };\n\n    function createLinearGradient(ctx, obj, rect) {\n        var x = obj.x == null ? 0 : obj.x;\n        var x2 = obj.x2 == null ? 1 : obj.x2;\n        var y = obj.y == null ? 0 : obj.y;\n        var y2 = obj.y2 == null ? 0 : obj.y2;\n\n        if (!obj.global) {\n            x = x * rect.width + rect.x;\n            x2 = x2 * rect.width + rect.x;\n            y = y * rect.height + rect.y;\n            y2 = y2 * rect.height + rect.y;\n        }\n\n        var canvasGradient = ctx.createLinearGradient(x, y, x2, y2);\n\n        return canvasGradient;\n    }\n\n    function createRadialGradient(ctx, obj, rect) {\n        var width = rect.width;\n        var height = rect.height;\n        var min = Math.min(width, height);\n\n        var x = obj.x == null ? 0.5 : obj.x;\n        var y = obj.y == null ? 0.5 : obj.y;\n        var r = obj.r == null ? 0.5 : obj.r;\n        if (!obj.global) {\n            x = x * width + rect.x;\n            y = y * height + rect.y;\n            r = r * min;\n        }\n\n        var canvasGradient = ctx.createRadialGradient(x, y, 0, x, y, r);\n\n        return canvasGradient;\n    }\n\n\n    Style.prototype = {\n\n        constructor: Style,\n\n        /**\n         * @type {string}\n         */\n        fill: '#000000',\n\n        /**\n         * @type {string}\n         */\n        stroke: null,\n\n        /**\n         * @type {number}\n         */\n        opacity: 1,\n\n        /**\n         * @type {Array.<number>}\n         */\n        lineDash: null,\n\n        /**\n         * @type {number}\n         */\n        lineDashOffset: 0,\n\n        /**\n         * @type {number}\n         */\n        shadowBlur: 0,\n\n        /**\n         * @type {number}\n         */\n        shadowOffsetX: 0,\n\n        /**\n         * @type {number}\n         */\n        shadowOffsetY: 0,\n\n        /**\n         * @type {number}\n         */\n        lineWidth: 1,\n\n        /**\n         * If stroke ignore scale\n         * @type {Boolean}\n         */\n        strokeNoScale: false,\n\n        // Bounding rect text configuration\n        // Not affected by element transform\n        /**\n         * @type {string}\n         */\n        text: null,\n\n        /**\n         * @type {string}\n         */\n        textFill: '#000',\n\n        /**\n         * @type {string}\n         */\n        textStroke: null,\n\n        /**\n         * 'inside', 'left', 'right', 'top', 'bottom'\n         * [x, y]\n         * @type {string|Array.<number>}\n         * @default 'inside'\n         */\n        textPosition: 'inside',\n\n        /**\n         * [x, y]\n         * @type {Array.<number>}\n         */\n        textOffset: null,\n\n        /**\n         * @type {string}\n         */\n        textBaseline: null,\n\n        /**\n         * @type {string}\n         */\n        textAlign: null,\n\n        /**\n         * @type {string}\n         */\n        textVerticalAlign: null,\n\n        /**\n         * Only useful in Path and Image element\n         * @type {number}\n         */\n        textDistance: 5,\n\n        /**\n         * Only useful in Path and Image element\n         * @type {number}\n         */\n        textShadowBlur: 0,\n\n        /**\n         * Only useful in Path and Image element\n         * @type {number}\n         */\n        textShadowOffsetX: 0,\n\n        /**\n         * Only useful in Path and Image element\n         * @type {number}\n         */\n        textShadowOffsetY: 0,\n\n        /**\n         * If transform text\n         * Only useful in Path and Image element\n         * @type {boolean}\n         */\n        textTransform: false,\n\n        /**\n         * Text rotate around position of Path or Image\n         * Only useful in Path and Image element and textTransform is false.\n         */\n        textRotation: 0,\n\n        /**\n         * @type {string}\n         * https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/globalCompositeOperation\n         */\n        blend: null,\n\n        /**\n         * @param {CanvasRenderingContext2D} ctx\n         */\n        bind: function (ctx, el, prevEl) {\n            var style = this;\n            var prevStyle = prevEl && prevEl.style;\n            var firstDraw = !prevStyle;\n\n            for (var i = 0; i < STYLE_COMMON_PROPS.length; i++) {\n                var prop = STYLE_COMMON_PROPS[i];\n                var styleName = prop[0];\n\n                if (firstDraw || style[styleName] !== prevStyle[styleName]) {\n                    // FIXME Invalid property value will cause style leak from previous element.\n                    ctx[styleName] = style[styleName] || prop[1];\n                }\n            }\n\n            if ((firstDraw || style.fill !== prevStyle.fill)) {\n                ctx.fillStyle = style.fill;\n            }\n            if ((firstDraw || style.stroke !== prevStyle.stroke)) {\n                ctx.strokeStyle = style.stroke;\n            }\n            if ((firstDraw || style.opacity !== prevStyle.opacity)) {\n                ctx.globalAlpha = style.opacity == null ? 1 : style.opacity;\n            }\n\n            if ((firstDraw || style.blend !== prevStyle.blend)) {\n                ctx.globalCompositeOperation = style.blend || 'source-over';\n            }\n            if (this.hasStroke()) {\n                var lineWidth = style.lineWidth;\n                ctx.lineWidth = lineWidth / (\n                    (this.strokeNoScale && el && el.getLineScale) ? el.getLineScale() : 1\n                );\n            }\n        },\n\n        hasFill: function () {\n            var fill = this.fill;\n            return fill != null && fill !== 'none';\n        },\n\n        hasStroke: function () {\n            var stroke = this.stroke;\n            return stroke != null && stroke !== 'none' && this.lineWidth > 0;\n        },\n\n        /**\n         * Extend from other style\n         * @param {zrender/graphic/Style} otherStyle\n         * @param {boolean} overwrite\n         */\n        extendFrom: function (otherStyle, overwrite) {\n            if (otherStyle) {\n                var target = this;\n                for (var name in otherStyle) {\n                    if (otherStyle.hasOwnProperty(name)\n                        && (overwrite || ! target.hasOwnProperty(name))\n                    ) {\n                        target[name] = otherStyle[name];\n                    }\n                }\n            }\n        },\n\n        /**\n         * Batch setting style with a given object\n         * @param {Object|string} obj\n         * @param {*} [obj]\n         */\n        set: function (obj, value) {\n            if (typeof obj === 'string') {\n                this[obj] = value;\n            }\n            else {\n                this.extendFrom(obj, true);\n            }\n        },\n\n        /**\n         * Clone\n         * @return {zrender/graphic/Style} [description]\n         */\n        clone: function () {\n            var newStyle = new this.constructor();\n            newStyle.extendFrom(this, true);\n            return newStyle;\n        },\n\n        getGradient: function (ctx, obj, rect) {\n            var method = obj.type === 'radial' ? createRadialGradient : createLinearGradient;\n            var canvasGradient = method(ctx, obj, rect);\n            var colorStops = obj.colorStops;\n            for (var i = 0; i < colorStops.length; i++) {\n                canvasGradient.addColorStop(\n                    colorStops[i].offset, colorStops[i].color\n                );\n            }\n            return canvasGradient;\n        }\n    };\n\n    var styleProto = Style.prototype;\n    for (var i = 0; i < STYLE_COMMON_PROPS.length; i++) {\n        var prop = STYLE_COMMON_PROPS[i];\n        if (!(prop[0] in styleProto)) {\n            styleProto[prop[0]] = prop[1];\n        }\n    }\n\n    // Provide for others\n    Style.getGradient = styleProto.getGradient;\n\n    module.exports = Style;\n\n\n/***/ }),\n\n/***/ \"Js5e\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\n    var zrUtil = __webpack_require__(\"nw1Z\");\n    var graphic = __webpack_require__(\"y2WT\");\n\n    var helper = {};\n\n    helper.setLabel = function (\n        normalStyle, hoverStyle, itemModel, color, seriesModel, dataIndex, labelPositionOutside\n    ) {\n        var labelModel = itemModel.getModel('label.normal');\n        var hoverLabelModel = itemModel.getModel('label.emphasis');\n\n        if (labelModel.get('show')) {\n            setLabel(\n                normalStyle, labelModel, color,\n                zrUtil.retrieve(\n                    seriesModel.getFormattedLabel(dataIndex, 'normal'),\n                    seriesModel.getRawValue(dataIndex)\n                ),\n                labelPositionOutside\n            );\n        }\n        else {\n            normalStyle.text = '';\n        }\n\n        if (hoverLabelModel.get('show')) {\n            setLabel(\n                hoverStyle, hoverLabelModel, color,\n                zrUtil.retrieve(\n                    seriesModel.getFormattedLabel(dataIndex, 'emphasis'),\n                    seriesModel.getRawValue(dataIndex)\n                ),\n                labelPositionOutside\n            );\n        }\n        else {\n            hoverStyle.text = '';\n        }\n    };\n\n    function setLabel(style, model, color, labelText, labelPositionOutside) {\n        graphic.setText(style, model, color);\n        style.text = labelText;\n        if (style.textPosition === 'outside') {\n            style.textPosition = labelPositionOutside;\n        }\n    }\n\n    module.exports = helper;\n\n\n/***/ }),\n\n/***/ \"K/R+\":\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * @module echarts/chart/helper/SymbolDraw\n */\n\n\n    var graphic = __webpack_require__(\"y2WT\");\n    var Symbol = __webpack_require__(\"JEU6\");\n\n    /**\n     * @constructor\n     * @alias module:echarts/chart/helper/SymbolDraw\n     * @param {module:zrender/graphic/Group} [symbolCtor]\n     */\n    function SymbolDraw(symbolCtor) {\n        this.group = new graphic.Group();\n\n        this._symbolCtor = symbolCtor || Symbol;\n    }\n\n    var symbolDrawProto = SymbolDraw.prototype;\n\n    function symbolNeedsDraw(data, idx, isIgnore) {\n        var point = data.getItemLayout(idx);\n        // Is an object\n        // if (point && point.hasOwnProperty('point')) {\n        //     point = point.point;\n        // }\n        return point && !isNaN(point[0]) && !isNaN(point[1]) && !(isIgnore && isIgnore(idx))\n                    && data.getItemVisual(idx, 'symbol') !== 'none';\n    }\n    /**\n     * Update symbols draw by new data\n     * @param {module:echarts/data/List} data\n     * @param {Array.<boolean>} [isIgnore]\n     */\n    symbolDrawProto.updateData = function (data, isIgnore) {\n        var group = this.group;\n        var seriesModel = data.hostModel;\n        var oldData = this._data;\n\n        var SymbolCtor = this._symbolCtor;\n\n        var seriesScope = {\n            itemStyle: seriesModel.getModel('itemStyle.normal').getItemStyle(['color']),\n            hoverItemStyle: seriesModel.getModel('itemStyle.emphasis').getItemStyle(),\n            symbolRotate: seriesModel.get('symbolRotate'),\n            symbolOffset: seriesModel.get('symbolOffset'),\n            hoverAnimation: seriesModel.get('hoverAnimation'),\n\n            labelModel: seriesModel.getModel('label.normal'),\n            hoverLabelModel: seriesModel.getModel('label.emphasis')\n        };\n\n        data.diff(oldData)\n            .add(function (newIdx) {\n                var point = data.getItemLayout(newIdx);\n                if (symbolNeedsDraw(data, newIdx, isIgnore)) {\n                    var symbolEl = new SymbolCtor(data, newIdx, seriesScope);\n                    symbolEl.attr('position', point);\n                    data.setItemGraphicEl(newIdx, symbolEl);\n                    group.add(symbolEl);\n                }\n            })\n            .update(function (newIdx, oldIdx) {\n                var symbolEl = oldData.getItemGraphicEl(oldIdx);\n                var point = data.getItemLayout(newIdx);\n                if (!symbolNeedsDraw(data, newIdx, isIgnore)) {\n                    group.remove(symbolEl);\n                    return;\n                }\n                if (!symbolEl) {\n                    symbolEl = new SymbolCtor(data, newIdx);\n                    symbolEl.attr('position', point);\n                }\n                else {\n                    symbolEl.updateData(data, newIdx, seriesScope);\n                    graphic.updateProps(symbolEl, {\n                        position: point\n                    }, seriesModel);\n                }\n\n                // Add back\n                group.add(symbolEl);\n\n                data.setItemGraphicEl(newIdx, symbolEl);\n            })\n            .remove(function (oldIdx) {\n                var el = oldData.getItemGraphicEl(oldIdx);\n                el && el.fadeOut(function () {\n                    group.remove(el);\n                });\n            })\n            .execute();\n\n        this._data = data;\n    };\n\n    symbolDrawProto.updateLayout = function () {\n        var data = this._data;\n        if (data) {\n            // Not use animation\n            data.eachItemGraphicEl(function (el, idx) {\n                var point = data.getItemLayout(idx);\n                el.attr('position', point);\n            });\n        }\n    };\n\n    symbolDrawProto.remove = function (enableAnimation) {\n        var group = this.group;\n        var data = this._data;\n        if (data) {\n            if (enableAnimation) {\n                data.eachItemGraphicEl(function (el) {\n                    el.fadeOut(function () {\n                        group.remove(el);\n                    });\n                });\n            }\n            else {\n                group.removeAll();\n            }\n        }\n    };\n\n    module.exports = SymbolDraw;\n\n\n/***/ }),\n\n/***/ \"K0Lg\":\n/***/ (function(module, exports) {\n\n\n\n    module.exports = function (seriesType, ecModel) {\n        ecModel.eachSeriesByType(seriesType, function (seriesModel) {\n            var data = seriesModel.getData();\n            var coordSys = seriesModel.coordinateSystem;\n\n            if (!coordSys) {\n                return;\n            }\n\n            var dims = [];\n            var coordDims = coordSys.dimensions;\n            for (var i = 0; i < coordDims.length; i++) {\n                dims.push(seriesModel.coordDimToDataDim(coordSys.dimensions[i])[0]);\n            }\n\n            if (dims.length === 1) {\n                data.each(dims[0], function (x, idx) {\n                    // Also {Array.<number>}, not undefined to avoid if...else... statement\n                    data.setItemLayout(idx, isNaN(x) ? [NaN, NaN] : coordSys.dataToPoint(x));\n                });\n            }\n            else if (dims.length === 2) {\n                data.each(dims, function (x, y, idx) {\n                    // Also {Array.<number>}, not undefined to avoid if...else... statement\n                    data.setItemLayout(\n                        idx, (isNaN(x) || isNaN(y)) ? [NaN, NaN] : coordSys.dataToPoint([x, y])\n                    );\n                }, true);\n            }\n        });\n    };\n\n\n\n/***/ }),\n\n/***/ \"Klcl\":\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * @file Roam controller manager.\n */\n\n\n    // Only create one roam controller for each coordinate system.\n    // one roam controller might be refered by two inside data zoom\n    // components (for example, one for x and one for y). When user\n    // pan or zoom, only dispatch one action for those data zoom\n    // components.\n\n    var zrUtil = __webpack_require__(\"nw1Z\");\n    var RoamController = __webpack_require__(\"DQU+\");\n    var throttle = __webpack_require__(\"fIB7\");\n    var curry = zrUtil.curry;\n\n    var ATTR = '\\0_ec_dataZoom_roams';\n\n    var roams = {\n\n        /**\n         * @public\n         * @param {module:echarts/ExtensionAPI} api\n         * @param {Object} dataZoomInfo\n         * @param {string} dataZoomInfo.coordId\n         * @param {Function} dataZoomInfo.containsPoint\n         * @param {Array.<string>} dataZoomInfo.allCoordIds\n         * @param {string} dataZoomInfo.dataZoomId\n         * @param {number} dataZoomInfo.throttleRate\n         * @param {Function} dataZoomInfo.panGetRange\n         * @param {Function} dataZoomInfo.zoomGetRange\n         * @param {boolean} [dataZoomInfo.zoomLock]\n         * @param {boolean} [dataZoomInfo.disabled]\n         */\n        register: function (api, dataZoomInfo) {\n            var store = giveStore(api);\n            var theDataZoomId = dataZoomInfo.dataZoomId;\n            var theCoordId = dataZoomInfo.coordId;\n\n            // Do clean when a dataZoom changes its target coordnate system.\n            // Avoid memory leak, dispose all not-used-registered.\n            zrUtil.each(store, function (record, coordId) {\n                var dataZoomInfos = record.dataZoomInfos;\n                if (dataZoomInfos[theDataZoomId]\n                    && zrUtil.indexOf(dataZoomInfo.allCoordIds, theCoordId) < 0\n                ) {\n                    delete dataZoomInfos[theDataZoomId];\n                    record.count--;\n                }\n            });\n\n            cleanStore(store);\n\n            var record = store[theCoordId];\n            // Create if needed.\n            if (!record) {\n                record = store[theCoordId] = {\n                    coordId: theCoordId,\n                    dataZoomInfos: {},\n                    count: 0\n                };\n                record.controller = createController(api, record);\n                record.dispatchAction = zrUtil.curry(dispatchAction, api);\n            }\n            record.controller.enable(\n                dataZoomInfo.disabled ? false : dataZoomInfo.zoomLock ? 'move' : true,\n                dataZoomInfo.roamControllerOpt\n            );\n\n            // Consider resize, area should be always updated.\n            record.controller.setPointerChecker(dataZoomInfo.containsPoint);\n\n            // Update throttle.\n            throttle.createOrUpdate(\n                record,\n                'dispatchAction',\n                dataZoomInfo.throttleRate,\n                'fixRate'\n            );\n\n            // Update reference of dataZoom.\n            !(record.dataZoomInfos[theDataZoomId]) && record.count++;\n            record.dataZoomInfos[theDataZoomId] = dataZoomInfo;\n        },\n\n        /**\n         * @public\n         * @param {module:echarts/ExtensionAPI} api\n         * @param {string} dataZoomId\n         */\n        unregister: function (api, dataZoomId) {\n            var store = giveStore(api);\n\n            zrUtil.each(store, function (record) {\n                record.controller.dispose();\n                var dataZoomInfos = record.dataZoomInfos;\n                if (dataZoomInfos[dataZoomId]) {\n                    delete dataZoomInfos[dataZoomId];\n                    record.count--;\n                }\n            });\n\n            cleanStore(store);\n        },\n\n        /**\n         * @public\n         */\n        shouldRecordRange: function (payload, dataZoomId) {\n            if (payload && payload.type === 'dataZoom' && payload.batch) {\n                for (var i = 0, len = payload.batch.length; i < len; i++) {\n                    if (payload.batch[i].dataZoomId === dataZoomId) {\n                        return false;\n                    }\n                }\n            }\n            return true;\n        },\n\n        /**\n         * @public\n         */\n        generateCoordId: function (coordModel) {\n            return coordModel.type + '\\0_' + coordModel.id;\n        }\n    };\n\n    /**\n     * Key: coordId, value: {dataZoomInfos: [], count, controller}\n     * @type {Array.<Object>}\n     */\n    function giveStore(api) {\n        // Mount store on zrender instance, so that we do not\n        // need to worry about dispose.\n        var zr = api.getZr();\n        return zr[ATTR] || (zr[ATTR] = {});\n    }\n\n    function createController(api, newRecord) {\n        var controller = new RoamController(api.getZr());\n        controller.on('pan', curry(onPan, newRecord));\n        controller.on('zoom', curry(onZoom, newRecord));\n\n        return controller;\n    }\n\n    function cleanStore(store) {\n        zrUtil.each(store, function (record, coordId) {\n            if (!record.count) {\n                record.controller.dispose();\n                delete store[coordId];\n            }\n        });\n    }\n\n    function onPan(record, dx, dy, oldX, oldY, newX, newY) {\n        wrapAndDispatch(record, function (info) {\n            return info.panGetRange(record.controller, dx, dy, oldX, oldY, newX, newY);\n        });\n    }\n\n    function onZoom(record, scale, mouseX, mouseY) {\n        wrapAndDispatch(record, function (info) {\n            return info.zoomGetRange(record.controller, scale, mouseX, mouseY);\n        });\n    }\n\n    function wrapAndDispatch(record, getRange) {\n        var batch = [];\n\n        zrUtil.each(record.dataZoomInfos, function (info) {\n            var range = getRange(info);\n            range && batch.push({\n                dataZoomId: info.dataZoomId,\n                start: range[0],\n                end: range[1]\n            });\n        });\n\n        record.dispatchAction(batch);\n    }\n\n    /**\n     * This action will be throttled.\n     */\n    function dispatchAction(api, batch) {\n        api.dispatchAction({\n            type: 'dataZoom',\n            batch: batch\n        });\n    }\n\n    module.exports = roams;\n\n\n\n/***/ }),\n\n/***/ \"Krco\":\n/***/ (function(module, exports) {\n\n\n    var ArrayCtor = typeof Float32Array === 'undefined'\n        ? Array\n        : Float32Array;\n\n    /**\n     * @typedef {Float32Array|Array.<number>} Vector2\n     */\n    /**\n     * 二维向量类\n     * @exports zrender/tool/vector\n     */\n    var vector = {\n        /**\n         * 创建一个向量\n         * @param {number} [x=0]\n         * @param {number} [y=0]\n         * @return {Vector2}\n         */\n        create: function (x, y) {\n            var out = new ArrayCtor(2);\n            if (x == null) {\n                x = 0;\n            }\n            if (y == null) {\n                y = 0;\n            }\n            out[0] = x;\n            out[1] = y;\n            return out;\n        },\n\n        /**\n         * 复制向量数据\n         * @param {Vector2} out\n         * @param {Vector2} v\n         * @return {Vector2}\n         */\n        copy: function (out, v) {\n            out[0] = v[0];\n            out[1] = v[1];\n            return out;\n        },\n\n        /**\n         * 克隆一个向量\n         * @param {Vector2} v\n         * @return {Vector2}\n         */\n        clone: function (v) {\n            var out = new ArrayCtor(2);\n            out[0] = v[0];\n            out[1] = v[1];\n            return out;\n        },\n\n        /**\n         * 设置向量的两个项\n         * @param {Vector2} out\n         * @param {number} a\n         * @param {number} b\n         * @return {Vector2} 结果\n         */\n        set: function (out, a, b) {\n            out[0] = a;\n            out[1] = b;\n            return out;\n        },\n\n        /**\n         * 向量相加\n         * @param {Vector2} out\n         * @param {Vector2} v1\n         * @param {Vector2} v2\n         */\n        add: function (out, v1, v2) {\n            out[0] = v1[0] + v2[0];\n            out[1] = v1[1] + v2[1];\n            return out;\n        },\n\n        /**\n         * 向量缩放后相加\n         * @param {Vector2} out\n         * @param {Vector2} v1\n         * @param {Vector2} v2\n         * @param {number} a\n         */\n        scaleAndAdd: function (out, v1, v2, a) {\n            out[0] = v1[0] + v2[0] * a;\n            out[1] = v1[1] + v2[1] * a;\n            return out;\n        },\n\n        /**\n         * 向量相减\n         * @param {Vector2} out\n         * @param {Vector2} v1\n         * @param {Vector2} v2\n         */\n        sub: function (out, v1, v2) {\n            out[0] = v1[0] - v2[0];\n            out[1] = v1[1] - v2[1];\n            return out;\n        },\n\n        /**\n         * 向量长度\n         * @param {Vector2} v\n         * @return {number}\n         */\n        len: function (v) {\n            return Math.sqrt(this.lenSquare(v));\n        },\n\n        /**\n         * 向量长度平方\n         * @param {Vector2} v\n         * @return {number}\n         */\n        lenSquare: function (v) {\n            return v[0] * v[0] + v[1] * v[1];\n        },\n\n        /**\n         * 向量乘法\n         * @param {Vector2} out\n         * @param {Vector2} v1\n         * @param {Vector2} v2\n         */\n        mul: function (out, v1, v2) {\n            out[0] = v1[0] * v2[0];\n            out[1] = v1[1] * v2[1];\n            return out;\n        },\n\n        /**\n         * 向量除法\n         * @param {Vector2} out\n         * @param {Vector2} v1\n         * @param {Vector2} v2\n         */\n        div: function (out, v1, v2) {\n            out[0] = v1[0] / v2[0];\n            out[1] = v1[1] / v2[1];\n            return out;\n        },\n\n        /**\n         * 向量点乘\n         * @param {Vector2} v1\n         * @param {Vector2} v2\n         * @return {number}\n         */\n        dot: function (v1, v2) {\n            return v1[0] * v2[0] + v1[1] * v2[1];\n        },\n\n        /**\n         * 向量缩放\n         * @param {Vector2} out\n         * @param {Vector2} v\n         * @param {number} s\n         */\n        scale: function (out, v, s) {\n            out[0] = v[0] * s;\n            out[1] = v[1] * s;\n            return out;\n        },\n\n        /**\n         * 向量归一化\n         * @param {Vector2} out\n         * @param {Vector2} v\n         */\n        normalize: function (out, v) {\n            var d = vector.len(v);\n            if (d === 0) {\n                out[0] = 0;\n                out[1] = 0;\n            }\n            else {\n                out[0] = v[0] / d;\n                out[1] = v[1] / d;\n            }\n            return out;\n        },\n\n        /**\n         * 计算向量间距离\n         * @param {Vector2} v1\n         * @param {Vector2} v2\n         * @return {number}\n         */\n        distance: function (v1, v2) {\n            return Math.sqrt(\n                (v1[0] - v2[0]) * (v1[0] - v2[0])\n                + (v1[1] - v2[1]) * (v1[1] - v2[1])\n            );\n        },\n\n        /**\n         * 向量距离平方\n         * @param {Vector2} v1\n         * @param {Vector2} v2\n         * @return {number}\n         */\n        distanceSquare: function (v1, v2) {\n            return (v1[0] - v2[0]) * (v1[0] - v2[0])\n                + (v1[1] - v2[1]) * (v1[1] - v2[1]);\n        },\n\n        /**\n         * 求负向量\n         * @param {Vector2} out\n         * @param {Vector2} v\n         */\n        negate: function (out, v) {\n            out[0] = -v[0];\n            out[1] = -v[1];\n            return out;\n        },\n\n        /**\n         * 插值两个点\n         * @param {Vector2} out\n         * @param {Vector2} v1\n         * @param {Vector2} v2\n         * @param {number} t\n         */\n        lerp: function (out, v1, v2, t) {\n            out[0] = v1[0] + t * (v2[0] - v1[0]);\n            out[1] = v1[1] + t * (v2[1] - v1[1]);\n            return out;\n        },\n\n        /**\n         * 矩阵左乘向量\n         * @param {Vector2} out\n         * @param {Vector2} v\n         * @param {Vector2} m\n         */\n        applyTransform: function (out, v, m) {\n            var x = v[0];\n            var y = v[1];\n            out[0] = m[0] * x + m[2] * y + m[4];\n            out[1] = m[1] * x + m[3] * y + m[5];\n            return out;\n        },\n        /**\n         * 求两个向量最小值\n         * @param  {Vector2} out\n         * @param  {Vector2} v1\n         * @param  {Vector2} v2\n         */\n        min: function (out, v1, v2) {\n            out[0] = Math.min(v1[0], v2[0]);\n            out[1] = Math.min(v1[1], v2[1]);\n            return out;\n        },\n        /**\n         * 求两个向量最大值\n         * @param  {Vector2} out\n         * @param  {Vector2} v1\n         * @param  {Vector2} v2\n         */\n        max: function (out, v1, v2) {\n            out[0] = Math.max(v1[0], v2[0]);\n            out[1] = Math.max(v1[1], v2[1]);\n            return out;\n        }\n    };\n\n    vector.length = vector.len;\n    vector.lengthSquare = vector.lenSquare;\n    vector.dist = vector.distance;\n    vector.distSquare = vector.distanceSquare;\n\n    module.exports = vector;\n\n\n\n/***/ }),\n\n/***/ \"L5YH\":\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * Interval scale\n * @module echarts/scale/Interval\n */\n\n\n\n    var numberUtil = __webpack_require__(\"0+Kq\");\n    var formatUtil = __webpack_require__(\"4oXW\");\n    var Scale = __webpack_require__(\"Tpbs\");\n    var helper = __webpack_require__(\"svhf\");\n\n    var roundNumber = numberUtil.round;\n\n    /**\n     * @alias module:echarts/coord/scale/Interval\n     * @constructor\n     */\n    var IntervalScale = Scale.extend({\n\n        type: 'interval',\n\n        _interval: 0,\n\n        _intervalPrecision: 2,\n\n        setExtent: function (start, end) {\n            var thisExtent = this._extent;\n            //start,end may be a Number like '25',so...\n            if (!isNaN(start)) {\n                thisExtent[0] = parseFloat(start);\n            }\n            if (!isNaN(end)) {\n                thisExtent[1] = parseFloat(end);\n            }\n        },\n\n        unionExtent: function (other) {\n            var extent = this._extent;\n            other[0] < extent[0] && (extent[0] = other[0]);\n            other[1] > extent[1] && (extent[1] = other[1]);\n\n            // unionExtent may called by it's sub classes\n            IntervalScale.prototype.setExtent.call(this, extent[0], extent[1]);\n        },\n        /**\n         * Get interval\n         */\n        getInterval: function () {\n            return this._interval;\n        },\n\n        /**\n         * Set interval\n         */\n        setInterval: function (interval) {\n            this._interval = interval;\n            // Dropped auto calculated niceExtent and use user setted extent\n            // We assume user wan't to set both interval, min, max to get a better result\n            this._niceExtent = this._extent.slice();\n        },\n\n        /**\n         * @return {Array.<number>}\n         */\n        getTicks: function () {\n            return helper.intervalScaleGetTicks(\n                this._interval, this._extent, this._niceExtent, this._intervalPrecision\n            );\n        },\n\n        /**\n         * @return {Array.<string>}\n         */\n        getTicksLabels: function () {\n            var labels = [];\n            var ticks = this.getTicks();\n            for (var i = 0; i < ticks.length; i++) {\n                labels.push(this.getLabel(ticks[i]));\n            }\n            return labels;\n        },\n\n        /**\n         * @param {number} data\n         * @param {Object} [opt]\n         * @param {number|string} [opt.precision] If 'auto', use nice presision.\n         * @param {boolean} [opt.pad] returns 1.50 but not 1.5 if precision is 2.\n         * @return {string}\n         */\n        getLabel: function (data, opt) {\n            if (data == null) {\n                return '';\n            }\n\n            var precision = opt && opt.precision;\n\n            if (precision == null) {\n                precision = numberUtil.getPrecisionSafe(data) || 0;\n            }\n            else if (precision === 'auto') {\n                // Should be more precise then tick.\n                precision = this._intervalPrecision;\n            }\n\n            // (1) If `precision` is set, 12.005 should be display as '12.00500'.\n            // (2) Use roundNumber (toFixed) to avoid scientific notation like '3.5e-7'.\n            data = roundNumber(data, precision, true);\n\n            return formatUtil.addCommas(data);\n        },\n\n        /**\n         * Update interval and extent of intervals for nice ticks\n         *\n         * @param {number} [splitNumber = 5] Desired number of ticks\n         * @param {number} [minInterval]\n         */\n        niceTicks: function (splitNumber, minInterval) {\n            splitNumber = splitNumber || 5;\n            var extent = this._extent;\n            var span = extent[1] - extent[0];\n            if (!isFinite(span)) {\n                return;\n            }\n            // User may set axis min 0 and data are all negative\n            // FIXME If it needs to reverse ?\n            if (span < 0) {\n                span = -span;\n                extent.reverse();\n            }\n\n            var result = helper.intervalScaleNiceTicks(extent, splitNumber, minInterval);\n\n            this._intervalPrecision = result.intervalPrecision;\n            this._interval = result.interval;\n            this._niceExtent = result.niceTickExtent;\n        },\n\n        /**\n         * Nice extent.\n         * @param {Object} opt\n         * @param {number} [opt.splitNumber = 5] Given approx tick number\n         * @param {boolean} [opt.fixMin=false]\n         * @param {boolean} [opt.fixMax=false]\n         * @param {boolean} [opt.minInterval=false]\n         */\n        niceExtent: function (opt) {\n            var extent = this._extent;\n            // If extent start and end are same, expand them\n            if (extent[0] === extent[1]) {\n                if (extent[0] !== 0) {\n                    // Expand extent\n                    var expandSize = extent[0];\n                    // In the fowllowing case\n                    //      Axis has been fixed max 100\n                    //      Plus data are all 100 and axis extent are [100, 100].\n                    // Extend to the both side will cause expanded max is larger than fixed max.\n                    // So only expand to the smaller side.\n                    if (!opt.fixMax) {\n                        extent[1] += expandSize / 2;\n                        extent[0] -= expandSize / 2;\n                    }\n                    else {\n                        extent[0] -= expandSize / 2;\n                    }\n                }\n                else {\n                    extent[1] = 1;\n                }\n            }\n            var span = extent[1] - extent[0];\n            // If there are no data and extent are [Infinity, -Infinity]\n            if (!isFinite(span)) {\n                extent[0] = 0;\n                extent[1] = 1;\n            }\n\n            this.niceTicks(opt.splitNumber, opt.minInterval);\n\n            // var extent = this._extent;\n            var interval = this._interval;\n\n            if (!opt.fixMin) {\n                extent[0] = roundNumber(Math.floor(extent[0] / interval) * interval);\n            }\n            if (!opt.fixMax) {\n                extent[1] = roundNumber(Math.ceil(extent[1] / interval) * interval);\n            }\n        }\n    });\n\n    /**\n     * @return {module:echarts/scale/Time}\n     */\n    IntervalScale.create = function () {\n        return new IntervalScale();\n    };\n\n    module.exports = IntervalScale;\n\n\n\n/***/ }),\n\n/***/ \"LDr7\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n// Symbol factory\n\n\n    var graphic = __webpack_require__(\"y2WT\");\n    var BoundingRect = __webpack_require__(\"W4Cx\");\n\n    /**\n     * Triangle shape\n     * @inner\n     */\n    var Triangle = graphic.extendShape({\n        type: 'triangle',\n        shape: {\n            cx: 0,\n            cy: 0,\n            width: 0,\n            height: 0\n        },\n        buildPath: function (path, shape) {\n            var cx = shape.cx;\n            var cy = shape.cy;\n            var width = shape.width / 2;\n            var height = shape.height / 2;\n            path.moveTo(cx, cy - height);\n            path.lineTo(cx + width, cy + height);\n            path.lineTo(cx - width, cy + height);\n            path.closePath();\n        }\n    });\n    /**\n     * Diamond shape\n     * @inner\n     */\n    var Diamond = graphic.extendShape({\n        type: 'diamond',\n        shape: {\n            cx: 0,\n            cy: 0,\n            width: 0,\n            height: 0\n        },\n        buildPath: function (path, shape) {\n            var cx = shape.cx;\n            var cy = shape.cy;\n            var width = shape.width / 2;\n            var height = shape.height / 2;\n            path.moveTo(cx, cy - height);\n            path.lineTo(cx + width, cy);\n            path.lineTo(cx, cy + height);\n            path.lineTo(cx - width, cy);\n            path.closePath();\n        }\n    });\n\n    /**\n     * Pin shape\n     * @inner\n     */\n    var Pin = graphic.extendShape({\n        type: 'pin',\n        shape: {\n            // x, y on the cusp\n            x: 0,\n            y: 0,\n            width: 0,\n            height: 0\n        },\n\n        buildPath: function (path, shape) {\n            var x = shape.x;\n            var y = shape.y;\n            var w = shape.width / 5 * 3;\n            // Height must be larger than width\n            var h = Math.max(w, shape.height);\n            var r = w / 2;\n\n            // Dist on y with tangent point and circle center\n            var dy = r * r / (h - r);\n            var cy = y - h + r + dy;\n            var angle = Math.asin(dy / r);\n            // Dist on x with tangent point and circle center\n            var dx = Math.cos(angle) * r;\n\n            var tanX = Math.sin(angle);\n            var tanY = Math.cos(angle);\n\n            path.arc(\n                x, cy, r,\n                Math.PI - angle,\n                Math.PI * 2 + angle\n            );\n\n            var cpLen = r * 0.6;\n            var cpLen2 = r * 0.7;\n            path.bezierCurveTo(\n                x + dx - tanX * cpLen, cy + dy + tanY * cpLen,\n                x, y - cpLen2,\n                x, y\n            );\n            path.bezierCurveTo(\n                x, y - cpLen2,\n                x - dx + tanX * cpLen, cy + dy + tanY * cpLen,\n                x - dx, cy + dy\n            );\n            path.closePath();\n        }\n    });\n\n    /**\n     * Arrow shape\n     * @inner\n     */\n    var Arrow = graphic.extendShape({\n\n        type: 'arrow',\n\n        shape: {\n            x: 0,\n            y: 0,\n            width: 0,\n            height: 0\n        },\n\n        buildPath: function (ctx, shape) {\n            var height = shape.height;\n            var width = shape.width;\n            var x = shape.x;\n            var y = shape.y;\n            var dx = width / 3 * 2;\n            ctx.moveTo(x, y);\n            ctx.lineTo(x + dx, y + height);\n            ctx.lineTo(x, y + height / 4 * 3);\n            ctx.lineTo(x - dx, y + height);\n            ctx.lineTo(x, y);\n            ctx.closePath();\n        }\n    });\n\n    /**\n     * Map of path contructors\n     * @type {Object.<string, module:zrender/graphic/Path>}\n     */\n    var symbolCtors = {\n        line: graphic.Line,\n\n        rect: graphic.Rect,\n\n        roundRect: graphic.Rect,\n\n        square: graphic.Rect,\n\n        circle: graphic.Circle,\n\n        diamond: Diamond,\n\n        pin: Pin,\n\n        arrow: Arrow,\n\n        triangle: Triangle\n    };\n\n    var symbolShapeMakers = {\n\n        line: function (x, y, w, h, shape) {\n            // FIXME\n            shape.x1 = x;\n            shape.y1 = y + h / 2;\n            shape.x2 = x + w;\n            shape.y2 = y + h / 2;\n        },\n\n        rect: function (x, y, w, h, shape) {\n            shape.x = x;\n            shape.y = y;\n            shape.width = w;\n            shape.height = h;\n        },\n\n        roundRect: function (x, y, w, h, shape) {\n            shape.x = x;\n            shape.y = y;\n            shape.width = w;\n            shape.height = h;\n            shape.r = Math.min(w, h) / 4;\n        },\n\n        square: function (x, y, w, h, shape) {\n            var size = Math.min(w, h);\n            shape.x = x;\n            shape.y = y;\n            shape.width = size;\n            shape.height = size;\n        },\n\n        circle: function (x, y, w, h, shape) {\n            // Put circle in the center of square\n            shape.cx = x + w / 2;\n            shape.cy = y + h / 2;\n            shape.r = Math.min(w, h) / 2;\n        },\n\n        diamond: function (x, y, w, h, shape) {\n            shape.cx = x + w / 2;\n            shape.cy = y + h / 2;\n            shape.width = w;\n            shape.height = h;\n        },\n\n        pin: function (x, y, w, h, shape) {\n            shape.x = x + w / 2;\n            shape.y = y + h / 2;\n            shape.width = w;\n            shape.height = h;\n        },\n\n        arrow: function (x, y, w, h, shape) {\n            shape.x = x + w / 2;\n            shape.y = y + h / 2;\n            shape.width = w;\n            shape.height = h;\n        },\n\n        triangle: function (x, y, w, h, shape) {\n            shape.cx = x + w / 2;\n            shape.cy = y + h / 2;\n            shape.width = w;\n            shape.height = h;\n        }\n    };\n\n    var symbolBuildProxies = {};\n    for (var name in symbolCtors) {\n        if (symbolCtors.hasOwnProperty(name)) {\n            symbolBuildProxies[name] = new symbolCtors[name]();\n        }\n    }\n\n    var Symbol = graphic.extendShape({\n\n        type: 'symbol',\n\n        shape: {\n            symbolType: '',\n            x: 0,\n            y: 0,\n            width: 0,\n            height: 0\n        },\n\n        beforeBrush: function () {\n            var style = this.style;\n            var shape = this.shape;\n            // FIXME\n            if (shape.symbolType === 'pin' && style.textPosition === 'inside') {\n                style.textPosition = ['50%', '40%'];\n                style.textAlign = 'center';\n                style.textVerticalAlign = 'middle';\n            }\n        },\n\n        buildPath: function (ctx, shape, inBundle) {\n            var symbolType = shape.symbolType;\n            var proxySymbol = symbolBuildProxies[symbolType];\n            if (shape.symbolType !== 'none') {\n                if (!proxySymbol) {\n                    // Default rect\n                    symbolType = 'rect';\n                    proxySymbol = symbolBuildProxies[symbolType];\n                }\n                symbolShapeMakers[symbolType](\n                    shape.x, shape.y, shape.width, shape.height, proxySymbol.shape\n                );\n                proxySymbol.buildPath(ctx, proxySymbol.shape, inBundle);\n            }\n        }\n    });\n\n    // Provide setColor helper method to avoid determine if set the fill or stroke outside\n    var symbolPathSetColor = function (color) {\n        if (this.type !== 'image') {\n            var symbolStyle = this.style;\n            var symbolShape = this.shape;\n            if (symbolShape && symbolShape.symbolType === 'line') {\n                symbolStyle.stroke = color;\n            }\n            else if (this.__isEmptyBrush) {\n                symbolStyle.stroke = color;\n                symbolStyle.fill = '#fff';\n            }\n            else {\n                // FIXME 判断图形默认是填充还是描边，使用 onlyStroke ?\n                symbolStyle.fill && (symbolStyle.fill = color);\n                symbolStyle.stroke && (symbolStyle.stroke = color);\n            }\n            this.dirty(false);\n        }\n    };\n\n    var symbolUtil = {\n        /**\n         * Create a symbol element with given symbol configuration: shape, x, y, width, height, color\n         * @param {string} symbolType\n         * @param {number} x\n         * @param {number} y\n         * @param {number} w\n         * @param {number} h\n         * @param {string} color\n         */\n        createSymbol: function (symbolType, x, y, w, h, color) {\n            // TODO Support image object, DynamicImage.\n\n            var isEmpty = symbolType.indexOf('empty') === 0;\n            if (isEmpty) {\n                symbolType = symbolType.substr(5, 1).toLowerCase() + symbolType.substr(6);\n            }\n            var symbolPath;\n\n            if (symbolType.indexOf('image://') === 0) {\n                symbolPath = new graphic.Image({\n                    style: {\n                        image: symbolType.slice(8),\n                        x: x,\n                        y: y,\n                        width: w,\n                        height: h\n                    }\n                });\n            }\n            else if (symbolType.indexOf('path://') === 0) {\n                symbolPath = graphic.makePath(symbolType.slice(7), {}, new BoundingRect(x, y, w, h));\n            }\n            else {\n                symbolPath = new Symbol({\n                    shape: {\n                        symbolType: symbolType,\n                        x: x,\n                        y: y,\n                        width: w,\n                        height: h\n                    }\n                });\n            }\n\n            symbolPath.__isEmptyBrush = isEmpty;\n\n            symbolPath.setColor = symbolPathSetColor;\n\n            symbolPath.setColor(color);\n\n            return symbolPath;\n        }\n    };\n\n    module.exports = symbolUtil;\n\n\n/***/ }),\n\n/***/ \"LE4r\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\n    var featureManager = __webpack_require__(\"M5+E\");\n    var zrUtil = __webpack_require__(\"nw1Z\");\n\n    var ToolboxModel = __webpack_require__(\"Cwwa\").extendComponentModel({\n\n        type: 'toolbox',\n\n        layoutMode: {\n            type: 'box',\n            ignoreSize: true\n        },\n\n        mergeDefaultAndTheme: function (option) {\n            ToolboxModel.superApply(this, 'mergeDefaultAndTheme', arguments);\n\n            zrUtil.each(this.option.feature, function (featureOpt, featureName) {\n                var Feature = featureManager.get(featureName);\n                Feature && zrUtil.merge(featureOpt, Feature.defaultOption);\n            });\n        },\n\n        defaultOption: {\n\n            show: true,\n\n            z: 6,\n\n            zlevel: 0,\n\n            orient: 'horizontal',\n\n            left: 'right',\n\n            top: 'top',\n\n            // right\n            // bottom\n\n            backgroundColor: 'transparent',\n\n            borderColor: '#ccc',\n\n            borderWidth: 0,\n\n            padding: 5,\n\n            itemSize: 15,\n\n            itemGap: 8,\n\n            showTitle: true,\n\n            iconStyle: {\n                normal: {\n                    borderColor: '#666',\n                    color: 'none'\n                },\n                emphasis: {\n                    borderColor: '#3E98C5'\n                }\n            }\n            // textStyle: {},\n\n            // feature\n        }\n    });\n\n    module.exports = ToolboxModel;\n\n\n/***/ }),\n\n/***/ \"LFYx\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\n    var formatUtil = __webpack_require__(\"4oXW\");\n    var nubmerUtil = __webpack_require__(\"0+Kq\");\n    var Model = __webpack_require__(\"Q4Sk\");\n    var zrUtil = __webpack_require__(\"nw1Z\");\n    var each = zrUtil.each;\n    var isObject = zrUtil.isObject;\n\n    var modelUtil = {};\n\n    /**\n     * If value is not array, then translate it to array.\n     * @param  {*} value\n     * @return {Array} [value] or value\n     */\n    modelUtil.normalizeToArray = function (value) {\n        return value instanceof Array\n            ? value\n            : value == null\n            ? []\n            : [value];\n    };\n\n    /**\n     * Sync default option between normal and emphasis like `position` and `show`\n     * In case some one will write code like\n     *     label: {\n     *         normal: {\n     *             show: false,\n     *             position: 'outside',\n     *             textStyle: {\n     *                 fontSize: 18\n     *             }\n     *         },\n     *         emphasis: {\n     *             show: true\n     *         }\n     *     }\n     * @param {Object} opt\n     * @param {Array.<string>} subOpts\n     */\n     modelUtil.defaultEmphasis = function (opt, subOpts) {\n        if (opt) {\n            var emphasisOpt = opt.emphasis = opt.emphasis || {};\n            var normalOpt = opt.normal = opt.normal || {};\n\n            // Default emphasis option from normal\n            each(subOpts, function (subOptName) {\n                var val = zrUtil.retrieve(emphasisOpt[subOptName], normalOpt[subOptName]);\n                if (val != null) {\n                    emphasisOpt[subOptName] = val;\n                }\n            });\n        }\n    };\n\n    modelUtil.LABEL_OPTIONS = ['position', 'offset', 'show', 'textStyle', 'distance', 'formatter'];\n\n    /**\n     * data could be [12, 2323, {value: 223}, [1221, 23], {value: [2, 23]}]\n     * This helper method retieves value from data.\n     * @param {string|number|Date|Array|Object} dataItem\n     * @return {number|string|Date|Array.<number|string|Date>}\n     */\n    modelUtil.getDataItemValue = function (dataItem) {\n        // Performance sensitive.\n        return dataItem && (dataItem.value == null ? dataItem : dataItem.value);\n    };\n\n    /**\n     * data could be [12, 2323, {value: 223}, [1221, 23], {value: [2, 23]}]\n     * This helper method determine if dataItem has extra option besides value\n     * @param {string|number|Date|Array|Object} dataItem\n     */\n    modelUtil.isDataItemOption = function (dataItem) {\n        return isObject(dataItem)\n            && !(dataItem instanceof Array);\n            // // markLine data can be array\n            // && !(dataItem[0] && isObject(dataItem[0]) && !(dataItem[0] instanceof Array));\n    };\n\n    /**\n     * This helper method convert value in data.\n     * @param {string|number|Date} value\n     * @param {Object|string} [dimInfo] If string (like 'x'), dimType defaults 'number'.\n     */\n    modelUtil.converDataValue = function (value, dimInfo) {\n        // Performance sensitive.\n        var dimType = dimInfo && dimInfo.type;\n        if (dimType === 'ordinal') {\n            return value;\n        }\n\n        if (dimType === 'time'\n            // spead up when using timestamp\n            && typeof value !== 'number'\n            && value != null\n            && value !== '-'\n        ) {\n            value = +nubmerUtil.parseDate(value);\n        }\n\n        // dimType defaults 'number'.\n        // If dimType is not ordinal and value is null or undefined or NaN or '-',\n        // parse to NaN.\n        return (value == null || value === '')\n            ? NaN : +value; // If string (like '-'), using '+' parse to NaN\n    };\n\n    /**\n     * Create a model proxy to be used in tooltip for edge data, markLine data, markPoint data.\n     * @param {module:echarts/data/List} data\n     * @param {Object} opt\n     * @param {string} [opt.seriesIndex]\n     * @param {Object} [opt.name]\n     * @param {Object} [opt.mainType]\n     * @param {Object} [opt.subType]\n     */\n    modelUtil.createDataFormatModel = function (data, opt) {\n        var model = new Model();\n        zrUtil.mixin(model, modelUtil.dataFormatMixin);\n        model.seriesIndex = opt.seriesIndex;\n        model.name = opt.name || '';\n        model.mainType = opt.mainType;\n        model.subType = opt.subType;\n\n        model.getData = function () {\n            return data;\n        };\n        return model;\n    };\n\n    // PENDING A little ugly\n    modelUtil.dataFormatMixin = {\n        /**\n         * Get params for formatter\n         * @param {number} dataIndex\n         * @param {string} [dataType]\n         * @return {Object}\n         */\n        getDataParams: function (dataIndex, dataType) {\n            var data = this.getData(dataType);\n            var rawValue = this.getRawValue(dataIndex, dataType);\n            var rawDataIndex = data.getRawIndex(dataIndex);\n            var name = data.getName(dataIndex, true);\n            var itemOpt = data.getRawDataItem(dataIndex);\n            var color = data.getItemVisual(dataIndex, 'color');\n\n            return {\n                componentType: this.mainType,\n                componentSubType: this.subType,\n                seriesType: this.mainType === 'series' ? this.subType : null,\n                seriesIndex: this.seriesIndex,\n                seriesId: this.id,\n                seriesName: this.name,\n                name: name,\n                dataIndex: rawDataIndex,\n                data: itemOpt,\n                dataType: dataType,\n                value: rawValue,\n                color: color,\n                marker: formatUtil.getTooltipMarker(color),\n\n                // Param name list for mapping `a`, `b`, `c`, `d`, `e`\n                $vars: ['seriesName', 'name', 'value']\n            };\n        },\n\n        /**\n         * Format label\n         * @param {number} dataIndex\n         * @param {string} [status='normal'] 'normal' or 'emphasis'\n         * @param {string} [dataType]\n         * @param {number} [dimIndex]\n         * @return {string}\n         */\n        getFormattedLabel: function (dataIndex, status, dataType, dimIndex) {\n            status = status || 'normal';\n            var data = this.getData(dataType);\n            var itemModel = data.getItemModel(dataIndex);\n\n            var params = this.getDataParams(dataIndex, dataType);\n            if (dimIndex != null && (params.value instanceof Array)) {\n                params.value = params.value[dimIndex];\n            }\n\n            var formatter = itemModel.get(['label', status, 'formatter']);\n\n            if (typeof formatter === 'function') {\n                params.status = status;\n                return formatter(params);\n            }\n            else if (typeof formatter === 'string') {\n                return formatUtil.formatTpl(formatter, params);\n            }\n        },\n\n        /**\n         * Get raw value in option\n         * @param {number} idx\n         * @param {string} [dataType]\n         * @return {Object}\n         */\n        getRawValue: function (idx, dataType) {\n            var data = this.getData(dataType);\n            var dataItem = data.getRawDataItem(idx);\n            if (dataItem != null) {\n                return (isObject(dataItem) && !(dataItem instanceof Array))\n                    ? dataItem.value : dataItem;\n            }\n        },\n\n        /**\n         * Should be implemented.\n         * @param {number} dataIndex\n         * @param {boolean} [multipleSeries=false]\n         * @param {number} [dataType]\n         * @return {string} tooltip string\n         */\n        formatTooltip: zrUtil.noop\n    };\n\n    /**\n     * Mapping to exists for merge.\n     *\n     * @public\n     * @param {Array.<Object>|Array.<module:echarts/model/Component>} exists\n     * @param {Object|Array.<Object>} newCptOptions\n     * @return {Array.<Object>} Result, like [{exist: ..., option: ...}, {}],\n     *                          index of which is the same as exists.\n     */\n    modelUtil.mappingToExists = function (exists, newCptOptions) {\n        // Mapping by the order by original option (but not order of\n        // new option) in merge mode. Because we should ensure\n        // some specified index (like xAxisIndex) is consistent with\n        // original option, which is easy to understand, espatially in\n        // media query. And in most case, merge option is used to\n        // update partial option but not be expected to change order.\n        newCptOptions = (newCptOptions || []).slice();\n\n        var result = zrUtil.map(exists || [], function (obj, index) {\n            return {exist: obj};\n        });\n\n        // Mapping by id or name if specified.\n        each(newCptOptions, function (cptOption, index) {\n            if (!isObject(cptOption)) {\n                return;\n            }\n\n            // id has highest priority.\n            for (var i = 0; i < result.length; i++) {\n                if (!result[i].option // Consider name: two map to one.\n                    && cptOption.id != null\n                    && result[i].exist.id === cptOption.id + ''\n                ) {\n                    result[i].option = cptOption;\n                    newCptOptions[index] = null;\n                    return;\n                }\n            }\n\n            for (var i = 0; i < result.length; i++) {\n                var exist = result[i].exist;\n                if (!result[i].option // Consider name: two map to one.\n                    // Can not match when both ids exist but different.\n                    && (exist.id == null || cptOption.id == null)\n                    && cptOption.name != null\n                    && !modelUtil.isIdInner(cptOption)\n                    && !modelUtil.isIdInner(exist)\n                    && exist.name === cptOption.name + ''\n                ) {\n                    result[i].option = cptOption;\n                    newCptOptions[index] = null;\n                    return;\n                }\n            }\n        });\n\n        // Otherwise mapping by index.\n        each(newCptOptions, function (cptOption, index) {\n            if (!isObject(cptOption)) {\n                return;\n            }\n\n            var i = 0;\n            for (; i < result.length; i++) {\n                var exist = result[i].exist;\n                if (!result[i].option\n                    // Existing model that already has id should be able to\n                    // mapped to (because after mapping performed model may\n                    // be assigned with a id, whish should not affect next\n                    // mapping), except those has inner id.\n                    && !modelUtil.isIdInner(exist)\n                    // Caution:\n                    // Do not overwrite id. But name can be overwritten,\n                    // because axis use name as 'show label text'.\n                    // 'exist' always has id and name and we dont\n                    // need to check it.\n                    && cptOption.id == null\n                ) {\n                    result[i].option = cptOption;\n                    break;\n                }\n            }\n\n            if (i >= result.length) {\n                result.push({option: cptOption});\n            }\n        });\n\n        return result;\n    };\n\n    /**\n     * Make id and name for mapping result (result of mappingToExists)\n     * into `keyInfo` field.\n     *\n     * @public\n     * @param {Array.<Object>} Result, like [{exist: ..., option: ...}, {}],\n     *                          which order is the same as exists.\n     * @return {Array.<Object>} The input.\n     */\n    modelUtil.makeIdAndName = function (mapResult) {\n        // We use this id to hash component models and view instances\n        // in echarts. id can be specified by user, or auto generated.\n\n        // The id generation rule ensures new view instance are able\n        // to mapped to old instance when setOption are called in\n        // no-merge mode. So we generate model id by name and plus\n        // type in view id.\n\n        // name can be duplicated among components, which is convenient\n        // to specify multi components (like series) by one name.\n\n        // Ensure that each id is distinct.\n        var idMap = zrUtil.createHashMap();\n\n        each(mapResult, function (item, index) {\n            var existCpt = item.exist;\n            existCpt && idMap.set(existCpt.id, item);\n        });\n\n        each(mapResult, function (item, index) {\n            var opt = item.option;\n\n            zrUtil.assert(\n                !opt || opt.id == null || !idMap.get(opt.id) || idMap.get(opt.id) === item,\n                'id duplicates: ' + (opt && opt.id)\n            );\n\n            opt && opt.id != null && idMap.set(opt.id, item);\n            !item.keyInfo && (item.keyInfo = {});\n        });\n\n        // Make name and id.\n        each(mapResult, function (item, index) {\n            var existCpt = item.exist;\n            var opt = item.option;\n            var keyInfo = item.keyInfo;\n\n            if (!isObject(opt)) {\n                return;\n            }\n\n            // name can be overwitten. Consider case: axis.name = '20km'.\n            // But id generated by name will not be changed, which affect\n            // only in that case: setOption with 'not merge mode' and view\n            // instance will be recreated, which can be accepted.\n            keyInfo.name = opt.name != null\n                ? opt.name + ''\n                : existCpt\n                ? existCpt.name\n                : '\\0-'; // name may be displayed on screen, so use '-'.\n\n            if (existCpt) {\n                keyInfo.id = existCpt.id;\n            }\n            else if (opt.id != null) {\n                keyInfo.id = opt.id + '';\n            }\n            else {\n                // Consider this situatoin:\n                //  optionA: [{name: 'a'}, {name: 'a'}, {..}]\n                //  optionB [{..}, {name: 'a'}, {name: 'a'}]\n                // Series with the same name between optionA and optionB\n                // should be mapped.\n                var idNum = 0;\n                do {\n                    keyInfo.id = '\\0' + keyInfo.name + '\\0' + idNum++;\n                }\n                while (idMap.get(keyInfo.id));\n            }\n\n            idMap.set(keyInfo.id, item);\n        });\n    };\n\n    /**\n     * @public\n     * @param {Object} cptOption\n     * @return {boolean}\n     */\n    modelUtil.isIdInner = function (cptOption) {\n        return isObject(cptOption)\n            && cptOption.id\n            && (cptOption.id + '').indexOf('\\0_ec_\\0') === 0;\n    };\n\n    /**\n     * A helper for removing duplicate items between batchA and batchB,\n     * and in themselves, and categorize by series.\n     *\n     * @param {Array.<Object>} batchA Like: [{seriesId: 2, dataIndex: [32, 4, 5]}, ...]\n     * @param {Array.<Object>} batchB Like: [{seriesId: 2, dataIndex: [32, 4, 5]}, ...]\n     * @return {Array.<Array.<Object>, Array.<Object>>} result: [resultBatchA, resultBatchB]\n     */\n    modelUtil.compressBatches = function (batchA, batchB) {\n        var mapA = {};\n        var mapB = {};\n\n        makeMap(batchA || [], mapA);\n        makeMap(batchB || [], mapB, mapA);\n\n        return [mapToArray(mapA), mapToArray(mapB)];\n\n        function makeMap(sourceBatch, map, otherMap) {\n            for (var i = 0, len = sourceBatch.length; i < len; i++) {\n                var seriesId = sourceBatch[i].seriesId;\n                var dataIndices = modelUtil.normalizeToArray(sourceBatch[i].dataIndex);\n                var otherDataIndices = otherMap && otherMap[seriesId];\n\n                for (var j = 0, lenj = dataIndices.length; j < lenj; j++) {\n                    var dataIndex = dataIndices[j];\n\n                    if (otherDataIndices && otherDataIndices[dataIndex]) {\n                        otherDataIndices[dataIndex] = null;\n                    }\n                    else {\n                        (map[seriesId] || (map[seriesId] = {}))[dataIndex] = 1;\n                    }\n                }\n            }\n        }\n\n        function mapToArray(map, isData) {\n            var result = [];\n            for (var i in map) {\n                if (map.hasOwnProperty(i) && map[i] != null) {\n                    if (isData) {\n                        result.push(+i);\n                    }\n                    else {\n                        var dataIndices = mapToArray(map[i], true);\n                        dataIndices.length && result.push({seriesId: i, dataIndex: dataIndices});\n                    }\n                }\n            }\n            return result;\n        }\n    };\n\n    /**\n     * @param {module:echarts/data/List} data\n     * @param {Object} payload Contains dataIndex (means rawIndex) / dataIndexInside / name\n     *                         each of which can be Array or primary type.\n     * @return {number|Array.<number>} dataIndex If not found, return undefined/null.\n     */\n    modelUtil.queryDataIndex = function (data, payload) {\n        if (payload.dataIndexInside != null) {\n            return payload.dataIndexInside;\n        }\n        else if (payload.dataIndex != null) {\n            return zrUtil.isArray(payload.dataIndex)\n                ? zrUtil.map(payload.dataIndex, function (value) {\n                    return data.indexOfRawIndex(value);\n                })\n                : data.indexOfRawIndex(payload.dataIndex);\n        }\n        else if (payload.name != null) {\n            return zrUtil.isArray(payload.name)\n                ? zrUtil.map(payload.name, function (value) {\n                    return data.indexOfName(value);\n                })\n                : data.indexOfName(payload.name);\n        }\n    };\n\n    /**\n     * Enable property storage to any host object.\n     * Notice: Serialization is not supported.\n     *\n     * For example:\n     * var get = modelUitl.makeGetter();\n     *\n     * function some(hostObj) {\n     *      get(hostObj)._someProperty = 1212;\n     *      ...\n     * }\n     *\n     * @return {Function}\n     */\n    modelUtil.makeGetter = (function () {\n        var index = 0;\n        return function () {\n            var key = '\\0__ec_prop_getter_' + index++;\n            return function (hostObj) {\n                return hostObj[key] || (hostObj[key] = {});\n            };\n        };\n    })();\n\n    /**\n     * @param {module:echarts/model/Global} ecModel\n     * @param {string|Object} finder\n     *        If string, e.g., 'geo', means {geoIndex: 0}.\n     *        If Object, could contain some of these properties below:\n     *        {\n     *            seriesIndex, seriesId, seriesName,\n     *            geoIndex, geoId, geoName,\n     *            bmapIndex, bmapId, bmapName,\n     *            xAxisIndex, xAxisId, xAxisName,\n     *            yAxisIndex, yAxisId, yAxisName,\n     *            gridIndex, gridId, gridName,\n     *            ... (can be extended)\n     *        }\n     *        Each properties can be number|string|Array.<number>|Array.<string>\n     *        For example, a finder could be\n     *        {\n     *            seriesIndex: 3,\n     *            geoId: ['aa', 'cc'],\n     *            gridName: ['xx', 'rr']\n     *        }\n     *        xxxIndex can be set as 'all' (means all xxx) or 'none' (means not specify)\n     *        If nothing or null/undefined specified, return nothing.\n     * @param {Object} [opt]\n     * @param {string} [opt.defaultMainType]\n     * @param {Array.<string>} [opt.includeMainTypes]\n     * @return {Object} result like:\n     *        {\n     *            seriesModels: [seriesModel1, seriesModel2],\n     *            seriesModel: seriesModel1, // The first model\n     *            geoModels: [geoModel1, geoModel2],\n     *            geoModel: geoModel1, // The first model\n     *            ...\n     *        }\n     */\n    modelUtil.parseFinder = function (ecModel, finder, opt) {\n        if (zrUtil.isString(finder)) {\n            var obj = {};\n            obj[finder + 'Index'] = 0;\n            finder = obj;\n        }\n\n        var defaultMainType = opt && opt.defaultMainType;\n        if (defaultMainType\n            && !has(finder, defaultMainType + 'Index')\n            && !has(finder, defaultMainType + 'Id')\n            && !has(finder, defaultMainType + 'Name')\n        ) {\n            finder[defaultMainType + 'Index'] = 0;\n        }\n\n        var result = {};\n\n        each(finder, function (value, key) {\n            var value = finder[key];\n\n            // Exclude 'dataIndex' and other illgal keys.\n            if (key === 'dataIndex' || key === 'dataIndexInside') {\n                result[key] = value;\n                return;\n            }\n\n            var parsedKey = key.match(/^(\\w+)(Index|Id|Name)$/) || [];\n            var mainType = parsedKey[1];\n            var queryType = (parsedKey[2] || '').toLowerCase();\n\n            if (!mainType\n                || !queryType\n                || value == null\n                || (queryType === 'index' && value === 'none')\n                || (opt && opt.includeMainTypes && zrUtil.indexOf(opt.includeMainTypes, mainType) < 0)\n            ) {\n                return;\n            }\n\n            var queryParam = {mainType: mainType};\n            if (queryType !== 'index' || value !== 'all') {\n                queryParam[queryType] = value;\n            }\n\n            var models = ecModel.queryComponents(queryParam);\n            result[mainType + 'Models'] = models;\n            result[mainType + 'Model'] = models[0];\n        });\n\n        return result;\n    };\n\n    /**\n     * @see {module:echarts/data/helper/completeDimensions}\n     * @param {module:echarts/data/List} data\n     * @param {string|number} dataDim\n     * @return {string}\n     */\n    modelUtil.dataDimToCoordDim = function (data, dataDim) {\n        var dimensions = data.dimensions;\n        dataDim = data.getDimension(dataDim);\n        for (var i = 0; i < dimensions.length; i++) {\n            var dimItem = data.getDimensionInfo(dimensions[i]);\n            if (dimItem.name === dataDim) {\n                return dimItem.coordDim;\n            }\n        }\n    };\n\n    /**\n     * @see {module:echarts/data/helper/completeDimensions}\n     * @param {module:echarts/data/List} data\n     * @param {string} coordDim\n     * @return {Array.<string>} data dimensions on the coordDim.\n     */\n    modelUtil.coordDimToDataDim = function (data, coordDim) {\n        var dataDim = [];\n        each(data.dimensions, function (dimName) {\n            var dimItem = data.getDimensionInfo(dimName);\n            if (dimItem.coordDim === coordDim) {\n                dataDim[dimItem.coordDimIndex] = dimItem.name;\n            }\n        });\n        return dataDim;\n    };\n\n    /**\n     * @see {module:echarts/data/helper/completeDimensions}\n     * @param {module:echarts/data/List} data\n     * @param {string} otherDim Can be `otherDims`\n     *                        like 'label' or 'tooltip'.\n     * @return {Array.<string>} data dimensions on the otherDim.\n     */\n    modelUtil.otherDimToDataDim = function (data, otherDim) {\n        var dataDim = [];\n        each(data.dimensions, function (dimName) {\n            var dimItem = data.getDimensionInfo(dimName);\n            var otherDims = dimItem.otherDims;\n            var dimIndex = otherDims[otherDim];\n            if (dimIndex != null && dimIndex !== false) {\n                dataDim[dimIndex] = dimItem.name;\n            }\n        });\n        return dataDim;\n    };\n\n    function has(obj, prop) {\n        return obj && obj.hasOwnProperty(prop);\n    }\n\n    module.exports = modelUtil;\n\n\n\n/***/ }),\n\n/***/ \"LLSH\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\n    var zrUtil = __webpack_require__(\"nw1Z\");\n    var axisHelper = __webpack_require__(\"bL7R\");\n\n    function getName(obj) {\n        if (zrUtil.isObject(obj) && obj.value != null) {\n            return obj.value;\n        }\n        else {\n            return obj + '';\n        }\n    }\n\n    module.exports = {\n\n        /**\n         * Format labels\n         * @return {Array.<string>}\n         */\n        getFormattedLabels: function () {\n            return axisHelper.getFormattedLabels(\n                this.axis,\n                this.get('axisLabel.formatter')\n            );\n        },\n\n        /**\n         * Get categories\n         */\n        getCategories: function () {\n            return this.get('type') === 'category'\n                && zrUtil.map(this.get('data'), getName);\n        },\n\n        /**\n         * @param {boolean} origin\n         * @return {number|string} min value or 'dataMin' or null/undefined (means auto) or NaN\n         */\n        getMin: function (origin) {\n            var option = this.option;\n            var min = (!origin && option.rangeStart != null)\n                ? option.rangeStart : option.min;\n\n            if (this.axis && min != null && min !== 'dataMin' && !zrUtil.eqNaN(min)) {\n                min = this.axis.scale.parse(min);\n            }\n            return min;\n        },\n\n        /**\n         * @param {boolean} origin\n         * @return {number|string} max value or 'dataMax' or null/undefined (means auto) or NaN\n         */\n        getMax: function (origin) {\n            var option = this.option;\n            var max = (!origin && option.rangeEnd != null)\n                ? option.rangeEnd : option.max;\n\n            if (this.axis && max != null && max !== 'dataMax' && !zrUtil.eqNaN(max)) {\n                max = this.axis.scale.parse(max);\n            }\n            return max;\n        },\n\n        /**\n         * @return {boolean}\n         */\n        getNeedCrossZero: function () {\n            var option = this.option;\n            return (option.rangeStart != null || option.rangeEnd != null)\n                ? false : !option.scale;\n        },\n\n        /**\n         * Should be implemented by each axis model if necessary.\n         * @return {module:echarts/model/Component} coordinate system model\n         */\n        getCoordSysModel: zrUtil.noop,\n\n        /**\n         * @param {number} rangeStart Can only be finite number or null/undefined or NaN.\n         * @param {number} rangeEnd Can only be finite number or null/undefined or NaN.\n         */\n        setRange: function (rangeStart, rangeEnd) {\n            this.option.rangeStart = rangeStart;\n            this.option.rangeEnd = rangeEnd;\n        },\n\n        /**\n         * Reset range\n         */\n        resetRange: function () {\n            // rangeStart and rangeEnd is readonly.\n            this.option.rangeStart = this.option.rangeEnd = null;\n        }\n    };\n\n\n/***/ }),\n\n/***/ \"LdYJ\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\n    var Path = __webpack_require__(\"CC7E\");\n    var PathProxy = __webpack_require__(\"f/vB\");\n    var transformPath = __webpack_require__(\"bpLu\");\n\n    // command chars\n    var cc = [\n        'm', 'M', 'l', 'L', 'v', 'V', 'h', 'H', 'z', 'Z',\n        'c', 'C', 'q', 'Q', 't', 'T', 's', 'S', 'a', 'A'\n    ];\n\n    var mathSqrt = Math.sqrt;\n    var mathSin = Math.sin;\n    var mathCos = Math.cos;\n    var PI = Math.PI;\n\n    var vMag = function(v) {\n        return Math.sqrt(v[0] * v[0] + v[1] * v[1]);\n    };\n    var vRatio = function(u, v) {\n        return (u[0] * v[0] + u[1] * v[1]) / (vMag(u) * vMag(v));\n    };\n    var vAngle = function(u, v) {\n        return (u[0] * v[1] < u[1] * v[0] ? -1 : 1)\n                * Math.acos(vRatio(u, v));\n    };\n\n    function processArc(x1, y1, x2, y2, fa, fs, rx, ry, psiDeg, cmd, path) {\n        var psi = psiDeg * (PI / 180.0);\n        var xp = mathCos(psi) * (x1 - x2) / 2.0\n                 + mathSin(psi) * (y1 - y2) / 2.0;\n        var yp = -1 * mathSin(psi) * (x1 - x2) / 2.0\n                 + mathCos(psi) * (y1 - y2) / 2.0;\n\n        var lambda = (xp * xp) / (rx * rx) + (yp * yp) / (ry * ry);\n\n        if (lambda > 1) {\n            rx *= mathSqrt(lambda);\n            ry *= mathSqrt(lambda);\n        }\n\n        var f = (fa === fs ? -1 : 1)\n            * mathSqrt((((rx * rx) * (ry * ry))\n                    - ((rx * rx) * (yp * yp))\n                    - ((ry * ry) * (xp * xp))) / ((rx * rx) * (yp * yp)\n                    + (ry * ry) * (xp * xp))\n                ) || 0;\n\n        var cxp = f * rx * yp / ry;\n        var cyp = f * -ry * xp / rx;\n\n        var cx = (x1 + x2) / 2.0\n                 + mathCos(psi) * cxp\n                 - mathSin(psi) * cyp;\n        var cy = (y1 + y2) / 2.0\n                + mathSin(psi) * cxp\n                + mathCos(psi) * cyp;\n\n        var theta = vAngle([ 1, 0 ], [ (xp - cxp) / rx, (yp - cyp) / ry ]);\n        var u = [ (xp - cxp) / rx, (yp - cyp) / ry ];\n        var v = [ (-1 * xp - cxp) / rx, (-1 * yp - cyp) / ry ];\n        var dTheta = vAngle(u, v);\n\n        if (vRatio(u, v) <= -1) {\n            dTheta = PI;\n        }\n        if (vRatio(u, v) >= 1) {\n            dTheta = 0;\n        }\n        if (fs === 0 && dTheta > 0) {\n            dTheta = dTheta - 2 * PI;\n        }\n        if (fs === 1 && dTheta < 0) {\n            dTheta = dTheta + 2 * PI;\n        }\n\n        path.addData(cmd, cx, cy, rx, ry, theta, dTheta, psi, fs);\n    }\n\n    function createPathProxyFromString(data) {\n        if (!data) {\n            return [];\n        }\n\n        // command string\n        var cs = data.replace(/-/g, ' -')\n            .replace(/  /g, ' ')\n            .replace(/ /g, ',')\n            .replace(/,,/g, ',');\n\n        var n;\n        // create pipes so that we can split the data\n        for (n = 0; n < cc.length; n++) {\n            cs = cs.replace(new RegExp(cc[n], 'g'), '|' + cc[n]);\n        }\n\n        // create array\n        var arr = cs.split('|');\n        // init context point\n        var cpx = 0;\n        var cpy = 0;\n\n        var path = new PathProxy();\n        var CMD = PathProxy.CMD;\n\n        var prevCmd;\n        for (n = 1; n < arr.length; n++) {\n            var str = arr[n];\n            var c = str.charAt(0);\n            var off = 0;\n            var p = str.slice(1).replace(/e,-/g, 'e-').split(',');\n            var cmd;\n\n            if (p.length > 0 && p[0] === '') {\n                p.shift();\n            }\n\n            for (var i = 0; i < p.length; i++) {\n                p[i] = parseFloat(p[i]);\n            }\n            while (off < p.length && !isNaN(p[off])) {\n                if (isNaN(p[0])) {\n                    break;\n                }\n                var ctlPtx;\n                var ctlPty;\n\n                var rx;\n                var ry;\n                var psi;\n                var fa;\n                var fs;\n\n                var x1 = cpx;\n                var y1 = cpy;\n\n                // convert l, H, h, V, and v to L\n                switch (c) {\n                    case 'l':\n                        cpx += p[off++];\n                        cpy += p[off++];\n                        cmd = CMD.L;\n                        path.addData(cmd, cpx, cpy);\n                        break;\n                    case 'L':\n                        cpx = p[off++];\n                        cpy = p[off++];\n                        cmd = CMD.L;\n                        path.addData(cmd, cpx, cpy);\n                        break;\n                    case 'm':\n                        cpx += p[off++];\n                        cpy += p[off++];\n                        cmd = CMD.M;\n                        path.addData(cmd, cpx, cpy);\n                        c = 'l';\n                        break;\n                    case 'M':\n                        cpx = p[off++];\n                        cpy = p[off++];\n                        cmd = CMD.M;\n                        path.addData(cmd, cpx, cpy);\n                        c = 'L';\n                        break;\n                    case 'h':\n                        cpx += p[off++];\n                        cmd = CMD.L;\n                        path.addData(cmd, cpx, cpy);\n                        break;\n                    case 'H':\n                        cpx = p[off++];\n                        cmd = CMD.L;\n                        path.addData(cmd, cpx, cpy);\n                        break;\n                    case 'v':\n                        cpy += p[off++];\n                        cmd = CMD.L;\n                        path.addData(cmd, cpx, cpy);\n                        break;\n                    case 'V':\n                        cpy = p[off++];\n                        cmd = CMD.L;\n                        path.addData(cmd, cpx, cpy);\n                        break;\n                    case 'C':\n                        cmd = CMD.C;\n                        path.addData(\n                            cmd, p[off++], p[off++], p[off++], p[off++], p[off++], p[off++]\n                        );\n                        cpx = p[off - 2];\n                        cpy = p[off - 1];\n                        break;\n                    case 'c':\n                        cmd = CMD.C;\n                        path.addData(\n                            cmd,\n                            p[off++] + cpx, p[off++] + cpy,\n                            p[off++] + cpx, p[off++] + cpy,\n                            p[off++] + cpx, p[off++] + cpy\n                        );\n                        cpx += p[off - 2];\n                        cpy += p[off - 1];\n                        break;\n                    case 'S':\n                        ctlPtx = cpx;\n                        ctlPty = cpy;\n                        var len = path.len();\n                        var pathData = path.data;\n                        if (prevCmd === CMD.C) {\n                            ctlPtx += cpx - pathData[len - 4];\n                            ctlPty += cpy - pathData[len - 3];\n                        }\n                        cmd = CMD.C;\n                        x1 = p[off++];\n                        y1 = p[off++];\n                        cpx = p[off++];\n                        cpy = p[off++];\n                        path.addData(cmd, ctlPtx, ctlPty, x1, y1, cpx, cpy);\n                        break;\n                    case 's':\n                        ctlPtx = cpx;\n                        ctlPty = cpy;\n                        var len = path.len();\n                        var pathData = path.data;\n                        if (prevCmd === CMD.C) {\n                            ctlPtx += cpx - pathData[len - 4];\n                            ctlPty += cpy - pathData[len - 3];\n                        }\n                        cmd = CMD.C;\n                        x1 = cpx + p[off++];\n                        y1 = cpy + p[off++];\n                        cpx += p[off++];\n                        cpy += p[off++];\n                        path.addData(cmd, ctlPtx, ctlPty, x1, y1, cpx, cpy);\n                        break;\n                    case 'Q':\n                        x1 = p[off++];\n                        y1 = p[off++];\n                        cpx = p[off++];\n                        cpy = p[off++];\n                        cmd = CMD.Q;\n                        path.addData(cmd, x1, y1, cpx, cpy);\n                        break;\n                    case 'q':\n                        x1 = p[off++] + cpx;\n                        y1 = p[off++] + cpy;\n                        cpx += p[off++];\n                        cpy += p[off++];\n                        cmd = CMD.Q;\n                        path.addData(cmd, x1, y1, cpx, cpy);\n                        break;\n                    case 'T':\n                        ctlPtx = cpx;\n                        ctlPty = cpy;\n                        var len = path.len();\n                        var pathData = path.data;\n                        if (prevCmd === CMD.Q) {\n                            ctlPtx += cpx - pathData[len - 4];\n                            ctlPty += cpy - pathData[len - 3];\n                        }\n                        cpx = p[off++];\n                        cpy = p[off++];\n                        cmd = CMD.Q;\n                        path.addData(cmd, ctlPtx, ctlPty, cpx, cpy);\n                        break;\n                    case 't':\n                        ctlPtx = cpx;\n                        ctlPty = cpy;\n                        var len = path.len();\n                        var pathData = path.data;\n                        if (prevCmd === CMD.Q) {\n                            ctlPtx += cpx - pathData[len - 4];\n                            ctlPty += cpy - pathData[len - 3];\n                        }\n                        cpx += p[off++];\n                        cpy += p[off++];\n                        cmd = CMD.Q;\n                        path.addData(cmd, ctlPtx, ctlPty, cpx, cpy);\n                        break;\n                    case 'A':\n                        rx = p[off++];\n                        ry = p[off++];\n                        psi = p[off++];\n                        fa = p[off++];\n                        fs = p[off++];\n\n                        x1 = cpx, y1 = cpy;\n                        cpx = p[off++];\n                        cpy = p[off++];\n                        cmd = CMD.A;\n                        processArc(\n                            x1, y1, cpx, cpy, fa, fs, rx, ry, psi, cmd, path\n                        );\n                        break;\n                    case 'a':\n                        rx = p[off++];\n                        ry = p[off++];\n                        psi = p[off++];\n                        fa = p[off++];\n                        fs = p[off++];\n\n                        x1 = cpx, y1 = cpy;\n                        cpx += p[off++];\n                        cpy += p[off++];\n                        cmd = CMD.A;\n                        processArc(\n                            x1, y1, cpx, cpy, fa, fs, rx, ry, psi, cmd, path\n                        );\n                        break;\n                }\n            }\n\n            if (c === 'z' || c === 'Z') {\n                cmd = CMD.Z;\n                path.addData(cmd);\n            }\n\n            prevCmd = cmd;\n        }\n\n        path.toStatic();\n\n        return path;\n    }\n\n    // TODO Optimize double memory cost problem\n    function createPathOptions(str, opts) {\n        var pathProxy = createPathProxyFromString(str);\n        opts = opts || {};\n        opts.buildPath = function (path) {\n            if (path.setData) {\n                path.setData(pathProxy.data);\n                // Svg and vml renderer don't have context\n                var ctx = path.getContext();\n                if (ctx) {\n                    path.rebuildPath(ctx);\n                }\n            }\n            else {\n                var ctx = path;\n                pathProxy.rebuildPath(ctx);\n            }\n        };\n\n        opts.applyTransform = function (m) {\n            transformPath(pathProxy, m);\n\n            this.dirty(true);\n        };\n\n        return opts;\n    }\n\n    module.exports = {\n        /**\n         * Create a Path object from path string data\n         * http://www.w3.org/TR/SVG/paths.html#PathData\n         * @param  {Object} opts Other options\n         */\n        createFromString: function (str, opts) {\n            return new Path(createPathOptions(str, opts));\n        },\n\n        /**\n         * Create a Path class from path string data\n         * @param  {string} str\n         * @param  {Object} opts Other options\n         */\n        extendFromString: function (str, opts) {\n            return Path.extend(createPathOptions(str, opts));\n        },\n\n        /**\n         * Merge multiple paths\n         */\n        // TODO Apply transform\n        // TODO stroke dash\n        // TODO Optimize double memory cost problem\n        mergePath: function (pathEls, opts) {\n            var pathList = [];\n            var len = pathEls.length;\n            for (var i = 0; i < len; i++) {\n                var pathEl = pathEls[i];\n                if (!pathEl.path) {\n                    pathEl.createPathProxy();\n                }\n                if (pathEl.__dirtyPath) {\n                    pathEl.buildPath(pathEl.path, pathEl.shape, true);\n                }\n                pathList.push(pathEl.path);\n            }\n\n            var pathBundle = new Path(opts);\n            // Need path proxy.\n            pathBundle.createPathProxy();\n            pathBundle.buildPath = function (path) {\n                path.appendPath(pathList);\n                // Svg and vml renderer don't have context\n                var ctx = path.getContext();\n                if (ctx) {\n                    path.rebuildPath(ctx);\n                }\n            };\n\n            return pathBundle;\n        }\n    };\n\n\n/***/ }),\n\n/***/ \"LgKv\":\n/***/ (function(module, exports, __webpack_require__) {\n\n/* WEBPACK VAR INJECTION */(function(global) {/**\n * List for data storage\n * @module echarts/data/List\n */\n\n\n    var UNDEFINED = 'undefined';\n    var globalObj = typeof window === 'undefined' ? global : window;\n    var Float64Array = typeof globalObj.Float64Array === UNDEFINED\n        ? Array : globalObj.Float64Array;\n    var Int32Array = typeof globalObj.Int32Array === UNDEFINED\n        ? Array : globalObj.Int32Array;\n\n    var dataCtors = {\n        'float': Float64Array,\n        'int': Int32Array,\n        // Ordinal data type can be string or int\n        'ordinal': Array,\n        'number': Array,\n        'time': Array\n    };\n\n    var Model = __webpack_require__(\"Q4Sk\");\n    var DataDiffer = __webpack_require__(\"VfTC\");\n\n    var zrUtil = __webpack_require__(\"nw1Z\");\n    var modelUtil = __webpack_require__(\"LFYx\");\n    var isObject = zrUtil.isObject;\n\n    var TRANSFERABLE_PROPERTIES = [\n        'stackedOn', 'hasItemOption', '_nameList', '_idList', '_rawData'\n    ];\n\n    function transferProperties(a, b) {\n        zrUtil.each(TRANSFERABLE_PROPERTIES.concat(b.__wrappedMethods || []), function (propName) {\n            if (b.hasOwnProperty(propName)) {\n                a[propName] = b[propName];\n            }\n        });\n\n        a.__wrappedMethods = b.__wrappedMethods;\n    }\n\n    function DefaultDataProvider(dataArray) {\n        this._array = dataArray || [];\n    }\n\n    DefaultDataProvider.prototype.pure = false;\n\n    DefaultDataProvider.prototype.count = function () {\n        return this._array.length;\n    };\n    DefaultDataProvider.prototype.getItem = function (idx) {\n        return this._array[idx];\n    };\n\n    /**\n     * @constructor\n     * @alias module:echarts/data/List\n     *\n     * @param {Array.<string|Object>} dimensions\n     *      For example, ['someDimName', {name: 'someDimName', type: 'someDimType'}, ...].\n     *      Dimensions should be concrete names like x, y, z, lng, lat, angle, radius\n     * @param {module:echarts/model/Model} hostModel\n     */\n    var List = function (dimensions, hostModel) {\n\n        dimensions = dimensions || ['x', 'y'];\n\n        var dimensionInfos = {};\n        var dimensionNames = [];\n        for (var i = 0; i < dimensions.length; i++) {\n            var dimensionName;\n            var dimensionInfo = {};\n            if (typeof dimensions[i] === 'string') {\n                dimensionName = dimensions[i];\n                dimensionInfo = {\n                    name: dimensionName,\n                    coordDim: dimensionName,\n                    coordDimIndex: 0,\n                    stackable: false,\n                    // Type can be 'float', 'int', 'number'\n                    // Default is number, Precision of float may not enough\n                    type: 'number'\n                };\n            }\n            else {\n                dimensionInfo = dimensions[i];\n                dimensionName = dimensionInfo.name;\n                dimensionInfo.type = dimensionInfo.type || 'number';\n                if (!dimensionInfo.coordDim) {\n                    dimensionInfo.coordDim = dimensionName;\n                    dimensionInfo.coordDimIndex = 0;\n                }\n            }\n            dimensionInfo.otherDims = dimensionInfo.otherDims || {};\n            dimensionNames.push(dimensionName);\n            dimensionInfos[dimensionName] = dimensionInfo;\n        }\n\n        /**\n         * @readOnly\n         * @type {Array.<string>}\n         */\n        this.dimensions = dimensionNames;\n\n        /**\n         * Infomation of each data dimension, like data type.\n         * @type {Object}\n         */\n        this._dimensionInfos = dimensionInfos;\n\n        /**\n         * @type {module:echarts/model/Model}\n         */\n        this.hostModel = hostModel;\n\n        /**\n         * @type {module:echarts/model/Model}\n         */\n        this.dataType;\n\n        /**\n         * Indices stores the indices of data subset after filtered.\n         * This data subset will be used in chart.\n         * @type {Array.<number>}\n         * @readOnly\n         */\n        this.indices = [];\n\n        /**\n         * Data storage\n         * @type {Object.<key, TypedArray|Array>}\n         * @private\n         */\n        this._storage = {};\n\n        /**\n         * @type {Array.<string>}\n         */\n        this._nameList = [];\n        /**\n         * @type {Array.<string>}\n         */\n        this._idList = [];\n\n        /**\n         * Models of data option is stored sparse for optimizing memory cost\n         * @type {Array.<module:echarts/model/Model>}\n         * @private\n         */\n        this._optionModels = [];\n\n        /**\n         * @param {module:echarts/data/List}\n         */\n        this.stackedOn = null;\n\n        /**\n         * Global visual properties after visual coding\n         * @type {Object}\n         * @private\n         */\n        this._visual = {};\n\n        /**\n         * Globel layout properties.\n         * @type {Object}\n         * @private\n         */\n        this._layout = {};\n\n        /**\n         * Item visual properties after visual coding\n         * @type {Array.<Object>}\n         * @private\n         */\n        this._itemVisuals = [];\n\n        /**\n         * Item layout properties after layout\n         * @type {Array.<Object>}\n         * @private\n         */\n        this._itemLayouts = [];\n\n        /**\n         * Graphic elemnents\n         * @type {Array.<module:zrender/Element>}\n         * @private\n         */\n        this._graphicEls = [];\n\n        /**\n         * @type {Array.<Array|Object>}\n         * @private\n         */\n        this._rawData;\n\n        /**\n         * @type {Object}\n         * @private\n         */\n        this._extent;\n    };\n\n    var listProto = List.prototype;\n\n    listProto.type = 'list';\n\n    /**\n     * If each data item has it's own option\n     * @type {boolean}\n     */\n    listProto.hasItemOption = true;\n\n    /**\n     * Get dimension name\n     * @param {string|number} dim\n     *        Dimension can be concrete names like x, y, z, lng, lat, angle, radius\n     *        Or a ordinal number. For example getDimensionInfo(0) will return 'x' or 'lng' or 'radius'\n     * @return {string} Concrete dim name.\n     */\n    listProto.getDimension = function (dim) {\n        if (!isNaN(dim)) {\n            dim = this.dimensions[dim] || dim;\n        }\n        return dim;\n    };\n\n    /**\n     * Get type and stackable info of particular dimension\n     * @param {string|number} dim\n     *        Dimension can be concrete names like x, y, z, lng, lat, angle, radius\n     *        Or a ordinal number. For example getDimensionInfo(0) will return 'x' or 'lng' or 'radius'\n     */\n    listProto.getDimensionInfo = function (dim) {\n        return zrUtil.clone(this._dimensionInfos[this.getDimension(dim)]);\n    };\n\n    /**\n     * Initialize from data\n     * @param {Array.<Object|number|Array>} data\n     * @param {Array.<string>} [nameList]\n     * @param {Function} [dimValueGetter] (dataItem, dimName, dataIndex, dimIndex) => number\n     */\n    listProto.initData = function (data, nameList, dimValueGetter) {\n        data = data || [];\n\n        var isDataArray = zrUtil.isArray(data);\n        if (isDataArray) {\n            data = new DefaultDataProvider(data);\n        }\n        if (__DEV__) {\n            if (!isDataArray && (typeof data.getItem != 'function' || typeof data.count != 'function')) {\n                throw new Error('Inavlid data provider.');\n            }\n        }\n\n        this._rawData = data;\n\n        // Clear\n        var storage = this._storage = {};\n        var indices = this.indices = [];\n\n        var dimensions = this.dimensions;\n        var dimensionInfoMap = this._dimensionInfos;\n\n        var size = data.count();\n\n        var idList = [];\n        var nameRepeatCount = {};\n        var nameDimIdx;\n\n        nameList = nameList || [];\n\n        // Init storage\n        for (var i = 0; i < dimensions.length; i++) {\n            var dimInfo = dimensionInfoMap[dimensions[i]];\n            dimInfo.otherDims.itemName === 0 && (nameDimIdx = i);\n            var DataCtor = dataCtors[dimInfo.type];\n            storage[dimensions[i]] = new DataCtor(size);\n        }\n\n        var self = this;\n        if (!dimValueGetter) {\n            self.hasItemOption = false;\n        }\n        // Default dim value getter\n        dimValueGetter = dimValueGetter || function (dataItem, dimName, dataIndex, dimIndex) {\n            var value = modelUtil.getDataItemValue(dataItem);\n            // If any dataItem is like { value: 10 }\n            if (modelUtil.isDataItemOption(dataItem)) {\n                self.hasItemOption = true;\n            }\n            return modelUtil.converDataValue(\n                (value instanceof Array)\n                    ? value[dimIndex]\n                    // If value is a single number or something else not array.\n                    : value,\n                dimensionInfoMap[dimName]\n            );\n        };\n\n        for (var i = 0; i < size; i++) {\n            // NOTICE: Try not to write things into dataItem\n            var dataItem = data.getItem(i);\n            // Each data item is value\n            // [1, 2]\n            // 2\n            // Bar chart, line chart which uses category axis\n            // only gives the 'y' value. 'x' value is the indices of cateogry\n            // Use a tempValue to normalize the value to be a (x, y) value\n\n            // Store the data by dimensions\n            for (var k = 0; k < dimensions.length; k++) {\n                var dim = dimensions[k];\n                var dimStorage = storage[dim];\n                // PENDING NULL is empty or zero\n                dimStorage[i] = dimValueGetter(dataItem, dim, i, k);\n            }\n\n            indices.push(i);\n        }\n\n        // Use the name in option and create id\n        for (var i = 0; i < size; i++) {\n            var dataItem = data.getItem(i);\n            if (!nameList[i] && dataItem) {\n                if (dataItem.name != null) {\n                    nameList[i] = dataItem.name;\n                }\n                else if (nameDimIdx != null) {\n                    nameList[i] = storage[dimensions[nameDimIdx]][i];\n                }\n            }\n            var name = nameList[i] || '';\n            // Try using the id in option\n            var id = dataItem && dataItem.id;\n\n            if (!id && name) {\n                // Use name as id and add counter to avoid same name\n                nameRepeatCount[name] = nameRepeatCount[name] || 0;\n                id = name;\n                if (nameRepeatCount[name] > 0) {\n                    id += '__ec__' + nameRepeatCount[name];\n                }\n                nameRepeatCount[name]++;\n            }\n            id && (idList[i] = id);\n        }\n\n        this._nameList = nameList;\n        this._idList = idList;\n    };\n\n    /**\n     * @return {number}\n     */\n    listProto.count = function () {\n        return this.indices.length;\n    };\n\n    /**\n     * Get value. Return NaN if idx is out of range.\n     * @param {string} dim Dim must be concrete name.\n     * @param {number} idx\n     * @param {boolean} stack\n     * @return {number}\n     */\n    listProto.get = function (dim, idx, stack) {\n        var storage = this._storage;\n        var dataIndex = this.indices[idx];\n\n        // If value not exists\n        if (dataIndex == null || !storage[dim]) {\n            return NaN;\n        }\n\n        var value = storage[dim][dataIndex];\n        // FIXME ordinal data type is not stackable\n        if (stack) {\n            var dimensionInfo = this._dimensionInfos[dim];\n            if (dimensionInfo && dimensionInfo.stackable) {\n                var stackedOn = this.stackedOn;\n                while (stackedOn) {\n                    // Get no stacked data of stacked on\n                    var stackedValue = stackedOn.get(dim, idx);\n                    // Considering positive stack, negative stack and empty data\n                    if ((value >= 0 && stackedValue > 0)  // Positive stack\n                        || (value <= 0 && stackedValue < 0) // Negative stack\n                    ) {\n                        value += stackedValue;\n                    }\n                    stackedOn = stackedOn.stackedOn;\n                }\n            }\n        }\n        return value;\n    };\n\n    /**\n     * Get value for multi dimensions.\n     * @param {Array.<string>} [dimensions] If ignored, using all dimensions.\n     * @param {number} idx\n     * @param {boolean} stack\n     * @return {number}\n     */\n    listProto.getValues = function (dimensions, idx, stack) {\n        var values = [];\n\n        if (!zrUtil.isArray(dimensions)) {\n            stack = idx;\n            idx = dimensions;\n            dimensions = this.dimensions;\n        }\n\n        for (var i = 0, len = dimensions.length; i < len; i++) {\n            values.push(this.get(dimensions[i], idx, stack));\n        }\n\n        return values;\n    };\n\n    /**\n     * If value is NaN. Inlcuding '-'\n     * @param {string} dim\n     * @param {number} idx\n     * @return {number}\n     */\n    listProto.hasValue = function (idx) {\n        var dimensions = this.dimensions;\n        var dimensionInfos = this._dimensionInfos;\n        for (var i = 0, len = dimensions.length; i < len; i++) {\n            if (\n                // Ordinal type can be string or number\n                dimensionInfos[dimensions[i]].type !== 'ordinal'\n                && isNaN(this.get(dimensions[i], idx))\n            ) {\n                return false;\n            }\n        }\n        return true;\n    };\n\n    /**\n     * Get extent of data in one dimension\n     * @param {string} dim\n     * @param {boolean} stack\n     * @param {Function} filter\n     */\n    listProto.getDataExtent = function (dim, stack, filter) {\n        dim = this.getDimension(dim);\n        var dimData = this._storage[dim];\n        var dimInfo = this.getDimensionInfo(dim);\n        stack = (dimInfo && dimInfo.stackable) && stack;\n        var dimExtent = (this._extent || (this._extent = {}))[dim + (!!stack)];\n        var value;\n        if (dimExtent) {\n            return dimExtent;\n        }\n        // var dimInfo = this._dimensionInfos[dim];\n        if (dimData) {\n            var min = Infinity;\n            var max = -Infinity;\n            // var isOrdinal = dimInfo.type === 'ordinal';\n            for (var i = 0, len = this.count(); i < len; i++) {\n                value = this.get(dim, i, stack);\n                // FIXME\n                // if (isOrdinal && typeof value === 'string') {\n                //     value = zrUtil.indexOf(dimData, value);\n                // }\n                if (!filter || filter(value, dim, i)) {\n                    value < min && (min = value);\n                    value > max && (max = value);\n                }\n            }\n            return (this._extent[dim + !!stack] = [min, max]);\n        }\n        else {\n            return [Infinity, -Infinity];\n        }\n    };\n\n    /**\n     * Get sum of data in one dimension\n     * @param {string} dim\n     * @param {boolean} stack\n     */\n    listProto.getSum = function (dim, stack) {\n        var dimData = this._storage[dim];\n        var sum = 0;\n        if (dimData) {\n            for (var i = 0, len = this.count(); i < len; i++) {\n                var value = this.get(dim, i, stack);\n                if (!isNaN(value)) {\n                    sum += value;\n                }\n            }\n        }\n        return sum;\n    };\n\n    /**\n     * Retreive the index with given value\n     * @param {number} idx\n     * @param {number} value\n     * @return {number}\n     */\n    // FIXME Precision of float value\n    listProto.indexOf = function (dim, value) {\n        var storage = this._storage;\n        var dimData = storage[dim];\n        var indices = this.indices;\n\n        if (dimData) {\n            for (var i = 0, len = indices.length; i < len; i++) {\n                var rawIndex = indices[i];\n                if (dimData[rawIndex] === value) {\n                    return i;\n                }\n            }\n        }\n        return -1;\n    };\n\n    /**\n     * Retreive the index with given name\n     * @param {number} idx\n     * @param {number} name\n     * @return {number}\n     */\n    listProto.indexOfName = function (name) {\n        var indices = this.indices;\n        var nameList = this._nameList;\n\n        for (var i = 0, len = indices.length; i < len; i++) {\n            var rawIndex = indices[i];\n            if (nameList[rawIndex] === name) {\n                return i;\n            }\n        }\n\n        return -1;\n    };\n\n    /**\n     * Retreive the index with given raw data index\n     * @param {number} idx\n     * @param {number} name\n     * @return {number}\n     */\n    listProto.indexOfRawIndex = function (rawIndex) {\n        // Indices are ascending\n        var indices = this.indices;\n\n        // If rawIndex === dataIndex\n        var rawDataIndex = indices[rawIndex];\n        if (rawDataIndex != null && rawDataIndex === rawIndex) {\n            return rawIndex;\n        }\n\n        var left = 0;\n        var right = indices.length - 1;\n        while (left <= right) {\n            var mid = (left + right) / 2 | 0;\n            if (indices[mid] < rawIndex) {\n                left = mid + 1;\n            }\n            else if (indices[mid] > rawIndex) {\n                right = mid - 1;\n            }\n            else {\n                return mid;\n            }\n        }\n        return -1;\n    };\n\n    /**\n     * Retreive the index of nearest value\n     * @param {string} dim\n     * @param {number} value\n     * @param {boolean} stack If given value is after stacked\n     * @param {number} [maxDistance=Infinity]\n     * @return {Array.<number>} Considere multiple points has the same value.\n     */\n    listProto.indicesOfNearest = function (dim, value, stack, maxDistance) {\n        var storage = this._storage;\n        var dimData = storage[dim];\n        var nearestIndices = [];\n\n        if (!dimData) {\n            return nearestIndices;\n        }\n\n        if (maxDistance == null) {\n            maxDistance = Infinity;\n        }\n\n        var minDist = Number.MAX_VALUE;\n        var minDiff = -1;\n        for (var i = 0, len = this.count(); i < len; i++) {\n            var diff = value - this.get(dim, i, stack);\n            var dist = Math.abs(diff);\n            if (diff <= maxDistance && dist <= minDist) {\n                // For the case of two data are same on xAxis, which has sequence data.\n                // Show the nearest index\n                // https://github.com/ecomfe/echarts/issues/2869\n                if (dist < minDist || (diff >= 0 && minDiff < 0)) {\n                    minDist = dist;\n                    minDiff = diff;\n                    nearestIndices.length = 0;\n                }\n                nearestIndices.push(i);\n            }\n        }\n        return nearestIndices;\n    };\n\n    /**\n     * Get raw data index\n     * @param {number} idx\n     * @return {number}\n     */\n    listProto.getRawIndex = function (idx) {\n        var rawIdx = this.indices[idx];\n        return rawIdx == null ? -1 : rawIdx;\n    };\n\n    /**\n     * Get raw data item\n     * @param {number} idx\n     * @return {number}\n     */\n    listProto.getRawDataItem = function (idx) {\n        return this._rawData.getItem(this.getRawIndex(idx));\n    };\n\n    /**\n     * @param {number} idx\n     * @param {boolean} [notDefaultIdx=false]\n     * @return {string}\n     */\n    listProto.getName = function (idx) {\n        return this._nameList[this.indices[idx]] || '';\n    };\n\n    /**\n     * @param {number} idx\n     * @param {boolean} [notDefaultIdx=false]\n     * @return {string}\n     */\n    listProto.getId = function (idx) {\n        return this._idList[this.indices[idx]] || (this.getRawIndex(idx) + '');\n    };\n\n\n    function normalizeDimensions(dimensions) {\n        if (!zrUtil.isArray(dimensions)) {\n            dimensions = [dimensions];\n        }\n        return dimensions;\n    }\n\n    /**\n     * Data iteration\n     * @param {string|Array.<string>}\n     * @param {Function} cb\n     * @param {boolean} [stack=false]\n     * @param {*} [context=this]\n     *\n     * @example\n     *  list.each('x', function (x, idx) {});\n     *  list.each(['x', 'y'], function (x, y, idx) {});\n     *  list.each(function (idx) {})\n     */\n    listProto.each = function (dims, cb, stack, context) {\n        if (typeof dims === 'function') {\n            context = stack;\n            stack = cb;\n            cb = dims;\n            dims = [];\n        }\n\n        dims = zrUtil.map(normalizeDimensions(dims), this.getDimension, this);\n\n        var value = [];\n        var dimSize = dims.length;\n        var indices = this.indices;\n\n        context = context || this;\n\n        for (var i = 0; i < indices.length; i++) {\n            // Simple optimization\n            switch (dimSize) {\n                case 0:\n                    cb.call(context, i);\n                    break;\n                case 1:\n                    cb.call(context, this.get(dims[0], i, stack), i);\n                    break;\n                case 2:\n                    cb.call(context, this.get(dims[0], i, stack), this.get(dims[1], i, stack), i);\n                    break;\n                default:\n                    for (var k = 0; k < dimSize; k++) {\n                        value[k] = this.get(dims[k], i, stack);\n                    }\n                    // Index\n                    value[k] = i;\n                    cb.apply(context, value);\n            }\n        }\n    };\n\n    /**\n     * Data filter\n     * @param {string|Array.<string>}\n     * @param {Function} cb\n     * @param {boolean} [stack=false]\n     * @param {*} [context=this]\n     */\n    listProto.filterSelf = function (dimensions, cb, stack, context) {\n        if (typeof dimensions === 'function') {\n            context = stack;\n            stack = cb;\n            cb = dimensions;\n            dimensions = [];\n        }\n\n        dimensions = zrUtil.map(\n            normalizeDimensions(dimensions), this.getDimension, this\n        );\n\n        var newIndices = [];\n        var value = [];\n        var dimSize = dimensions.length;\n        var indices = this.indices;\n\n        context = context || this;\n\n        for (var i = 0; i < indices.length; i++) {\n            var keep;\n            // Simple optimization\n            if (!dimSize) {\n                keep = cb.call(context, i);\n            }\n            else if (dimSize === 1) {\n                keep = cb.call(\n                    context, this.get(dimensions[0], i, stack), i\n                );\n            }\n            else {\n                for (var k = 0; k < dimSize; k++) {\n                    value[k] = this.get(dimensions[k], i, stack);\n                }\n                value[k] = i;\n                keep = cb.apply(context, value);\n            }\n            if (keep) {\n                newIndices.push(indices[i]);\n            }\n        }\n\n        this.indices = newIndices;\n\n        // Reset data extent\n        this._extent = {};\n\n        return this;\n    };\n\n    /**\n     * Data mapping to a plain array\n     * @param {string|Array.<string>} [dimensions]\n     * @param {Function} cb\n     * @param {boolean} [stack=false]\n     * @param {*} [context=this]\n     * @return {Array}\n     */\n    listProto.mapArray = function (dimensions, cb, stack, context) {\n        if (typeof dimensions === 'function') {\n            context = stack;\n            stack = cb;\n            cb = dimensions;\n            dimensions = [];\n        }\n\n        var result = [];\n        this.each(dimensions, function () {\n            result.push(cb && cb.apply(this, arguments));\n        }, stack, context);\n        return result;\n    };\n\n    function cloneListForMapAndSample(original, excludeDimensions) {\n        var allDimensions = original.dimensions;\n        var list = new List(\n            zrUtil.map(allDimensions, original.getDimensionInfo, original),\n            original.hostModel\n        );\n        // FIXME If needs stackedOn, value may already been stacked\n        transferProperties(list, original);\n\n        var storage = list._storage = {};\n        var originalStorage = original._storage;\n        // Init storage\n        for (var i = 0; i < allDimensions.length; i++) {\n            var dim = allDimensions[i];\n            var dimStore = originalStorage[dim];\n            if (zrUtil.indexOf(excludeDimensions, dim) >= 0) {\n                storage[dim] = new dimStore.constructor(\n                    originalStorage[dim].length\n                );\n            }\n            else {\n                // Direct reference for other dimensions\n                storage[dim] = originalStorage[dim];\n            }\n        }\n        return list;\n    }\n\n    /**\n     * Data mapping to a new List with given dimensions\n     * @param {string|Array.<string>} dimensions\n     * @param {Function} cb\n     * @param {boolean} [stack=false]\n     * @param {*} [context=this]\n     * @return {Array}\n     */\n    listProto.map = function (dimensions, cb, stack, context) {\n        dimensions = zrUtil.map(\n            normalizeDimensions(dimensions), this.getDimension, this\n        );\n\n        var list = cloneListForMapAndSample(this, dimensions);\n        // Following properties are all immutable.\n        // So we can reference to the same value\n        var indices = list.indices = this.indices;\n\n        var storage = list._storage;\n\n        var tmpRetValue = [];\n        this.each(dimensions, function () {\n            var idx = arguments[arguments.length - 1];\n            var retValue = cb && cb.apply(this, arguments);\n            if (retValue != null) {\n                // a number\n                if (typeof retValue === 'number') {\n                    tmpRetValue[0] = retValue;\n                    retValue = tmpRetValue;\n                }\n                for (var i = 0; i < retValue.length; i++) {\n                    var dim = dimensions[i];\n                    var dimStore = storage[dim];\n                    var rawIdx = indices[idx];\n                    if (dimStore) {\n                        dimStore[rawIdx] = retValue[i];\n                    }\n                }\n            }\n        }, stack, context);\n\n        return list;\n    };\n\n    /**\n     * Large data down sampling on given dimension\n     * @param {string} dimension\n     * @param {number} rate\n     * @param {Function} sampleValue\n     * @param {Function} sampleIndex Sample index for name and id\n     */\n    listProto.downSample = function (dimension, rate, sampleValue, sampleIndex) {\n        var list = cloneListForMapAndSample(this, [dimension]);\n        var storage = this._storage;\n        var targetStorage = list._storage;\n\n        var originalIndices = this.indices;\n        var indices = list.indices = [];\n\n        var frameValues = [];\n        var frameIndices = [];\n        var frameSize = Math.floor(1 / rate);\n\n        var dimStore = targetStorage[dimension];\n        var len = this.count();\n        // Copy data from original data\n        for (var i = 0; i < storage[dimension].length; i++) {\n            targetStorage[dimension][i] = storage[dimension][i];\n        }\n        for (var i = 0; i < len; i += frameSize) {\n            // Last frame\n            if (frameSize > len - i) {\n                frameSize = len - i;\n                frameValues.length = frameSize;\n            }\n            for (var k = 0; k < frameSize; k++) {\n                var idx = originalIndices[i + k];\n                frameValues[k] = dimStore[idx];\n                frameIndices[k] = idx;\n            }\n            var value = sampleValue(frameValues);\n            var idx = frameIndices[sampleIndex(frameValues, value) || 0];\n            // Only write value on the filtered data\n            dimStore[idx] = value;\n            indices.push(idx);\n        }\n\n        return list;\n    };\n\n    /**\n     * Get model of one data item.\n     *\n     * @param {number} idx\n     */\n    // FIXME Model proxy ?\n    listProto.getItemModel = function (idx) {\n        var hostModel = this.hostModel;\n        idx = this.indices[idx];\n        return new Model(this._rawData.getItem(idx), hostModel, hostModel && hostModel.ecModel);\n    };\n\n    /**\n     * Create a data differ\n     * @param {module:echarts/data/List} otherList\n     * @return {module:echarts/data/DataDiffer}\n     */\n    listProto.diff = function (otherList) {\n        var idList = this._idList;\n        var otherIdList = otherList && otherList._idList;\n        var val;\n        // Use prefix to avoid index to be the same as otherIdList[idx],\n        // which will cause weird udpate animation.\n        var prefix = 'e\\0\\0';\n\n        return new DataDiffer(\n            otherList ? otherList.indices : [],\n            this.indices,\n            function (idx) {\n                return (val = otherIdList[idx]) != null ? val : prefix + idx;\n            },\n            function (idx) {\n                return (val = idList[idx]) != null ? val : prefix + idx;\n            }\n        );\n    };\n    /**\n     * Get visual property.\n     * @param {string} key\n     */\n    listProto.getVisual = function (key) {\n        var visual = this._visual;\n        return visual && visual[key];\n    };\n\n    /**\n     * Set visual property\n     * @param {string|Object} key\n     * @param {*} [value]\n     *\n     * @example\n     *  setVisual('color', color);\n     *  setVisual({\n     *      'color': color\n     *  });\n     */\n    listProto.setVisual = function (key, val) {\n        if (isObject(key)) {\n            for (var name in key) {\n                if (key.hasOwnProperty(name)) {\n                    this.setVisual(name, key[name]);\n                }\n            }\n            return;\n        }\n        this._visual = this._visual || {};\n        this._visual[key] = val;\n    };\n\n    /**\n     * Set layout property.\n     * @param {string} key\n     * @param {*} [val]\n     */\n    listProto.setLayout = function (key, val) {\n        if (isObject(key)) {\n            for (var name in key) {\n                if (key.hasOwnProperty(name)) {\n                    this.setLayout(name, key[name]);\n                }\n            }\n            return;\n        }\n        this._layout[key] = val;\n    };\n\n    /**\n     * Get layout property.\n     * @param  {string} key.\n     * @return {*}\n     */\n    listProto.getLayout = function (key) {\n        return this._layout[key];\n    };\n\n    /**\n     * Get layout of single data item\n     * @param {number} idx\n     */\n    listProto.getItemLayout = function (idx) {\n        return this._itemLayouts[idx];\n    };\n\n    /**\n     * Set layout of single data item\n     * @param {number} idx\n     * @param {Object} layout\n     * @param {boolean=} [merge=false]\n     */\n    listProto.setItemLayout = function (idx, layout, merge) {\n        this._itemLayouts[idx] = merge\n            ? zrUtil.extend(this._itemLayouts[idx] || {}, layout)\n            : layout;\n    };\n\n    /**\n     * Clear all layout of single data item\n     */\n    listProto.clearItemLayouts = function () {\n        this._itemLayouts.length = 0;\n    };\n\n    /**\n     * Get visual property of single data item\n     * @param {number} idx\n     * @param {string} key\n     * @param {boolean} [ignoreParent=false]\n     */\n    listProto.getItemVisual = function (idx, key, ignoreParent) {\n        var itemVisual = this._itemVisuals[idx];\n        var val = itemVisual && itemVisual[key];\n        if (val == null && !ignoreParent) {\n            // Use global visual property\n            return this.getVisual(key);\n        }\n        return val;\n    };\n\n    /**\n     * Set visual property of single data item\n     *\n     * @param {number} idx\n     * @param {string|Object} key\n     * @param {*} [value]\n     *\n     * @example\n     *  setItemVisual(0, 'color', color);\n     *  setItemVisual(0, {\n     *      'color': color\n     *  });\n     */\n    listProto.setItemVisual = function (idx, key, value) {\n        var itemVisual = this._itemVisuals[idx] || {};\n        this._itemVisuals[idx] = itemVisual;\n\n        if (isObject(key)) {\n            for (var name in key) {\n                if (key.hasOwnProperty(name)) {\n                    itemVisual[name] = key[name];\n                }\n            }\n            return;\n        }\n        itemVisual[key] = value;\n    };\n\n    /**\n     * Clear itemVisuals and list visual.\n     */\n    listProto.clearAllVisual = function () {\n        this._visual = {};\n        this._itemVisuals = [];\n    };\n\n    var setItemDataAndSeriesIndex = function (child) {\n        child.seriesIndex = this.seriesIndex;\n        child.dataIndex = this.dataIndex;\n        child.dataType = this.dataType;\n    };\n    /**\n     * Set graphic element relative to data. It can be set as null\n     * @param {number} idx\n     * @param {module:zrender/Element} [el]\n     */\n    listProto.setItemGraphicEl = function (idx, el) {\n        var hostModel = this.hostModel;\n\n        if (el) {\n            // Add data index and series index for indexing the data by element\n            // Useful in tooltip\n            el.dataIndex = idx;\n            el.dataType = this.dataType;\n            el.seriesIndex = hostModel && hostModel.seriesIndex;\n            if (el.type === 'group') {\n                el.traverse(setItemDataAndSeriesIndex, el);\n            }\n        }\n\n        this._graphicEls[idx] = el;\n    };\n\n    /**\n     * @param {number} idx\n     * @return {module:zrender/Element}\n     */\n    listProto.getItemGraphicEl = function (idx) {\n        return this._graphicEls[idx];\n    };\n\n    /**\n     * @param {Function} cb\n     * @param {*} context\n     */\n    listProto.eachItemGraphicEl = function (cb, context) {\n        zrUtil.each(this._graphicEls, function (el, idx) {\n            if (el) {\n                cb && cb.call(context, el, idx);\n            }\n        });\n    };\n\n    /**\n     * Shallow clone a new list except visual and layout properties, and graph elements.\n     * New list only change the indices.\n     */\n    listProto.cloneShallow = function () {\n        var dimensionInfoList = zrUtil.map(this.dimensions, this.getDimensionInfo, this);\n        var list = new List(dimensionInfoList, this.hostModel);\n\n        // FIXME\n        list._storage = this._storage;\n\n        transferProperties(list, this);\n\n\n        // Clone will not change the data extent and indices\n        list.indices = this.indices.slice();\n\n        if (this._extent) {\n            list._extent = zrUtil.extend({}, this._extent);\n        }\n\n        return list;\n    };\n\n    /**\n     * Wrap some method to add more feature\n     * @param {string} methodName\n     * @param {Function} injectFunction\n     */\n    listProto.wrapMethod = function (methodName, injectFunction) {\n        var originalMethod = this[methodName];\n        if (typeof originalMethod !== 'function') {\n            return;\n        }\n        this.__wrappedMethods = this.__wrappedMethods || [];\n        this.__wrappedMethods.push(methodName);\n        this[methodName] = function () {\n            var res = originalMethod.apply(this, arguments);\n            return injectFunction.apply(this, [res].concat(zrUtil.slice(arguments)));\n        };\n    };\n\n    // Methods that create a new list based on this list should be listed here.\n    // Notice that those method should `RETURN` the new list.\n    listProto.TRANSFERABLE_METHODS = ['cloneShallow', 'downSample', 'map'];\n    // Methods that change indices of this list should be listed here.\n    listProto.CHANGABLE_METHODS = ['filterSelf'];\n\n    module.exports = List;\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(\"BxF/\")))\n\n/***/ }),\n\n/***/ \"LhwB\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// Poly path support NaN point\n\n\n    var Path = __webpack_require__(\"CC7E\");\n    var vec2 = __webpack_require__(\"Krco\");\n\n    var vec2Min = vec2.min;\n    var vec2Max = vec2.max;\n\n    var scaleAndAdd = vec2.scaleAndAdd;\n    var v2Copy = vec2.copy;\n\n    // Temporary variable\n    var v = [];\n    var cp0 = [];\n    var cp1 = [];\n\n    function isPointNull(p) {\n        return isNaN(p[0]) || isNaN(p[1]);\n    }\n\n    function drawSegment(\n        ctx, points, start, segLen, allLen,\n        dir, smoothMin, smoothMax, smooth, smoothMonotone, connectNulls\n    ) {\n        var prevIdx = 0;\n        var idx = start;\n        for (var k = 0; k < segLen; k++) {\n            var p = points[idx];\n            if (idx >= allLen || idx < 0) {\n                break;\n            }\n            if (isPointNull(p)) {\n                if (connectNulls) {\n                    idx += dir;\n                    continue;\n                }\n                break;\n            }\n\n            if (idx === start) {\n                ctx[dir > 0 ? 'moveTo' : 'lineTo'](p[0], p[1]);\n                v2Copy(cp0, p);\n            }\n            else {\n                if (smooth > 0) {\n                    var nextIdx = idx + dir;\n                    var nextP = points[nextIdx];\n                    if (connectNulls) {\n                        // Find next point not null\n                        while (nextP && isPointNull(points[nextIdx])) {\n                            nextIdx += dir;\n                            nextP = points[nextIdx];\n                        }\n                    }\n\n                    var ratioNextSeg = 0.5;\n                    var prevP = points[prevIdx];\n                    var nextP = points[nextIdx];\n                    // Last point\n                    if (!nextP || isPointNull(nextP)) {\n                        v2Copy(cp1, p);\n                    }\n                    else {\n                        // If next data is null in not connect case\n                        if (isPointNull(nextP) && !connectNulls) {\n                            nextP = p;\n                        }\n\n                        vec2.sub(v, nextP, prevP);\n\n                        var lenPrevSeg;\n                        var lenNextSeg;\n                        if (smoothMonotone === 'x' || smoothMonotone === 'y') {\n                            var dim = smoothMonotone === 'x' ? 0 : 1;\n                            lenPrevSeg = Math.abs(p[dim] - prevP[dim]);\n                            lenNextSeg = Math.abs(p[dim] - nextP[dim]);\n                        }\n                        else {\n                            lenPrevSeg = vec2.dist(p, prevP);\n                            lenNextSeg = vec2.dist(p, nextP);\n                        }\n\n                        // Use ratio of seg length\n                        ratioNextSeg = lenNextSeg / (lenNextSeg + lenPrevSeg);\n\n                        scaleAndAdd(cp1, p, v, -smooth * (1 - ratioNextSeg));\n                    }\n                    // Smooth constraint\n                    vec2Min(cp0, cp0, smoothMax);\n                    vec2Max(cp0, cp0, smoothMin);\n                    vec2Min(cp1, cp1, smoothMax);\n                    vec2Max(cp1, cp1, smoothMin);\n\n                    ctx.bezierCurveTo(\n                        cp0[0], cp0[1],\n                        cp1[0], cp1[1],\n                        p[0], p[1]\n                    );\n                    // cp0 of next segment\n                    scaleAndAdd(cp0, p, v, smooth * ratioNextSeg);\n                }\n                else {\n                    ctx.lineTo(p[0], p[1]);\n                }\n            }\n\n            prevIdx = idx;\n            idx += dir;\n        }\n\n        return k;\n    }\n\n    function getBoundingBox(points, smoothConstraint) {\n        var ptMin = [Infinity, Infinity];\n        var ptMax = [-Infinity, -Infinity];\n        if (smoothConstraint) {\n            for (var i = 0; i < points.length; i++) {\n                var pt = points[i];\n                if (pt[0] < ptMin[0]) { ptMin[0] = pt[0]; }\n                if (pt[1] < ptMin[1]) { ptMin[1] = pt[1]; }\n                if (pt[0] > ptMax[0]) { ptMax[0] = pt[0]; }\n                if (pt[1] > ptMax[1]) { ptMax[1] = pt[1]; }\n            }\n        }\n        return {\n            min: smoothConstraint ? ptMin : ptMax,\n            max: smoothConstraint ? ptMax : ptMin\n        };\n    }\n\n    module.exports = {\n\n        Polyline: Path.extend({\n\n            type: 'ec-polyline',\n\n            shape: {\n                points: [],\n\n                smooth: 0,\n\n                smoothConstraint: true,\n\n                smoothMonotone: null,\n\n                connectNulls: false\n            },\n\n            style: {\n                fill: null,\n\n                stroke: '#000'\n            },\n\n            buildPath: function (ctx, shape) {\n                var points = shape.points;\n\n                var i = 0;\n                var len = points.length;\n\n                var result = getBoundingBox(points, shape.smoothConstraint);\n\n                if (shape.connectNulls) {\n                    // Must remove first and last null values avoid draw error in polygon\n                    for (; len > 0; len--) {\n                        if (!isPointNull(points[len - 1])) {\n                            break;\n                        }\n                    }\n                    for (; i < len; i++) {\n                        if (!isPointNull(points[i])) {\n                            break;\n                        }\n                    }\n                }\n                while (i < len) {\n                    i += drawSegment(\n                        ctx, points, i, len, len,\n                        1, result.min, result.max, shape.smooth,\n                        shape.smoothMonotone, shape.connectNulls\n                    ) + 1;\n                }\n            }\n        }),\n\n        Polygon: Path.extend({\n\n            type: 'ec-polygon',\n\n            shape: {\n                points: [],\n\n                // Offset between stacked base points and points\n                stackedOnPoints: [],\n\n                smooth: 0,\n\n                stackedOnSmooth: 0,\n\n                smoothConstraint: true,\n\n                smoothMonotone: null,\n\n                connectNulls: false\n            },\n\n            buildPath: function (ctx, shape) {\n                var points = shape.points;\n                var stackedOnPoints = shape.stackedOnPoints;\n\n                var i = 0;\n                var len = points.length;\n                var smoothMonotone = shape.smoothMonotone;\n                var bbox = getBoundingBox(points, shape.smoothConstraint);\n                var stackedOnBBox = getBoundingBox(stackedOnPoints, shape.smoothConstraint);\n\n                if (shape.connectNulls) {\n                    // Must remove first and last null values avoid draw error in polygon\n                    for (; len > 0; len--) {\n                        if (!isPointNull(points[len - 1])) {\n                            break;\n                        }\n                    }\n                    for (; i < len; i++) {\n                        if (!isPointNull(points[i])) {\n                            break;\n                        }\n                    }\n                }\n                while (i < len) {\n                    var k = drawSegment(\n                        ctx, points, i, len, len,\n                        1, bbox.min, bbox.max, shape.smooth,\n                        smoothMonotone, shape.connectNulls\n                    );\n                    drawSegment(\n                        ctx, stackedOnPoints, i + k - 1, k, len,\n                        -1, stackedOnBBox.min, stackedOnBBox.max, shape.stackedOnSmooth,\n                        smoothMonotone, shape.connectNulls\n                    );\n                    i += k + 1;\n\n                    ctx.closePath();\n                }\n            }\n        })\n    };\n\n\n/***/ }),\n\n/***/ \"LsC0\":\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * 扇形\n * @module zrender/graphic/shape/Sector\n */\n\n\n\n    var env = __webpack_require__(\"020c\");\n    var Path = __webpack_require__(\"CC7E\");\n\n    var shadowTemp = [\n        ['shadowBlur', 0],\n        ['shadowColor', '#000'],\n        ['shadowOffsetX', 0],\n        ['shadowOffsetY', 0]\n    ];\n\n    module.exports = Path.extend({\n\n        type: 'sector',\n\n        shape: {\n\n            cx: 0,\n\n            cy: 0,\n\n            r0: 0,\n\n            r: 0,\n\n            startAngle: 0,\n\n            endAngle: Math.PI * 2,\n\n            clockwise: true\n        },\n\n        brush: (env.browser.ie && env.browser.version >= 11) // version: '11.0'\n            // Fix weird bug in some version of IE11 (like 11.0.9600.17801),\n            // where exception \"unexpected call to method or property access\"\n            // might be thrown when calling ctx.fill after a path whose area size\n            // is zero is drawn and ctx.clip() is called and shadowBlur is set.\n            // (e.g.,\n            //  ctx.moveTo(10, 10);\n            //  ctx.lineTo(20, 10);\n            //  ctx.closePath();\n            //  ctx.clip();\n            //  ctx.shadowBlur = 10;\n            //  ...\n            //  ctx.fill();\n            // )\n            ? function () {\n                var clipPaths = this.__clipPaths;\n                var style = this.style;\n                var modified;\n\n                if (clipPaths) {\n                    for (var i = 0; i < clipPaths.length; i++) {\n                        var shape = clipPaths[i] && clipPaths[i].shape;\n                        if (shape && shape.startAngle === shape.endAngle) {\n                            for (var j = 0; j < shadowTemp.length; j++) {\n                                shadowTemp[j][2] = style[shadowTemp[j][0]];\n                                style[shadowTemp[j][0]] = shadowTemp[j][1];\n                            }\n                            modified = true;\n                            break;\n                        }\n                    }\n                }\n\n                Path.prototype.brush.apply(this, arguments);\n\n                if (modified) {\n                    for (var j = 0; j < shadowTemp.length; j++) {\n                        style[shadowTemp[j][0]] = shadowTemp[j][2];\n                    }\n                }\n            }\n            : Path.prototype.brush,\n\n        buildPath: function (ctx, shape) {\n\n            var x = shape.cx;\n            var y = shape.cy;\n            var r0 = Math.max(shape.r0 || 0, 0);\n            var r = Math.max(shape.r, 0);\n            var startAngle = shape.startAngle;\n            var endAngle = shape.endAngle;\n            var clockwise = shape.clockwise;\n\n            var unitX = Math.cos(startAngle);\n            var unitY = Math.sin(startAngle);\n\n            ctx.moveTo(unitX * r0 + x, unitY * r0 + y);\n\n            ctx.lineTo(unitX * r + x, unitY * r + y);\n\n            ctx.arc(x, y, r, startAngle, endAngle, !clockwise);\n\n            ctx.lineTo(\n                Math.cos(endAngle) * r0 + x,\n                Math.sin(endAngle) * r0 + y\n            );\n\n            if (r0 !== 0) {\n                ctx.arc(x, y, r0, endAngle, startAngle, clockwise);\n            }\n\n            ctx.closePath();\n        }\n    });\n\n\n\n/***/ }),\n\n/***/ \"M5+E\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n\n    var features = {};\n\n    module.exports = {\n        register: function (name, ctor) {\n            features[name] = ctor;\n        },\n\n        get: function (name) {\n            return features[name];\n        }\n    };\n\n\n/***/ }),\n\n/***/ \"MU/F\":\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * ECharts global model\n *\n * @module {echarts/model/Global}\n */\n\n\n\n    /**\n     * Caution: If the mechanism should be changed some day, these cases\n     * should be considered:\n     *\n     * (1) In `merge option` mode, if using the same option to call `setOption`\n     * many times, the result should be the same (try our best to ensure that).\n     * (2) In `merge option` mode, if a component has no id/name specified, it\n     * will be merged by index, and the result sequence of the components is\n     * consistent to the original sequence.\n     * (3) `reset` feature (in toolbox). Find detailed info in comments about\n     * `mergeOption` in module:echarts/model/OptionManager.\n     */\n\n    var zrUtil = __webpack_require__(\"nw1Z\");\n    var modelUtil = __webpack_require__(\"LFYx\");\n    var Model = __webpack_require__(\"Q4Sk\");\n    var each = zrUtil.each;\n    var filter = zrUtil.filter;\n    var map = zrUtil.map;\n    var isArray = zrUtil.isArray;\n    var indexOf = zrUtil.indexOf;\n    var isObject = zrUtil.isObject;\n\n    var ComponentModel = __webpack_require__(\"wvll\");\n\n    var globalDefault = __webpack_require__(\"VaUJ\");\n\n    var OPTION_INNER_KEY = '\\0_ec_inner';\n\n    /**\n     * @alias module:echarts/model/Global\n     *\n     * @param {Object} option\n     * @param {module:echarts/model/Model} parentModel\n     * @param {Object} theme\n     */\n    var GlobalModel = Model.extend({\n\n        constructor: GlobalModel,\n\n        init: function (option, parentModel, theme, optionManager) {\n            theme = theme || {};\n\n            this.option = null; // Mark as not initialized.\n\n            /**\n             * @type {module:echarts/model/Model}\n             * @private\n             */\n            this._theme = new Model(theme);\n\n            /**\n             * @type {module:echarts/model/OptionManager}\n             */\n            this._optionManager = optionManager;\n        },\n\n        setOption: function (option, optionPreprocessorFuncs) {\n            zrUtil.assert(\n                !(OPTION_INNER_KEY in option),\n                'please use chart.getOption()'\n            );\n\n            this._optionManager.setOption(option, optionPreprocessorFuncs);\n\n            this.resetOption(null);\n        },\n\n        /**\n         * @param {string} type null/undefined: reset all.\n         *                      'recreate': force recreate all.\n         *                      'timeline': only reset timeline option\n         *                      'media': only reset media query option\n         * @return {boolean} Whether option changed.\n         */\n        resetOption: function (type) {\n            var optionChanged = false;\n            var optionManager = this._optionManager;\n\n            if (!type || type === 'recreate') {\n                var baseOption = optionManager.mountOption(type === 'recreate');\n\n                if (!this.option || type === 'recreate') {\n                    initBase.call(this, baseOption);\n                }\n                else {\n                    this.restoreData();\n                    this.mergeOption(baseOption);\n                }\n                optionChanged = true;\n            }\n\n            if (type === 'timeline' || type === 'media') {\n                this.restoreData();\n            }\n\n            if (!type || type === 'recreate' || type === 'timeline') {\n                var timelineOption = optionManager.getTimelineOption(this);\n                timelineOption && (this.mergeOption(timelineOption), optionChanged = true);\n            }\n\n            if (!type || type === 'recreate' || type === 'media') {\n                var mediaOptions = optionManager.getMediaOption(this, this._api);\n                if (mediaOptions.length) {\n                    each(mediaOptions, function (mediaOption) {\n                        this.mergeOption(mediaOption, optionChanged = true);\n                    }, this);\n                }\n            }\n\n            return optionChanged;\n        },\n\n        /**\n         * @protected\n         */\n        mergeOption: function (newOption) {\n            var option = this.option;\n            var componentsMap = this._componentsMap;\n            var newCptTypes = [];\n\n            // 如果不存在对应的 component model 则直接 merge\n            each(newOption, function (componentOption, mainType) {\n                if (componentOption == null) {\n                    return;\n                }\n\n                if (!ComponentModel.hasClass(mainType)) {\n                    option[mainType] = option[mainType] == null\n                        ? zrUtil.clone(componentOption)\n                        : zrUtil.merge(option[mainType], componentOption, true);\n                }\n                else {\n                    newCptTypes.push(mainType);\n                }\n            });\n\n            // FIXME OPTION 同步是否要改回原来的\n            ComponentModel.topologicalTravel(\n                newCptTypes, ComponentModel.getAllClassMainTypes(), visitComponent, this\n            );\n\n            this._seriesIndices = this._seriesIndices || [];\n\n            function visitComponent(mainType, dependencies) {\n                var newCptOptionList = modelUtil.normalizeToArray(newOption[mainType]);\n\n                var mapResult = modelUtil.mappingToExists(\n                    componentsMap.get(mainType), newCptOptionList\n                );\n\n                modelUtil.makeIdAndName(mapResult);\n\n                // Set mainType and complete subType.\n                each(mapResult, function (item, index) {\n                    var opt = item.option;\n                    if (isObject(opt)) {\n                        item.keyInfo.mainType = mainType;\n                        item.keyInfo.subType = determineSubType(mainType, opt, item.exist);\n                    }\n                });\n\n                var dependentModels = getComponentsByTypes(\n                    componentsMap, dependencies\n                );\n\n                option[mainType] = [];\n                componentsMap.set(mainType, []);\n\n                each(mapResult, function (resultItem, index) {\n                    var componentModel = resultItem.exist;\n                    var newCptOption = resultItem.option;\n\n                    zrUtil.assert(\n                        isObject(newCptOption) || componentModel,\n                        'Empty component definition'\n                    );\n\n                    // Consider where is no new option and should be merged using {},\n                    // see removeEdgeAndAdd in topologicalTravel and\n                    // ComponentModel.getAllClassMainTypes.\n                    if (!newCptOption) {\n                        componentModel.mergeOption({}, this);\n                        componentModel.optionUpdated({}, false);\n                    }\n                    else {\n                        var ComponentModelClass = ComponentModel.getClass(\n                            mainType, resultItem.keyInfo.subType, true\n                        );\n\n                        if (componentModel && componentModel instanceof ComponentModelClass) {\n                            componentModel.name = resultItem.keyInfo.name;\n                            componentModel.mergeOption(newCptOption, this);\n                            componentModel.optionUpdated(newCptOption, false);\n                        }\n                        else {\n                            // PENDING Global as parent ?\n                            var extraOpt = zrUtil.extend(\n                                {\n                                    dependentModels: dependentModels,\n                                    componentIndex: index\n                                },\n                                resultItem.keyInfo\n                            );\n                            componentModel = new ComponentModelClass(\n                                newCptOption, this, this, extraOpt\n                            );\n                            zrUtil.extend(componentModel, extraOpt);\n                            componentModel.init(newCptOption, this, this, extraOpt);\n                            // Call optionUpdated after init.\n                            // newCptOption has been used as componentModel.option\n                            // and may be merged with theme and default, so pass null\n                            // to avoid confusion.\n                            componentModel.optionUpdated(null, true);\n                        }\n                    }\n\n                    componentsMap.get(mainType)[index] = componentModel;\n                    option[mainType][index] = componentModel.option;\n                }, this);\n\n                // Backup series for filtering.\n                if (mainType === 'series') {\n                    this._seriesIndices = createSeriesIndices(componentsMap.get('series'));\n                }\n            }\n        },\n\n        /**\n         * Get option for output (cloned option and inner info removed)\n         * @public\n         * @return {Object}\n         */\n        getOption: function () {\n            var option = zrUtil.clone(this.option);\n\n            each(option, function (opts, mainType) {\n                if (ComponentModel.hasClass(mainType)) {\n                    var opts = modelUtil.normalizeToArray(opts);\n                    for (var i = opts.length - 1; i >= 0; i--) {\n                        // Remove options with inner id.\n                        if (modelUtil.isIdInner(opts[i])) {\n                            opts.splice(i, 1);\n                        }\n                    }\n                    option[mainType] = opts;\n                }\n            });\n\n            delete option[OPTION_INNER_KEY];\n\n            return option;\n        },\n\n        /**\n         * @return {module:echarts/model/Model}\n         */\n        getTheme: function () {\n            return this._theme;\n        },\n\n        /**\n         * @param {string} mainType\n         * @param {number} [idx=0]\n         * @return {module:echarts/model/Component}\n         */\n        getComponent: function (mainType, idx) {\n            var list = this._componentsMap.get(mainType);\n            if (list) {\n                return list[idx || 0];\n            }\n        },\n\n        /**\n         * If none of index and id and name used, return all components with mainType.\n         * @param {Object} condition\n         * @param {string} condition.mainType\n         * @param {string} [condition.subType] If ignore, only query by mainType\n         * @param {number|Array.<number>} [condition.index] Either input index or id or name.\n         * @param {string|Array.<string>} [condition.id] Either input index or id or name.\n         * @param {string|Array.<string>} [condition.name] Either input index or id or name.\n         * @return {Array.<module:echarts/model/Component>}\n         */\n        queryComponents: function (condition) {\n            var mainType = condition.mainType;\n            if (!mainType) {\n                return [];\n            }\n\n            var index = condition.index;\n            var id = condition.id;\n            var name = condition.name;\n\n            var cpts = this._componentsMap.get(mainType);\n\n            if (!cpts || !cpts.length) {\n                return [];\n            }\n\n            var result;\n\n            if (index != null) {\n                if (!isArray(index)) {\n                    index = [index];\n                }\n                result = filter(map(index, function (idx) {\n                    return cpts[idx];\n                }), function (val) {\n                    return !!val;\n                });\n            }\n            else if (id != null) {\n                var isIdArray = isArray(id);\n                result = filter(cpts, function (cpt) {\n                    return (isIdArray && indexOf(id, cpt.id) >= 0)\n                        || (!isIdArray && cpt.id === id);\n                });\n            }\n            else if (name != null) {\n                var isNameArray = isArray(name);\n                result = filter(cpts, function (cpt) {\n                    return (isNameArray && indexOf(name, cpt.name) >= 0)\n                        || (!isNameArray && cpt.name === name);\n                });\n            }\n            else {\n                // Return all components with mainType\n                result = cpts.slice();\n            }\n\n            return filterBySubType(result, condition);\n        },\n\n        /**\n         * The interface is different from queryComponents,\n         * which is convenient for inner usage.\n         *\n         * @usage\n         * var result = findComponents(\n         *     {mainType: 'dataZoom', query: {dataZoomId: 'abc'}}\n         * );\n         * var result = findComponents(\n         *     {mainType: 'series', subType: 'pie', query: {seriesName: 'uio'}}\n         * );\n         * var result = findComponents(\n         *     {mainType: 'series'},\n         *     function (model, index) {...}\n         * );\n         * // result like [component0, componnet1, ...]\n         *\n         * @param {Object} condition\n         * @param {string} condition.mainType Mandatory.\n         * @param {string} [condition.subType] Optional.\n         * @param {Object} [condition.query] like {xxxIndex, xxxId, xxxName},\n         *        where xxx is mainType.\n         *        If query attribute is null/undefined or has no index/id/name,\n         *        do not filtering by query conditions, which is convenient for\n         *        no-payload situations or when target of action is global.\n         * @param {Function} [condition.filter] parameter: component, return boolean.\n         * @return {Array.<module:echarts/model/Component>}\n         */\n        findComponents: function (condition) {\n            var query = condition.query;\n            var mainType = condition.mainType;\n\n            var queryCond = getQueryCond(query);\n            var result = queryCond\n                ? this.queryComponents(queryCond)\n                : this._componentsMap.get(mainType);\n\n            return doFilter(filterBySubType(result, condition));\n\n            function getQueryCond(q) {\n                var indexAttr = mainType + 'Index';\n                var idAttr = mainType + 'Id';\n                var nameAttr = mainType + 'Name';\n                return q && (\n                        q[indexAttr] != null\n                        || q[idAttr] != null\n                        || q[nameAttr] != null\n                    )\n                    ? {\n                        mainType: mainType,\n                        // subType will be filtered finally.\n                        index: q[indexAttr],\n                        id: q[idAttr],\n                        name: q[nameAttr]\n                    }\n                    : null;\n            }\n\n            function doFilter(res) {\n                return condition.filter\n                     ? filter(res, condition.filter)\n                     : res;\n            }\n        },\n\n        /**\n         * @usage\n         * eachComponent('legend', function (legendModel, index) {\n         *     ...\n         * });\n         * eachComponent(function (componentType, model, index) {\n         *     // componentType does not include subType\n         *     // (componentType is 'xxx' but not 'xxx.aa')\n         * });\n         * eachComponent(\n         *     {mainType: 'dataZoom', query: {dataZoomId: 'abc'}},\n         *     function (model, index) {...}\n         * );\n         * eachComponent(\n         *     {mainType: 'series', subType: 'pie', query: {seriesName: 'uio'}},\n         *     function (model, index) {...}\n         * );\n         *\n         * @param {string|Object=} mainType When mainType is object, the definition\n         *                                  is the same as the method 'findComponents'.\n         * @param {Function} cb\n         * @param {*} context\n         */\n        eachComponent: function (mainType, cb, context) {\n            var componentsMap = this._componentsMap;\n\n            if (typeof mainType === 'function') {\n                context = cb;\n                cb = mainType;\n                componentsMap.each(function (components, componentType) {\n                    each(components, function (component, index) {\n                        cb.call(context, componentType, component, index);\n                    });\n                });\n            }\n            else if (zrUtil.isString(mainType)) {\n                each(componentsMap.get(mainType), cb, context);\n            }\n            else if (isObject(mainType)) {\n                var queryResult = this.findComponents(mainType);\n                each(queryResult, cb, context);\n            }\n        },\n\n        /**\n         * @param {string} name\n         * @return {Array.<module:echarts/model/Series>}\n         */\n        getSeriesByName: function (name) {\n            var series = this._componentsMap.get('series');\n            return filter(series, function (oneSeries) {\n                return oneSeries.name === name;\n            });\n        },\n\n        /**\n         * @param {number} seriesIndex\n         * @return {module:echarts/model/Series}\n         */\n        getSeriesByIndex: function (seriesIndex) {\n            return this._componentsMap.get('series')[seriesIndex];\n        },\n\n        /**\n         * @param {string} subType\n         * @return {Array.<module:echarts/model/Series>}\n         */\n        getSeriesByType: function (subType) {\n            var series = this._componentsMap.get('series');\n            return filter(series, function (oneSeries) {\n                return oneSeries.subType === subType;\n            });\n        },\n\n        /**\n         * @return {Array.<module:echarts/model/Series>}\n         */\n        getSeries: function () {\n            return this._componentsMap.get('series').slice();\n        },\n\n        /**\n         * After filtering, series may be different\n         * frome raw series.\n         *\n         * @param {Function} cb\n         * @param {*} context\n         */\n        eachSeries: function (cb, context) {\n            assertSeriesInitialized(this);\n            each(this._seriesIndices, function (rawSeriesIndex) {\n                var series = this._componentsMap.get('series')[rawSeriesIndex];\n                cb.call(context, series, rawSeriesIndex);\n            }, this);\n        },\n\n        /**\n         * Iterate raw series before filtered.\n         *\n         * @param {Function} cb\n         * @param {*} context\n         */\n        eachRawSeries: function (cb, context) {\n            each(this._componentsMap.get('series'), cb, context);\n        },\n\n        /**\n         * After filtering, series may be different.\n         * frome raw series.\n         *\n         * @parma {string} subType\n         * @param {Function} cb\n         * @param {*} context\n         */\n        eachSeriesByType: function (subType, cb, context) {\n            assertSeriesInitialized(this);\n            each(this._seriesIndices, function (rawSeriesIndex) {\n                var series = this._componentsMap.get('series')[rawSeriesIndex];\n                if (series.subType === subType) {\n                    cb.call(context, series, rawSeriesIndex);\n                }\n            }, this);\n        },\n\n        /**\n         * Iterate raw series before filtered of given type.\n         *\n         * @parma {string} subType\n         * @param {Function} cb\n         * @param {*} context\n         */\n        eachRawSeriesByType: function (subType, cb, context) {\n            return each(this.getSeriesByType(subType), cb, context);\n        },\n\n        /**\n         * @param {module:echarts/model/Series} seriesModel\n         */\n        isSeriesFiltered: function (seriesModel) {\n            assertSeriesInitialized(this);\n            return zrUtil.indexOf(this._seriesIndices, seriesModel.componentIndex) < 0;\n        },\n\n        /**\n         * @return {Array.<number>}\n         */\n        getCurrentSeriesIndices: function () {\n            return (this._seriesIndices || []).slice();\n        },\n\n        /**\n         * @param {Function} cb\n         * @param {*} context\n         */\n        filterSeries: function (cb, context) {\n            assertSeriesInitialized(this);\n            var filteredSeries = filter(\n                this._componentsMap.get('series'), cb, context\n            );\n            this._seriesIndices = createSeriesIndices(filteredSeries);\n        },\n\n        restoreData: function () {\n            var componentsMap = this._componentsMap;\n\n            this._seriesIndices = createSeriesIndices(componentsMap.get('series'));\n\n            var componentTypes = [];\n            componentsMap.each(function (components, componentType) {\n                componentTypes.push(componentType);\n            });\n\n            ComponentModel.topologicalTravel(\n                componentTypes,\n                ComponentModel.getAllClassMainTypes(),\n                function (componentType, dependencies) {\n                    each(componentsMap.get(componentType), function (component) {\n                        component.restoreData();\n                    });\n                }\n            );\n        }\n\n    });\n\n    /**\n     * @inner\n     */\n    function mergeTheme(option, theme) {\n        zrUtil.each(theme, function (themeItem, name) {\n            // 如果有 component model 则把具体的 merge 逻辑交给该 model 处理\n            if (!ComponentModel.hasClass(name)) {\n                if (typeof themeItem === 'object') {\n                    option[name] = !option[name]\n                        ? zrUtil.clone(themeItem)\n                        : zrUtil.merge(option[name], themeItem, false);\n                }\n                else {\n                    if (option[name] == null) {\n                        option[name] = themeItem;\n                    }\n                }\n            }\n        });\n    }\n\n    function initBase(baseOption) {\n        baseOption = baseOption;\n\n        // Using OPTION_INNER_KEY to mark that this option can not be used outside,\n        // i.e. `chart.setOption(chart.getModel().option);` is forbiden.\n        this.option = {};\n        this.option[OPTION_INNER_KEY] = 1;\n\n        /**\n         * Init with series: [], in case of calling findSeries method\n         * before series initialized.\n         * @type {Object.<string, Array.<module:echarts/model/Model>>}\n         * @private\n         */\n        this._componentsMap = zrUtil.createHashMap({series: []});\n\n        /**\n         * Mapping between filtered series list and raw series list.\n         * key: filtered series indices, value: raw series indices.\n         * @type {Array.<nubmer>}\n         * @private\n         */\n        this._seriesIndices = null;\n\n        mergeTheme(baseOption, this._theme.option);\n\n        // TODO Needs clone when merging to the unexisted property\n        zrUtil.merge(baseOption, globalDefault, false);\n\n        this.mergeOption(baseOption);\n    }\n\n    /**\n     * @inner\n     * @param {Array.<string>|string} types model types\n     * @return {Object} key: {string} type, value: {Array.<Object>} models\n     */\n    function getComponentsByTypes(componentsMap, types) {\n        if (!zrUtil.isArray(types)) {\n            types = types ? [types] : [];\n        }\n\n        var ret = {};\n        each(types, function (type) {\n            ret[type] = (componentsMap.get(type) || []).slice();\n        });\n\n        return ret;\n    }\n\n    /**\n     * @inner\n     */\n    function determineSubType(mainType, newCptOption, existComponent) {\n        var subType = newCptOption.type\n            ? newCptOption.type\n            : existComponent\n            ? existComponent.subType\n            // Use determineSubType only when there is no existComponent.\n            : ComponentModel.determineSubType(mainType, newCptOption);\n\n        // tooltip, markline, markpoint may always has no subType\n        return subType;\n    }\n\n    /**\n     * @inner\n     */\n    function createSeriesIndices(seriesModels) {\n        return map(seriesModels, function (series) {\n            return series.componentIndex;\n        }) || [];\n    }\n\n    /**\n     * @inner\n     */\n    function filterBySubType(components, condition) {\n        // Using hasOwnProperty for restrict. Consider\n        // subType is undefined in user payload.\n        return condition.hasOwnProperty('subType')\n            ? filter(components, function (cpt) {\n                return cpt.subType === condition.subType;\n            })\n            : components;\n    }\n\n    /**\n     * @inner\n     */\n    function assertSeriesInitialized(ecModel) {\n        // Components that use _seriesIndices should depends on series component,\n        // which make sure that their initialization is after series.\n        if (__DEV__) {\n            if (!ecModel._seriesIndices) {\n                throw new Error('Option should contains series.');\n            }\n        }\n    }\n\n    zrUtil.mixin(GlobalModel, __webpack_require__(\"dCDA\"));\n\n    module.exports = GlobalModel;\n\n\n/***/ }),\n\n/***/ \"MVgO\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\n    __webpack_require__(\"LE4r\");\n    __webpack_require__(\"Ow2V\");\n\n    __webpack_require__(\"8MHU\");\n    __webpack_require__(\"GEOw\");\n    __webpack_require__(\"SZ7R\");\n    __webpack_require__(\"OGek\");\n    __webpack_require__(\"2p/A\");\n\n\n/***/ }),\n\n/***/ \"MpSj\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n\n    var createListFromArray = __webpack_require__(\"pwBP\");\n    var SeriesModel = __webpack_require__(\"vd24\");\n\n    module.exports = SeriesModel.extend({\n\n        type: 'series.line',\n\n        dependencies: ['grid', 'polar'],\n\n        getInitialData: function (option, ecModel) {\n            if (__DEV__) {\n                var coordSys = option.coordinateSystem;\n                if (coordSys !== 'polar' && coordSys !== 'cartesian2d') {\n                    throw new Error('Line not support coordinateSystem besides cartesian and polar');\n                }\n            }\n            return createListFromArray(option.data, this, ecModel);\n        },\n\n        defaultOption: {\n            zlevel: 0,                  // 一级层叠\n            z: 2,                       // 二级层叠\n            coordinateSystem: 'cartesian2d',\n            legendHoverLink: true,\n\n            hoverAnimation: true,\n            // stack: null\n            // xAxisIndex: 0,\n            // yAxisIndex: 0,\n\n            // polarIndex: 0,\n\n            // If clip the overflow value\n            clipOverflow: true,\n\n            label: {\n                normal: {\n                    position: 'top'\n                }\n            },\n            // itemStyle: {\n            //     normal: {},\n            //     emphasis: {}\n            // },\n            lineStyle: {\n                normal: {\n                    width: 2,\n                    type: 'solid'\n                }\n            },\n            // areaStyle: {},\n            // false, 'start', 'end', 'middle'\n            step: false,\n\n            // Disabled if step is true\n            smooth: false,\n            smoothMonotone: null,\n            // 拐点图形类型\n            symbol: 'emptyCircle',\n            // 拐点图形大小\n            symbolSize: 4,\n            // 拐点图形旋转控制\n            symbolRotate: null,\n\n            // 是否显示 symbol, 只有在 tooltip hover 的时候显示\n            showSymbol: true,\n            // 标志图形默认只有主轴显示（随主轴标签间隔隐藏策略）\n            showAllSymbol: false,\n\n            // 是否连接断点\n            connectNulls: false,\n\n            // 数据过滤，'average', 'max', 'min', 'sum'\n            sampling: 'none',\n\n            animationEasing: 'linear',\n\n            // Disable progressive\n            progressive: 0,\n            hoverLayerThreshold: Infinity\n        }\n    });\n\n\n/***/ }),\n\n/***/ \"NPNz\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\n    var ATTR = '\\0_ec_interaction_mutex';\n\n    var interactionMutex = {\n\n        take: function (zr, resourceKey, userKey) {\n            var store = getStore(zr);\n            store[resourceKey] = userKey;\n        },\n\n        release: function (zr, resourceKey, userKey) {\n            var store = getStore(zr);\n            var uKey = store[resourceKey];\n\n            if (uKey === userKey) {\n                store[resourceKey] = null;\n            }\n        },\n\n        isTaken: function (zr, resourceKey) {\n            return !!getStore(zr)[resourceKey];\n        }\n    };\n\n    function getStore(zr) {\n        return zr[ATTR] || (zr[ATTR] = {});\n    }\n\n    /**\n     * payload: {\n     *     type: 'takeGlobalCursor',\n     *     key: 'dataZoomSelect', or 'brush', or ...,\n     *         If no userKey, release global cursor.\n     * }\n     */\n    __webpack_require__(\"Cwwa\").registerAction(\n        {type: 'takeGlobalCursor', event: 'globalCursorTaken', update: 'update'},\n        function () {}\n    );\n\n    module.exports = interactionMutex;\n\n\n/***/ }),\n\n/***/ \"NXVI\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\n    var eventTool = __webpack_require__(\"kawL\");\n    var zrUtil = __webpack_require__(\"nw1Z\");\n    var Eventful = __webpack_require__(\"feXt\");\n    var env = __webpack_require__(\"020c\");\n    var GestureMgr = __webpack_require__(\"S2oc\");\n\n    var addEventListener = eventTool.addEventListener;\n    var removeEventListener = eventTool.removeEventListener;\n    var normalizeEvent = eventTool.normalizeEvent;\n\n    var TOUCH_CLICK_DELAY = 300;\n\n    var mouseHandlerNames = [\n        'click', 'dblclick', 'mousewheel', 'mouseout',\n        'mouseup', 'mousedown', 'mousemove', 'contextmenu'\n    ];\n\n    var touchHandlerNames = [\n        'touchstart', 'touchend', 'touchmove'\n    ];\n\n    var pointerEventNames = {\n        pointerdown: 1, pointerup: 1, pointermove: 1, pointerout: 1\n    };\n\n    var pointerHandlerNames = zrUtil.map(mouseHandlerNames, function (name) {\n        var nm = name.replace('mouse', 'pointer');\n        return pointerEventNames[nm] ? nm : name;\n    });\n\n    function eventNameFix(name) {\n        return (name === 'mousewheel' && env.browser.firefox) ? 'DOMMouseScroll' : name;\n    }\n\n    function processGesture(proxy, event, stage) {\n        var gestureMgr = proxy._gestureMgr;\n\n        stage === 'start' && gestureMgr.clear();\n\n        var gestureInfo = gestureMgr.recognize(\n            event,\n            proxy.handler.findHover(event.zrX, event.zrY, null).target,\n            proxy.dom\n        );\n\n        stage === 'end' && gestureMgr.clear();\n\n        // Do not do any preventDefault here. Upper application do that if necessary.\n        if (gestureInfo) {\n            var type = gestureInfo.type;\n            event.gestureEvent = type;\n\n            proxy.handler.dispatchToElement({target: gestureInfo.target}, type, gestureInfo.event);\n        }\n    }\n\n    // function onMSGestureChange(proxy, event) {\n    //     if (event.translationX || event.translationY) {\n    //         // mousemove is carried by MSGesture to reduce the sensitivity.\n    //         proxy.handler.dispatchToElement(event.target, 'mousemove', event);\n    //     }\n    //     if (event.scale !== 1) {\n    //         event.pinchX = event.offsetX;\n    //         event.pinchY = event.offsetY;\n    //         event.pinchScale = event.scale;\n    //         proxy.handler.dispatchToElement(event.target, 'pinch', event);\n    //     }\n    // }\n\n    /**\n     * Prevent mouse event from being dispatched after Touch Events action\n     * @see <https://github.com/deltakosh/handjs/blob/master/src/hand.base.js>\n     * 1. Mobile browsers dispatch mouse events 300ms after touchend.\n     * 2. Chrome for Android dispatch mousedown for long-touch about 650ms\n     * Result: Blocking Mouse Events for 700ms.\n     */\n    function setTouchTimer(instance) {\n        instance._touching = true;\n        clearTimeout(instance._touchTimer);\n        instance._touchTimer = setTimeout(function () {\n            instance._touching = false;\n        }, 700);\n    }\n\n\n    var domHandlers = {\n        /**\n         * Mouse move handler\n         * @inner\n         * @param {Event} event\n         */\n        mousemove: function (event) {\n            event = normalizeEvent(this.dom, event);\n\n            this.trigger('mousemove', event);\n        },\n\n        /**\n         * Mouse out handler\n         * @inner\n         * @param {Event} event\n         */\n        mouseout: function (event) {\n            event = normalizeEvent(this.dom, event);\n\n            var element = event.toElement || event.relatedTarget;\n            if (element != this.dom) {\n                while (element && element.nodeType != 9) {\n                    // 忽略包含在root中的dom引起的mouseOut\n                    if (element === this.dom) {\n                        return;\n                    }\n\n                    element = element.parentNode;\n                }\n            }\n\n            this.trigger('mouseout', event);\n        },\n\n        /**\n         * Touch开始响应函数\n         * @inner\n         * @param {Event} event\n         */\n        touchstart: function (event) {\n            // Default mouse behaviour should not be disabled here.\n            // For example, page may needs to be slided.\n            event = normalizeEvent(this.dom, event);\n\n            // Mark touch, which is useful in distinguish touch and\n            // mouse event in upper applicatoin.\n            event.zrByTouch = true;\n\n            this._lastTouchMoment = new Date();\n\n            processGesture(this, event, 'start');\n\n            // In touch device, trigger `mousemove`(`mouseover`) should\n            // be triggered, and must before `mousedown` triggered.\n            domHandlers.mousemove.call(this, event);\n\n            domHandlers.mousedown.call(this, event);\n\n            setTouchTimer(this);\n        },\n\n        /**\n         * Touch移动响应函数\n         * @inner\n         * @param {Event} event\n         */\n        touchmove: function (event) {\n\n            event = normalizeEvent(this.dom, event);\n\n            // Mark touch, which is useful in distinguish touch and\n            // mouse event in upper applicatoin.\n            event.zrByTouch = true;\n\n            processGesture(this, event, 'change');\n\n            // Mouse move should always be triggered no matter whether\n            // there is gestrue event, because mouse move and pinch may\n            // be used at the same time.\n            domHandlers.mousemove.call(this, event);\n\n            setTouchTimer(this);\n        },\n\n        /**\n         * Touch结束响应函数\n         * @inner\n         * @param {Event} event\n         */\n        touchend: function (event) {\n\n            event = normalizeEvent(this.dom, event);\n\n            // Mark touch, which is useful in distinguish touch and\n            // mouse event in upper applicatoin.\n            event.zrByTouch = true;\n\n            processGesture(this, event, 'end');\n\n            domHandlers.mouseup.call(this, event);\n\n            // Do not trigger `mouseout` here, in spite of `mousemove`(`mouseover`) is\n            // triggered in `touchstart`. This seems to be illogical, but by this mechanism,\n            // we can conveniently implement \"hover style\" in both PC and touch device just\n            // by listening to `mouseover` to add \"hover style\" and listening to `mouseout`\n            // to remove \"hover style\" on an element, without any additional code for\n            // compatibility. (`mouseout` will not be triggered in `touchend`, so \"hover\n            // style\" will remain for user view)\n\n            // click event should always be triggered no matter whether\n            // there is gestrue event. System click can not be prevented.\n            if (+new Date() - this._lastTouchMoment < TOUCH_CLICK_DELAY) {\n                domHandlers.click.call(this, event);\n            }\n\n            setTouchTimer(this);\n        },\n\n        pointerdown: function (event) {\n            domHandlers.mousedown.call(this, event);\n\n            // if (useMSGuesture(this, event)) {\n            //     this._msGesture.addPointer(event.pointerId);\n            // }\n        },\n\n        pointermove: function (event) {\n            // FIXME\n            // pointermove is so sensitive that it always triggered when\n            // tap(click) on touch screen, which affect some judgement in\n            // upper application. So, we dont support mousemove on MS touch\n            // device yet.\n            if (!isPointerFromTouch(event)) {\n                domHandlers.mousemove.call(this, event);\n            }\n        },\n\n        pointerup: function (event) {\n            domHandlers.mouseup.call(this, event);\n        },\n\n        pointerout: function (event) {\n            // pointerout will be triggered when tap on touch screen\n            // (IE11+/Edge on MS Surface) after click event triggered,\n            // which is inconsistent with the mousout behavior we defined\n            // in touchend. So we unify them.\n            // (check domHandlers.touchend for detailed explanation)\n            if (!isPointerFromTouch(event)) {\n                domHandlers.mouseout.call(this, event);\n            }\n        }\n    };\n\n    function isPointerFromTouch(event) {\n        var pointerType = event.pointerType;\n        return pointerType === 'pen' || pointerType === 'touch';\n    }\n\n    // function useMSGuesture(handlerProxy, event) {\n    //     return isPointerFromTouch(event) && !!handlerProxy._msGesture;\n    // }\n\n    // Common handlers\n    zrUtil.each(['click', 'mousedown', 'mouseup', 'mousewheel', 'dblclick', 'contextmenu'], function (name) {\n        domHandlers[name] = function (event) {\n            event = normalizeEvent(this.dom, event);\n            this.trigger(name, event);\n        };\n    });\n\n    /**\n     * 为控制类实例初始化dom 事件处理函数\n     *\n     * @inner\n     * @param {module:zrender/Handler} instance 控制类实例\n     */\n    function initDomHandler(instance) {\n        zrUtil.each(touchHandlerNames, function (name) {\n            instance._handlers[name] = zrUtil.bind(domHandlers[name], instance);\n        });\n\n        zrUtil.each(pointerHandlerNames, function (name) {\n            instance._handlers[name] = zrUtil.bind(domHandlers[name], instance);\n        });\n\n        zrUtil.each(mouseHandlerNames, function (name) {\n            instance._handlers[name] = makeMouseHandler(domHandlers[name], instance);\n        });\n\n        function makeMouseHandler(fn, instance) {\n            return function () {\n                if (instance._touching) {\n                    return;\n                }\n                return fn.apply(instance, arguments);\n            };\n        }\n    }\n\n\n    function HandlerDomProxy(dom) {\n        Eventful.call(this);\n\n        this.dom = dom;\n\n        /**\n         * @private\n         * @type {boolean}\n         */\n        this._touching = false;\n\n        /**\n         * @private\n         * @type {number}\n         */\n        this._touchTimer;\n\n        /**\n         * @private\n         * @type {module:zrender/core/GestureMgr}\n         */\n        this._gestureMgr = new GestureMgr();\n\n        this._handlers = {};\n\n        initDomHandler(this);\n\n        if (env.pointerEventsSupported) { // Only IE11+/Edge\n            // 1. On devices that both enable touch and mouse (e.g., MS Surface and lenovo X240),\n            // IE11+/Edge do not trigger touch event, but trigger pointer event and mouse event\n            // at the same time.\n            // 2. On MS Surface, it probablely only trigger mousedown but no mouseup when tap on\n            // screen, which do not occurs in pointer event.\n            // So we use pointer event to both detect touch gesture and mouse behavior.\n            mountHandlers(pointerHandlerNames, this);\n\n            // FIXME\n            // Note: MS Gesture require CSS touch-action set. But touch-action is not reliable,\n            // which does not prevent defuault behavior occasionally (which may cause view port\n            // zoomed in but use can not zoom it back). And event.preventDefault() does not work.\n            // So we have to not to use MSGesture and not to support touchmove and pinch on MS\n            // touch screen. And we only support click behavior on MS touch screen now.\n\n            // MS Gesture Event is only supported on IE11+/Edge and on Windows 8+.\n            // We dont support touch on IE on win7.\n            // See <https://msdn.microsoft.com/en-us/library/dn433243(v=vs.85).aspx>\n            // if (typeof MSGesture === 'function') {\n            //     (this._msGesture = new MSGesture()).target = dom; // jshint ignore:line\n            //     dom.addEventListener('MSGestureChange', onMSGestureChange);\n            // }\n        }\n        else {\n            if (env.touchEventsSupported) {\n                mountHandlers(touchHandlerNames, this);\n                // Handler of 'mouseout' event is needed in touch mode, which will be mounted below.\n                // addEventListener(root, 'mouseout', this._mouseoutHandler);\n            }\n\n            // 1. Considering some devices that both enable touch and mouse event (like on MS Surface\n            // and lenovo X240, @see #2350), we make mouse event be always listened, otherwise\n            // mouse event can not be handle in those devices.\n            // 2. On MS Surface, Chrome will trigger both touch event and mouse event. How to prevent\n            // mouseevent after touch event triggered, see `setTouchTimer`.\n            mountHandlers(mouseHandlerNames, this);\n        }\n\n        function mountHandlers(handlerNames, instance) {\n            zrUtil.each(handlerNames, function (name) {\n                addEventListener(dom, eventNameFix(name), instance._handlers[name]);\n            }, instance);\n        }\n    }\n\n    var handlerDomProxyProto = HandlerDomProxy.prototype;\n    handlerDomProxyProto.dispose = function () {\n        var handlerNames = mouseHandlerNames.concat(touchHandlerNames);\n\n        for (var i = 0; i < handlerNames.length; i++) {\n            var name = handlerNames[i];\n            removeEventListener(this.dom, eventNameFix(name), this._handlers[name]);\n        }\n    };\n\n    handlerDomProxyProto.setCursor = function (cursorStyle) {\n        this.dom.style.cursor = cursorStyle || 'default';\n    };\n\n    zrUtil.mixin(HandlerDomProxy, Eventful);\n\n    module.exports = HandlerDomProxy;\n\n\n/***/ }),\n\n/***/ \"OGek\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n\n    var zrUtil = __webpack_require__(\"nw1Z\");\n    var BrushController = __webpack_require__(\"cOuU\");\n    var BrushTargetManager = __webpack_require__(\"0Mv9\");\n    var history = __webpack_require__(\"nXqQ\");\n    var sliderMove = __webpack_require__(\"biqb\");\n\n    var each = zrUtil.each;\n\n    // Use dataZoomSelect\n    __webpack_require__(\"7zxc\");\n\n    // Spectial component id start with \\0ec\\0, see echarts/model/Global.js~hasInnerId\n    var DATA_ZOOM_ID_BASE = '\\0_ec_\\0toolbox-dataZoom_';\n\n    function DataZoom(model, ecModel, api) {\n\n        /**\n         * @private\n         * @type {module:echarts/component/helper/BrushController}\n         */\n        (this._brushController = new BrushController(api.getZr()))\n            .on('brush', zrUtil.bind(this._onBrush, this))\n            .mount();\n\n        /**\n         * @private\n         * @type {boolean}\n         */\n        this._isZoomActive;\n    }\n\n    DataZoom.defaultOption = {\n        show: true,\n        // Icon group\n        icon: {\n            zoom: 'M0,13.5h26.9 M13.5,26.9V0 M32.1,13.5H58V58H13.5 V32.1',\n            back: 'M22,1.4L9.9,13.5l12.3,12.3 M10.3,13.5H54.9v44.6 H10.3v-26'\n        },\n        title: {\n            zoom: '区域缩放',\n            back: '区域缩放还原'\n        }\n    };\n\n    var proto = DataZoom.prototype;\n\n    proto.render = function (featureModel, ecModel, api, payload) {\n        this.model = featureModel;\n        this.ecModel = ecModel;\n        this.api = api;\n\n        updateZoomBtnStatus(featureModel, ecModel, this, payload, api);\n        updateBackBtnStatus(featureModel, ecModel);\n    };\n\n    proto.onclick = function (ecModel, api, type) {\n        handlers[type].call(this);\n    };\n\n    proto.remove = function (ecModel, api) {\n        this._brushController.unmount();\n    };\n\n    proto.dispose = function (ecModel, api) {\n        this._brushController.dispose();\n    };\n\n    /**\n     * @private\n     */\n    var handlers = {\n\n        zoom: function () {\n            var nextActive = !this._isZoomActive;\n\n            this.api.dispatchAction({\n                type: 'takeGlobalCursor',\n                key: 'dataZoomSelect',\n                dataZoomSelectActive: nextActive\n            });\n        },\n\n        back: function () {\n            this._dispatchZoomAction(history.pop(this.ecModel));\n        }\n    };\n\n    /**\n     * @private\n     */\n    proto._onBrush = function (areas, opt) {\n        if (!opt.isEnd || !areas.length) {\n            return;\n        }\n        var snapshot = {};\n        var ecModel = this.ecModel;\n\n        this._brushController.updateCovers([]); // remove cover\n\n        var brushTargetManager = new BrushTargetManager(\n            retrieveAxisSetting(this.model.option), ecModel, {include: ['grid']}\n        );\n        brushTargetManager.matchOutputRanges(areas, ecModel, function (area, coordRange, coordSys) {\n            if (coordSys.type !== 'cartesian2d') {\n                return;\n            }\n\n            var brushType = area.brushType;\n            if (brushType === 'rect') {\n                setBatch('x', coordSys, coordRange[0]);\n                setBatch('y', coordSys, coordRange[1]);\n            }\n            else {\n                setBatch(({lineX: 'x', lineY: 'y'})[brushType], coordSys, coordRange);\n            }\n        });\n\n        history.push(ecModel, snapshot);\n\n        this._dispatchZoomAction(snapshot);\n\n        function setBatch(dimName, coordSys, minMax) {\n            var axis = coordSys.getAxis(dimName);\n            var axisModel = axis.model;\n            var dataZoomModel = findDataZoom(dimName, axisModel, ecModel);\n\n            // Restrict range.\n            var minMaxSpan = dataZoomModel.findRepresentativeAxisProxy(axisModel).getMinMaxSpan();\n            if (minMaxSpan.minValueSpan != null || minMaxSpan.maxValueSpan != null) {\n                minMax = sliderMove(\n                    0, minMax.slice(), axis.scale.getExtent(), 0,\n                    minMaxSpan.minValueSpan, minMaxSpan.maxValueSpan\n                );\n            }\n\n            dataZoomModel && (snapshot[dataZoomModel.id] = {\n                dataZoomId: dataZoomModel.id,\n                startValue: minMax[0],\n                endValue: minMax[1]\n            });\n        }\n\n        function findDataZoom(dimName, axisModel, ecModel) {\n            var found;\n            ecModel.eachComponent({mainType: 'dataZoom', subType: 'select'}, function (dzModel) {\n                var has = dzModel.getAxisModel(dimName, axisModel.componentIndex);\n                has && (found = dzModel);\n            });\n            return found;\n        }\n    };\n\n    /**\n     * @private\n     */\n    proto._dispatchZoomAction = function (snapshot) {\n        var batch = [];\n\n        // Convert from hash map to array.\n        each(snapshot, function (batchItem, dataZoomId) {\n            batch.push(zrUtil.clone(batchItem));\n        });\n\n        batch.length && this.api.dispatchAction({\n            type: 'dataZoom',\n            from: this.uid,\n            batch: batch\n        });\n    };\n\n    function retrieveAxisSetting(option) {\n        var setting = {};\n        // Compatible with previous setting: null => all axis, false => no axis.\n        zrUtil.each(['xAxisIndex', 'yAxisIndex'], function (name) {\n            setting[name] = option[name];\n            setting[name] == null && (setting[name] = 'all');\n            (setting[name] === false || setting[name] === 'none') && (setting[name] = []);\n        });\n        return setting;\n    }\n\n    function updateBackBtnStatus(featureModel, ecModel) {\n        featureModel.setIconStatus(\n            'back',\n            history.count(ecModel) > 1 ? 'emphasis' : 'normal'\n        );\n    }\n\n    function updateZoomBtnStatus(featureModel, ecModel, view, payload, api) {\n        var zoomActive = view._isZoomActive;\n\n        if (payload && payload.type === 'takeGlobalCursor') {\n            zoomActive = payload.key === 'dataZoomSelect'\n                ? payload.dataZoomSelectActive : false;\n        }\n\n        view._isZoomActive = zoomActive;\n\n        featureModel.setIconStatus('zoom', zoomActive ? 'emphasis' : 'normal');\n\n        var brushTargetManager = new BrushTargetManager(\n            retrieveAxisSetting(featureModel.option), ecModel, {include: ['grid']}\n        );\n\n        view._brushController\n            .setPanels(brushTargetManager.makePanelOpts(api, function (targetInfo) {\n                return (targetInfo.xAxisDeclared && !targetInfo.yAxisDeclared)\n                    ? 'lineX'\n                    : (!targetInfo.xAxisDeclared && targetInfo.yAxisDeclared)\n                    ? 'lineY'\n                    : 'rect';\n            }))\n            .enableBrush(\n                zoomActive\n                ? {\n                    brushType: 'auto',\n                    brushStyle: {\n                        // FIXME user customized?\n                        lineWidth: 0,\n                        fill: 'rgba(0,0,0,0.2)'\n                    }\n                }\n                : false\n            );\n    }\n\n\n    __webpack_require__(\"M5+E\").register('dataZoom', DataZoom);\n\n\n    // Create special dataZoom option for select\n    __webpack_require__(\"Cwwa\").registerPreprocessor(function (option) {\n        if (!option) {\n            return;\n        }\n\n        var dataZoomOpts = option.dataZoom || (option.dataZoom = []);\n        if (!zrUtil.isArray(dataZoomOpts)) {\n            option.dataZoom = dataZoomOpts = [dataZoomOpts];\n        }\n\n        var toolboxOpt = option.toolbox;\n        if (toolboxOpt) {\n            // Assume there is only one toolbox\n            if (zrUtil.isArray(toolboxOpt)) {\n                toolboxOpt = toolboxOpt[0];\n            }\n\n            if (toolboxOpt && toolboxOpt.feature) {\n                var dataZoomOpt = toolboxOpt.feature.dataZoom;\n                addForAxis('xAxis', dataZoomOpt);\n                addForAxis('yAxis', dataZoomOpt);\n            }\n        }\n\n        function addForAxis(axisName, dataZoomOpt) {\n            if (!dataZoomOpt) {\n                return;\n            }\n\n            // Try not to modify model, because it is not merged yet.\n            var axisIndicesName = axisName + 'Index';\n            var givenAxisIndices = dataZoomOpt[axisIndicesName];\n            if (givenAxisIndices != null\n                && givenAxisIndices != 'all'\n                && !zrUtil.isArray(givenAxisIndices)\n            ) {\n                givenAxisIndices = (givenAxisIndices === false || givenAxisIndices === 'none') ? [] : [givenAxisIndices];\n            }\n\n            forEachComponent(axisName, function (axisOpt, axisIndex) {\n                if (givenAxisIndices != null\n                    && givenAxisIndices != 'all'\n                    && zrUtil.indexOf(givenAxisIndices, axisIndex) === -1\n                ) {\n                    return;\n                }\n                var newOpt = {\n                    type: 'select',\n                    $fromToolbox: true,\n                    // Id for merge mapping.\n                    id: DATA_ZOOM_ID_BASE + axisName + axisIndex\n                };\n                // FIXME\n                // Only support one axis now.\n                newOpt[axisIndicesName] = axisIndex;\n                dataZoomOpts.push(newOpt);\n            });\n        }\n\n        function forEachComponent(mainType, cb) {\n            var opts = option[mainType];\n            if (!zrUtil.isArray(opts)) {\n                opts = opts ? [opts] : [];\n            }\n            each(opts, cb);\n        }\n    });\n\n    module.exports = DataZoom;\n\n\n/***/ }),\n\n/***/ \"OfUh\":\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * Grid is a region which contains at most 4 cartesian systems\n *\n * TODO Default cartesian\n */\nvar factory = exports;\n\n    var layout = __webpack_require__(\"zxuD\");\n    var axisHelper = __webpack_require__(\"bL7R\");\n\n    var zrUtil = __webpack_require__(\"nw1Z\");\n    var Cartesian2D = __webpack_require__(\"+iiX\");\n    var Axis2D = __webpack_require__(\"1/d/\");\n\n    var each = zrUtil.each;\n\n    var ifAxisCrossZero = axisHelper.ifAxisCrossZero;\n    var niceScaleExtent = axisHelper.niceScaleExtent;\n\n    // 依赖 GridModel, AxisModel 做预处理\n    __webpack_require__(\"ys60\");\n\n    /**\n     * Check if the axis is used in the specified grid\n     * @inner\n     */\n    function isAxisUsedInTheGrid(axisModel, gridModel, ecModel) {\n        return axisModel.getCoordSysModel() === gridModel;\n    }\n\n    function getLabelUnionRect(axis) {\n        var axisModel = axis.model;\n        var labels = axisModel.getFormattedLabels();\n        var textStyleModel = axisModel.getModel('axisLabel.textStyle');\n        var rect;\n        var step = 1;\n        var labelCount = labels.length;\n        if (labelCount > 40) {\n            // Simple optimization for large amount of labels\n            step = Math.ceil(labelCount / 40);\n        }\n        for (var i = 0; i < labelCount; i += step) {\n            if (!axis.isLabelIgnored(i)) {\n                var singleRect = textStyleModel.getTextRect(labels[i]);\n                // FIXME consider label rotate\n                rect ? rect.union(singleRect) : (rect = singleRect);\n            }\n        }\n        return rect;\n    }\n\n    function Grid(gridModel, ecModel, api) {\n        /**\n         * @type {Object.<string, module:echarts/coord/cartesian/Cartesian2D>}\n         * @private\n         */\n        this._coordsMap = {};\n\n        /**\n         * @type {Array.<module:echarts/coord/cartesian/Cartesian>}\n         * @private\n         */\n        this._coordsList = [];\n\n        /**\n         * @type {Object.<string, module:echarts/coord/cartesian/Axis2D>}\n         * @private\n         */\n        this._axesMap = {};\n\n        /**\n         * @type {Array.<module:echarts/coord/cartesian/Axis2D>}\n         * @private\n         */\n        this._axesList = [];\n\n        this._initCartesian(gridModel, ecModel, api);\n\n        this.model = gridModel;\n    }\n\n    var gridProto = Grid.prototype;\n\n    gridProto.type = 'grid';\n\n    gridProto.axisPointerEnabled = true;\n\n    gridProto.getRect = function () {\n        return this._rect;\n    };\n\n    gridProto.update = function (ecModel, api) {\n\n        var axesMap = this._axesMap;\n\n        this._updateScale(ecModel, this.model);\n\n        function ifAxisCanNotOnZero(otherAxisDim) {\n            var axes = axesMap[otherAxisDim];\n            for (var idx in axes) {\n                if (axes.hasOwnProperty(idx)) {\n                    var axis = axes[idx];\n                    if (axis && (\n                        axis.type === 'category' || axis.type === 'time' || !ifAxisCrossZero(axis)\n                    )) {\n                        return true;\n                    }\n                }\n            }\n            return false;\n        }\n\n        each(axesMap.x, function (xAxis) {\n            niceScaleExtent(xAxis.scale, xAxis.model);\n        });\n        each(axesMap.y, function (yAxis) {\n            niceScaleExtent(yAxis.scale, yAxis.model);\n        });\n        // Fix configuration\n        each(axesMap.x, function (xAxis) {\n            // onZero can not be enabled in these two situations\n            // 1. When any other axis is a category axis\n            // 2. When any other axis not across 0 point\n            if (ifAxisCanNotOnZero('y')) {\n                xAxis.onZero = false;\n            }\n        });\n        each(axesMap.y, function (yAxis) {\n            if (ifAxisCanNotOnZero('x')) {\n                yAxis.onZero = false;\n            }\n        });\n\n        // Resize again if containLabel is enabled\n        // FIXME It may cause getting wrong grid size in data processing stage\n        this.resize(this.model, api);\n    };\n\n    /**\n     * Resize the grid\n     * @param {module:echarts/coord/cartesian/GridModel} gridModel\n     * @param {module:echarts/ExtensionAPI} api\n     */\n    gridProto.resize = function (gridModel, api, ignoreContainLabel) {\n\n        var gridRect = layout.getLayoutRect(\n            gridModel.getBoxLayoutParams(), {\n                width: api.getWidth(),\n                height: api.getHeight()\n            });\n\n        this._rect = gridRect;\n\n        var axesList = this._axesList;\n\n        adjustAxes();\n\n        // Minus label size\n        if (!ignoreContainLabel && gridModel.get('containLabel')) {\n            each(axesList, function (axis) {\n                if (!axis.model.get('axisLabel.inside')) {\n                    var labelUnionRect = getLabelUnionRect(axis);\n                    if (labelUnionRect) {\n                        var dim = axis.isHorizontal() ? 'height' : 'width';\n                        var margin = axis.model.get('axisLabel.margin');\n                        gridRect[dim] -= labelUnionRect[dim] + margin;\n                        if (axis.position === 'top') {\n                            gridRect.y += labelUnionRect.height + margin;\n                        }\n                        else if (axis.position === 'left')  {\n                            gridRect.x += labelUnionRect.width + margin;\n                        }\n                    }\n                }\n            });\n\n            adjustAxes();\n        }\n\n        function adjustAxes() {\n            each(axesList, function (axis) {\n                var isHorizontal = axis.isHorizontal();\n                var extent = isHorizontal ? [0, gridRect.width] : [0, gridRect.height];\n                var idx = axis.inverse ? 1 : 0;\n                axis.setExtent(extent[idx], extent[1 - idx]);\n                updateAxisTransfrom(axis, isHorizontal ? gridRect.x : gridRect.y);\n            });\n        }\n    };\n\n    /**\n     * @param {string} axisType\n     * @param {ndumber} [axisIndex]\n     */\n    gridProto.getAxis = function (axisType, axisIndex) {\n        var axesMapOnDim = this._axesMap[axisType];\n        if (axesMapOnDim != null) {\n            if (axisIndex == null) {\n                // Find first axis\n                for (var name in axesMapOnDim) {\n                    if (axesMapOnDim.hasOwnProperty(name)) {\n                        return axesMapOnDim[name];\n                    }\n                }\n            }\n            return axesMapOnDim[axisIndex];\n        }\n    };\n\n    /**\n     * @return {Array.<module:echarts/coord/Axis>}\n     */\n    gridProto.getAxes = function () {\n        return this._axesList.slice();\n    };\n\n    /**\n     * Usage:\n     *      grid.getCartesian(xAxisIndex, yAxisIndex);\n     *      grid.getCartesian(xAxisIndex);\n     *      grid.getCartesian(null, yAxisIndex);\n     *      grid.getCartesian({xAxisIndex: ..., yAxisIndex: ...});\n     *\n     * @param {number|Object} [xAxisIndex]\n     * @param {number} [yAxisIndex]\n     */\n    gridProto.getCartesian = function (xAxisIndex, yAxisIndex) {\n        if (xAxisIndex != null && yAxisIndex != null) {\n            var key = 'x' + xAxisIndex + 'y' + yAxisIndex;\n            return this._coordsMap[key];\n        }\n\n        if (zrUtil.isObject(xAxisIndex)) {\n            yAxisIndex = xAxisIndex.yAxisIndex;\n            xAxisIndex = xAxisIndex.xAxisIndex;\n        }\n        // When only xAxisIndex or yAxisIndex given, find its first cartesian.\n        for (var i = 0, coordList = this._coordsList; i < coordList.length; i++) {\n            if (coordList[i].getAxis('x').index === xAxisIndex\n                || coordList[i].getAxis('y').index === yAxisIndex\n            ) {\n                return coordList[i];\n            }\n        }\n    };\n\n    gridProto.getCartesians = function () {\n        return this._coordsList.slice();\n    };\n\n    /**\n     * @implements\n     * see {module:echarts/CoodinateSystem}\n     */\n    gridProto.convertToPixel = function (ecModel, finder, value) {\n        var target = this._findConvertTarget(ecModel, finder);\n\n        return target.cartesian\n            ? target.cartesian.dataToPoint(value)\n            : target.axis\n            ? target.axis.toGlobalCoord(target.axis.dataToCoord(value))\n            : null;\n    };\n\n    /**\n     * @implements\n     * see {module:echarts/CoodinateSystem}\n     */\n    gridProto.convertFromPixel = function (ecModel, finder, value) {\n        var target = this._findConvertTarget(ecModel, finder);\n\n        return target.cartesian\n            ? target.cartesian.pointToData(value)\n            : target.axis\n            ? target.axis.coordToData(target.axis.toLocalCoord(value))\n            : null;\n    };\n\n    /**\n     * @inner\n     */\n    gridProto._findConvertTarget = function (ecModel, finder) {\n        var seriesModel = finder.seriesModel;\n        var xAxisModel = finder.xAxisModel\n            || (seriesModel && seriesModel.getReferringComponents('xAxis')[0]);\n        var yAxisModel = finder.yAxisModel\n            || (seriesModel && seriesModel.getReferringComponents('yAxis')[0]);\n        var gridModel = finder.gridModel;\n        var coordsList = this._coordsList;\n        var cartesian;\n        var axis;\n\n        if (seriesModel) {\n            cartesian = seriesModel.coordinateSystem;\n            zrUtil.indexOf(coordsList, cartesian) < 0 && (cartesian = null);\n        }\n        else if (xAxisModel && yAxisModel) {\n            cartesian = this.getCartesian(xAxisModel.componentIndex, yAxisModel.componentIndex);\n        }\n        else if (xAxisModel) {\n            axis = this.getAxis('x', xAxisModel.componentIndex);\n        }\n        else if (yAxisModel) {\n            axis = this.getAxis('y', yAxisModel.componentIndex);\n        }\n        // Lowest priority.\n        else if (gridModel) {\n            var grid = gridModel.coordinateSystem;\n            if (grid === this) {\n                cartesian = this._coordsList[0];\n            }\n        }\n\n        return {cartesian: cartesian, axis: axis};\n    };\n\n    /**\n     * @implements\n     * see {module:echarts/CoodinateSystem}\n     */\n    gridProto.containPoint = function (point) {\n        var coord = this._coordsList[0];\n        if (coord) {\n            return coord.containPoint(point);\n        }\n    };\n\n    /**\n     * Initialize cartesian coordinate systems\n     * @private\n     */\n    gridProto._initCartesian = function (gridModel, ecModel, api) {\n        var axisPositionUsed = {\n            left: false,\n            right: false,\n            top: false,\n            bottom: false\n        };\n\n        var axesMap = {\n            x: {},\n            y: {}\n        };\n        var axesCount = {\n            x: 0,\n            y: 0\n        };\n\n        /// Create axis\n        ecModel.eachComponent('xAxis', createAxisCreator('x'), this);\n        ecModel.eachComponent('yAxis', createAxisCreator('y'), this);\n\n        if (!axesCount.x || !axesCount.y) {\n            // Roll back when there no either x or y axis\n            this._axesMap = {};\n            this._axesList = [];\n            return;\n        }\n\n        this._axesMap = axesMap;\n\n        /// Create cartesian2d\n        each(axesMap.x, function (xAxis, xAxisIndex) {\n            each(axesMap.y, function (yAxis, yAxisIndex) {\n                var key = 'x' + xAxisIndex + 'y' + yAxisIndex;\n                var cartesian = new Cartesian2D(key);\n\n                cartesian.grid = this;\n                cartesian.model = gridModel;\n\n                this._coordsMap[key] = cartesian;\n                this._coordsList.push(cartesian);\n\n                cartesian.addAxis(xAxis);\n                cartesian.addAxis(yAxis);\n            }, this);\n        }, this);\n\n        function createAxisCreator(axisType) {\n            return function (axisModel, idx) {\n                if (!isAxisUsedInTheGrid(axisModel, gridModel, ecModel)) {\n                    return;\n                }\n\n                var axisPosition = axisModel.get('position');\n                if (axisType === 'x') {\n                    // Fix position\n                    if (axisPosition !== 'top' && axisPosition !== 'bottom') {\n                        // Default bottom of X\n                        axisPosition = 'bottom';\n                        if (axisPositionUsed[axisPosition]) {\n                            axisPosition = axisPosition === 'top' ? 'bottom' : 'top';\n                        }\n                    }\n                }\n                else {\n                    // Fix position\n                    if (axisPosition !== 'left' && axisPosition !== 'right') {\n                        // Default left of Y\n                        axisPosition = 'left';\n                        if (axisPositionUsed[axisPosition]) {\n                            axisPosition = axisPosition === 'left' ? 'right' : 'left';\n                        }\n                    }\n                }\n                axisPositionUsed[axisPosition] = true;\n\n                var axis = new Axis2D(\n                    axisType, axisHelper.createScaleByModel(axisModel),\n                    [0, 0],\n                    axisModel.get('type'),\n                    axisPosition\n                );\n\n                var isCategory = axis.type === 'category';\n                axis.onBand = isCategory && axisModel.get('boundaryGap');\n                axis.inverse = axisModel.get('inverse');\n\n                axis.onZero = axisModel.get('axisLine.onZero');\n\n                // Inject axis into axisModel\n                axisModel.axis = axis;\n\n                // Inject axisModel into axis\n                axis.model = axisModel;\n\n                // Inject grid info axis\n                axis.grid = this;\n\n                // Index of axis, can be used as key\n                axis.index = idx;\n\n                this._axesList.push(axis);\n\n                axesMap[axisType][idx] = axis;\n                axesCount[axisType]++;\n            };\n        }\n    };\n\n    /**\n     * Update cartesian properties from series\n     * @param  {module:echarts/model/Option} option\n     * @private\n     */\n    gridProto._updateScale = function (ecModel, gridModel) {\n        // Reset scale\n        zrUtil.each(this._axesList, function (axis) {\n            axis.scale.setExtent(Infinity, -Infinity);\n        });\n        ecModel.eachSeries(function (seriesModel) {\n            if (isCartesian2D(seriesModel)) {\n                var axesModels = findAxesModels(seriesModel, ecModel);\n                var xAxisModel = axesModels[0];\n                var yAxisModel = axesModels[1];\n\n                if (!isAxisUsedInTheGrid(xAxisModel, gridModel, ecModel)\n                    || !isAxisUsedInTheGrid(yAxisModel, gridModel, ecModel)\n                 ) {\n                    return;\n                }\n\n                var cartesian = this.getCartesian(\n                    xAxisModel.componentIndex, yAxisModel.componentIndex\n                );\n                var data = seriesModel.getData();\n                var xAxis = cartesian.getAxis('x');\n                var yAxis = cartesian.getAxis('y');\n\n                if (data.type === 'list') {\n                    unionExtent(data, xAxis, seriesModel);\n                    unionExtent(data, yAxis, seriesModel);\n                }\n            }\n        }, this);\n\n        function unionExtent(data, axis, seriesModel) {\n            each(seriesModel.coordDimToDataDim(axis.dim), function (dim) {\n                axis.scale.unionExtentFromData(data, dim);\n            });\n        }\n    };\n\n    /**\n     * @param {string} [dim] 'x' or 'y' or 'auto' or null/undefined\n     * @return {Object} {baseAxes: [], otherAxes: []}\n     */\n    gridProto.getTooltipAxes = function (dim) {\n        var baseAxes = [];\n        var otherAxes = [];\n\n        each(this.getCartesians(), function (cartesian) {\n            var baseAxis = (dim != null && dim !== 'auto')\n                ? cartesian.getAxis(dim) : cartesian.getBaseAxis();\n            var otherAxis = cartesian.getOtherAxis(baseAxis);\n            zrUtil.indexOf(baseAxes, baseAxis) < 0 && baseAxes.push(baseAxis);\n            zrUtil.indexOf(otherAxes, otherAxis) < 0 && otherAxes.push(otherAxis);\n        });\n\n        return {baseAxes: baseAxes, otherAxes: otherAxes};\n    };\n\n    /**\n     * @inner\n     */\n    function updateAxisTransfrom(axis, coordBase) {\n        var axisExtent = axis.getExtent();\n        var axisExtentSum = axisExtent[0] + axisExtent[1];\n\n        // Fast transform\n        axis.toGlobalCoord = axis.dim === 'x'\n            ? function (coord) {\n                return coord + coordBase;\n            }\n            : function (coord) {\n                return axisExtentSum - coord + coordBase;\n            };\n        axis.toLocalCoord = axis.dim === 'x'\n            ? function (coord) {\n                return coord - coordBase;\n            }\n            : function (coord) {\n                return axisExtentSum - coord + coordBase;\n            };\n    }\n\n    var axesTypes = ['xAxis', 'yAxis'];\n    /**\n     * @inner\n     */\n    function findAxesModels(seriesModel, ecModel) {\n        return zrUtil.map(axesTypes, function (axisType) {\n            var axisModel = seriesModel.getReferringComponents(axisType)[0];\n\n            if (__DEV__) {\n                if (!axisModel) {\n                    throw new Error(axisType + ' \"' + zrUtil.retrieve(\n                        seriesModel.get(axisType + 'Index'),\n                        seriesModel.get(axisType + 'Id'),\n                        0\n                    ) + '\" not found');\n                }\n            }\n            return axisModel;\n        });\n    }\n\n    /**\n     * @inner\n     */\n    function isCartesian2D(seriesModel) {\n        return seriesModel.get('coordinateSystem') === 'cartesian2d';\n    }\n\n    Grid.create = function (ecModel, api) {\n        var grids = [];\n        ecModel.eachComponent('grid', function (gridModel, idx) {\n            var grid = new Grid(gridModel, ecModel, api);\n            grid.name = 'grid_' + idx;\n            // dataSampling requires axis extent, so resize\n            // should be performed in create stage.\n            grid.resize(gridModel, api, true);\n\n            gridModel.coordinateSystem = grid;\n\n            grids.push(grid);\n        });\n\n        // Inject the coordinateSystems into seriesModel\n        ecModel.eachSeries(function (seriesModel) {\n            if (!isCartesian2D(seriesModel)) {\n                return;\n            }\n\n            var axesModels = findAxesModels(seriesModel, ecModel);\n            var xAxisModel = axesModels[0];\n            var yAxisModel = axesModels[1];\n\n            var gridModel = xAxisModel.getCoordSysModel();\n\n            if (__DEV__) {\n                if (!gridModel) {\n                    throw new Error(\n                        'Grid \"' + zrUtil.retrieve(\n                            xAxisModel.get('gridIndex'),\n                            xAxisModel.get('gridId'),\n                            0\n                        ) + '\" not found'\n                    );\n                }\n                if (xAxisModel.getCoordSysModel() !== yAxisModel.getCoordSysModel()) {\n                    throw new Error('xAxis and yAxis must use the same grid');\n                }\n            }\n\n            var grid = gridModel.coordinateSystem;\n\n            seriesModel.coordinateSystem = grid.getCartesian(\n                xAxisModel.componentIndex, yAxisModel.componentIndex\n            );\n        });\n\n        return grids;\n    };\n\n    // For deciding which dimensions to use when creating list data\n    Grid.dimensions = Grid.prototype.dimensions = Cartesian2D.prototype.dimensions;\n\n    __webpack_require__(\"o/Er\").register('cartesian2d', Grid);\n\n    module.exports = Grid;\n\n\n/***/ }),\n\n/***/ \"OsTV\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n/**\n * Default canvas painter\n * @module zrender/Painter\n * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)\n *         errorrik (errorrik@gmail.com)\n *         pissang (https://www.github.com/pissang)\n */\n \n\n    var config = __webpack_require__(\"xFPV\");\n    var util = __webpack_require__(\"nw1Z\");\n    var log = __webpack_require__(\"BIYt\");\n    var BoundingRect = __webpack_require__(\"W4Cx\");\n    var timsort = __webpack_require__(\"TQiH\");\n\n    var Layer = __webpack_require__(\"jBAq\");\n\n    var requestAnimationFrame = __webpack_require__(\"BgTn\");\n\n    // PENDIGN\n    // Layer exceeds MAX_PROGRESSIVE_LAYER_NUMBER may have some problem when flush directly second time.\n    //\n    // Maximum progressive layer. When exceeding this number. All elements will be drawed in the last layer.\n    var MAX_PROGRESSIVE_LAYER_NUMBER = 5;\n\n    function parseInt10(val) {\n        return parseInt(val, 10);\n    }\n\n    function isLayerValid(layer) {\n        if (!layer) {\n            return false;\n        }\n\n        if (layer.__builtin__) {\n            return true;\n        }\n\n        if (typeof(layer.resize) !== 'function'\n            || typeof(layer.refresh) !== 'function'\n        ) {\n            return false;\n        }\n\n        return true;\n    }\n\n    function preProcessLayer(layer) {\n        layer.__unusedCount++;\n    }\n\n    function postProcessLayer(layer) {\n        if (layer.__unusedCount == 1) {\n            layer.clear();\n        }\n    }\n\n    var tmpRect = new BoundingRect(0, 0, 0, 0);\n    var viewRect = new BoundingRect(0, 0, 0, 0);\n    function isDisplayableCulled(el, width, height) {\n        tmpRect.copy(el.getBoundingRect());\n        if (el.transform) {\n            tmpRect.applyTransform(el.transform);\n        }\n        viewRect.width = width;\n        viewRect.height = height;\n        return !tmpRect.intersect(viewRect);\n    }\n\n    function isClipPathChanged(clipPaths, prevClipPaths) {\n        if (clipPaths == prevClipPaths) { // Can both be null or undefined\n            return false;\n        }\n\n        if (!clipPaths || !prevClipPaths || (clipPaths.length !== prevClipPaths.length)) {\n            return true;\n        }\n        for (var i = 0; i < clipPaths.length; i++) {\n            if (clipPaths[i] !== prevClipPaths[i]) {\n                return true;\n            }\n        }\n    }\n\n    function doClip(clipPaths, ctx) {\n        for (var i = 0; i < clipPaths.length; i++) {\n            var clipPath = clipPaths[i];\n\n            clipPath.setTransform(ctx);\n            ctx.beginPath();\n            clipPath.buildPath(ctx, clipPath.shape);\n            ctx.clip();\n            // Transform back\n            clipPath.restoreTransform(ctx);\n        }\n    }\n\n    function createRoot(width, height) {\n        var domRoot = document.createElement('div');\n\n        // domRoot.onselectstart = returnFalse; // 避免页面选中的尴尬\n        domRoot.style.cssText = [\n            'position:relative',\n            'overflow:hidden',\n            'width:' + width + 'px',\n            'height:' + height + 'px',\n            'padding:0',\n            'margin:0',\n            'border-width:0'\n        ].join(';') + ';';\n\n        return domRoot;\n    }\n\n    /**\n     * @alias module:zrender/Painter\n     * @constructor\n     * @param {HTMLElement} root 绘图容器\n     * @param {module:zrender/Storage} storage\n     * @param {Ojbect} opts\n     */\n    var Painter = function (root, storage, opts) {\n        // In node environment using node-canvas\n        var singleCanvas = !root.nodeName // In node ?\n            || root.nodeName.toUpperCase() === 'CANVAS';\n\n        this._opts = opts = util.extend({}, opts || {});\n\n        /**\n         * @type {number}\n         */\n        this.dpr = opts.devicePixelRatio || config.devicePixelRatio;\n        /**\n         * @type {boolean}\n         * @private\n         */\n        this._singleCanvas = singleCanvas;\n        /**\n         * 绘图容器\n         * @type {HTMLElement}\n         */\n        this.root = root;\n\n        var rootStyle = root.style;\n\n        if (rootStyle) {\n            rootStyle['-webkit-tap-highlight-color'] = 'transparent';\n            rootStyle['-webkit-user-select'] =\n            rootStyle['user-select'] =\n            rootStyle['-webkit-touch-callout'] = 'none';\n\n            root.innerHTML = '';\n        }\n\n        /**\n         * @type {module:zrender/Storage}\n         */\n        this.storage = storage;\n\n        /**\n         * @type {Array.<number>}\n         * @private\n         */\n        var zlevelList = this._zlevelList = [];\n\n        /**\n         * @type {Object.<string, module:zrender/Layer>}\n         * @private\n         */\n        var layers = this._layers = {};\n\n        /**\n         * @type {Object.<string, Object>}\n         * @type {private}\n         */\n        this._layerConfig = {};\n\n        if (!singleCanvas) {\n            this._width = this._getSize(0);\n            this._height = this._getSize(1);\n\n            var domRoot = this._domRoot = createRoot(\n                this._width, this._height\n            );\n            root.appendChild(domRoot);\n        }\n        else {\n            if (opts.width != null) {\n                root.width = opts.width;\n            }\n            if (opts.height != null) {\n                root.height = opts.height;\n            }\n            // Use canvas width and height directly\n            var width = root.width;\n            var height = root.height;\n            this._width = width;\n            this._height = height;\n\n            // Create layer if only one given canvas\n            // Device pixel ratio is fixed to 1 because given canvas has its specified width and height\n            var mainLayer = new Layer(root, this, 1);\n            mainLayer.initContext();\n            // FIXME Use canvas width and height\n            // mainLayer.resize(width, height);\n            layers[0] = mainLayer;\n            zlevelList.push(0);\n\n            this._domRoot = root;\n        }\n\n        // Layers for progressive rendering\n        this._progressiveLayers = [];\n\n        /**\n         * @type {module:zrender/Layer}\n         * @private\n         */\n        this._hoverlayer;\n\n        this._hoverElements = [];\n    };\n\n    Painter.prototype = {\n\n        constructor: Painter,\n\n        /**\n         * If painter use a single canvas\n         * @return {boolean}\n         */\n        isSingleCanvas: function () {\n            return this._singleCanvas;\n        },\n        /**\n         * @return {HTMLDivElement}\n         */\n        getViewportRoot: function () {\n            return this._domRoot;\n        },\n\n        /**\n         * 刷新\n         * @param {boolean} [paintAll=false] 强制绘制所有displayable\n         */\n        refresh: function (paintAll) {\n\n            var list = this.storage.getDisplayList(true);\n\n            var zlevelList = this._zlevelList;\n\n            this._paintList(list, paintAll);\n\n            // Paint custum layers\n            for (var i = 0; i < zlevelList.length; i++) {\n                var z = zlevelList[i];\n                var layer = this._layers[z];\n                if (!layer.__builtin__ && layer.refresh) {\n                    layer.refresh();\n                }\n            }\n\n            this.refreshHover();\n\n            if (this._progressiveLayers.length) {\n                this._startProgessive();\n            }\n\n            return this;\n        },\n\n        addHover: function (el, hoverStyle) {\n            if (el.__hoverMir) {\n                return;\n            }\n            var elMirror = new el.constructor({\n                style: el.style,\n                shape: el.shape\n            });\n            elMirror.__from = el;\n            el.__hoverMir = elMirror;\n            elMirror.setStyle(hoverStyle);\n            this._hoverElements.push(elMirror);\n        },\n\n        removeHover: function (el) {\n            var elMirror = el.__hoverMir;\n            var hoverElements = this._hoverElements;\n            var idx = util.indexOf(hoverElements, elMirror);\n            if (idx >= 0) {\n                hoverElements.splice(idx, 1);\n            }\n            el.__hoverMir = null;\n        },\n\n        clearHover: function (el) {\n            var hoverElements = this._hoverElements;\n            for (var i = 0; i < hoverElements.length; i++) {\n                var from = hoverElements[i].__from;\n                if (from) {\n                    from.__hoverMir = null;\n                }\n            }\n            hoverElements.length = 0;\n        },\n\n        refreshHover: function () {\n            var hoverElements = this._hoverElements;\n            var len = hoverElements.length;\n            var hoverLayer = this._hoverlayer;\n            hoverLayer && hoverLayer.clear();\n\n            if (!len) {\n                return;\n            }\n            timsort(hoverElements, this.storage.displayableSortFunc);\n\n            // Use a extream large zlevel\n            // FIXME?\n            if (!hoverLayer) {\n                hoverLayer = this._hoverlayer = this.getLayer(1e5);\n            }\n\n            var scope = {};\n            hoverLayer.ctx.save();\n            for (var i = 0; i < len;) {\n                var el = hoverElements[i];\n                var originalEl = el.__from;\n                // Original el is removed\n                // PENDING\n                if (!(originalEl && originalEl.__zr)) {\n                    hoverElements.splice(i, 1);\n                    originalEl.__hoverMir = null;\n                    len--;\n                    continue;\n                }\n                i++;\n\n                // Use transform\n                // FIXME style and shape ?\n                if (!originalEl.invisible) {\n                    el.transform = originalEl.transform;\n                    el.invTransform = originalEl.invTransform;\n                    el.__clipPaths = originalEl.__clipPaths;\n                    // el.\n                    this._doPaintEl(el, hoverLayer, true, scope);\n                }\n            }\n            hoverLayer.ctx.restore();\n        },\n\n        _startProgessive: function () {\n            var self = this;\n\n            if (!self._furtherProgressive) {\n                return;\n            }\n\n            // Use a token to stop progress steps triggered by\n            // previous zr.refresh calling.\n            var token = self._progressiveToken = +new Date();\n\n            self._progress++;\n            requestAnimationFrame(step);\n\n            function step() {\n                // In case refreshed or disposed\n                if (token === self._progressiveToken && self.storage) {\n\n                    self._doPaintList(self.storage.getDisplayList());\n\n                    if (self._furtherProgressive) {\n                        self._progress++;\n                        requestAnimationFrame(step);\n                    }\n                    else {\n                        self._progressiveToken = -1;\n                    }\n                }\n            }\n        },\n\n        _clearProgressive: function () {\n            this._progressiveToken = -1;\n            this._progress = 0;\n            util.each(this._progressiveLayers, function (layer) {\n                layer.__dirty && layer.clear();\n            });\n        },\n\n        _paintList: function (list, paintAll) {\n\n            if (paintAll == null) {\n                paintAll = false;\n            }\n\n            this._updateLayerStatus(list);\n\n            this._clearProgressive();\n\n            this.eachBuiltinLayer(preProcessLayer);\n\n            this._doPaintList(list, paintAll);\n\n            this.eachBuiltinLayer(postProcessLayer);\n        },\n\n        _doPaintList: function (list, paintAll) {\n            var currentLayer;\n            var currentZLevel;\n            var ctx;\n\n            // var invTransform = [];\n            var scope;\n\n            var progressiveLayerIdx = 0;\n            var currentProgressiveLayer;\n\n            var width = this._width;\n            var height = this._height;\n            var layerProgress;\n            var frame = this._progress;\n            function flushProgressiveLayer(layer) {\n                var dpr = ctx.dpr || 1;\n                ctx.save();\n                ctx.globalAlpha = 1;\n                ctx.shadowBlur = 0;\n                // Avoid layer don't clear in next progressive frame\n                currentLayer.__dirty = true;\n                ctx.setTransform(1, 0, 0, 1, 0, 0);\n                ctx.drawImage(layer.dom, 0, 0, width * dpr, height * dpr);\n                ctx.restore();\n            }\n\n            for (var i = 0, l = list.length; i < l; i++) {\n                var el = list[i];\n                var elZLevel = this._singleCanvas ? 0 : el.zlevel;\n\n                var elFrame = el.__frame;\n\n                // Flush at current context\n                // PENDING\n                if (elFrame < 0 && currentProgressiveLayer) {\n                    flushProgressiveLayer(currentProgressiveLayer);\n                    currentProgressiveLayer = null;\n                }\n\n                // Change draw layer\n                if (currentZLevel !== elZLevel) {\n                    if (ctx) {\n                        ctx.restore();\n                    }\n\n                    // Reset scope\n                    scope = {};\n\n                    // Only 0 zlevel if only has one canvas\n                    currentZLevel = elZLevel;\n                    currentLayer = this.getLayer(currentZLevel);\n\n                    if (!currentLayer.__builtin__) {\n                        log(\n                            'ZLevel ' + currentZLevel\n                            + ' has been used by unkown layer ' + currentLayer.id\n                        );\n                    }\n\n                    ctx = currentLayer.ctx;\n                    ctx.save();\n\n                    // Reset the count\n                    currentLayer.__unusedCount = 0;\n\n                    if (currentLayer.__dirty || paintAll) {\n                        currentLayer.clear();\n                    }\n                }\n\n                if (!(currentLayer.__dirty || paintAll)) {\n                    continue;\n                }\n\n                if (elFrame >= 0) {\n                    // Progressive layer changed\n                    if (!currentProgressiveLayer) {\n                        currentProgressiveLayer = this._progressiveLayers[\n                            Math.min(progressiveLayerIdx++, MAX_PROGRESSIVE_LAYER_NUMBER - 1)\n                        ];\n\n                        currentProgressiveLayer.ctx.save();\n                        currentProgressiveLayer.renderScope = {};\n\n                        if (currentProgressiveLayer\n                            && (currentProgressiveLayer.__progress > currentProgressiveLayer.__maxProgress)\n                        ) {\n                            // flushProgressiveLayer(currentProgressiveLayer);\n                            // Quick jump all progressive elements\n                            // All progressive element are not dirty, jump over and flush directly\n                            i = currentProgressiveLayer.__nextIdxNotProg - 1;\n                            // currentProgressiveLayer = null;\n                            continue;\n                        }\n\n                        layerProgress = currentProgressiveLayer.__progress;\n\n                        if (!currentProgressiveLayer.__dirty) {\n                            // Keep rendering\n                            frame = layerProgress;\n                        }\n\n                        currentProgressiveLayer.__progress = frame + 1;\n                    }\n\n                    if (elFrame === frame) {\n                        this._doPaintEl(el, currentProgressiveLayer, true, currentProgressiveLayer.renderScope);\n                    }\n                }\n                else {\n                    this._doPaintEl(el, currentLayer, paintAll, scope);\n                }\n\n                el.__dirty = false;\n            }\n\n            if (currentProgressiveLayer) {\n                flushProgressiveLayer(currentProgressiveLayer);\n            }\n\n            // Restore the lastLayer ctx\n            ctx && ctx.restore();\n            // If still has clipping state\n            // if (scope.prevElClipPaths) {\n            //     ctx.restore();\n            // }\n\n            this._furtherProgressive = false;\n            util.each(this._progressiveLayers, function (layer) {\n                if (layer.__maxProgress >= layer.__progress) {\n                    this._furtherProgressive = true;\n                }\n            }, this);\n        },\n\n        _doPaintEl: function (el, currentLayer, forcePaint, scope) {\n            var ctx = currentLayer.ctx;\n            var m = el.transform;\n            if (\n                (currentLayer.__dirty || forcePaint)\n                // Ignore invisible element\n                && !el.invisible\n                // Ignore transparent element\n                && el.style.opacity !== 0\n                // Ignore scale 0 element, in some environment like node-canvas\n                // Draw a scale 0 element can cause all following draw wrong\n                // And setTransform with scale 0 will cause set back transform failed.\n                && !(m && !m[0] && !m[3])\n                // Ignore culled element\n                && !(el.culling && isDisplayableCulled(el, this._width, this._height))\n            ) {\n\n                var clipPaths = el.__clipPaths;\n\n                // Optimize when clipping on group with several elements\n                if (scope.prevClipLayer !== currentLayer\n                    || isClipPathChanged(clipPaths, scope.prevElClipPaths)\n                ) {\n                    // If has previous clipping state, restore from it\n                    if (scope.prevElClipPaths) {\n                        scope.prevClipLayer.ctx.restore();\n                        scope.prevClipLayer = scope.prevElClipPaths = null;\n\n                        // Reset prevEl since context has been restored\n                        scope.prevEl = null;\n                    }\n                    // New clipping state\n                    if (clipPaths) {\n                        ctx.save();\n                        doClip(clipPaths, ctx);\n                        scope.prevClipLayer = currentLayer;\n                        scope.prevElClipPaths = clipPaths;\n                    }\n                }\n                el.beforeBrush && el.beforeBrush(ctx);\n\n                el.brush(ctx, scope.prevEl || null);\n                scope.prevEl = el;\n\n                el.afterBrush && el.afterBrush(ctx);\n            }\n        },\n\n        /**\n         * 获取 zlevel 所在层，如果不存在则会创建一个新的层\n         * @param {number} zlevel\n         * @return {module:zrender/Layer}\n         */\n        getLayer: function (zlevel) {\n            if (this._singleCanvas) {\n                return this._layers[0];\n            }\n\n            var layer = this._layers[zlevel];\n            if (!layer) {\n                // Create a new layer\n                layer = new Layer('zr_' + zlevel, this, this.dpr);\n                layer.__builtin__ = true;\n\n                if (this._layerConfig[zlevel]) {\n                    util.merge(layer, this._layerConfig[zlevel], true);\n                }\n\n                this.insertLayer(zlevel, layer);\n\n                // Context is created after dom inserted to document\n                // Or excanvas will get 0px clientWidth and clientHeight\n                layer.initContext();\n            }\n\n            return layer;\n        },\n\n        insertLayer: function (zlevel, layer) {\n\n            var layersMap = this._layers;\n            var zlevelList = this._zlevelList;\n            var len = zlevelList.length;\n            var prevLayer = null;\n            var i = -1;\n            var domRoot = this._domRoot;\n\n            if (layersMap[zlevel]) {\n                log('ZLevel ' + zlevel + ' has been used already');\n                return;\n            }\n            // Check if is a valid layer\n            if (!isLayerValid(layer)) {\n                log('Layer of zlevel ' + zlevel + ' is not valid');\n                return;\n            }\n\n            if (len > 0 && zlevel > zlevelList[0]) {\n                for (i = 0; i < len - 1; i++) {\n                    if (\n                        zlevelList[i] < zlevel\n                        && zlevelList[i + 1] > zlevel\n                    ) {\n                        break;\n                    }\n                }\n                prevLayer = layersMap[zlevelList[i]];\n            }\n            zlevelList.splice(i + 1, 0, zlevel);\n\n            layersMap[zlevel] = layer;\n\n            // Vitual layer will not directly show on the screen.\n            // (It can be a WebGL layer and assigned to a ZImage element)\n            // But it still under management of zrender.\n            if (!layer.virtual) {\n                if (prevLayer) {\n                    var prevDom = prevLayer.dom;\n                    if (prevDom.nextSibling) {\n                        domRoot.insertBefore(\n                            layer.dom,\n                            prevDom.nextSibling\n                        );\n                    }\n                    else {\n                        domRoot.appendChild(layer.dom);\n                    }\n                }\n                else {\n                    if (domRoot.firstChild) {\n                        domRoot.insertBefore(layer.dom, domRoot.firstChild);\n                    }\n                    else {\n                        domRoot.appendChild(layer.dom);\n                    }\n                }\n            }\n        },\n\n        // Iterate each layer\n        eachLayer: function (cb, context) {\n            var zlevelList = this._zlevelList;\n            var z;\n            var i;\n            for (i = 0; i < zlevelList.length; i++) {\n                z = zlevelList[i];\n                cb.call(context, this._layers[z], z);\n            }\n        },\n\n        // Iterate each buildin layer\n        eachBuiltinLayer: function (cb, context) {\n            var zlevelList = this._zlevelList;\n            var layer;\n            var z;\n            var i;\n            for (i = 0; i < zlevelList.length; i++) {\n                z = zlevelList[i];\n                layer = this._layers[z];\n                if (layer.__builtin__) {\n                    cb.call(context, layer, z);\n                }\n            }\n        },\n\n        // Iterate each other layer except buildin layer\n        eachOtherLayer: function (cb, context) {\n            var zlevelList = this._zlevelList;\n            var layer;\n            var z;\n            var i;\n            for (i = 0; i < zlevelList.length; i++) {\n                z = zlevelList[i];\n                layer = this._layers[z];\n                if (!layer.__builtin__) {\n                    cb.call(context, layer, z);\n                }\n            }\n        },\n\n        /**\n         * 获取所有已创建的层\n         * @param {Array.<module:zrender/Layer>} [prevLayer]\n         */\n        getLayers: function () {\n            return this._layers;\n        },\n\n        _updateLayerStatus: function (list) {\n\n            var layers = this._layers;\n            var progressiveLayers = this._progressiveLayers;\n\n            var elCountsLastFrame = {};\n            var progressiveElCountsLastFrame = {};\n\n            this.eachBuiltinLayer(function (layer, z) {\n                elCountsLastFrame[z] = layer.elCount;\n                layer.elCount = 0;\n                layer.__dirty = false;\n            });\n\n            util.each(progressiveLayers, function (layer, idx) {\n                progressiveElCountsLastFrame[idx] = layer.elCount;\n                layer.elCount = 0;\n                layer.__dirty = false;\n            });\n\n            var progressiveLayerCount = 0;\n            var currentProgressiveLayer;\n            var lastProgressiveKey;\n            var frameCount = 0;\n            for (var i = 0, l = list.length; i < l; i++) {\n                var el = list[i];\n                var zlevel = this._singleCanvas ? 0 : el.zlevel;\n                var layer = layers[zlevel];\n                var elProgress = el.progressive;\n                if (layer) {\n                    layer.elCount++;\n                    layer.__dirty = layer.__dirty || el.__dirty;\n                }\n\n                /////// Update progressive\n                if (elProgress >= 0) {\n                    // Fix wrong progressive sequence problem.\n                    if (lastProgressiveKey !== elProgress) {\n                        lastProgressiveKey = elProgress;\n                        frameCount++;\n                    }\n                    var elFrame = el.__frame = frameCount - 1;\n                    if (!currentProgressiveLayer) {\n                        var idx = Math.min(progressiveLayerCount, MAX_PROGRESSIVE_LAYER_NUMBER - 1);\n                        currentProgressiveLayer = progressiveLayers[idx];\n                        if (!currentProgressiveLayer) {\n                            currentProgressiveLayer = progressiveLayers[idx] = new Layer(\n                                'progressive', this, this.dpr\n                            );\n                            currentProgressiveLayer.initContext();\n                        }\n                        currentProgressiveLayer.__maxProgress = 0;\n                    }\n                    currentProgressiveLayer.__dirty = currentProgressiveLayer.__dirty || el.__dirty;\n                    currentProgressiveLayer.elCount++;\n\n                    currentProgressiveLayer.__maxProgress = Math.max(\n                        currentProgressiveLayer.__maxProgress, elFrame\n                    );\n\n                    if (currentProgressiveLayer.__maxProgress >= currentProgressiveLayer.__progress) {\n                        // Should keep rendering this  layer because progressive rendering is not finished yet\n                        layer.__dirty = true;\n                    }\n                }\n                else {\n                    el.__frame = -1;\n\n                    if (currentProgressiveLayer) {\n                        currentProgressiveLayer.__nextIdxNotProg = i;\n                        progressiveLayerCount++;\n                        currentProgressiveLayer = null;\n                    }\n                }\n            }\n\n            if (currentProgressiveLayer) {\n                progressiveLayerCount++;\n                currentProgressiveLayer.__nextIdxNotProg = i;\n            }\n\n            // 层中的元素数量有发生变化\n            this.eachBuiltinLayer(function (layer, z) {\n                if (elCountsLastFrame[z] !== layer.elCount) {\n                    layer.__dirty = true;\n                }\n            });\n\n            progressiveLayers.length = Math.min(progressiveLayerCount, MAX_PROGRESSIVE_LAYER_NUMBER);\n            util.each(progressiveLayers, function (layer, idx) {\n                if (progressiveElCountsLastFrame[idx] !== layer.elCount) {\n                    el.__dirty = true;\n                }\n                if (layer.__dirty) {\n                    layer.__progress = 0;\n                }\n            });\n        },\n\n        /**\n         * 清除hover层外所有内容\n         */\n        clear: function () {\n            this.eachBuiltinLayer(this._clearLayer);\n            return this;\n        },\n\n        _clearLayer: function (layer) {\n            layer.clear();\n        },\n\n        /**\n         * 修改指定zlevel的绘制参数\n         *\n         * @param {string} zlevel\n         * @param {Object} config 配置对象\n         * @param {string} [config.clearColor=0] 每次清空画布的颜色\n         * @param {string} [config.motionBlur=false] 是否开启动态模糊\n         * @param {number} [config.lastFrameAlpha=0.7]\n         *                 在开启动态模糊的时候使用，与上一帧混合的alpha值，值越大尾迹越明显\n         */\n        configLayer: function (zlevel, config) {\n            if (config) {\n                var layerConfig = this._layerConfig;\n                if (!layerConfig[zlevel]) {\n                    layerConfig[zlevel] = config;\n                }\n                else {\n                    util.merge(layerConfig[zlevel], config, true);\n                }\n\n                var layer = this._layers[zlevel];\n\n                if (layer) {\n                    util.merge(layer, layerConfig[zlevel], true);\n                }\n            }\n        },\n\n        /**\n         * 删除指定层\n         * @param {number} zlevel 层所在的zlevel\n         */\n        delLayer: function (zlevel) {\n            var layers = this._layers;\n            var zlevelList = this._zlevelList;\n            var layer = layers[zlevel];\n            if (!layer) {\n                return;\n            }\n            layer.dom.parentNode.removeChild(layer.dom);\n            delete layers[zlevel];\n\n            zlevelList.splice(util.indexOf(zlevelList, zlevel), 1);\n        },\n\n        /**\n         * 区域大小变化后重绘\n         */\n        resize: function (width, height) {\n            var domRoot = this._domRoot;\n            // FIXME Why ?\n            domRoot.style.display = 'none';\n\n            // Save input w/h\n            var opts = this._opts;\n            width != null && (opts.width = width);\n            height != null && (opts.height = height);\n\n            width = this._getSize(0);\n            height = this._getSize(1);\n\n            domRoot.style.display = '';\n\n            // 优化没有实际改变的resize\n            if (this._width != width || height != this._height) {\n                domRoot.style.width = width + 'px';\n                domRoot.style.height = height + 'px';\n\n                for (var id in this._layers) {\n                    if (this._layers.hasOwnProperty(id)) {\n                        this._layers[id].resize(width, height);\n                    }\n                }\n                util.each(this._progressiveLayers, function (layer) {\n                    layer.resize(width, height);\n                });\n\n                this.refresh(true);\n            }\n\n            this._width = width;\n            this._height = height;\n\n            return this;\n        },\n\n        /**\n         * 清除单独的一个层\n         * @param {number} zlevel\n         */\n        clearLayer: function (zlevel) {\n            var layer = this._layers[zlevel];\n            if (layer) {\n                layer.clear();\n            }\n        },\n\n        /**\n         * 释放\n         */\n        dispose: function () {\n            this.root.innerHTML = '';\n\n            this.root =\n            this.storage =\n\n            this._domRoot =\n            this._layers = null;\n        },\n\n        /**\n         * Get canvas which has all thing rendered\n         * @param {Object} opts\n         * @param {string} [opts.backgroundColor]\n         */\n        getRenderedCanvas: function (opts) {\n            opts = opts || {};\n            if (this._singleCanvas) {\n                return this._layers[0].dom;\n            }\n\n            var imageLayer = new Layer('image', this, opts.pixelRatio || this.dpr);\n            imageLayer.initContext();\n\n            imageLayer.clearColor = opts.backgroundColor;\n            imageLayer.clear();\n\n            var displayList = this.storage.getDisplayList(true);\n\n            var scope = {};\n            var zlevel;\n\n            var self = this;\n            function findAndDrawOtherLayer(smaller, larger) {\n                var zlevelList = self._zlevelList;\n                if (smaller == null) {\n                    smaller = -Infinity;\n                }\n                var intermediateLayer;\n                for (var i = 0; i < zlevelList.length; i++) {\n                    var z = zlevelList[i];\n                    var layer = self._layers[z];\n                    if (!layer.__builtin__ && z > smaller && z < larger) {\n                        intermediateLayer = layer;\n                        break;\n                    }\n                }\n                if (intermediateLayer && intermediateLayer.renderToCanvas) {\n                    imageLayer.ctx.save();\n                    intermediateLayer.renderToCanvas(imageLayer.ctx);\n                    imageLayer.ctx.restore();\n                }\n            }\n            for (var i = 0; i < displayList.length; i++) {\n                var el = displayList[i];\n\n                if (el.zlevel !== zlevel) {\n                    findAndDrawOtherLayer(zlevel, el.zlevel);\n                    zlevel = el.zlevel;\n                }\n                this._doPaintEl(el, imageLayer, true, scope);\n            }\n\n            findAndDrawOtherLayer(zlevel, Infinity);\n\n            return imageLayer.dom;\n        },\n        /**\n         * 获取绘图区域宽度\n         */\n        getWidth: function () {\n            return this._width;\n        },\n\n        /**\n         * 获取绘图区域高度\n         */\n        getHeight: function () {\n            return this._height;\n        },\n\n        _getSize: function (whIdx) {\n            var opts = this._opts;\n            var wh = ['width', 'height'][whIdx];\n            var cwh = ['clientWidth', 'clientHeight'][whIdx];\n            var plt = ['paddingLeft', 'paddingTop'][whIdx];\n            var prb = ['paddingRight', 'paddingBottom'][whIdx];\n\n            if (opts[wh] != null && opts[wh] !== 'auto') {\n                return parseFloat(opts[wh]);\n            }\n\n            var root = this.root;\n            var stl = document.defaultView.getComputedStyle(root);\n\n            return (\n                (root[cwh] || parseInt10(stl[wh]) || parseInt10(root.style[wh]))\n                - (parseInt10(stl[plt]) || 0)\n                - (parseInt10(stl[prb]) || 0)\n            ) | 0;\n        },\n\n        pathToImage: function (path, dpr) {\n            dpr = dpr || this.dpr;\n\n            var canvas = document.createElement('canvas');\n            var ctx = canvas.getContext('2d');\n            var rect = path.getBoundingRect();\n            var style = path.style;\n            var shadowBlurSize = style.shadowBlur;\n            var shadowOffsetX = style.shadowOffsetX;\n            var shadowOffsetY = style.shadowOffsetY;\n            var lineWidth = style.hasStroke() ? style.lineWidth : 0;\n\n            var leftMargin = Math.max(lineWidth / 2, -shadowOffsetX + shadowBlurSize);\n            var rightMargin = Math.max(lineWidth / 2, shadowOffsetX + shadowBlurSize);\n            var topMargin = Math.max(lineWidth / 2, -shadowOffsetY + shadowBlurSize);\n            var bottomMargin = Math.max(lineWidth / 2, shadowOffsetY + shadowBlurSize);\n            var width = rect.width + leftMargin + rightMargin;\n            var height = rect.height + topMargin + bottomMargin;\n\n            canvas.width = width * dpr;\n            canvas.height = height * dpr;\n\n            ctx.scale(dpr, dpr);\n            ctx.clearRect(0, 0, width, height);\n            ctx.dpr = dpr;\n\n            var pathTransform = {\n                position: path.position,\n                rotation: path.rotation,\n                scale: path.scale\n            };\n            path.position = [leftMargin - rect.x, topMargin - rect.y];\n            path.rotation = 0;\n            path.scale = [1, 1];\n            path.updateTransform();\n            if (path) {\n                path.brush(ctx);\n            }\n\n            var ImageShape = __webpack_require__(\"4obY\");\n            var imgShape = new ImageShape({\n                style: {\n                    x: 0,\n                    y: 0,\n                    image: canvas\n                }\n            });\n\n            if (pathTransform.position != null) {\n                imgShape.position = path.position = pathTransform.position;\n            }\n\n            if (pathTransform.rotation != null) {\n                imgShape.rotation = path.rotation = pathTransform.rotation;\n            }\n\n            if (pathTransform.scale != null) {\n                imgShape.scale = path.scale = pathTransform.scale;\n            }\n\n            return imgShape;\n        }\n    };\n\n    module.exports = Painter;\n\n\n\n/***/ }),\n\n/***/ \"Ow2V\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\n    var featureManager = __webpack_require__(\"M5+E\");\n    var zrUtil = __webpack_require__(\"nw1Z\");\n    var graphic = __webpack_require__(\"y2WT\");\n    var Model = __webpack_require__(\"Q4Sk\");\n    var DataDiffer = __webpack_require__(\"VfTC\");\n    var listComponentHelper = __webpack_require__(\"UqER\");\n    var textContain = __webpack_require__(\"45MQ\");\n\n    module.exports = __webpack_require__(\"Cwwa\").extendComponentView({\n\n        type: 'toolbox',\n\n        render: function (toolboxModel, ecModel, api, payload) {\n            var group = this.group;\n            group.removeAll();\n\n            if (!toolboxModel.get('show')) {\n                return;\n            }\n\n            var itemSize = +toolboxModel.get('itemSize');\n            var featureOpts = toolboxModel.get('feature') || {};\n            var features = this._features || (this._features = {});\n\n            var featureNames = [];\n            zrUtil.each(featureOpts, function (opt, name) {\n                featureNames.push(name);\n            });\n\n            (new DataDiffer(this._featureNames || [], featureNames))\n                .add(process)\n                .update(process)\n                .remove(zrUtil.curry(process, null))\n                .execute();\n\n            // Keep for diff.\n            this._featureNames = featureNames;\n\n            function process(newIndex, oldIndex) {\n                var featureName = featureNames[newIndex];\n                var oldName = featureNames[oldIndex];\n                var featureOpt = featureOpts[featureName];\n                var featureModel = new Model(featureOpt, toolboxModel, toolboxModel.ecModel);\n                var feature;\n\n                if (featureName && !oldName) { // Create\n                    if (isUserFeatureName(featureName)) {\n                        feature = {\n                            model: featureModel,\n                            onclick: featureModel.option.onclick,\n                            featureName: featureName\n                        };\n                    }\n                    else {\n                        var Feature = featureManager.get(featureName);\n                        if (!Feature) {\n                            return;\n                        }\n                        feature = new Feature(featureModel, ecModel, api);\n                    }\n                    features[featureName] = feature;\n                }\n                else {\n                    feature = features[oldName];\n                    // If feature does not exsit.\n                    if (!feature) {\n                        return;\n                    }\n                    feature.model = featureModel;\n                    feature.ecModel = ecModel;\n                    feature.api = api;\n                }\n\n                if (!featureName && oldName) {\n                    feature.dispose && feature.dispose(ecModel, api);\n                    return;\n                }\n\n                if (!featureModel.get('show') || feature.unusable) {\n                    feature.remove && feature.remove(ecModel, api);\n                    return;\n                }\n\n                createIconPaths(featureModel, feature, featureName);\n\n                featureModel.setIconStatus = function (iconName, status) {\n                    var option = this.option;\n                    var iconPaths = this.iconPaths;\n                    option.iconStatus = option.iconStatus || {};\n                    option.iconStatus[iconName] = status;\n                    // FIXME\n                    iconPaths[iconName] && iconPaths[iconName].trigger(status);\n                };\n\n                if (feature.render) {\n                    feature.render(featureModel, ecModel, api, payload);\n                }\n            }\n\n            function createIconPaths(featureModel, feature, featureName) {\n                var iconStyleModel = featureModel.getModel('iconStyle');\n\n                // If one feature has mutiple icon. they are orginaized as\n                // {\n                //     icon: {\n                //         foo: '',\n                //         bar: ''\n                //     },\n                //     title: {\n                //         foo: '',\n                //         bar: ''\n                //     }\n                // }\n                var icons = feature.getIcons ? feature.getIcons() : featureModel.get('icon');\n                var titles = featureModel.get('title') || {};\n                if (typeof icons === 'string') {\n                    var icon = icons;\n                    var title = titles;\n                    icons = {};\n                    titles = {};\n                    icons[featureName] = icon;\n                    titles[featureName] = title;\n                }\n                var iconPaths = featureModel.iconPaths = {};\n                zrUtil.each(icons, function (icon, iconName) {\n                    var normalStyle = iconStyleModel.getModel('normal').getItemStyle();\n                    var hoverStyle = iconStyleModel.getModel('emphasis').getItemStyle();\n\n                    var style = {\n                        x: -itemSize / 2,\n                        y: -itemSize / 2,\n                        width: itemSize,\n                        height: itemSize\n                    };\n                    var path = icon.indexOf('image://') === 0\n                        ? (\n                            style.image = icon.slice(8),\n                            new graphic.Image({style: style})\n                        )\n                        : graphic.makePath(\n                            icon.replace('path://', ''),\n                            {\n                                style: normalStyle,\n                                hoverStyle: hoverStyle,\n                                rectHover: true\n                            },\n                            style,\n                            'center'\n                        );\n\n                    graphic.setHoverStyle(path);\n\n                    if (toolboxModel.get('showTitle')) {\n                        path.__title = titles[iconName];\n                        path.on('mouseover', function () {\n                                // Should not reuse above hoverStyle, which might be modified.\n                                var hoverStyle = iconStyleModel.getModel('emphasis').getItemStyle();\n                                path.setStyle({\n                                    text: titles[iconName],\n                                    textPosition: hoverStyle.textPosition || 'bottom',\n                                    textFill: hoverStyle.fill || hoverStyle.stroke || '#000',\n                                    textAlign: hoverStyle.textAlign || 'center'\n                                });\n                            })\n                            .on('mouseout', function () {\n                                path.setStyle({\n                                    textFill: null\n                                });\n                            });\n                    }\n                    path.trigger(featureModel.get('iconStatus.' + iconName) || 'normal');\n\n                    group.add(path);\n                    path.on('click', zrUtil.bind(\n                        feature.onclick, feature, ecModel, api, iconName\n                    ));\n\n                    iconPaths[iconName] = path;\n                });\n            }\n\n            listComponentHelper.layout(group, toolboxModel, api);\n            // Render background after group is layout\n            // FIXME\n            listComponentHelper.addBackground(group, toolboxModel);\n\n            // Adjust icon title positions to avoid them out of screen\n            group.eachChild(function (icon) {\n                var titleText = icon.__title;\n                var hoverStyle = icon.hoverStyle;\n                // May be background element\n                if (hoverStyle && titleText) {\n                    var rect = textContain.getBoundingRect(\n                        titleText, hoverStyle.font\n                    );\n                    var offsetX = icon.position[0] + group.position[0];\n                    var offsetY = icon.position[1] + group.position[1] + itemSize;\n\n                    var needPutOnTop = false;\n                    if (offsetY + rect.height > api.getHeight()) {\n                        hoverStyle.textPosition = 'top';\n                        needPutOnTop = true;\n                    }\n                    var topOffset = needPutOnTop ? (-5 - rect.height) : (itemSize + 8);\n                    if (offsetX + rect.width /  2 > api.getWidth()) {\n                        hoverStyle.textPosition = ['100%', topOffset];\n                        hoverStyle.textAlign = 'right';\n                    }\n                    else if (offsetX - rect.width / 2 < 0) {\n                        hoverStyle.textPosition = [0, topOffset];\n                        hoverStyle.textAlign = 'left';\n                    }\n                }\n            });\n        },\n\n        updateView: function (toolboxModel, ecModel, api, payload) {\n            zrUtil.each(this._features, function (feature) {\n                feature.updateView && feature.updateView(feature.model, ecModel, api, payload);\n            });\n        },\n\n        updateLayout: function (toolboxModel, ecModel, api, payload) {\n            zrUtil.each(this._features, function (feature) {\n                feature.updateLayout && feature.updateLayout(feature.model, ecModel, api, payload);\n            });\n        },\n\n        remove: function (ecModel, api) {\n            zrUtil.each(this._features, function (feature) {\n                feature.remove && feature.remove(ecModel, api);\n            });\n            this.group.removeAll();\n        },\n\n        dispose: function (ecModel, api) {\n            zrUtil.each(this._features, function (feature) {\n                feature.dispose && feature.dispose(ecModel, api);\n            });\n        }\n    });\n\n    function isUserFeatureName(featureName) {\n        return featureName.indexOf('my') === 0;\n    }\n\n\n\n/***/ }),\n\n/***/ \"PtLt\":\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * @file Data zoom model\n */\n\n\n    var zrUtil = __webpack_require__(\"nw1Z\");\n    var env = __webpack_require__(\"020c\");\n    var echarts = __webpack_require__(\"Cwwa\");\n    var modelUtil = __webpack_require__(\"LFYx\");\n    var helper = __webpack_require__(\"yToh\");\n    var AxisProxy = __webpack_require__(\"ikqo\");\n    var each = zrUtil.each;\n    var eachAxisDim = helper.eachAxisDim;\n\n    var DataZoomModel = echarts.extendComponentModel({\n\n        type: 'dataZoom',\n\n        dependencies: [\n            'xAxis', 'yAxis', 'zAxis', 'radiusAxis', 'angleAxis', 'singleAxis', 'series'\n        ],\n\n        /**\n         * @protected\n         */\n        defaultOption: {\n            zlevel: 0,\n            z: 4,                   // Higher than normal component (z: 2).\n            orient: null,           // Default auto by axisIndex. Possible value: 'horizontal', 'vertical'.\n            xAxisIndex: null,       // Default the first horizontal category axis.\n            yAxisIndex: null,       // Default the first vertical category axis.\n\n            filterMode: 'filter',   // Possible values: 'filter' or 'empty' or 'weakFilter'.\n                                    // 'filter': data items which are out of window will be removed. This option is\n                                    //          applicable when filtering outliers. For each data item, it will be\n                                    //          filtered if one of the relevant dimensions is out of the window.\n                                    // 'weakFilter': data items which are out of window will be removed. This option\n                                    //          is applicable when filtering outliers. For each data item, it will be\n                                    //          filtered only if all  of the relevant dimensions are out of the same\n                                    //          side of the window.\n                                    // 'empty': data items which are out of window will be set to empty.\n                                    //          This option is applicable when user should not neglect\n                                    //          that there are some data items out of window.\n                                    // 'none': Do not filter.\n                                    // Taking line chart as an example, line will be broken in\n                                    // the filtered points when filterModel is set to 'empty', but\n                                    // be connected when set to 'filter'.\n\n            throttle: null,         // Dispatch action by the fixed rate, avoid frequency.\n                                    // default 100. Do not throttle when use null/undefined.\n                                    // If animation === true and animationDurationUpdate > 0,\n                                    // default value is 100, otherwise 20.\n            start: 0,               // Start percent. 0 ~ 100\n            end: 100,               // End percent. 0 ~ 100\n            startValue: null,       // Start value. If startValue specified, start is ignored.\n            endValue: null,         // End value. If endValue specified, end is ignored.\n            minSpan: null,          // 0 ~ 100\n            maxSpan: null,          // 0 ~ 100\n            minValueSpan: null,     // The range of dataZoom can not be smaller than that.\n            maxValueSpan: null      // The range of dataZoom can not be larger than that.\n        },\n\n        /**\n         * @override\n         */\n        init: function (option, parentModel, ecModel) {\n\n            /**\n             * key like x_0, y_1\n             * @private\n             * @type {Object}\n             */\n            this._dataIntervalByAxis = {};\n\n            /**\n             * @private\n             */\n            this._dataInfo = {};\n\n            /**\n             * key like x_0, y_1\n             * @private\n             */\n            this._axisProxies = {};\n\n            /**\n             * @readOnly\n             */\n            this.textStyleModel;\n\n            /**\n             * @private\n             */\n            this._autoThrottle = true;\n\n            /**\n             * 'percent' or 'value'\n             * @private\n             */\n            this._rangePropMode = ['percent', 'percent'];\n\n            var rawOption = retrieveRaw(option);\n\n            this.mergeDefaultAndTheme(option, ecModel);\n\n            this.doInit(rawOption);\n        },\n\n        /**\n         * @override\n         */\n        mergeOption: function (newOption) {\n            var rawOption = retrieveRaw(newOption);\n\n            //FIX #2591\n            zrUtil.merge(this.option, newOption, true);\n\n            this.doInit(rawOption);\n        },\n\n        /**\n         * @protected\n         */\n        doInit: function (rawOption) {\n            var thisOption = this.option;\n\n            // Disable realtime view update if canvas is not supported.\n            if (!env.canvasSupported) {\n                thisOption.realtime = false;\n            }\n\n            this._setDefaultThrottle(rawOption);\n\n            updateRangeUse(this, rawOption);\n\n            each([['start', 'startValue'], ['end', 'endValue']], function (names, index) {\n                // start/end has higher priority over startValue/endValue if they\n                // both set, but we should make chart.setOption({endValue: 1000})\n                // effective, rather than chart.setOption({endValue: 1000, end: null}).\n                if (this._rangePropMode[index] === 'value') {\n                    thisOption[names[0]] = null;\n                }\n                // Otherwise do nothing and use the merge result.\n            }, this);\n\n            this.textStyleModel = this.getModel('textStyle');\n\n            this._resetTarget();\n\n            this._giveAxisProxies();\n        },\n\n        /**\n         * @private\n         */\n        _giveAxisProxies: function () {\n            var axisProxies = this._axisProxies;\n\n            this.eachTargetAxis(function (dimNames, axisIndex, dataZoomModel, ecModel) {\n                var axisModel = this.dependentModels[dimNames.axis][axisIndex];\n\n                // If exists, share axisProxy with other dataZoomModels.\n                var axisProxy = axisModel.__dzAxisProxy || (\n                    // Use the first dataZoomModel as the main model of axisProxy.\n                    axisModel.__dzAxisProxy = new AxisProxy(\n                        dimNames.name, axisIndex, this, ecModel\n                    )\n                );\n                // FIXME\n                // dispose __dzAxisProxy\n\n                axisProxies[dimNames.name + '_' + axisIndex] = axisProxy;\n            }, this);\n        },\n\n        /**\n         * @private\n         */\n        _resetTarget: function () {\n            var thisOption = this.option;\n\n            var autoMode = this._judgeAutoMode();\n\n            eachAxisDim(function (dimNames) {\n                var axisIndexName = dimNames.axisIndex;\n                thisOption[axisIndexName] = modelUtil.normalizeToArray(\n                    thisOption[axisIndexName]\n                );\n            }, this);\n\n            if (autoMode === 'axisIndex') {\n                this._autoSetAxisIndex();\n            }\n            else if (autoMode === 'orient') {\n                this._autoSetOrient();\n            }\n        },\n\n        /**\n         * @private\n         */\n        _judgeAutoMode: function () {\n            // Auto set only works for setOption at the first time.\n            // The following is user's reponsibility. So using merged\n            // option is OK.\n            var thisOption = this.option;\n\n            var hasIndexSpecified = false;\n            eachAxisDim(function (dimNames) {\n                // When user set axisIndex as a empty array, we think that user specify axisIndex\n                // but do not want use auto mode. Because empty array may be encountered when\n                // some error occured.\n                if (thisOption[dimNames.axisIndex] != null) {\n                    hasIndexSpecified = true;\n                }\n            }, this);\n\n            var orient = thisOption.orient;\n\n            if (orient == null && hasIndexSpecified) {\n                return 'orient';\n            }\n            else if (!hasIndexSpecified) {\n                if (orient == null) {\n                    thisOption.orient = 'horizontal';\n                }\n                return 'axisIndex';\n            }\n        },\n\n        /**\n         * @private\n         */\n        _autoSetAxisIndex: function () {\n            var autoAxisIndex = true;\n            var orient = this.get('orient', true);\n            var thisOption = this.option;\n            var dependentModels = this.dependentModels;\n\n            if (autoAxisIndex) {\n                // Find axis that parallel to dataZoom as default.\n                var dimName = orient === 'vertical' ? 'y' : 'x';\n\n                if (dependentModels[dimName + 'Axis'].length) {\n                    thisOption[dimName + 'AxisIndex'] = [0];\n                    autoAxisIndex = false;\n                }\n                else {\n                    each(dependentModels.singleAxis, function (singleAxisModel) {\n                        if (autoAxisIndex && singleAxisModel.get('orient', true) === orient) {\n                            thisOption.singleAxisIndex = [singleAxisModel.componentIndex];\n                            autoAxisIndex = false;\n                        }\n                    });\n                }\n            }\n\n            if (autoAxisIndex) {\n                // Find the first category axis as default. (consider polar)\n                eachAxisDim(function (dimNames) {\n                    if (!autoAxisIndex) {\n                        return;\n                    }\n                    var axisIndices = [];\n                    var axisModels = this.dependentModels[dimNames.axis];\n                    if (axisModels.length && !axisIndices.length) {\n                        for (var i = 0, len = axisModels.length; i < len; i++) {\n                            if (axisModels[i].get('type') === 'category') {\n                                axisIndices.push(i);\n                            }\n                        }\n                    }\n                    thisOption[dimNames.axisIndex] = axisIndices;\n                    if (axisIndices.length) {\n                        autoAxisIndex = false;\n                    }\n                }, this);\n            }\n\n            if (autoAxisIndex) {\n                // FIXME\n                // 这里是兼容ec2的写法（没指定xAxisIndex和yAxisIndex时把scatter和双数值轴折柱纳入dataZoom控制），\n                // 但是实际是否需要Grid.js#getScaleByOption来判断（考虑time，log等axis type）？\n\n                // If both dataZoom.xAxisIndex and dataZoom.yAxisIndex is not specified,\n                // dataZoom component auto adopts series that reference to\n                // both xAxis and yAxis which type is 'value'.\n                this.ecModel.eachSeries(function (seriesModel) {\n                    if (this._isSeriesHasAllAxesTypeOf(seriesModel, 'value')) {\n                        eachAxisDim(function (dimNames) {\n                            var axisIndices = thisOption[dimNames.axisIndex];\n\n                            var axisIndex = seriesModel.get(dimNames.axisIndex);\n                            var axisId = seriesModel.get(dimNames.axisId);\n\n                            var axisModel = seriesModel.ecModel.queryComponents({\n                                mainType: dimNames.axis,\n                                index: axisIndex,\n                                id: axisId\n                            })[0];\n\n                            if (__DEV__) {\n                                if (!axisModel) {\n                                    throw new Error(\n                                        dimNames.axis + ' \"' + zrUtil.retrieve(\n                                            axisIndex,\n                                            axisId,\n                                            0\n                                        ) + '\" not found'\n                                    );\n                                }\n                            }\n                            axisIndex = axisModel.componentIndex;\n\n                            if (zrUtil.indexOf(axisIndices, axisIndex) < 0) {\n                                axisIndices.push(axisIndex);\n                            }\n                        });\n                    }\n                }, this);\n            }\n        },\n\n        /**\n         * @private\n         */\n        _autoSetOrient: function () {\n            var dim;\n\n            // Find the first axis\n            this.eachTargetAxis(function (dimNames) {\n                !dim && (dim = dimNames.name);\n            }, this);\n\n            this.option.orient = dim === 'y' ? 'vertical' : 'horizontal';\n        },\n\n        /**\n         * @private\n         */\n        _isSeriesHasAllAxesTypeOf: function (seriesModel, axisType) {\n            // FIXME\n            // 需要series的xAxisIndex和yAxisIndex都首先自动设置上。\n            // 例如series.type === scatter时。\n\n            var is = true;\n            eachAxisDim(function (dimNames) {\n                var seriesAxisIndex = seriesModel.get(dimNames.axisIndex);\n                var axisModel = this.dependentModels[dimNames.axis][seriesAxisIndex];\n\n                if (!axisModel || axisModel.get('type') !== axisType) {\n                    is = false;\n                }\n            }, this);\n            return is;\n        },\n\n        /**\n         * @private\n         */\n        _setDefaultThrottle: function (rawOption) {\n            // When first time user set throttle, auto throttle ends.\n            if (rawOption.hasOwnProperty('throttle')) {\n                this._autoThrottle = false;\n            }\n            if (this._autoThrottle) {\n                var globalOption = this.ecModel.option;\n                this.option.throttle =\n                    (globalOption.animation && globalOption.animationDurationUpdate > 0)\n                    ? 100 : 20;\n            }\n        },\n\n        /**\n         * @public\n         */\n        getFirstTargetAxisModel: function () {\n            var firstAxisModel;\n            eachAxisDim(function (dimNames) {\n                if (firstAxisModel == null) {\n                    var indices = this.get(dimNames.axisIndex);\n                    if (indices.length) {\n                        firstAxisModel = this.dependentModels[dimNames.axis][indices[0]];\n                    }\n                }\n            }, this);\n\n            return firstAxisModel;\n        },\n\n        /**\n         * @public\n         * @param {Function} callback param: axisModel, dimNames, axisIndex, dataZoomModel, ecModel\n         */\n        eachTargetAxis: function (callback, context) {\n            var ecModel = this.ecModel;\n            eachAxisDim(function (dimNames) {\n                each(\n                    this.get(dimNames.axisIndex),\n                    function (axisIndex) {\n                        callback.call(context, dimNames, axisIndex, this, ecModel);\n                    },\n                    this\n                );\n            }, this);\n        },\n\n        /**\n         * @param {string} dimName\n         * @param {number} axisIndex\n         * @return {module:echarts/component/dataZoom/AxisProxy} If not found, return null/undefined.\n         */\n        getAxisProxy: function (dimName, axisIndex) {\n            return this._axisProxies[dimName + '_' + axisIndex];\n        },\n\n        /**\n         * @param {string} dimName\n         * @param {number} axisIndex\n         * @return {module:echarts/model/Model} If not found, return null/undefined.\n         */\n        getAxisModel: function (dimName, axisIndex) {\n            var axisProxy = this.getAxisProxy(dimName, axisIndex);\n            return axisProxy && axisProxy.getAxisModel();\n        },\n\n        /**\n         * If not specified, set to undefined.\n         *\n         * @public\n         * @param {Object} opt\n         * @param {number} [opt.start]\n         * @param {number} [opt.end]\n         * @param {number} [opt.startValue]\n         * @param {number} [opt.endValue]\n         * @param {boolean} [ignoreUpdateRangeUsg=false]\n         */\n        setRawRange: function (opt, ignoreUpdateRangeUsg) {\n            each(['start', 'end', 'startValue', 'endValue'], function (name) {\n                // If any of those prop is null/undefined, we should alos set\n                // them, because only one pair between start/end and\n                // startValue/endValue can work.\n                this.option[name] = opt[name];\n            }, this);\n\n            !ignoreUpdateRangeUsg && updateRangeUse(this, opt);\n        },\n\n        /**\n         * @public\n         * @return {Array.<number>} [startPercent, endPercent]\n         */\n        getPercentRange: function () {\n            var axisProxy = this.findRepresentativeAxisProxy();\n            if (axisProxy) {\n                return axisProxy.getDataPercentWindow();\n            }\n        },\n\n        /**\n         * @public\n         * For example, chart.getModel().getComponent('dataZoom').getValueRange('y', 0);\n         *\n         * @param {string} [axisDimName]\n         * @param {number} [axisIndex]\n         * @return {Array.<number>} [startValue, endValue] value can only be '-' or finite number.\n         */\n        getValueRange: function (axisDimName, axisIndex) {\n            if (axisDimName == null && axisIndex == null) {\n                var axisProxy = this.findRepresentativeAxisProxy();\n                if (axisProxy) {\n                    return axisProxy.getDataValueWindow();\n                }\n            }\n            else {\n                return this.getAxisProxy(axisDimName, axisIndex).getDataValueWindow();\n            }\n        },\n\n        /**\n         * @public\n         * @param {module:echarts/model/Model} [axisModel] If axisModel given, find axisProxy\n         *      corresponding to the axisModel\n         * @return {module:echarts/component/dataZoom/AxisProxy}\n         */\n        findRepresentativeAxisProxy: function (axisModel) {\n            if (axisModel) {\n                return axisModel.__dzAxisProxy;\n            }\n\n            // Find the first hosted axisProxy\n            var axisProxies = this._axisProxies;\n            for (var key in axisProxies) {\n                if (axisProxies.hasOwnProperty(key) && axisProxies[key].hostedBy(this)) {\n                    return axisProxies[key];\n                }\n            }\n\n            // If no hosted axis find not hosted axisProxy.\n            // Consider this case: dataZoomModel1 and dataZoomModel2 control the same axis,\n            // and the option.start or option.end settings are different. The percentRange\n            // should follow axisProxy.\n            // (We encounter this problem in toolbox data zoom.)\n            for (var key in axisProxies) {\n                if (axisProxies.hasOwnProperty(key) && !axisProxies[key].hostedBy(this)) {\n                    return axisProxies[key];\n                }\n            }\n        },\n\n        /**\n         * @return {Array.<string>}\n         */\n        getRangePropMode: function () {\n            return this._rangePropMode.slice();\n        }\n    });\n\n    function retrieveRaw(option) {\n        var ret = {};\n        each(\n            ['start', 'end', 'startValue', 'endValue', 'throttle'],\n            function (name) {\n                option.hasOwnProperty(name) && (ret[name] = option[name]);\n            }\n        );\n        return ret;\n    }\n\n    function updateRangeUse(dataZoomModel, rawOption) {\n        each([['start', 'startValue'], ['end', 'endValue']], function (names, index) {\n            var rangePropMode = dataZoomModel._rangePropMode;\n            if (rawOption[names[0]] != null) {\n                rangePropMode[index] = 'percent';\n            }\n            else if (rawOption[names[1]] != null) {\n                rangePropMode[index] = 'value';\n            }\n            // else remain its original setting.\n        });\n    }\n\n    module.exports = DataZoomModel;\n\n\n\n/***/ }),\n\n/***/ \"Q4Sk\":\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * @module echarts/model/Model\n */\n\n\n    var zrUtil = __webpack_require__(\"nw1Z\");\n    var clazzUtil = __webpack_require__(\"fzq8\");\n    var env = __webpack_require__(\"020c\");\n\n    /**\n     * @alias module:echarts/model/Model\n     * @constructor\n     * @param {Object} option\n     * @param {module:echarts/model/Model} [parentModel]\n     * @param {module:echarts/model/Global} [ecModel]\n     */\n    function Model(option, parentModel, ecModel) {\n        /**\n         * @type {module:echarts/model/Model}\n         * @readOnly\n         */\n        this.parentModel = parentModel;\n\n        /**\n         * @type {module:echarts/model/Global}\n         * @readOnly\n         */\n        this.ecModel = ecModel;\n\n        /**\n         * @type {Object}\n         * @protected\n         */\n        this.option = option;\n\n        // Simple optimization\n        // if (this.init) {\n        //     if (arguments.length <= 4) {\n        //         this.init(option, parentModel, ecModel, extraOpt);\n        //     }\n        //     else {\n        //         this.init.apply(this, arguments);\n        //     }\n        // }\n    }\n\n    Model.prototype = {\n\n        constructor: Model,\n\n        /**\n         * Model 的初始化函数\n         * @param {Object} option\n         */\n        init: null,\n\n        /**\n         * 从新的 Option merge\n         */\n        mergeOption: function (option) {\n            zrUtil.merge(this.option, option, true);\n        },\n\n        /**\n         * @param {string|Array.<string>} path\n         * @param {boolean} [ignoreParent=false]\n         * @return {*}\n         */\n        get: function (path, ignoreParent) {\n            if (path == null) {\n                return this.option;\n            }\n\n            return doGet(\n                this.option,\n                this.parsePath(path),\n                !ignoreParent && getParent(this, path)\n            );\n        },\n\n        /**\n         * @param {string} key\n         * @param {boolean} [ignoreParent=false]\n         * @return {*}\n         */\n        getShallow: function (key, ignoreParent) {\n            var option = this.option;\n\n            var val = option == null ? option : option[key];\n            var parentModel = !ignoreParent && getParent(this, key);\n            if (val == null && parentModel) {\n                val = parentModel.getShallow(key);\n            }\n            return val;\n        },\n\n        /**\n         * @param {string|Array.<string>} path\n         * @param {module:echarts/model/Model} [parentModel]\n         * @return {module:echarts/model/Model}\n         */\n        getModel: function (path, parentModel) {\n            var obj = path == null\n                ? this.option\n                : doGet(this.option, path = this.parsePath(path));\n\n            var thisParentModel;\n            parentModel = parentModel || (\n                (thisParentModel = getParent(this, path))\n                    && thisParentModel.getModel(path)\n            );\n\n            return new Model(obj, parentModel, this.ecModel);\n        },\n\n        /**\n         * If model has option\n         */\n        isEmpty: function () {\n            return this.option == null;\n        },\n\n        restoreData: function () {},\n\n        // Pending\n        clone: function () {\n            var Ctor = this.constructor;\n            return new Ctor(zrUtil.clone(this.option));\n        },\n\n        setReadOnly: function (properties) {\n            clazzUtil.setReadOnly(this, properties);\n        },\n\n        // If path is null/undefined, return null/undefined.\n        parsePath: function(path) {\n            if (typeof path === 'string') {\n                path = path.split('.');\n            }\n            return path;\n        },\n\n        /**\n         * @param {Function} getParentMethod\n         *        param {Array.<string>|string} path\n         *        return {module:echarts/model/Model}\n         */\n        customizeGetParent: function (getParentMethod) {\n            clazzUtil.set(this, 'getParent', getParentMethod);\n        },\n\n        isAnimationEnabled: function () {\n            if (!env.node) {\n                if (this.option.animation != null) {\n                    return !!this.option.animation;\n                }\n                else if (this.parentModel) {\n                    return this.parentModel.isAnimationEnabled();\n                }\n            }\n        }\n    };\n\n    function doGet(obj, pathArr, parentModel) {\n        for (var i = 0; i < pathArr.length; i++) {\n            // Ignore empty\n            if (!pathArr[i]) {\n                continue;\n            }\n            // obj could be number/string/... (like 0)\n            obj = (obj && typeof obj === 'object') ? obj[pathArr[i]] : null;\n            if (obj == null) {\n                break;\n            }\n        }\n        if (obj == null && parentModel) {\n            obj = parentModel.get(pathArr);\n        }\n        return obj;\n    }\n\n    function getParent(model, path) {\n        var getParentMethod = clazzUtil.get(model, 'getParent');\n        return getParentMethod ? getParentMethod.call(model, path) : model.parentModel;\n    }\n\n    // Enable Model.extend.\n    clazzUtil.enableClassExtend(Model);\n\n    var mixin = zrUtil.mixin;\n    mixin(Model, __webpack_require__(\"omlO\"));\n    mixin(Model, __webpack_require__(\"7RWD\"));\n    mixin(Model, __webpack_require__(\"3rnY\"));\n    mixin(Model, __webpack_require__(\"vnaK\"));\n\n    module.exports = Model;\n\n\n/***/ }),\n\n/***/ \"QPUO\":\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * @file Data zoom model\n */\n\n\n    var DataZoomModel = __webpack_require__(\"PtLt\");\n\n    var SliderZoomModel = DataZoomModel.extend({\n\n        type: 'dataZoom.slider',\n\n        layoutMode: 'box',\n\n        /**\n         * @protected\n         */\n        defaultOption: {\n            show: true,\n\n            // ph => placeholder. Using placehoder here because\n            // deault value can only be drived in view stage.\n            right: 'ph',  // Default align to grid rect.\n            top: 'ph',    // Default align to grid rect.\n            width: 'ph',  // Default align to grid rect.\n            height: 'ph', // Default align to grid rect.\n            left: null,   // Default align to grid rect.\n            bottom: null, // Default align to grid rect.\n\n            backgroundColor: 'rgba(47,69,84,0)',    // Background of slider zoom component.\n            // dataBackgroundColor: '#ddd',         // Background coor of data shadow and border of box,\n                                                    // highest priority, remain for compatibility of\n                                                    // previous version, but not recommended any more.\n            dataBackground: {\n                lineStyle: {\n                    color: '#2f4554',\n                    width: 0.5,\n                    opacity: 0.3\n                },\n                areaStyle: {\n                    color: 'rgba(47,69,84,0.3)',\n                    opacity: 0.3\n                }\n            },\n            borderColor: '#ddd',                    // border color of the box. For compatibility,\n                                                    // if dataBackgroundColor is set, borderColor\n                                                    // is ignored.\n\n            fillerColor: 'rgba(167,183,204,0.4)',     // Color of selected area.\n            // handleColor: 'rgba(89,170,216,0.95)',     // Color of handle.\n            // handleIcon: 'path://M4.9,17.8c0-1.4,4.5-10.5,5.5-12.4c0-0.1,0.6-1.1,0.9-1.1c0.4,0,0.9,1,0.9,1.1c1.1,2.2,5.4,11,5.4,12.4v17.8c0,1.5-0.6,2.1-1.3,2.1H6.1c-0.7,0-1.3-0.6-1.3-2.1V17.8z',\n            handleIcon: 'M8.2,13.6V3.9H6.3v9.7H3.1v14.9h3.3v9.7h1.8v-9.7h3.3V13.6H8.2z M9.7,24.4H4.8v-1.4h4.9V24.4z M9.7,19.1H4.8v-1.4h4.9V19.1z',\n            // Percent of the slider height\n            handleSize: '100%',\n\n            handleStyle: {\n                color: '#a7b7cc'\n            },\n\n            labelPrecision: null,\n            labelFormatter: null,\n            showDetail: true,\n            showDataShadow: 'auto',                 // Default auto decision.\n            realtime: true,\n            zoomLock: false,                        // Whether disable zoom.\n            textStyle: {\n                color: '#333'\n            }\n        }\n\n    });\n\n    module.exports = SliderZoomModel;\n\n\n\n/***/ }),\n\n/***/ \"QXe6\":\n/***/ (function(module, exports, __webpack_require__) {\n\n/*!\n * ZRender, a high performance 2d drawing library.\n *\n * Copyright (c) 2013, Baidu Inc.\n * All rights reserved.\n *\n * LICENSE\n * https://github.com/ecomfe/zrender/blob/master/LICENSE.txt\n */\n// Global defines\n\n    var guid = __webpack_require__(\"xG35\");\n    var env = __webpack_require__(\"020c\");\n    var zrUtil = __webpack_require__(\"nw1Z\");\n\n    var Handler = __webpack_require__(\"p+9T\");\n    var Storage = __webpack_require__(\"y9L0\");\n    var Animation = __webpack_require__(\"qYWS\");\n    var HandlerProxy = __webpack_require__(\"NXVI\");\n\n    var useVML = !env.canvasSupported;\n\n    var painterCtors = {\n        canvas: __webpack_require__(\"OsTV\")\n    };\n\n    var instances = {};    // ZRender实例map索引\n\n    var zrender = {};\n\n    /**\n     * @type {string}\n     */\n    zrender.version = '3.5.1';\n\n    /**\n     * Initializing a zrender instance\n     * @param {HTMLElement} dom\n     * @param {Object} opts\n     * @param {string} [opts.renderer='canvas'] 'canvas' or 'svg'\n     * @param {number} [opts.devicePixelRatio]\n     * @param {number|string} [opts.width] Can be 'auto' (the same as null/undefined)\n     * @param {number|string} [opts.height] Can be 'auto' (the same as null/undefined)\n     * @return {module:zrender/ZRender}\n     */\n    zrender.init = function(dom, opts) {\n        var zr = new ZRender(guid(), dom, opts);\n        instances[zr.id] = zr;\n        return zr;\n    };\n\n    /**\n     * Dispose zrender instance\n     * @param {module:zrender/ZRender} zr\n     */\n    zrender.dispose = function (zr) {\n        if (zr) {\n            zr.dispose();\n        }\n        else {\n            for (var key in instances) {\n                if (instances.hasOwnProperty(key)) {\n                    instances[key].dispose();\n                }\n            }\n            instances = {};\n        }\n\n        return zrender;\n    };\n\n    /**\n     * Get zrender instance by id\n     * @param {string} id zrender instance id\n     * @return {module:zrender/ZRender}\n     */\n    zrender.getInstance = function (id) {\n        return instances[id];\n    };\n\n    zrender.registerPainter = function (name, Ctor) {\n        painterCtors[name] = Ctor;\n    };\n\n    function delInstance(id) {\n        delete instances[id];\n    }\n\n    /**\n     * @module zrender/ZRender\n     */\n    /**\n     * @constructor\n     * @alias module:zrender/ZRender\n     * @param {string} id\n     * @param {HTMLDomElement} dom\n     * @param {Object} opts\n     * @param {string} [opts.renderer='canvas'] 'canvas' or 'svg'\n     * @param {number} [opts.devicePixelRatio]\n     * @param {number} [opts.width] Can be 'auto' (the same as null/undefined)\n     * @param {number} [opts.height] Can be 'auto' (the same as null/undefined)\n     */\n    var ZRender = function(id, dom, opts) {\n\n        opts = opts || {};\n\n        /**\n         * @type {HTMLDomElement}\n         */\n        this.dom = dom;\n\n        /**\n         * @type {string}\n         */\n        this.id = id;\n\n        var self = this;\n        var storage = new Storage();\n\n        var rendererType = opts.renderer;\n        // TODO WebGL\n        if (useVML) {\n            if (!painterCtors.vml) {\n                throw new Error('You need to require \\'zrender/vml/vml\\' to support IE8');\n            }\n            rendererType = 'vml';\n        }\n        else if (!rendererType || !painterCtors[rendererType]) {\n            rendererType = 'canvas';\n        }\n        var painter = new painterCtors[rendererType](dom, storage, opts);\n\n        this.storage = storage;\n        this.painter = painter;\n\n        var handerProxy = !env.node ? new HandlerProxy(painter.getViewportRoot()) : null;\n        this.handler = new Handler(storage, painter, handerProxy, painter.root);\n\n        /**\n         * @type {module:zrender/animation/Animation}\n         */\n        this.animation = new Animation({\n            stage: {\n                update: zrUtil.bind(this.flush, this)\n            }\n        });\n        this.animation.start();\n\n        /**\n         * @type {boolean}\n         * @private\n         */\n        this._needsRefresh;\n\n        // 修改 storage.delFromStorage, 每次删除元素之前删除动画\n        // FIXME 有点ugly\n        var oldDelFromStorage = storage.delFromStorage;\n        var oldAddToStorage = storage.addToStorage;\n\n        storage.delFromStorage = function (el) {\n            oldDelFromStorage.call(storage, el);\n\n            el && el.removeSelfFromZr(self);\n        };\n\n        storage.addToStorage = function (el) {\n            oldAddToStorage.call(storage, el);\n\n            el.addSelfToZr(self);\n        };\n    };\n\n    ZRender.prototype = {\n\n        constructor: ZRender,\n        /**\n         * 获取实例唯一标识\n         * @return {string}\n         */\n        getId: function () {\n            return this.id;\n        },\n\n        /**\n         * 添加元素\n         * @param  {module:zrender/Element} el\n         */\n        add: function (el) {\n            this.storage.addRoot(el);\n            this._needsRefresh = true;\n        },\n\n        /**\n         * 删除元素\n         * @param  {module:zrender/Element} el\n         */\n        remove: function (el) {\n            this.storage.delRoot(el);\n            this._needsRefresh = true;\n        },\n\n        /**\n         * Change configuration of layer\n         * @param {string} zLevel\n         * @param {Object} config\n         * @param {string} [config.clearColor=0] Clear color\n         * @param {string} [config.motionBlur=false] If enable motion blur\n         * @param {number} [config.lastFrameAlpha=0.7] Motion blur factor. Larger value cause longer trailer\n        */\n        configLayer: function (zLevel, config) {\n            this.painter.configLayer(zLevel, config);\n            this._needsRefresh = true;\n        },\n\n        /**\n         * Repaint the canvas immediately\n         */\n        refreshImmediately: function () {\n            // Clear needsRefresh ahead to avoid something wrong happens in refresh\n            // Or it will cause zrender refreshes again and again.\n            this._needsRefresh = false;\n            this.painter.refresh();\n            /**\n             * Avoid trigger zr.refresh in Element#beforeUpdate hook\n             */\n            this._needsRefresh = false;\n        },\n\n        /**\n         * Mark and repaint the canvas in the next frame of browser\n         */\n        refresh: function() {\n            this._needsRefresh = true;\n        },\n\n        /**\n         * Perform all refresh\n         */\n        flush: function () {\n            if (this._needsRefresh) {\n                this.refreshImmediately();\n            }\n            if (this._needsRefreshHover) {\n                this.refreshHoverImmediately();\n            }\n        },\n\n        /**\n         * Add element to hover layer\n         * @param  {module:zrender/Element} el\n         * @param {Object} style\n         */\n        addHover: function (el, style) {\n            if (this.painter.addHover) {\n                this.painter.addHover(el, style);\n                this.refreshHover();\n            }\n        },\n\n        /**\n         * Add element from hover layer\n         * @param  {module:zrender/Element} el\n         */\n        removeHover: function (el) {\n            if (this.painter.removeHover) {\n                this.painter.removeHover(el);\n                this.refreshHover();\n            }\n        },\n\n        /**\n         * Clear all hover elements in hover layer\n         * @param  {module:zrender/Element} el\n         */\n        clearHover: function () {\n            if (this.painter.clearHover) {\n                this.painter.clearHover();\n                this.refreshHover();\n            }\n        },\n\n        /**\n         * Refresh hover in next frame\n         */\n        refreshHover: function () {\n            this._needsRefreshHover = true;\n        },\n\n        /**\n         * Refresh hover immediately\n         */\n        refreshHoverImmediately: function () {\n            this._needsRefreshHover = false;\n            this.painter.refreshHover && this.painter.refreshHover();\n        },\n\n        /**\n         * Resize the canvas.\n         * Should be invoked when container size is changed\n         * @param {Object} [opts]\n         * @param {number|string} [opts.width] Can be 'auto' (the same as null/undefined)\n         * @param {number|string} [opts.height] Can be 'auto' (the same as null/undefined)\n         */\n        resize: function(opts) {\n            opts = opts || {};\n            this.painter.resize(opts.width, opts.height);\n            this.handler.resize();\n        },\n\n        /**\n         * Stop and clear all animation immediately\n         */\n        clearAnimation: function () {\n            this.animation.clear();\n        },\n\n        /**\n         * Get container width\n         */\n        getWidth: function() {\n            return this.painter.getWidth();\n        },\n\n        /**\n         * Get container height\n         */\n        getHeight: function() {\n            return this.painter.getHeight();\n        },\n\n        /**\n         * Export the canvas as Base64 URL\n         * @param {string} type\n         * @param {string} [backgroundColor='#fff']\n         * @return {string} Base64 URL\n         */\n        // toDataURL: function(type, backgroundColor) {\n        //     return this.painter.getRenderedCanvas({\n        //         backgroundColor: backgroundColor\n        //     }).toDataURL(type);\n        // },\n\n        /**\n         * Converting a path to image.\n         * It has much better performance of drawing image rather than drawing a vector path.\n         * @param {module:zrender/graphic/Path} e\n         * @param {number} width\n         * @param {number} height\n         */\n        pathToImage: function(e, dpr) {\n            return this.painter.pathToImage(e, dpr);\n        },\n\n        /**\n         * Set default cursor\n         * @param {string} [cursorStyle='default'] 例如 crosshair\n         */\n        setCursorStyle: function (cursorStyle) {\n            this.handler.setCursorStyle(cursorStyle);\n        },\n\n        /**\n         * Find hovered element\n         * @param {number} x\n         * @param {number} y\n         * @return {Object} {target, topTarget}\n         */\n        findHover: function (x, y) {\n            return this.handler.findHover(x, y);\n        },\n\n        /**\n         * Bind event\n         *\n         * @param {string} eventName Event name\n         * @param {Function} eventHandler Handler function\n         * @param {Object} [context] Context object\n         */\n        on: function(eventName, eventHandler, context) {\n            this.handler.on(eventName, eventHandler, context);\n        },\n\n        /**\n         * Unbind event\n         * @param {string} eventName Event name\n         * @param {Function} [eventHandler] Handler function\n         */\n        off: function(eventName, eventHandler) {\n            this.handler.off(eventName, eventHandler);\n        },\n\n        /**\n         * Trigger event manually\n         *\n         * @param {string} eventName Event name\n         * @param {event=} event Event object\n         */\n        trigger: function (eventName, event) {\n            this.handler.trigger(eventName, event);\n        },\n\n\n        /**\n         * Clear all objects and the canvas.\n         */\n        clear: function () {\n            this.storage.delRoot();\n            this.painter.clear();\n        },\n\n        /**\n         * Dispose self.\n         */\n        dispose: function () {\n            this.animation.stop();\n\n            this.clear();\n            this.storage.dispose();\n            this.painter.dispose();\n            this.handler.dispose();\n\n            this.animation =\n            this.storage =\n            this.painter =\n            this.handler = null;\n\n            delInstance(this.id);\n        }\n    };\n\n    module.exports = zrender;\n\n\n\n/***/ }),\n\n/***/ \"Qajf\":\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * Complete dimensions by data (guess dimension).\n */\n\n\n    var zrUtil = __webpack_require__(\"nw1Z\");\n    var modelUtil = __webpack_require__(\"LFYx\");\n    var each = zrUtil.each;\n    var isString = zrUtil.isString;\n    var defaults = zrUtil.defaults;\n    var normalizeToArray = modelUtil.normalizeToArray;\n\n    var OTHER_DIMS = {tooltip: 1, label: 1, itemName: 1};\n\n    /**\n     * Complete the dimensions array, by user defined `dimension` and `encode`,\n     * and guessing from the data structure.\n     * If no 'value' dimension specified, the first no-named dimension will be\n     * named as 'value'.\n     *\n     * @param {Array.<string>} sysDims Necessary dimensions, like ['x', 'y'], which\n     *      provides not only dim template, but also default order.\n     *      `name` of each item provides default coord name.\n     *      [{dimsDef: []}, ...] can be specified to give names.\n     * @param {Array} data Data list. [[1, 2, 3], [2, 3, 4]].\n     * @param {Object} [opt]\n     * @param {Array.<Object|string>} [opt.dimsDef] option.series.dimensions User defined dimensions\n     *      For example: ['asdf', {name, type}, ...].\n     * @param {Object} [opt.encodeDef] option.series.encode {x: 2, y: [3, 1], tooltip: [1, 2], label: 3}\n     * @param {string} [opt.extraPrefix] Prefix of name when filling the left dimensions.\n     * @param {string} [opt.extraFromZero] If specified, extra dim names will be:\n     *                      extraPrefix + 0, extraPrefix + extraBaseIndex + 1 ...\n     *                      If not specified, extra dim names will be:\n     *                      extraPrefix, extraPrefix + 0, extraPrefix + 1 ...\n     * @param {number} [opt.dimCount] If not specified, guess by the first data item.\n     * @return {Array.<Object>} [{\n     *      name: string mandatory,\n     *      coordDim: string mandatory,\n     *      coordDimIndex: number mandatory,\n     *      type: string optional,\n     *      tooltipName: string optional,\n     *      otherDims: {\n     *          tooltip: number optional,\n     *          label: number optional\n     *      },\n     *      isExtraCoord: boolean true or undefined.\n     *      other props ...\n     * }]\n     */\n    function completeDimensions(sysDims, data, opt) {\n        data = data || [];\n        opt = opt || {};\n        sysDims = (sysDims || []).slice();\n        var dimsDef = (opt.dimsDef || []).slice();\n        var encodeDef = zrUtil.createHashMap(opt.encodeDef);\n        var dataDimNameMap = zrUtil.createHashMap();\n        var coordDimNameMap = zrUtil.createHashMap();\n        // var valueCandidate;\n        var result = [];\n\n        var dimCount = opt.dimCount;\n        if (dimCount == null) {\n            var value0 = retrieveValue(data[0]);\n            dimCount = Math.max(\n                zrUtil.isArray(value0) && value0.length || 1,\n                sysDims.length,\n                dimsDef.length\n            );\n            each(sysDims, function (sysDimItem) {\n                var sysDimItemDimsDef = sysDimItem.dimsDef;\n                sysDimItemDimsDef && (dimCount = Math.max(dimCount, sysDimItemDimsDef.length));\n            });\n        }\n\n        // Apply user defined dims (`name` and `type`) and init result.\n        for (var i = 0; i < dimCount; i++) {\n            var dimDefItem = isString(dimsDef[i]) ? {name: dimsDef[i]} : (dimsDef[i] || {});\n            var userDimName = dimDefItem.name;\n            var resultItem = result[i] = {otherDims: {}};\n            // Name will be applied later for avoiding duplication.\n            if (userDimName != null && dataDimNameMap.get(userDimName) == null) {\n                // Only if `series.dimensions` is defined in option, tooltipName\n                // will be set, and dimension will be diplayed vertically in\n                // tooltip by default.\n                resultItem.name = resultItem.tooltipName = userDimName;\n                dataDimNameMap.set(userDimName, i);\n            }\n            dimDefItem.type != null && (resultItem.type = dimDefItem.type);\n        }\n\n        // Set `coordDim` and `coordDimIndex` by `encodeDef` and normalize `encodeDef`.\n        encodeDef.each(function (dataDims, coordDim) {\n            dataDims = encodeDef.set(coordDim, normalizeToArray(dataDims).slice());\n            each(dataDims, function (resultDimIdx, coordDimIndex) {\n                // The input resultDimIdx can be dim name or index.\n                isString(resultDimIdx) && (resultDimIdx = dataDimNameMap.get(resultDimIdx));\n                if (resultDimIdx != null && resultDimIdx < dimCount) {\n                    dataDims[coordDimIndex] = resultDimIdx;\n                    applyDim(result[resultDimIdx], coordDim, coordDimIndex);\n                    // coordDim === 'value' && valueCandidate == null && (valueCandidate = resultDimIdx);\n                }\n            });\n        });\n\n        // Apply templetes and default order from `sysDims`.\n        var availDimIdx = 0;\n        each(sysDims, function (sysDimItem, sysDimIndex) {\n            var coordDim;\n            var sysDimItem;\n            var sysDimItemDimsDef;\n            var sysDimItemOtherDims;\n            if (isString(sysDimItem)) {\n                coordDim = sysDimItem;\n                sysDimItem = {};\n            }\n            else {\n                coordDim = sysDimItem.name;\n                sysDimItem = zrUtil.clone(sysDimItem);\n                // `coordDimIndex` should not be set directly.\n                sysDimItemDimsDef = sysDimItem.dimsDef;\n                sysDimItemOtherDims = sysDimItem.otherDims;\n                sysDimItem.name = sysDimItem.coordDim = sysDimItem.coordDimIndex\n                    = sysDimItem.dimsDef = sysDimItem.otherDims = null;\n            }\n\n            var dataDims = normalizeToArray(encodeDef.get(coordDim));\n            // dimensions provides default dim sequences.\n            if (!dataDims.length) {\n                for (var i = 0; i < (sysDimItemDimsDef && sysDimItemDimsDef.length || 1); i++) {\n                    while (availDimIdx < result.length && result[availDimIdx].coordDim != null) {\n                        availDimIdx++;\n                    }\n                    availDimIdx < result.length && dataDims.push(availDimIdx++);\n                }\n            }\n            // Apply templates.\n            each(dataDims, function (resultDimIdx, coordDimIndex) {\n                var resultItem = result[resultDimIdx];\n                applyDim(defaults(resultItem, sysDimItem), coordDim, coordDimIndex);\n                // coordDim === 'value' && valueCandidate == null && (valueCandidate = resultDimIdx);\n                if (resultItem.name == null && sysDimItemDimsDef) {\n                    resultItem.name = resultItem.tooltipName = sysDimItemDimsDef[coordDimIndex];\n                }\n                sysDimItemOtherDims && defaults(resultItem.otherDims, sysDimItemOtherDims);\n            });\n        });\n\n        // Make sure the first extra dim is 'value'.\n        var extra = opt.extraPrefix || 'value';\n\n        // Set dim `name` and other `coordDim` and other props.\n        for (var resultDimIdx = 0; resultDimIdx < dimCount; resultDimIdx++) {\n            var resultItem = result[resultDimIdx] = result[resultDimIdx] || {};\n            var coordDim = resultItem.coordDim;\n\n            coordDim == null && (\n                resultItem.coordDim = genName(extra, coordDimNameMap, opt.extraFromZero),\n                resultItem.coordDimIndex = 0,\n                resultItem.isExtraCoord = true\n            );\n\n            resultItem.name == null && (resultItem.name = genName(\n                // Ensure At least one value dim.\n                // (dataDimNameMap.get('value') == null\n                //     && (valueCandidate == null || valueCandidate === resultDimIdx)\n                //     // Try to set as 'value' only if coordDim is not set as 'extra'.\n                //     && coordDim == null\n                // )\n                // ? 'value'\n                // :\n                resultItem.coordDim,\n                dataDimNameMap\n            ));\n\n            resultItem.type == null && guessOrdinal(data, resultDimIdx)\n                && (resultItem.type = 'ordinal');\n        }\n\n        return result;\n\n        function applyDim(resultItem, coordDim, coordDimIndex) {\n            if (OTHER_DIMS[coordDim]) {\n                resultItem.otherDims[coordDim] = coordDimIndex;\n            }\n            else {\n                resultItem.coordDim = coordDim;\n                resultItem.coordDimIndex = coordDimIndex;\n                coordDimNameMap.set(coordDim, true);\n            }\n        }\n\n        function genName(name, map, fromZero) {\n            if (fromZero || map.get(name) != null) {\n                var i = 0;\n                while (map.get(name + i) != null) {\n                    i++;\n                }\n                name += i;\n            }\n            map.set(name, true);\n            return name;\n        }\n    }\n\n    // The rule should not be complex, otherwise user might not\n    // be able to known where the data is wrong.\n    var guessOrdinal = completeDimensions.guessOrdinal = function (data, dimIndex) {\n        for (var i = 0, len = data.length; i < len; i++) {\n            var value = retrieveValue(data[i]);\n\n            if (!zrUtil.isArray(value)) {\n                return false;\n            }\n\n            var value = value[dimIndex];\n            // Consider usage convenience, '1', '2' will be treated as \"number\".\n            if (value != null && isFinite(value)) {\n                return false;\n            }\n            else if (isString(value) && value !== '-') {\n                return true;\n            }\n        }\n        return false;\n    };\n\n    function retrieveValue(o) {\n        return zrUtil.isArray(o) ? o : zrUtil.isObject(o) ? o.value: o;\n    }\n\n    module.exports = completeDimensions;\n\n\n\n/***/ }),\n\n/***/ \"Rj1V\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\n    var zrUtil = __webpack_require__(\"nw1Z\");\n    var Model = __webpack_require__(\"Q4Sk\");\n    var each = zrUtil.each;\n    var curry = zrUtil.curry;\n\n    var helper = {};\n\n    // Build axisPointerModel, mergin tooltip.axisPointer model for each axis.\n    // allAxesInfo should be updated when setOption performed.\n    helper.collect = function (ecModel, api) {\n        var result = {\n            /**\n             * key: makeKey(axis.model)\n             * value: {\n             *      axis,\n             *      coordSys,\n             *      axisPointerModel,\n             *      triggerTooltip,\n             *      involveSeries,\n             *      snap,\n             *      seriesModels,\n             *      seriesDataCount\n             * }\n             */\n            axesInfo: {},\n            seriesInvolved: false,\n            /**\n             * key: makeKey(coordSys.model)\n             * value: Object: key makeKey(axis.model), value: axisInfo\n             */\n            coordSysAxesInfo: {},\n            coordSysMap: {}\n        };\n\n        collectAxesInfo(result, ecModel, api);\n\n        // Check seriesInvolved for performance, in case too many series in some chart.\n        result.seriesInvolved && collectSeriesInfo(result, ecModel);\n\n        return result;\n    };\n\n    function collectAxesInfo(result, ecModel, api) {\n        var globalTooltipModel = ecModel.getComponent('tooltip');\n        var globalAxisPointerModel = ecModel.getComponent('axisPointer');\n        // links can only be set on global.\n        var linksOption = globalAxisPointerModel.get('link', true) || [];\n        var linkGroups = [];\n\n        // Collect axes info.\n        each(api.getCoordinateSystems(), function (coordSys) {\n            // Some coordinate system do not support axes, like geo.\n            if (!coordSys.axisPointerEnabled) {\n                return;\n            }\n\n            var coordSysKey = makeKey(coordSys.model);\n            var axesInfoInCoordSys = result.coordSysAxesInfo[coordSysKey] = {};\n            result.coordSysMap[coordSysKey] = coordSys;\n\n            // Set tooltip (like 'cross') is a convienent way to show axisPointer\n            // for user. So we enable seting tooltip on coordSys model.\n            var coordSysModel = coordSys.model;\n            var baseTooltipModel = coordSysModel.getModel('tooltip', globalTooltipModel);\n\n            each(coordSys.getAxes(), curry(saveTooltipAxisInfo, false, null));\n\n            // If axis tooltip used, choose tooltip axis for each coordSys.\n            // Notice this case: coordSys is `grid` but not `cartesian2D` here.\n            if (coordSys.getTooltipAxes\n                && globalTooltipModel\n                // If tooltip.showContent is set as false, tooltip will not\n                // show but axisPointer will show as normal.\n                && baseTooltipModel.get('show')\n            ) {\n                // Compatible with previous logic. But series.tooltip.trigger: 'axis'\n                // or series.data[n].tooltip.trigger: 'axis' are not support any more.\n                var triggerAxis = baseTooltipModel.get('trigger') === 'axis';\n                var cross = baseTooltipModel.get('axisPointer.type') === 'cross';\n                var tooltipAxes = coordSys.getTooltipAxes(baseTooltipModel.get('axisPointer.axis'));\n                if (triggerAxis || cross) {\n                    each(tooltipAxes.baseAxes, curry(\n                        saveTooltipAxisInfo, cross ? 'cross' : true, triggerAxis\n                    ));\n                }\n                if (cross) {\n                    each(tooltipAxes.otherAxes, curry(saveTooltipAxisInfo, 'cross', false));\n                }\n            }\n\n            // fromTooltip: true | false | 'cross'\n            // triggerTooltip: true | false | null\n            function saveTooltipAxisInfo(fromTooltip, triggerTooltip, axis) {\n                var axisPointerModel = axis.model.getModel('axisPointer', globalAxisPointerModel);\n\n                var axisPointerShow = axisPointerModel.get('show');\n                if (!axisPointerShow || (\n                    axisPointerShow === 'auto'\n                    && !fromTooltip\n                    && !isHandleTrigger(axisPointerModel)\n                )) {\n                    return;\n                }\n\n                if (triggerTooltip == null) {\n                    triggerTooltip = axisPointerModel.get('triggerTooltip');\n                }\n\n                axisPointerModel = fromTooltip\n                    ? makeAxisPointerModel(\n                        axis, baseTooltipModel, globalAxisPointerModel, ecModel,\n                        fromTooltip, triggerTooltip\n                    )\n                    : axisPointerModel;\n\n                var snap = axisPointerModel.get('snap');\n                var key = makeKey(axis.model);\n                var involveSeries = triggerTooltip || snap || axis.type === 'category';\n\n                // If result.axesInfo[key] exist, override it (tooltip has higher priority).\n                var axisInfo = result.axesInfo[key] = {\n                    key: key,\n                    axis: axis,\n                    coordSys: coordSys,\n                    axisPointerModel: axisPointerModel,\n                    triggerTooltip: triggerTooltip,\n                    involveSeries: involveSeries,\n                    snap: snap,\n                    useHandle: isHandleTrigger(axisPointerModel),\n                    seriesModels: []\n                };\n                axesInfoInCoordSys[key] = axisInfo;\n                result.seriesInvolved |= involveSeries;\n\n                var groupIndex = getLinkGroupIndex(linksOption, axis);\n                if (groupIndex != null) {\n                    var linkGroup = linkGroups[groupIndex] || (linkGroups[groupIndex] = {axesInfo: {}});\n                    linkGroup.axesInfo[key] = axisInfo;\n                    linkGroup.mapper = linksOption[groupIndex].mapper;\n                    axisInfo.linkGroup = linkGroup;\n                }\n            }\n        });\n    }\n\n    function makeAxisPointerModel(\n        axis, baseTooltipModel, globalAxisPointerModel, ecModel, fromTooltip, triggerTooltip\n    ) {\n        var tooltipAxisPointerModel = baseTooltipModel.getModel('axisPointer');\n        var volatileOption = {};\n\n        each(\n            [\n                'type', 'snap', 'lineStyle', 'shadowStyle', 'label',\n                'animation', 'animationDurationUpdate', 'animationEasingUpdate', 'z'\n            ],\n            function (field) {\n                volatileOption[field] = zrUtil.clone(tooltipAxisPointerModel.get(field));\n            }\n        );\n\n        // category axis do not auto snap, otherwise some tick that do not\n        // has value can not be hovered. value/time/log axis default snap if\n        // triggered from tooltip and trigger tooltip.\n        volatileOption.snap = axis.type !== 'category' && !!triggerTooltip;\n\n        // Compatibel with previous behavior, tooltip axis do not show label by default.\n        // Only these properties can be overrided from tooltip to axisPointer.\n        if (tooltipAxisPointerModel.get('type') === 'cross') {\n            volatileOption.type = 'line';\n        }\n        var labelOption = volatileOption.label || (volatileOption.label = {});\n        // Follow the convention, do not show label when triggered by tooltip by default.\n        labelOption.show == null && (labelOption.show = false);\n\n        if (fromTooltip === 'cross') {\n            // When 'cross', both axes show labels.\n            labelOption.show = true;\n            // If triggerTooltip, this is a base axis, which should better not use cross style\n            // (cross style is dashed by default)\n            if (!triggerTooltip) {\n                var crossStyle = volatileOption.lineStyle = tooltipAxisPointerModel.get('crossStyle');\n                crossStyle && zrUtil.defaults(\n                    labelOption.textStyle || (labelOption.textStyle = {}),\n                    crossStyle.textStyle\n                );\n            }\n        }\n\n        return axis.model.getModel(\n            'axisPointer',\n            new Model(volatileOption, globalAxisPointerModel, ecModel)\n        );\n    }\n\n    function collectSeriesInfo(result, ecModel) {\n        // Prepare data for axis trigger\n        ecModel.eachSeries(function (seriesModel) {\n\n            // Notice this case: this coordSys is `cartesian2D` but not `grid`.\n            var coordSys = seriesModel.coordinateSystem;\n            var seriesTooltipTrigger = seriesModel.get('tooltip.trigger', true);\n            if (!coordSys\n                || seriesTooltipTrigger === 'none'\n                || seriesTooltipTrigger === false\n                || seriesTooltipTrigger === 'item'\n                || seriesModel.get('axisPointer.show', true) === false\n            ) {\n                return;\n            }\n\n            each(result.coordSysAxesInfo[makeKey(coordSys.model)], function (axisInfo) {\n                var axis = axisInfo.axis;\n                if (coordSys.getAxis(axis.dim) === axis) {\n                    axisInfo.seriesModels.push(seriesModel);\n                    axisInfo.seriesDataCount == null && (axisInfo.seriesDataCount = 0);\n                    axisInfo.seriesDataCount += seriesModel.getData().count();\n                }\n            });\n\n        }, this);\n    }\n\n    /**\n     * For example:\n     * {\n     *     axisPointer: {\n     *         links: [{\n     *             xAxisIndex: [2, 4],\n     *             yAxisIndex: 'all'\n     *         }, {\n     *             xAxisId: ['a5', 'a7'],\n     *             xAxisName: 'xxx'\n     *         }]\n     *     }\n     * }\n     */\n    function getLinkGroupIndex(linksOption, axis) {\n        var axisModel = axis.model;\n        var dim = axis.dim;\n        for (var i = 0; i < linksOption.length; i++) {\n            var linkOption = linksOption[i] || {};\n            if (checkPropInLink(linkOption[dim + 'AxisId'], axisModel.id)\n                || checkPropInLink(linkOption[dim + 'AxisIndex'], axisModel.componentIndex)\n                || checkPropInLink(linkOption[dim + 'AxisName'], axisModel.name)\n            ) {\n                return i;\n            }\n        }\n    }\n\n    function checkPropInLink(linkPropValue, axisPropValue) {\n        return linkPropValue === 'all'\n            || (zrUtil.isArray(linkPropValue) && zrUtil.indexOf(linkPropValue, axisPropValue) >= 0)\n            || linkPropValue === axisPropValue;\n    }\n\n    helper.fixValue = function (axisModel) {\n        var axisInfo = helper.getAxisInfo(axisModel);\n        if (!axisInfo) {\n            return;\n        }\n\n        var axisPointerModel = axisInfo.axisPointerModel;\n        var scale = axisInfo.axis.scale;\n        var option = axisPointerModel.option;\n        var status = axisPointerModel.get('status');\n        var value = axisPointerModel.get('value');\n\n        // Parse init value for category and time axis.\n        if (value != null) {\n            value = scale.parse(value);\n        }\n\n        var useHandle = isHandleTrigger(axisPointerModel);\n        // If `handle` used, `axisPointer` will always be displayed, so value\n        // and status should be initialized.\n        if (status == null) {\n            option.status = useHandle ? 'show' : 'hide';\n        }\n\n        var extent = scale.getExtent().slice();\n        extent[0] > extent[1] && extent.reverse();\n\n        if (// Pick a value on axis when initializing.\n            value == null\n            // If both `handle` and `dataZoom` are used, value may be out of axis extent,\n            // where we should re-pick a value to keep `handle` displaying normally.\n            || value > extent[1]\n        ) {\n            // Make handle displayed on the end of the axis when init, which looks better.\n            value = extent[1];\n        }\n        if (value < extent[0]) {\n            value = extent[0];\n        }\n\n        option.value = value;\n\n        if (useHandle) {\n            option.status = axisInfo.axis.scale.isBlank() ? 'hide' : 'show';\n        }\n    };\n\n    helper.getAxisInfo = function (axisModel) {\n        var coordSysAxesInfo = (axisModel.ecModel.getComponent('axisPointer') || {}).coordSysAxesInfo;\n        return coordSysAxesInfo && coordSysAxesInfo.axesInfo[makeKey(axisModel)];\n    };\n\n    helper.getAxisPointerModel = function (axisModel) {\n        var axisInfo = helper.getAxisInfo(axisModel);\n        return axisInfo && axisInfo.axisPointerModel;\n    };\n\n    function isHandleTrigger(axisPointerModel) {\n        return !!axisPointerModel.get('handle.show');\n    }\n\n    /**\n     * @param {module:echarts/model/Model} model\n     * @return {string} unique key\n     */\n    var makeKey = helper.makeKey = function (model) {\n        return model.type + '||' + model.id;\n    };\n\n    module.exports = helper;\n\n\n\n/***/ }),\n\n/***/ \"S+o0\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\n    module.exports = __webpack_require__(\"eScH\").extend({\n\n        type: 'series.bar',\n\n        dependencies: ['grid', 'polar'],\n\n        brushSelector: 'rect'\n    });\n\n\n/***/ }),\n\n/***/ \"S2oc\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n/**\n * Only implements needed gestures for mobile.\n */\n\n\n    var eventUtil = __webpack_require__(\"kawL\");\n\n    var GestureMgr = function () {\n\n        /**\n         * @private\n         * @type {Array.<Object>}\n         */\n        this._track = [];\n    };\n\n    GestureMgr.prototype = {\n\n        constructor: GestureMgr,\n\n        recognize: function (event, target, root) {\n            this._doTrack(event, target, root);\n            return this._recognize(event);\n        },\n\n        clear: function () {\n            this._track.length = 0;\n            return this;\n        },\n\n        _doTrack: function (event, target, root) {\n            var touches = event.touches;\n\n            if (!touches) {\n                return;\n            }\n\n            var trackItem = {\n                points: [],\n                touches: [],\n                target: target,\n                event: event\n            };\n\n            for (var i = 0, len = touches.length; i < len; i++) {\n                var touch = touches[i];\n                var pos = eventUtil.clientToLocal(root, touch, {});\n                trackItem.points.push([pos.zrX, pos.zrY]);\n                trackItem.touches.push(touch);\n            }\n\n            this._track.push(trackItem);\n        },\n\n        _recognize: function (event) {\n            for (var eventName in recognizers) {\n                if (recognizers.hasOwnProperty(eventName)) {\n                    var gestureInfo = recognizers[eventName](this._track, event);\n                    if (gestureInfo) {\n                        return gestureInfo;\n                    }\n                }\n            }\n        }\n    };\n\n    function dist(pointPair) {\n        var dx = pointPair[1][0] - pointPair[0][0];\n        var dy = pointPair[1][1] - pointPair[0][1];\n\n        return Math.sqrt(dx * dx + dy * dy);\n    }\n\n    function center(pointPair) {\n        return [\n            (pointPair[0][0] + pointPair[1][0]) / 2,\n            (pointPair[0][1] + pointPair[1][1]) / 2\n        ];\n    }\n\n    var recognizers = {\n\n        pinch: function (track, event) {\n            var trackLen = track.length;\n\n            if (!trackLen) {\n                return;\n            }\n\n            var pinchEnd = (track[trackLen - 1] || {}).points;\n            var pinchPre = (track[trackLen - 2] || {}).points || pinchEnd;\n\n            if (pinchPre\n                && pinchPre.length > 1\n                && pinchEnd\n                && pinchEnd.length > 1\n            ) {\n                var pinchScale = dist(pinchEnd) / dist(pinchPre);\n                !isFinite(pinchScale) && (pinchScale = 1);\n\n                event.pinchScale = pinchScale;\n\n                var pinchCenter = center(pinchEnd);\n                event.pinchX = pinchCenter[0];\n                event.pinchY = pinchCenter[1];\n\n                return {\n                    type: 'pinch',\n                    target: track[0].target,\n                    event: event\n                };\n            }\n        }\n\n        // Only pinch currently.\n    };\n\n    module.exports = GestureMgr;\n\n\n\n/***/ }),\n\n/***/ \"SAoR\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\n    var axisDefault = __webpack_require__(\"8ig/\");\n    var zrUtil = __webpack_require__(\"nw1Z\");\n    var ComponentModel = __webpack_require__(\"wvll\");\n    var layout = __webpack_require__(\"zxuD\");\n\n    // FIXME axisType is fixed ?\n    var AXIS_TYPES = ['value', 'category', 'time', 'log'];\n\n    /**\n     * Generate sub axis model class\n     * @param {string} axisName 'x' 'y' 'radius' 'angle' 'parallel'\n     * @param {module:echarts/model/Component} BaseAxisModelClass\n     * @param {Function} axisTypeDefaulter\n     * @param {Object} [extraDefaultOption]\n     */\n    module.exports = function (axisName, BaseAxisModelClass, axisTypeDefaulter, extraDefaultOption) {\n\n        zrUtil.each(AXIS_TYPES, function (axisType) {\n\n            BaseAxisModelClass.extend({\n\n                type: axisName + 'Axis.' + axisType,\n\n                mergeDefaultAndTheme: function (option, ecModel) {\n                    var layoutMode = this.layoutMode;\n                    var inputPositionParams = layoutMode\n                        ? layout.getLayoutParams(option) : {};\n\n                    var themeModel = ecModel.getTheme();\n                    zrUtil.merge(option, themeModel.get(axisType + 'Axis'));\n                    zrUtil.merge(option, this.getDefaultOption());\n\n                    option.type = axisTypeDefaulter(axisName, option);\n\n                    if (layoutMode) {\n                        layout.mergeLayoutParam(option, inputPositionParams, layoutMode);\n                    }\n                },\n\n                defaultOption: zrUtil.mergeAll(\n                    [\n                        {},\n                        axisDefault[axisType + 'Axis'],\n                        extraDefaultOption\n                    ],\n                    true\n                )\n            });\n        });\n\n        ComponentModel.registerSubTypeDefaulter(\n            axisName + 'Axis',\n            zrUtil.curry(axisTypeDefaulter, axisName)\n        );\n    };\n\n\n/***/ }),\n\n/***/ \"SUqx\":\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * Data selectable mixin for chart series.\n * To eanble data select, option of series must have `selectedMode`.\n * And each data item will use `selected` to toggle itself selected status\n *\n * @module echarts/chart/helper/DataSelectable\n */\n\n\n    var zrUtil = __webpack_require__(\"nw1Z\");\n\n    module.exports = {\n\n        updateSelectedMap: function (targetList) {\n            this._selectTargetMap = zrUtil.reduce(targetList || [], function (targetMap, target) {\n                targetMap.set(target.name, target);\n                return targetMap;\n            }, zrUtil.createHashMap());\n        },\n        /**\n         * @param {string} name\n         */\n        // PENGING If selectedMode is null ?\n        select: function (name) {\n            var targetMap = this._selectTargetMap;\n            var target = targetMap.get(name);\n            var selectedMode = this.get('selectedMode');\n            if (selectedMode === 'single') {\n                targetMap.each(function (target) {\n                    target.selected = false;\n                });\n            }\n            target && (target.selected = true);\n        },\n\n        /**\n         * @param {string} name\n         */\n        unSelect: function (name) {\n            var target = this._selectTargetMap.get(name);\n            // var selectedMode = this.get('selectedMode');\n            // selectedMode !== 'single' && target && (target.selected = false);\n            target && (target.selected = false);\n        },\n\n        /**\n         * @param {string} name\n         */\n        toggleSelected: function (name) {\n            var target = this._selectTargetMap.get(name);\n            if (target != null) {\n                this[target.selected ? 'unSelect' : 'select'](name);\n                return target.selected;\n            }\n        },\n\n        /**\n         * @param {string} name\n         */\n        isSelected: function (name) {\n            var target = this._selectTargetMap.get(name);\n            return target && target.selected;\n        }\n    };\n\n\n/***/ }),\n\n/***/ \"SZ7R\":\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * @module echarts/component/toolbox/feature/DataView\n */\n\n\n\n    var zrUtil = __webpack_require__(\"nw1Z\");\n    var eventTool = __webpack_require__(\"kawL\");\n\n\n    var BLOCK_SPLITER = new Array(60).join('-');\n    var ITEM_SPLITER = '\\t';\n    /**\n     * Group series into two types\n     *  1. on category axis, like line, bar\n     *  2. others, like scatter, pie\n     * @param {module:echarts/model/Global} ecModel\n     * @return {Object}\n     * @inner\n     */\n    function groupSeries(ecModel) {\n        var seriesGroupByCategoryAxis = {};\n        var otherSeries = [];\n        var meta = [];\n        ecModel.eachRawSeries(function (seriesModel) {\n            var coordSys = seriesModel.coordinateSystem;\n\n            if (coordSys && (coordSys.type === 'cartesian2d' || coordSys.type === 'polar')) {\n                var baseAxis = coordSys.getBaseAxis();\n                if (baseAxis.type === 'category') {\n                    var key = baseAxis.dim + '_' + baseAxis.index;\n                    if (!seriesGroupByCategoryAxis[key]) {\n                        seriesGroupByCategoryAxis[key] = {\n                            categoryAxis: baseAxis,\n                            valueAxis: coordSys.getOtherAxis(baseAxis),\n                            series: []\n                        };\n                        meta.push({\n                            axisDim: baseAxis.dim,\n                            axisIndex: baseAxis.index\n                        });\n                    }\n                    seriesGroupByCategoryAxis[key].series.push(seriesModel);\n                }\n                else {\n                    otherSeries.push(seriesModel);\n                }\n            }\n            else {\n                otherSeries.push(seriesModel);\n            }\n        });\n\n        return {\n            seriesGroupByCategoryAxis: seriesGroupByCategoryAxis,\n            other: otherSeries,\n            meta: meta\n        };\n    }\n\n    /**\n     * Assemble content of series on cateogory axis\n     * @param {Array.<module:echarts/model/Series>} series\n     * @return {string}\n     * @inner\n     */\n    function assembleSeriesWithCategoryAxis(series) {\n        var tables = [];\n        zrUtil.each(series, function (group, key) {\n            var categoryAxis = group.categoryAxis;\n            var valueAxis = group.valueAxis;\n            var valueAxisDim = valueAxis.dim;\n\n            var headers = [' '].concat(zrUtil.map(group.series, function (series) {\n                return series.name;\n            }));\n            var columns = [categoryAxis.model.getCategories()];\n            zrUtil.each(group.series, function (series) {\n                columns.push(series.getRawData().mapArray(valueAxisDim, function (val) {\n                    return val;\n                }));\n            });\n            // Assemble table content\n            var lines = [headers.join(ITEM_SPLITER)];\n            for (var i = 0; i < columns[0].length; i++) {\n                var items = [];\n                for (var j = 0; j < columns.length; j++) {\n                    items.push(columns[j][i]);\n                }\n                lines.push(items.join(ITEM_SPLITER));\n            }\n            tables.push(lines.join('\\n'));\n        });\n        return tables.join('\\n\\n' +  BLOCK_SPLITER + '\\n\\n');\n    }\n\n    /**\n     * Assemble content of other series\n     * @param {Array.<module:echarts/model/Series>} series\n     * @return {string}\n     * @inner\n     */\n    function assembleOtherSeries(series) {\n        return zrUtil.map(series, function (series) {\n            var data = series.getRawData();\n            var lines = [series.name];\n            var vals = [];\n            data.each(data.dimensions, function () {\n                var argLen = arguments.length;\n                var dataIndex = arguments[argLen - 1];\n                var name = data.getName(dataIndex);\n                for (var i = 0; i < argLen - 1; i++) {\n                    vals[i] = arguments[i];\n                }\n                lines.push((name ? (name + ITEM_SPLITER) : '') + vals.join(ITEM_SPLITER));\n            });\n            return lines.join('\\n');\n        }).join('\\n\\n' + BLOCK_SPLITER + '\\n\\n');\n    }\n\n    /**\n     * @param {module:echarts/model/Global}\n     * @return {string}\n     * @inner\n     */\n    function getContentFromModel(ecModel) {\n\n        var result = groupSeries(ecModel);\n\n        return {\n            value: zrUtil.filter([\n                    assembleSeriesWithCategoryAxis(result.seriesGroupByCategoryAxis),\n                    assembleOtherSeries(result.other)\n                ], function (str) {\n                    return str.replace(/[\\n\\t\\s]/g, '');\n                }).join('\\n\\n' + BLOCK_SPLITER + '\\n\\n'),\n\n            meta: result.meta\n        };\n    }\n\n\n    function trim(str) {\n        return str.replace(/^\\s\\s*/, '').replace(/\\s\\s*$/, '');\n    }\n    /**\n     * If a block is tsv format\n     */\n    function isTSVFormat(block) {\n        // Simple method to find out if a block is tsv format\n        var firstLine = block.slice(0, block.indexOf('\\n'));\n        if (firstLine.indexOf(ITEM_SPLITER) >= 0) {\n            return true;\n        }\n    }\n\n    var itemSplitRegex = new RegExp('[' + ITEM_SPLITER + ']+', 'g');\n    /**\n     * @param {string} tsv\n     * @return {Array.<Object>}\n     */\n    function parseTSVContents(tsv) {\n        var tsvLines = tsv.split(/\\n+/g);\n        var headers = trim(tsvLines.shift()).split(itemSplitRegex);\n\n        var categories = [];\n        var series = zrUtil.map(headers, function (header) {\n            return {\n                name: header,\n                data: []\n            };\n        });\n        for (var i = 0; i < tsvLines.length; i++) {\n            var items = trim(tsvLines[i]).split(itemSplitRegex);\n            categories.push(items.shift());\n            for (var j = 0; j < items.length; j++) {\n                series[j] && (series[j].data[i] = items[j]);\n            }\n        }\n        return {\n            series: series,\n            categories: categories\n        };\n    }\n\n    /**\n     * @param {string} str\n     * @return {Array.<Object>}\n     * @inner\n     */\n    function parseListContents(str) {\n        var lines = str.split(/\\n+/g);\n        var seriesName = trim(lines.shift());\n\n        var data = [];\n        for (var i = 0; i < lines.length; i++) {\n            var items = trim(lines[i]).split(itemSplitRegex);\n            var name = '';\n            var value;\n            var hasName = false;\n            if (isNaN(items[0])) { // First item is name\n                hasName = true;\n                name = items[0];\n                items = items.slice(1);\n                data[i] = {\n                    name: name,\n                    value: []\n                };\n                value = data[i].value;\n            }\n            else {\n                value = data[i] = [];\n            }\n            for (var j = 0; j < items.length; j++) {\n                value.push(+items[j]);\n            }\n            if (value.length === 1) {\n                hasName ? (data[i].value = value[0]) : (data[i] = value[0]);\n            }\n        }\n\n        return {\n            name: seriesName,\n            data: data\n        };\n    }\n\n    /**\n     * @param {string} str\n     * @param {Array.<Object>} blockMetaList\n     * @return {Object}\n     * @inner\n     */\n    function parseContents(str, blockMetaList) {\n        var blocks = str.split(new RegExp('\\n*' + BLOCK_SPLITER + '\\n*', 'g'));\n        var newOption = {\n            series: []\n        };\n        zrUtil.each(blocks, function (block, idx) {\n            if (isTSVFormat(block)) {\n                var result = parseTSVContents(block);\n                var blockMeta = blockMetaList[idx];\n                var axisKey = blockMeta.axisDim + 'Axis';\n\n                if (blockMeta) {\n                    newOption[axisKey] = newOption[axisKey] || [];\n                    newOption[axisKey][blockMeta.axisIndex] = {\n                        data: result.categories\n                    };\n                    newOption.series = newOption.series.concat(result.series);\n                }\n            }\n            else {\n                var result = parseListContents(block);\n                newOption.series.push(result);\n            }\n        });\n        return newOption;\n    }\n\n    /**\n     * @alias {module:echarts/component/toolbox/feature/DataView}\n     * @constructor\n     * @param {module:echarts/model/Model} model\n     */\n    function DataView(model) {\n\n        this._dom = null;\n\n        this.model = model;\n    }\n\n    DataView.defaultOption = {\n        show: true,\n        readOnly: false,\n        optionToContent: null,\n        contentToOption: null,\n\n        icon: 'M17.5,17.3H33 M17.5,17.3H33 M45.4,29.5h-28 M11.5,2v56H51V14.8L38.4,2H11.5z M38.4,2.2v12.7H51 M45.4,41.7h-28',\n        title: '数据视图',\n        lang: ['数据视图', '关闭', '刷新'],\n        backgroundColor: '#fff',\n        textColor: '#000',\n        textareaColor: '#fff',\n        textareaBorderColor: '#333',\n        buttonColor: '#c23531',\n        buttonTextColor: '#fff'\n    };\n\n    DataView.prototype.onclick = function (ecModel, api) {\n        var container = api.getDom();\n        var model = this.model;\n        if (this._dom) {\n            container.removeChild(this._dom);\n        }\n        var root = document.createElement('div');\n        root.style.cssText = 'position:absolute;left:5px;top:5px;bottom:5px;right:5px;';\n        root.style.backgroundColor = model.get('backgroundColor') || '#fff';\n\n        // Create elements\n        var header = document.createElement('h4');\n        var lang = model.get('lang') || [];\n        header.innerHTML = lang[0] || model.get('title');\n        header.style.cssText = 'margin: 10px 20px;';\n        header.style.color = model.get('textColor');\n\n        var viewMain = document.createElement('div');\n        var textarea = document.createElement('textarea');\n        viewMain.style.cssText = 'display:block;width:100%;overflow:auto;';\n\n        var optionToContent = model.get('optionToContent');\n        var contentToOption = model.get('contentToOption');\n        var result = getContentFromModel(ecModel);\n        if (typeof optionToContent === 'function') {\n            var htmlOrDom = optionToContent(api.getOption());\n            if (typeof htmlOrDom === 'string') {\n                viewMain.innerHTML = htmlOrDom;\n            }\n            else if (zrUtil.isDom(htmlOrDom)) {\n                viewMain.appendChild(htmlOrDom);\n            }\n        }\n        else {\n            // Use default textarea\n            viewMain.appendChild(textarea);\n            textarea.readOnly = model.get('readOnly');\n            textarea.style.cssText = 'width:100%;height:100%;font-family:monospace;font-size:14px;line-height:1.6rem;';\n            textarea.style.color = model.get('textColor');\n            textarea.style.borderColor = model.get('textareaBorderColor');\n            textarea.style.backgroundColor = model.get('textareaColor');\n            textarea.value = result.value;\n        }\n\n        var blockMetaList = result.meta;\n\n        var buttonContainer = document.createElement('div');\n        buttonContainer.style.cssText = 'position:absolute;bottom:0;left:0;right:0;';\n\n        var buttonStyle = 'float:right;margin-right:20px;border:none;'\n            + 'cursor:pointer;padding:2px 5px;font-size:12px;border-radius:3px';\n        var closeButton = document.createElement('div');\n        var refreshButton = document.createElement('div');\n\n        buttonStyle += ';background-color:' + model.get('buttonColor');\n        buttonStyle += ';color:' + model.get('buttonTextColor');\n\n        var self = this;\n\n        function close() {\n            container.removeChild(root);\n            self._dom = null;\n        }\n        eventTool.addEventListener(closeButton, 'click', close);\n\n        eventTool.addEventListener(refreshButton, 'click', function () {\n            var newOption;\n            try {\n                if (typeof contentToOption === 'function') {\n                    newOption = contentToOption(viewMain, api.getOption());\n                }\n                else {\n                    newOption = parseContents(textarea.value, blockMetaList);\n                }\n            }\n            catch (e) {\n                close();\n                throw new Error('Data view format error ' + e);\n            }\n            if (newOption) {\n                api.dispatchAction({\n                    type: 'changeDataView',\n                    newOption: newOption\n                });\n            }\n\n            close();\n        });\n\n        closeButton.innerHTML = lang[1];\n        refreshButton.innerHTML = lang[2];\n        refreshButton.style.cssText = buttonStyle;\n        closeButton.style.cssText = buttonStyle;\n\n        !model.get('readOnly') && buttonContainer.appendChild(refreshButton);\n        buttonContainer.appendChild(closeButton);\n\n        // http://stackoverflow.com/questions/6637341/use-tab-to-indent-in-textarea\n        eventTool.addEventListener(textarea, 'keydown', function (e) {\n            if ((e.keyCode || e.which) === 9) {\n                // get caret position/selection\n                var val = this.value;\n                var start = this.selectionStart;\n                var end = this.selectionEnd;\n\n                // set textarea value to: text before caret + tab + text after caret\n                this.value = val.substring(0, start) + ITEM_SPLITER + val.substring(end);\n\n                // put caret at right position again\n                this.selectionStart = this.selectionEnd = start + 1;\n\n                // prevent the focus lose\n                eventTool.stop(e);\n            }\n        });\n\n        root.appendChild(header);\n        root.appendChild(viewMain);\n        root.appendChild(buttonContainer);\n\n        viewMain.style.height = (container.clientHeight - 80) + 'px';\n\n        container.appendChild(root);\n        this._dom = root;\n    };\n\n    DataView.prototype.remove = function (ecModel, api) {\n        this._dom && api.getDom().removeChild(this._dom);\n    };\n\n    DataView.prototype.dispose = function (ecModel, api) {\n        this.remove(ecModel, api);\n    };\n\n    /**\n     * @inner\n     */\n    function tryMergeDataOption(newData, originalData) {\n        return zrUtil.map(newData, function (newVal, idx) {\n            var original = originalData && originalData[idx];\n            if (zrUtil.isObject(original) && !zrUtil.isArray(original)) {\n                if (zrUtil.isObject(newVal) && !zrUtil.isArray(newVal)) {\n                    newVal = newVal.value;\n                }\n                // Original data has option\n                return zrUtil.defaults({\n                    value: newVal\n                }, original);\n            }\n            else {\n                return newVal;\n            }\n        });\n    }\n\n    __webpack_require__(\"M5+E\").register('dataView', DataView);\n\n    __webpack_require__(\"Cwwa\").registerAction({\n        type: 'changeDataView',\n        event: 'dataViewChanged',\n        update: 'prepareAndUpdate'\n    }, function (payload, ecModel) {\n        var newSeriesOptList = [];\n        zrUtil.each(payload.newOption.series, function (seriesOpt) {\n            var seriesModel = ecModel.getSeriesByName(seriesOpt.name)[0];\n            if (!seriesModel) {\n                // New created series\n                // Geuss the series type\n                newSeriesOptList.push(zrUtil.extend({\n                    // Default is scatter\n                    type: 'scatter'\n                }, seriesOpt));\n            }\n            else {\n                var originalData = seriesModel.get('data');\n                newSeriesOptList.push({\n                    name: seriesOpt.name,\n                    data: tryMergeDataOption(seriesOpt.data, originalData)\n                });\n            }\n        });\n\n        ecModel.mergeOption(zrUtil.defaults({\n            series: newSeriesOptList\n        }, payload.newOption));\n    });\n\n    module.exports = DataView;\n\n\n/***/ }),\n\n/***/ \"T3k4\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\n    var Gradient = __webpack_require__(\"0iiL\");\n    module.exports = function (ecModel) {\n        function encodeColor(seriesModel) {\n            var colorAccessPath = (seriesModel.visualColorAccessPath || 'itemStyle.normal.color').split('.');\n            var data = seriesModel.getData();\n            var color = seriesModel.get(colorAccessPath) // Set in itemStyle\n                || seriesModel.getColorFromPalette(seriesModel.get('name'));  // Default color\n\n            // FIXME Set color function or use the platte color\n            data.setVisual('color', color);\n\n            // Only visible series has each data be visual encoded\n            if (!ecModel.isSeriesFiltered(seriesModel)) {\n                if (typeof color === 'function' && !(color instanceof Gradient)) {\n                    data.each(function (idx) {\n                        data.setItemVisual(\n                            idx, 'color', color(seriesModel.getDataParams(idx))\n                        );\n                    });\n                }\n\n                // itemStyle in each data item\n                data.each(function (idx) {\n                    var itemModel = data.getItemModel(idx);\n                    var color = itemModel.get(colorAccessPath, true);\n                    if (color != null) {\n                        data.setItemVisual(idx, 'color', color);\n                    }\n                });\n            }\n        }\n        ecModel.eachRawSeries(encodeColor);\n    };\n\n\n/***/ }),\n\n/***/ \"TQiH\":\n/***/ (function(module, exports) {\n\n// https://github.com/mziccard/node-timsort\n\n    var DEFAULT_MIN_MERGE = 32;\n\n    var DEFAULT_MIN_GALLOPING = 7;\n\n    var DEFAULT_TMP_STORAGE_LENGTH = 256;\n\n    function minRunLength(n) {\n        var r = 0;\n\n        while (n >= DEFAULT_MIN_MERGE) {\n            r |= n & 1;\n            n >>= 1;\n        }\n\n        return n + r;\n    }\n\n    function makeAscendingRun(array, lo, hi, compare) {\n        var runHi = lo + 1;\n\n        if (runHi === hi) {\n            return 1;\n        }\n\n        if (compare(array[runHi++], array[lo]) < 0) {\n            while (runHi < hi && compare(array[runHi], array[runHi - 1]) < 0) {\n                runHi++;\n            }\n\n            reverseRun(array, lo, runHi);\n        }\n        else {\n            while (runHi < hi && compare(array[runHi], array[runHi - 1]) >= 0) {\n                runHi++;\n            }\n        }\n\n        return runHi - lo;\n    }\n\n    function reverseRun(array, lo, hi) {\n        hi--;\n\n        while (lo < hi) {\n            var t = array[lo];\n            array[lo++] = array[hi];\n            array[hi--] = t;\n        }\n    }\n\n    function binaryInsertionSort(array, lo, hi, start, compare) {\n        if (start === lo) {\n            start++;\n        }\n\n        for (; start < hi; start++) {\n            var pivot = array[start];\n\n            var left = lo;\n            var right = start;\n            var mid;\n\n            while (left < right) {\n                mid = left + right >>> 1;\n\n                if (compare(pivot, array[mid]) < 0) {\n                    right = mid;\n                }\n                else {\n                    left = mid + 1;\n                }\n            }\n\n            var n = start - left;\n\n            switch (n) {\n                case 3:\n                    array[left + 3] = array[left + 2];\n\n                case 2:\n                    array[left + 2] = array[left + 1];\n\n                case 1:\n                    array[left + 1] = array[left];\n                    break;\n                default:\n                    while (n > 0) {\n                        array[left + n] = array[left + n - 1];\n                        n--;\n                    }\n            }\n\n            array[left] = pivot;\n        }\n    }\n\n    function gallopLeft(value, array, start, length, hint, compare) {\n        var lastOffset = 0;\n        var maxOffset = 0;\n        var offset = 1;\n\n        if (compare(value, array[start + hint]) > 0) {\n            maxOffset = length - hint;\n\n            while (offset < maxOffset && compare(value, array[start + hint + offset]) > 0) {\n                lastOffset = offset;\n                offset = (offset << 1) + 1;\n\n                if (offset <= 0) {\n                    offset = maxOffset;\n                }\n            }\n\n            if (offset > maxOffset) {\n                offset = maxOffset;\n            }\n\n            lastOffset += hint;\n            offset += hint;\n        }\n        else {\n            maxOffset = hint + 1;\n            while (offset < maxOffset && compare(value, array[start + hint - offset]) <= 0) {\n                lastOffset = offset;\n                offset = (offset << 1) + 1;\n\n                if (offset <= 0) {\n                    offset = maxOffset;\n                }\n            }\n            if (offset > maxOffset) {\n                offset = maxOffset;\n            }\n\n            var tmp = lastOffset;\n            lastOffset = hint - offset;\n            offset = hint - tmp;\n        }\n\n        lastOffset++;\n        while (lastOffset < offset) {\n            var m = lastOffset + (offset - lastOffset >>> 1);\n\n            if (compare(value, array[start + m]) > 0) {\n                lastOffset = m + 1;\n            }\n            else {\n                offset = m;\n            }\n        }\n        return offset;\n    }\n\n    function gallopRight(value, array, start, length, hint, compare) {\n        var lastOffset = 0;\n        var maxOffset = 0;\n        var offset = 1;\n\n        if (compare(value, array[start + hint]) < 0) {\n            maxOffset = hint + 1;\n\n            while (offset < maxOffset && compare(value, array[start + hint - offset]) < 0) {\n                lastOffset = offset;\n                offset = (offset << 1) + 1;\n\n                if (offset <= 0) {\n                    offset = maxOffset;\n                }\n            }\n\n            if (offset > maxOffset) {\n                offset = maxOffset;\n            }\n\n            var tmp = lastOffset;\n            lastOffset = hint - offset;\n            offset = hint - tmp;\n        }\n        else {\n            maxOffset = length - hint;\n\n            while (offset < maxOffset && compare(value, array[start + hint + offset]) >= 0) {\n                lastOffset = offset;\n                offset = (offset << 1) + 1;\n\n                if (offset <= 0) {\n                    offset = maxOffset;\n                }\n            }\n\n            if (offset > maxOffset) {\n                offset = maxOffset;\n            }\n\n            lastOffset += hint;\n            offset += hint;\n        }\n\n        lastOffset++;\n\n        while (lastOffset < offset) {\n            var m = lastOffset + (offset - lastOffset >>> 1);\n\n            if (compare(value, array[start + m]) < 0) {\n                offset = m;\n            }\n            else {\n                lastOffset = m + 1;\n            }\n        }\n\n        return offset;\n    }\n\n    function TimSort(array, compare) {\n        var minGallop = DEFAULT_MIN_GALLOPING;\n        var length = 0;\n        var tmpStorageLength = DEFAULT_TMP_STORAGE_LENGTH;\n        var stackLength = 0;\n        var runStart;\n        var runLength;\n        var stackSize = 0;\n\n        length = array.length;\n\n        if (length < 2 * DEFAULT_TMP_STORAGE_LENGTH) {\n            tmpStorageLength = length >>> 1;\n        }\n\n        var tmp = [];\n\n        stackLength = length < 120 ? 5 : length < 1542 ? 10 : length < 119151 ? 19 : 40;\n\n        runStart = [];\n        runLength = [];\n\n        function pushRun(_runStart, _runLength) {\n            runStart[stackSize] = _runStart;\n            runLength[stackSize] = _runLength;\n            stackSize += 1;\n        }\n\n        function mergeRuns() {\n            while (stackSize > 1) {\n                var n = stackSize - 2;\n\n                if (n >= 1 && runLength[n - 1] <= runLength[n] + runLength[n + 1] || n >= 2 && runLength[n - 2] <= runLength[n] + runLength[n - 1]) {\n                    if (runLength[n - 1] < runLength[n + 1]) {\n                        n--;\n                    }\n                }\n                else if (runLength[n] > runLength[n + 1]) {\n                    break;\n                }\n                mergeAt(n);\n            }\n        }\n\n        function forceMergeRuns() {\n            while (stackSize > 1) {\n                var n = stackSize - 2;\n\n                if (n > 0 && runLength[n - 1] < runLength[n + 1]) {\n                    n--;\n                }\n\n                mergeAt(n);\n            }\n        }\n\n        function mergeAt(i) {\n            var start1 = runStart[i];\n            var length1 = runLength[i];\n            var start2 = runStart[i + 1];\n            var length2 = runLength[i + 1];\n\n            runLength[i] = length1 + length2;\n\n            if (i === stackSize - 3) {\n                runStart[i + 1] = runStart[i + 2];\n                runLength[i + 1] = runLength[i + 2];\n            }\n\n            stackSize--;\n\n            var k = gallopRight(array[start2], array, start1, length1, 0, compare);\n            start1 += k;\n            length1 -= k;\n\n            if (length1 === 0) {\n                return;\n            }\n\n            length2 = gallopLeft(array[start1 + length1 - 1], array, start2, length2, length2 - 1, compare);\n\n            if (length2 === 0) {\n                return;\n            }\n\n            if (length1 <= length2) {\n                mergeLow(start1, length1, start2, length2);\n            }\n            else {\n                mergeHigh(start1, length1, start2, length2);\n            }\n        }\n\n        function mergeLow(start1, length1, start2, length2) {\n            var i = 0;\n\n            for (i = 0; i < length1; i++) {\n                tmp[i] = array[start1 + i];\n            }\n\n            var cursor1 = 0;\n            var cursor2 = start2;\n            var dest = start1;\n\n            array[dest++] = array[cursor2++];\n\n            if (--length2 === 0) {\n                for (i = 0; i < length1; i++) {\n                    array[dest + i] = tmp[cursor1 + i];\n                }\n                return;\n            }\n\n            if (length1 === 1) {\n                for (i = 0; i < length2; i++) {\n                    array[dest + i] = array[cursor2 + i];\n                }\n                array[dest + length2] = tmp[cursor1];\n                return;\n            }\n\n            var _minGallop = minGallop;\n            var count1, count2, exit;\n\n            while (1) {\n                count1 = 0;\n                count2 = 0;\n                exit = false;\n\n                do {\n                    if (compare(array[cursor2], tmp[cursor1]) < 0) {\n                        array[dest++] = array[cursor2++];\n                        count2++;\n                        count1 = 0;\n\n                        if (--length2 === 0) {\n                            exit = true;\n                            break;\n                        }\n                    }\n                    else {\n                        array[dest++] = tmp[cursor1++];\n                        count1++;\n                        count2 = 0;\n                        if (--length1 === 1) {\n                            exit = true;\n                            break;\n                        }\n                    }\n                } while ((count1 | count2) < _minGallop);\n\n                if (exit) {\n                    break;\n                }\n\n                do {\n                    count1 = gallopRight(array[cursor2], tmp, cursor1, length1, 0, compare);\n\n                    if (count1 !== 0) {\n                        for (i = 0; i < count1; i++) {\n                            array[dest + i] = tmp[cursor1 + i];\n                        }\n\n                        dest += count1;\n                        cursor1 += count1;\n                        length1 -= count1;\n                        if (length1 <= 1) {\n                            exit = true;\n                            break;\n                        }\n                    }\n\n                    array[dest++] = array[cursor2++];\n\n                    if (--length2 === 0) {\n                        exit = true;\n                        break;\n                    }\n\n                    count2 = gallopLeft(tmp[cursor1], array, cursor2, length2, 0, compare);\n\n                    if (count2 !== 0) {\n                        for (i = 0; i < count2; i++) {\n                            array[dest + i] = array[cursor2 + i];\n                        }\n\n                        dest += count2;\n                        cursor2 += count2;\n                        length2 -= count2;\n\n                        if (length2 === 0) {\n                            exit = true;\n                            break;\n                        }\n                    }\n                    array[dest++] = tmp[cursor1++];\n\n                    if (--length1 === 1) {\n                        exit = true;\n                        break;\n                    }\n\n                    _minGallop--;\n                } while (count1 >= DEFAULT_MIN_GALLOPING || count2 >= DEFAULT_MIN_GALLOPING);\n\n                if (exit) {\n                    break;\n                }\n\n                if (_minGallop < 0) {\n                    _minGallop = 0;\n                }\n\n                _minGallop += 2;\n            }\n\n            minGallop = _minGallop;\n\n            minGallop < 1 && (minGallop = 1);\n\n            if (length1 === 1) {\n                for (i = 0; i < length2; i++) {\n                    array[dest + i] = array[cursor2 + i];\n                }\n                array[dest + length2] = tmp[cursor1];\n            }\n            else if (length1 === 0) {\n                throw new Error();\n                // throw new Error('mergeLow preconditions were not respected');\n            }\n            else {\n                for (i = 0; i < length1; i++) {\n                    array[dest + i] = tmp[cursor1 + i];\n                }\n            }\n        }\n\n        function mergeHigh (start1, length1, start2, length2) {\n            var i = 0;\n\n            for (i = 0; i < length2; i++) {\n                tmp[i] = array[start2 + i];\n            }\n\n            var cursor1 = start1 + length1 - 1;\n            var cursor2 = length2 - 1;\n            var dest = start2 + length2 - 1;\n            var customCursor = 0;\n            var customDest = 0;\n\n            array[dest--] = array[cursor1--];\n\n            if (--length1 === 0) {\n                customCursor = dest - (length2 - 1);\n\n                for (i = 0; i < length2; i++) {\n                    array[customCursor + i] = tmp[i];\n                }\n\n                return;\n            }\n\n            if (length2 === 1) {\n                dest -= length1;\n                cursor1 -= length1;\n                customDest = dest + 1;\n                customCursor = cursor1 + 1;\n\n                for (i = length1 - 1; i >= 0; i--) {\n                    array[customDest + i] = array[customCursor + i];\n                }\n\n                array[dest] = tmp[cursor2];\n                return;\n            }\n\n            var _minGallop = minGallop;\n\n            while (true) {\n                var count1 = 0;\n                var count2 = 0;\n                var exit = false;\n\n                do {\n                    if (compare(tmp[cursor2], array[cursor1]) < 0) {\n                        array[dest--] = array[cursor1--];\n                        count1++;\n                        count2 = 0;\n                        if (--length1 === 0) {\n                            exit = true;\n                            break;\n                        }\n                    }\n                    else {\n                        array[dest--] = tmp[cursor2--];\n                        count2++;\n                        count1 = 0;\n                        if (--length2 === 1) {\n                            exit = true;\n                            break;\n                        }\n                    }\n                } while ((count1 | count2) < _minGallop);\n\n                if (exit) {\n                    break;\n                }\n\n                do {\n                    count1 = length1 - gallopRight(tmp[cursor2], array, start1, length1, length1 - 1, compare);\n\n                    if (count1 !== 0) {\n                        dest -= count1;\n                        cursor1 -= count1;\n                        length1 -= count1;\n                        customDest = dest + 1;\n                        customCursor = cursor1 + 1;\n\n                        for (i = count1 - 1; i >= 0; i--) {\n                            array[customDest + i] = array[customCursor + i];\n                        }\n\n                        if (length1 === 0) {\n                            exit = true;\n                            break;\n                        }\n                    }\n\n                    array[dest--] = tmp[cursor2--];\n\n                    if (--length2 === 1) {\n                        exit = true;\n                        break;\n                    }\n\n                    count2 = length2 - gallopLeft(array[cursor1], tmp, 0, length2, length2 - 1, compare);\n\n                    if (count2 !== 0) {\n                        dest -= count2;\n                        cursor2 -= count2;\n                        length2 -= count2;\n                        customDest = dest + 1;\n                        customCursor = cursor2 + 1;\n\n                        for (i = 0; i < count2; i++) {\n                            array[customDest + i] = tmp[customCursor + i];\n                        }\n\n                        if (length2 <= 1) {\n                            exit = true;\n                            break;\n                        }\n                    }\n\n                    array[dest--] = array[cursor1--];\n\n                    if (--length1 === 0) {\n                        exit = true;\n                        break;\n                    }\n\n                    _minGallop--;\n                } while (count1 >= DEFAULT_MIN_GALLOPING || count2 >= DEFAULT_MIN_GALLOPING);\n\n                if (exit) {\n                    break;\n                }\n\n                if (_minGallop < 0) {\n                    _minGallop = 0;\n                }\n\n                _minGallop += 2;\n            }\n\n            minGallop = _minGallop;\n\n            if (minGallop < 1) {\n                minGallop = 1;\n            }\n\n            if (length2 === 1) {\n                dest -= length1;\n                cursor1 -= length1;\n                customDest = dest + 1;\n                customCursor = cursor1 + 1;\n\n                for (i = length1 - 1; i >= 0; i--) {\n                    array[customDest + i] = array[customCursor + i];\n                }\n\n                array[dest] = tmp[cursor2];\n            }\n            else if (length2 === 0) {\n                throw new Error();\n                // throw new Error('mergeHigh preconditions were not respected');\n            }\n            else {\n                customCursor = dest - (length2 - 1);\n                for (i = 0; i < length2; i++) {\n                    array[customCursor + i] = tmp[i];\n                }\n            }\n        }\n\n        this.mergeRuns = mergeRuns;\n        this.forceMergeRuns = forceMergeRuns;\n        this.pushRun = pushRun;\n    }\n\n    function sort(array, compare, lo, hi) {\n        if (!lo) {\n            lo = 0;\n        }\n        if (!hi) {\n            hi = array.length;\n        }\n\n        var remaining = hi - lo;\n\n        if (remaining < 2) {\n            return;\n        }\n\n        var runLength = 0;\n\n        if (remaining < DEFAULT_MIN_MERGE) {\n            runLength = makeAscendingRun(array, lo, hi, compare);\n            binaryInsertionSort(array, lo, hi, lo + runLength, compare);\n            return;\n        }\n\n        var ts = new TimSort(array, compare);\n\n        var minRun = minRunLength(remaining);\n\n        do {\n            runLength = makeAscendingRun(array, lo, hi, compare);\n            if (runLength < minRun) {\n                var force = remaining;\n                if (force > minRun) {\n                    force = minRun;\n                }\n\n                binaryInsertionSort(array, lo, lo + force, lo + runLength, compare);\n                runLength = force;\n            }\n\n            ts.pushRun(lo, runLength);\n            ts.mergeRuns();\n\n            remaining -= runLength;\n            lo += runLength;\n        } while (remaining !== 0);\n\n        ts.forceMergeRuns();\n    }\n\n    module.exports = sort;\n\n\n/***/ }),\n\n/***/ \"Tpbs\":\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * // Scale class management\n * @module echarts/scale/Scale\n */\n\n\n    var clazzUtil = __webpack_require__(\"fzq8\");\n\n    /**\n     * @param {Object} [setting]\n     */\n    function Scale(setting) {\n        this._setting = setting || {};\n\n        /**\n         * Extent\n         * @type {Array.<number>}\n         * @protected\n         */\n        this._extent = [Infinity, -Infinity];\n\n        /**\n         * Step is calculated in adjustExtent\n         * @type {Array.<number>}\n         * @protected\n         */\n        this._interval = 0;\n\n        this.init && this.init.apply(this, arguments);\n    }\n\n    var scaleProto = Scale.prototype;\n\n    /**\n     * Parse input val to valid inner number.\n     * @param {*} val\n     * @return {number}\n     */\n    scaleProto.parse = function (val) {\n        // Notice: This would be a trap here, If the implementation\n        // of this method depends on extent, and this method is used\n        // before extent set (like in dataZoom), it would be wrong.\n        // Nevertheless, parse does not depend on extent generally.\n        return val;\n    };\n\n    scaleProto.getSetting = function (name) {\n        return this._setting[name];\n    };\n\n    scaleProto.contain = function (val) {\n        var extent = this._extent;\n        return val >= extent[0] && val <= extent[1];\n    };\n\n    /**\n     * Normalize value to linear [0, 1], return 0.5 if extent span is 0\n     * @param {number} val\n     * @return {number}\n     */\n    scaleProto.normalize = function (val) {\n        var extent = this._extent;\n        if (extent[1] === extent[0]) {\n            return 0.5;\n        }\n        return (val - extent[0]) / (extent[1] - extent[0]);\n    };\n\n    /**\n     * Scale normalized value\n     * @param {number} val\n     * @return {number}\n     */\n    scaleProto.scale = function (val) {\n        var extent = this._extent;\n        return val * (extent[1] - extent[0]) + extent[0];\n    };\n\n    /**\n     * Set extent from data\n     * @param {Array.<number>} other\n     */\n    scaleProto.unionExtent = function (other) {\n        var extent = this._extent;\n        other[0] < extent[0] && (extent[0] = other[0]);\n        other[1] > extent[1] && (extent[1] = other[1]);\n        // not setExtent because in log axis it may transformed to power\n        // this.setExtent(extent[0], extent[1]);\n    };\n\n    /**\n     * Set extent from data\n     * @param {module:echarts/data/List} data\n     * @param {string} dim\n     */\n    scaleProto.unionExtentFromData = function (data, dim) {\n        this.unionExtent(data.getDataExtent(dim, true));\n    };\n\n    /**\n     * Get extent\n     * @return {Array.<number>}\n     */\n    scaleProto.getExtent = function () {\n        return this._extent.slice();\n    };\n\n    /**\n     * Set extent\n     * @param {number} start\n     * @param {number} end\n     */\n    scaleProto.setExtent = function (start, end) {\n        var thisExtent = this._extent;\n        if (!isNaN(start)) {\n            thisExtent[0] = start;\n        }\n        if (!isNaN(end)) {\n            thisExtent[1] = end;\n        }\n    };\n\n    /**\n     * @return {Array.<string>}\n     */\n    scaleProto.getTicksLabels = function () {\n        var labels = [];\n        var ticks = this.getTicks();\n        for (var i = 0; i < ticks.length; i++) {\n            labels.push(this.getLabel(ticks[i]));\n        }\n        return labels;\n    };\n\n    /**\n     * When axis extent depends on data and no data exists,\n     * axis ticks should not be drawn, which is named 'blank'.\n     */\n    scaleProto.isBlank = function () {\n        return this._isBlank;\n    },\n\n    /**\n     * When axis extent depends on data and no data exists,\n     * axis ticks should not be drawn, which is named 'blank'.\n     */\n    scaleProto.setBlank = function (isBlank) {\n        this._isBlank = isBlank;\n    };\n\n\n    clazzUtil.enableClassExtend(Scale);\n    clazzUtil.enableClassManagement(Scale, {\n        registerWhenExtend: true\n    });\n\n    module.exports = Scale;\n\n\n/***/ }),\n\n/***/ \"UFrj\":\n/***/ (function(module, exports) {\n\n// Pick color from palette for each data item.\n// Applicable for charts that require applying color palette\n// in data level (like pie, funnel, chord).\n\n\n    module.exports = function (seriesType, ecModel) {\n        // Pie and funnel may use diferrent scope\n        var paletteScope = {};\n        ecModel.eachRawSeriesByType(seriesType, function (seriesModel) {\n            var dataAll = seriesModel.getRawData();\n            var idxMap = {};\n            if (!ecModel.isSeriesFiltered(seriesModel)) {\n                var data = seriesModel.getData();\n                data.each(function (idx) {\n                    var rawIdx = data.getRawIndex(idx);\n                    idxMap[rawIdx] = idx;\n                });\n                dataAll.each(function (rawIdx) {\n                    var filteredIdx = idxMap[rawIdx];\n\n                    // If series.itemStyle.normal.color is a function. itemVisual may be encoded\n                    var singleDataColor = filteredIdx != null\n                        && data.getItemVisual(filteredIdx, 'color', true);\n\n                    if (!singleDataColor) {\n                        // FIXME Performance\n                        var itemModel = dataAll.getItemModel(rawIdx);\n                        var color = itemModel.get('itemStyle.normal.color')\n                            || seriesModel.getColorFromPalette(dataAll.getName(rawIdx), paletteScope);\n                        // Legend may use the visual info in data before processed\n                        dataAll.setItemVisual(rawIdx, 'color', color);\n\n                        // Data is not filtered\n                        if (filteredIdx != null) {\n                            data.setItemVisual(filteredIdx, 'color', color);\n                        }\n                    }\n                    else {\n                        // Set data all color for legend\n                        dataAll.setItemVisual(rawIdx, 'color', singleDataColor);\n                    }\n                });\n            }\n        });\n    };\n\n\n/***/ }),\n\n/***/ \"UqER\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\n    // List layout\n    var layout = __webpack_require__(\"zxuD\");\n    var formatUtil = __webpack_require__(\"4oXW\");\n    var graphic = __webpack_require__(\"y2WT\");\n\n    function positionGroup(group, model, api) {\n        layout.positionElement(\n            group, model.getBoxLayoutParams(),\n            {\n                width: api.getWidth(),\n                height: api.getHeight()\n            },\n            model.get('padding')\n        );\n    }\n\n    module.exports = {\n        /**\n         * Layout list like component.\n         * It will box layout each items in group of component and then position the whole group in the viewport\n         * @param {module:zrender/group/Group} group\n         * @param {module:echarts/model/Component} componentModel\n         * @param {module:echarts/ExtensionAPI}\n         */\n        layout: function (group, componentModel, api) {\n            var rect = layout.getLayoutRect(componentModel.getBoxLayoutParams(), {\n                width: api.getWidth(),\n                height: api.getHeight()\n            }, componentModel.get('padding'));\n            layout.box(\n                componentModel.get('orient'),\n                group,\n                componentModel.get('itemGap'),\n                rect.width,\n                rect.height\n            );\n\n            positionGroup(group, componentModel, api);\n        },\n\n        addBackground: function (group, componentModel) {\n            var padding = formatUtil.normalizeCssArray(\n                componentModel.get('padding')\n            );\n            var boundingRect = group.getBoundingRect();\n            var style = componentModel.getItemStyle(['color', 'opacity']);\n            style.fill = componentModel.get('backgroundColor');\n            var rect = new graphic.Rect({\n                shape: {\n                    x: boundingRect.x - padding[3],\n                    y: boundingRect.y - padding[0],\n                    width: boundingRect.width + padding[1] + padding[3],\n                    height: boundingRect.height + padding[0] + padding[2]\n                },\n                style: style,\n                silent: true,\n                z2: -1\n            });\n            graphic.subPixelOptimizeRect(rect);\n\n            group.add(rect);\n        }\n    };\n\n\n/***/ }),\n\n/***/ \"V+37\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n\n    var zrUtil = __webpack_require__(\"nw1Z\");\n\n    var Gradient = __webpack_require__(\"0iiL\");\n\n    /**\n     * x, y, x2, y2 are all percent from 0 to 1\n     * @param {number} [x=0]\n     * @param {number} [y=0]\n     * @param {number} [x2=1]\n     * @param {number} [y2=0]\n     * @param {Array.<Object>} colorStops\n     * @param {boolean} [globalCoord=false]\n     */\n    var LinearGradient = function (x, y, x2, y2, colorStops, globalCoord) {\n        // Should do nothing more in this constructor. Because gradient can be\n        // declard by `color: {type: 'linear', colorStops: ...}`, where\n        // this constructor will not be called.\n\n        this.x = x == null ? 0 : x;\n\n        this.y = y == null ? 0 : y;\n\n        this.x2 = x2 == null ? 1 : x2;\n\n        this.y2 = y2 == null ? 0 : y2;\n\n        // Can be cloned\n        this.type = 'linear';\n\n        // If use global coord\n        this.global = globalCoord || false;\n\n        Gradient.call(this, colorStops);\n    };\n\n    LinearGradient.prototype = {\n\n        constructor: LinearGradient\n    };\n\n    zrUtil.inherits(LinearGradient, Gradient);\n\n    module.exports = LinearGradient;\n\n\n/***/ }),\n\n/***/ \"V5JR\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n/**\n * 提供变换扩展\n * @module zrender/mixin/Transformable\n * @author pissang (https://www.github.com/pissang)\n */\n\n\n    var matrix = __webpack_require__(\"GjIh\");\n    var vector = __webpack_require__(\"Krco\");\n    var mIdentity = matrix.identity;\n\n    var EPSILON = 5e-5;\n\n    function isNotAroundZero(val) {\n        return val > EPSILON || val < -EPSILON;\n    }\n\n    /**\n     * @alias module:zrender/mixin/Transformable\n     * @constructor\n     */\n    var Transformable = function (opts) {\n        opts = opts || {};\n        // If there are no given position, rotation, scale\n        if (!opts.position) {\n            /**\n             * 平移\n             * @type {Array.<number>}\n             * @default [0, 0]\n             */\n            this.position = [0, 0];\n        }\n        if (opts.rotation == null) {\n            /**\n             * 旋转\n             * @type {Array.<number>}\n             * @default 0\n             */\n            this.rotation = 0;\n        }\n        if (!opts.scale) {\n            /**\n             * 缩放\n             * @type {Array.<number>}\n             * @default [1, 1]\n             */\n            this.scale = [1, 1];\n        }\n        /**\n         * 旋转和缩放的原点\n         * @type {Array.<number>}\n         * @default null\n         */\n        this.origin = this.origin || null;\n    };\n\n    var transformableProto = Transformable.prototype;\n    transformableProto.transform = null;\n\n    /**\n     * 判断是否需要有坐标变换\n     * 如果有坐标变换, 则从position, rotation, scale以及父节点的transform计算出自身的transform矩阵\n     */\n    transformableProto.needLocalTransform = function () {\n        return isNotAroundZero(this.rotation)\n            || isNotAroundZero(this.position[0])\n            || isNotAroundZero(this.position[1])\n            || isNotAroundZero(this.scale[0] - 1)\n            || isNotAroundZero(this.scale[1] - 1);\n    };\n\n    transformableProto.updateTransform = function () {\n        var parent = this.parent;\n        var parentHasTransform = parent && parent.transform;\n        var needLocalTransform = this.needLocalTransform();\n\n        var m = this.transform;\n        if (!(needLocalTransform || parentHasTransform)) {\n            m && mIdentity(m);\n            return;\n        }\n\n        m = m || matrix.create();\n\n        if (needLocalTransform) {\n            this.getLocalTransform(m);\n        }\n        else {\n            mIdentity(m);\n        }\n\n        // 应用父节点变换\n        if (parentHasTransform) {\n            if (needLocalTransform) {\n                matrix.mul(m, parent.transform, m);\n            }\n            else {\n                matrix.copy(m, parent.transform);\n            }\n        }\n        // 保存这个变换矩阵\n        this.transform = m;\n\n        this.invTransform = this.invTransform || matrix.create();\n        matrix.invert(this.invTransform, m);\n    };\n\n    transformableProto.getLocalTransform = function (m) {\n        return Transformable.getLocalTransform(this, m);\n    };\n\n    /**\n     * 将自己的transform应用到context上\n     * @param {Context2D} ctx\n     */\n    transformableProto.setTransform = function (ctx) {\n        var m = this.transform;\n        var dpr = ctx.dpr || 1;\n        if (m) {\n            ctx.setTransform(dpr * m[0], dpr * m[1], dpr * m[2], dpr * m[3], dpr * m[4], dpr * m[5]);\n        }\n        else {\n            ctx.setTransform(dpr, 0, 0, dpr, 0, 0);\n        }\n    };\n\n    transformableProto.restoreTransform = function (ctx) {\n        var dpr = ctx.dpr || 1;\n        ctx.setTransform(dpr, 0, 0, dpr, 0, 0);\n    };\n\n    var tmpTransform = [];\n\n    /**\n     * 分解`transform`矩阵到`position`, `rotation`, `scale`\n     */\n    transformableProto.decomposeTransform = function () {\n        if (!this.transform) {\n            return;\n        }\n        var parent = this.parent;\n        var m = this.transform;\n        if (parent && parent.transform) {\n            // Get local transform and decompose them to position, scale, rotation\n            matrix.mul(tmpTransform, parent.invTransform, m);\n            m = tmpTransform;\n        }\n        var sx = m[0] * m[0] + m[1] * m[1];\n        var sy = m[2] * m[2] + m[3] * m[3];\n        var position = this.position;\n        var scale = this.scale;\n        if (isNotAroundZero(sx - 1)) {\n            sx = Math.sqrt(sx);\n        }\n        if (isNotAroundZero(sy - 1)) {\n            sy = Math.sqrt(sy);\n        }\n        if (m[0] < 0) {\n            sx = -sx;\n        }\n        if (m[3] < 0) {\n            sy = -sy;\n        }\n        position[0] = m[4];\n        position[1] = m[5];\n        scale[0] = sx;\n        scale[1] = sy;\n        this.rotation = Math.atan2(-m[1] / sy, m[0] / sx);\n    };\n\n    /**\n     * Get global scale\n     * @return {Array.<number>}\n     */\n    transformableProto.getGlobalScale = function () {\n        var m = this.transform;\n        if (!m) {\n            return [1, 1];\n        }\n        var sx = Math.sqrt(m[0] * m[0] + m[1] * m[1]);\n        var sy = Math.sqrt(m[2] * m[2] + m[3] * m[3]);\n        if (m[0] < 0) {\n            sx = -sx;\n        }\n        if (m[3] < 0) {\n            sy = -sy;\n        }\n        return [sx, sy];\n    };\n    /**\n     * 变换坐标位置到 shape 的局部坐标空间\n     * @method\n     * @param {number} x\n     * @param {number} y\n     * @return {Array.<number>}\n     */\n    transformableProto.transformCoordToLocal = function (x, y) {\n        var v2 = [x, y];\n        var invTransform = this.invTransform;\n        if (invTransform) {\n            vector.applyTransform(v2, v2, invTransform);\n        }\n        return v2;\n    };\n\n    /**\n     * 变换局部坐标位置到全局坐标空间\n     * @method\n     * @param {number} x\n     * @param {number} y\n     * @return {Array.<number>}\n     */\n    transformableProto.transformCoordToGlobal = function (x, y) {\n        var v2 = [x, y];\n        var transform = this.transform;\n        if (transform) {\n            vector.applyTransform(v2, v2, transform);\n        }\n        return v2;\n    };\n\n    /**\n     * @static\n     * @param {Object} target\n     * @param {Array.<number>} target.origin\n     * @param {number} target.rotation\n     * @param {Array.<number>} target.position\n     * @param {Array.<number>} [m]\n     */\n    Transformable.getLocalTransform = function (target, m) {\n        m = m || [];\n        mIdentity(m);\n\n        var origin = target.origin;\n        var scale = target.scale || [1, 1];\n        var rotation = target.rotation || 0;\n        var position = target.position || [0, 0];\n\n        if (origin) {\n            // Translate to origin\n            m[4] -= origin[0];\n            m[5] -= origin[1];\n        }\n        matrix.scale(m, m, scale);\n        if (rotation) {\n            matrix.rotate(m, m, rotation);\n        }\n        if (origin) {\n            // Translate back from origin\n            m[4] += origin[0];\n            m[5] += origin[1];\n        }\n\n        m[4] += position[0];\n        m[5] += position[1];\n\n        return m;\n    };\n\n    module.exports = Transformable;\n\n\n\n/***/ }),\n\n/***/ \"VaUJ\":\n/***/ (function(module, exports) {\n\n\n    var platform = '';\n    // Navigator not exists in node\n    if (typeof navigator !== 'undefined') {\n        platform = navigator.platform || '';\n    }\n    module.exports = {\n        // 全图默认背景\n        // backgroundColor: 'rgba(0,0,0,0)',\n\n        // https://dribbble.com/shots/1065960-Infographic-Pie-chart-visualization\n        // color: ['#5793f3', '#d14a61', '#fd9c35', '#675bba', '#fec42c', '#dd4444', '#d4df5a', '#cd4870'],\n        // 浅色\n        // color: ['#bcd3bb', '#e88f70', '#edc1a5', '#9dc5c8', '#e1e8c8', '#7b7c68', '#e5b5b5', '#f0b489', '#928ea8', '#bda29a'],\n        // color: ['#cc5664', '#9bd6ec', '#ea946e', '#8acaaa', '#f1ec64', '#ee8686', '#a48dc1', '#5da6bc', '#b9dcae'],\n        // 深色\n        color: ['#c23531','#2f4554', '#61a0a8', '#d48265', '#91c7ae','#749f83',  '#ca8622', '#bda29a','#6e7074', '#546570', '#c4ccd3'],\n\n        // 默认需要 Grid 配置项\n        // grid: {},\n        // 主题，主题\n        textStyle: {\n            // color: '#000',\n            // decoration: 'none',\n            // PENDING\n            fontFamily: platform.match(/^Win/) ? 'Microsoft YaHei' : 'sans-serif',\n            // fontFamily: 'Arial, Verdana, sans-serif',\n            fontSize: 12,\n            fontStyle: 'normal',\n            fontWeight: 'normal'\n        },\n\n        // http://blogs.adobe.com/webplatform/2014/02/24/using-blend-modes-in-html-canvas/\n        // https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/globalCompositeOperation\n        // Default is source-over\n        blendMode: null,\n\n        animation: 'auto',\n        animationDuration: 1000,\n        animationDurationUpdate: 300,\n        animationEasing: 'exponentialOut',\n        animationEasingUpdate: 'cubicOut',\n\n        animationThreshold: 2000,\n        // Configuration for progressive/incremental rendering\n        progressiveThreshold: 3000,\n        progressive: 400,\n\n        // Threshold of if use single hover layer to optimize.\n        // It is recommended that `hoverLayerThreshold` is equivalent to or less than\n        // `progressiveThreshold`, otherwise hover will cause restart of progressive,\n        // which is unexpected.\n        // see example <echarts/test/heatmap-large.html>.\n        hoverLayerThreshold: 3000,\n\n        // See: module:echarts/scale/Time\n        useUTC: false\n    };\n\n\n/***/ }),\n\n/***/ \"VfTC\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n\n    function defaultKeyGetter(item) {\n        return item;\n    }\n\n    function DataDiffer(oldArr, newArr, oldKeyGetter, newKeyGetter) {\n        this._old = oldArr;\n        this._new = newArr;\n\n        this._oldKeyGetter = oldKeyGetter || defaultKeyGetter;\n        this._newKeyGetter = newKeyGetter || defaultKeyGetter;\n    }\n\n    DataDiffer.prototype = {\n\n        constructor: DataDiffer,\n\n        /**\n         * Callback function when add a data\n         */\n        add: function (func) {\n            this._add = func;\n            return this;\n        },\n\n        /**\n         * Callback function when update a data\n         */\n        update: function (func) {\n            this._update = func;\n            return this;\n        },\n\n        /**\n         * Callback function when remove a data\n         */\n        remove: function (func) {\n            this._remove = func;\n            return this;\n        },\n\n        execute: function () {\n            var oldArr = this._old;\n            var newArr = this._new;\n            var oldKeyGetter = this._oldKeyGetter;\n            var newKeyGetter = this._newKeyGetter;\n\n            var oldDataIndexMap = {};\n            var newDataIndexMap = {};\n            var oldDataKeyArr = [];\n            var newDataKeyArr = [];\n            var i;\n\n            initIndexMap(oldArr, oldDataIndexMap, oldDataKeyArr, oldKeyGetter);\n            initIndexMap(newArr, newDataIndexMap, newDataKeyArr, newKeyGetter);\n\n            // Travel by inverted order to make sure order consistency\n            // when duplicate keys exists (consider newDataIndex.pop() below).\n            // For performance consideration, these code below do not look neat.\n            for (i = 0; i < oldArr.length; i++) {\n                var key = oldDataKeyArr[i];\n                var idx = newDataIndexMap[key];\n\n                // idx can never be empty array here. see 'set null' logic below.\n                if (idx != null) {\n                    // Consider there is duplicate key (for example, use dataItem.name as key).\n                    // We should make sure every item in newArr and oldArr can be visited.\n                    var len = idx.length;\n                    if (len) {\n                        len === 1 && (newDataIndexMap[key] = null);\n                        idx = idx.unshift();\n                    }\n                    else {\n                        newDataIndexMap[key] = null;\n                    }\n                    this._update && this._update(idx, i);\n                }\n                else {\n                    this._remove && this._remove(i);\n                }\n            }\n\n            for (var i = 0; i < newDataKeyArr.length; i++) {\n                var key = newDataKeyArr[i];\n                if (newDataIndexMap.hasOwnProperty(key)) {\n                    var idx = newDataIndexMap[key];\n                    if (idx == null) {\n                        continue;\n                    }\n                    // idx can never be empty array here. see 'set null' logic above.\n                    if (!idx.length) {\n                        this._add && this._add(idx);\n                    }\n                    else {\n                        for (var j = 0, len = idx.length; j < len; j++) {\n                            this._add && this._add(idx[j]);\n                        }\n                    }\n                }\n            }\n        }\n    };\n\n    function initIndexMap(arr, map, keyArr, keyGetter) {\n        for (var i = 0; i < arr.length; i++) {\n            // Add prefix to avoid conflict with Object.prototype.\n            var key = '_ec_' + keyGetter(arr[i], i);\n            var existence = map[key];\n            if (existence == null) {\n                keyArr.push(key);\n                map[key] = i;\n            }\n            else {\n                if (!existence.length) {\n                    map[key] = existence = [existence];\n                }\n                existence.push(i);\n            }\n        }\n    }\n\n    module.exports = DataDiffer;\n\n\n/***/ }),\n\n/***/ \"Vlf+\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\n    module.exports = __webpack_require__(\"uliI\").extend({\n\n        type: 'dataZoom.select'\n\n    });\n\n\n\n/***/ }),\n\n/***/ \"W4Cx\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n/**\n * @module echarts/core/BoundingRect\n */\n\n\n    var vec2 = __webpack_require__(\"Krco\");\n    var matrix = __webpack_require__(\"GjIh\");\n\n    var v2ApplyTransform = vec2.applyTransform;\n    var mathMin = Math.min;\n    var mathMax = Math.max;\n    /**\n     * @alias module:echarts/core/BoundingRect\n     */\n    function BoundingRect(x, y, width, height) {\n\n        if (width < 0) {\n            x = x + width;\n            width = -width;\n        }\n        if (height < 0) {\n            y = y + height;\n            height = -height;\n        }\n\n        /**\n         * @type {number}\n         */\n        this.x = x;\n        /**\n         * @type {number}\n         */\n        this.y = y;\n        /**\n         * @type {number}\n         */\n        this.width = width;\n        /**\n         * @type {number}\n         */\n        this.height = height;\n    }\n\n    BoundingRect.prototype = {\n\n        constructor: BoundingRect,\n\n        /**\n         * @param {module:echarts/core/BoundingRect} other\n         */\n        union: function (other) {\n            var x = mathMin(other.x, this.x);\n            var y = mathMin(other.y, this.y);\n\n            this.width = mathMax(\n                    other.x + other.width,\n                    this.x + this.width\n                ) - x;\n            this.height = mathMax(\n                    other.y + other.height,\n                    this.y + this.height\n                ) - y;\n            this.x = x;\n            this.y = y;\n        },\n\n        /**\n         * @param {Array.<number>} m\n         * @methods\n         */\n        applyTransform: (function () {\n            var lt = [];\n            var rb = [];\n            var lb = [];\n            var rt = [];\n            return function (m) {\n                // In case usage like this\n                // el.getBoundingRect().applyTransform(el.transform)\n                // And element has no transform\n                if (!m) {\n                    return;\n                }\n                lt[0] = lb[0] = this.x;\n                lt[1] = rt[1] = this.y;\n                rb[0] = rt[0] = this.x + this.width;\n                rb[1] = lb[1] = this.y + this.height;\n\n                v2ApplyTransform(lt, lt, m);\n                v2ApplyTransform(rb, rb, m);\n                v2ApplyTransform(lb, lb, m);\n                v2ApplyTransform(rt, rt, m);\n\n                this.x = mathMin(lt[0], rb[0], lb[0], rt[0]);\n                this.y = mathMin(lt[1], rb[1], lb[1], rt[1]);\n                var maxX = mathMax(lt[0], rb[0], lb[0], rt[0]);\n                var maxY = mathMax(lt[1], rb[1], lb[1], rt[1]);\n                this.width = maxX - this.x;\n                this.height = maxY - this.y;\n            };\n        })(),\n\n        /**\n         * Calculate matrix of transforming from self to target rect\n         * @param  {module:zrender/core/BoundingRect} b\n         * @return {Array.<number>}\n         */\n        calculateTransform: function (b) {\n            var a = this;\n            var sx = b.width / a.width;\n            var sy = b.height / a.height;\n\n            var m = matrix.create();\n\n            // 矩阵右乘\n            matrix.translate(m, m, [-a.x, -a.y]);\n            matrix.scale(m, m, [sx, sy]);\n            matrix.translate(m, m, [b.x, b.y]);\n\n            return m;\n        },\n\n        /**\n         * @param {(module:echarts/core/BoundingRect|Object)} b\n         * @return {boolean}\n         */\n        intersect: function (b) {\n            if (!b) {\n                return false;\n            }\n\n            if (!(b instanceof BoundingRect)) {\n                // Normalize negative width/height.\n                b = BoundingRect.create(b);\n            }\n\n            var a = this;\n            var ax0 = a.x;\n            var ax1 = a.x + a.width;\n            var ay0 = a.y;\n            var ay1 = a.y + a.height;\n\n            var bx0 = b.x;\n            var bx1 = b.x + b.width;\n            var by0 = b.y;\n            var by1 = b.y + b.height;\n\n            return ! (ax1 < bx0 || bx1 < ax0 || ay1 < by0 || by1 < ay0);\n        },\n\n        contain: function (x, y) {\n            var rect = this;\n            return x >= rect.x\n                && x <= (rect.x + rect.width)\n                && y >= rect.y\n                && y <= (rect.y + rect.height);\n        },\n\n        /**\n         * @return {module:echarts/core/BoundingRect}\n         */\n        clone: function () {\n            return new BoundingRect(this.x, this.y, this.width, this.height);\n        },\n\n        /**\n         * Copy from another rect\n         */\n        copy: function (other) {\n            this.x = other.x;\n            this.y = other.y;\n            this.width = other.width;\n            this.height = other.height;\n        },\n\n        plain: function () {\n            return {\n                x: this.x,\n                y: this.y,\n                width: this.width,\n                height: this.height\n            };\n        }\n    };\n\n    /**\n     * @param {Object|module:zrender/core/BoundingRect} rect\n     * @param {number} rect.x\n     * @param {number} rect.y\n     * @param {number} rect.width\n     * @param {number} rect.height\n     * @return {module:zrender/core/BoundingRect}\n     */\n    BoundingRect.create = function (rect) {\n        return new BoundingRect(rect.x, rect.y, rect.width, rect.height);\n    };\n\n    module.exports = BoundingRect;\n\n\n/***/ }),\n\n/***/ \"Wgry\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\n    var zrUtil = __webpack_require__(\"nw1Z\");\n\n    var helper = {};\n\n    /**\n     * @param {Object} opt {labelInside}\n     * @return {Object} {\n     *  position, rotation, labelDirection, labelOffset,\n     *  tickDirection, labelRotate, labelInterval, z2\n     * }\n     */\n    helper.layout = function (gridModel, axisModel, opt) {\n        opt = opt || {};\n        var grid = gridModel.coordinateSystem;\n        var axis = axisModel.axis;\n        var layout = {};\n\n        var rawAxisPosition = axis.position;\n        var axisPosition = axis.onZero ? 'onZero' : rawAxisPosition;\n        var axisDim = axis.dim;\n\n        // [left, right, top, bottom]\n        var rect = grid.getRect();\n        var rectBound = [rect.x, rect.x + rect.width, rect.y, rect.y + rect.height];\n\n        var axisOffset = axisModel.get('offset') || 0;\n\n        var posMap = {\n            x: { top: rectBound[2] - axisOffset, bottom: rectBound[3] + axisOffset },\n            y: { left: rectBound[0] - axisOffset, right: rectBound[1] + axisOffset }\n        };\n\n        posMap.x.onZero = Math.max(Math.min(getZero('y'), posMap.x.bottom), posMap.x.top);\n        posMap.y.onZero = Math.max(Math.min(getZero('x'), posMap.y.right), posMap.y.left);\n\n        function getZero(dim, val) {\n            var theAxis = grid.getAxis(dim);\n            return theAxis.toGlobalCoord(theAxis.dataToCoord(0));\n        }\n\n        // Axis position\n        layout.position = [\n            axisDim === 'y' ? posMap.y[axisPosition] : rectBound[0],\n            axisDim === 'x' ? posMap.x[axisPosition] : rectBound[3]\n        ];\n\n        // Axis rotation\n        layout.rotation = Math.PI / 2 * (axisDim === 'x' ? 0 : 1);\n\n        // Tick and label direction, x y is axisDim\n        var dirMap = {top: -1, bottom: 1, left: -1, right: 1};\n\n        layout.labelDirection = layout.tickDirection = layout.nameDirection = dirMap[rawAxisPosition];\n        layout.labelOffset = axis.onZero ? posMap[axisDim][rawAxisPosition] - posMap[axisDim].onZero : 0;\n\n        if (axisModel.get('axisTick.inside')) {\n            layout.tickDirection = -layout.tickDirection;\n        }\n        if (zrUtil.retrieve(opt.labelInside, axisModel.get('axisLabel.inside'))) {\n            layout.labelDirection = -layout.labelDirection;\n        }\n\n        // Special label rotation\n        var labelRotate = axisModel.get('axisLabel.rotate');\n        layout.labelRotate = axisPosition === 'top' ? -labelRotate : labelRotate;\n\n        // label interval when auto mode.\n        layout.labelInterval = axis.getLabelInterval();\n\n        // Over splitLine and splitArea\n        layout.z2 = 1;\n\n        return layout;\n    };\n\n    module.exports = helper;\n\n\n\n/***/ }),\n\n/***/ \"WkjF\":\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * Mixin for drawing text in a element bounding rect\n * @module zrender/mixin/RectText\n */\n\n\n\n    var textContain = __webpack_require__(\"45MQ\");\n    var BoundingRect = __webpack_require__(\"W4Cx\");\n\n    var tmpRect = new BoundingRect();\n\n    var RectText = function () {};\n\n    function parsePercent(value, maxValue) {\n        if (typeof value === 'string') {\n            if (value.lastIndexOf('%') >= 0) {\n                return parseFloat(value) / 100 * maxValue;\n            }\n            return parseFloat(value);\n        }\n        return value;\n    }\n\n    RectText.prototype = {\n\n        constructor: RectText,\n\n        /**\n         * Draw text in a rect with specified position.\n         * @param  {CanvasRenderingContext} ctx\n         * @param  {Object} rect Displayable rect\n         * @return {Object} textRect Alternative precalculated text bounding rect\n         */\n        drawRectText: function (ctx, rect, textRect) {\n            var style = this.style;\n            var text = style.text;\n            // Convert to string\n            text != null && (text += '');\n            if (!text) {\n                return;\n            }\n\n            // FIXME\n            ctx.save();\n\n            var x;\n            var y;\n            var textPosition = style.textPosition;\n            var textOffset = style.textOffset;\n            var distance = style.textDistance;\n            var align = style.textAlign;\n            var font = style.textFont || style.font;\n            var baseline = style.textBaseline;\n            var verticalAlign = style.textVerticalAlign;\n\n            textRect = textRect || textContain.getBoundingRect(text, font, align, baseline);\n\n            // Transform rect to view space\n            var transform = this.transform;\n            if (!style.textTransform) {\n                if (transform) {\n                    tmpRect.copy(rect);\n                    tmpRect.applyTransform(transform);\n                    rect = tmpRect;\n                }\n            }\n            else {\n                this.setTransform(ctx);\n            }\n\n            // Text position represented by coord\n            if (textPosition instanceof Array) {\n                // Percent\n                x = rect.x + parsePercent(textPosition[0], rect.width);\n                y = rect.y + parsePercent(textPosition[1], rect.height);\n                align = align || 'left';\n                baseline = baseline || 'top';\n\n                if (verticalAlign) {\n                    switch (verticalAlign) {\n                        case 'middle':\n                            y -= textRect.height / 2 - textRect.lineHeight / 2;\n                            break;\n                        case 'bottom':\n                            y -= textRect.height - textRect.lineHeight / 2;\n                            break;\n                        default:\n                            y += textRect.lineHeight / 2;\n                    }\n                    // Force bseline to be middle\n                    baseline = 'middle';\n                }\n            }\n            else {\n                var res = textContain.adjustTextPositionOnRect(\n                    textPosition, rect, textRect, distance\n                );\n                x = res.x;\n                y = res.y;\n                // Default align and baseline when has textPosition\n                align = align || res.textAlign;\n                baseline = baseline || res.textBaseline;\n            }\n\n            if (textOffset) {\n                x += textOffset[0];\n                y += textOffset[1];\n            }\n\n            // Use canvas default left textAlign. Giving invalid value will cause state not change\n            ctx.textAlign = align || 'left';\n            // Use canvas default alphabetic baseline\n            ctx.textBaseline = baseline || 'alphabetic';\n\n            var textFill = style.textFill;\n            var textStroke = style.textStroke;\n            textFill && (ctx.fillStyle = textFill);\n            textStroke && (ctx.strokeStyle = textStroke);\n\n            // TODO Invalid font\n            ctx.font = font || '12px sans-serif';\n\n            // Text shadow\n            // Always set shadowBlur and shadowOffset to avoid leak from displayable\n            ctx.shadowBlur = style.textShadowBlur;\n            ctx.shadowColor = style.textShadowColor || 'transparent';\n            ctx.shadowOffsetX = style.textShadowOffsetX;\n            ctx.shadowOffsetY = style.textShadowOffsetY;\n\n            var textLines = text.split('\\n');\n\n            if (style.textRotation) {\n                transform && ctx.translate(transform[4], transform[5]);\n                ctx.rotate(style.textRotation);\n                transform && ctx.translate(-transform[4], -transform[5]);\n            }\n\n            for (var i = 0; i < textLines.length; i++) {\n                    // Fill after stroke so the outline will not cover the main part.\n                textStroke && ctx.strokeText(textLines[i], x, y);\n                textFill && ctx.fillText(textLines[i], x, y);\n                y += textRect.lineHeight;\n            }\n\n            ctx.restore();\n        }\n    };\n\n    module.exports = RectText;\n\n\n/***/ }),\n\n/***/ \"X+UG\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\n    var numberUtil = __webpack_require__(\"0+Kq\");\n    var linearMap = numberUtil.linearMap;\n    var zrUtil = __webpack_require__(\"nw1Z\");\n    var axisHelper = __webpack_require__(\"bL7R\");\n\n    function fixExtentWithBands(extent, nTick) {\n        var size = extent[1] - extent[0];\n        var len = nTick;\n        var margin = size / len / 2;\n        extent[0] += margin;\n        extent[1] -= margin;\n    }\n\n    var normalizedExtent = [0, 1];\n    /**\n     * @name module:echarts/coord/CartesianAxis\n     * @constructor\n     */\n    var Axis = function (dim, scale, extent) {\n\n        /**\n         * Axis dimension. Such as 'x', 'y', 'z', 'angle', 'radius'\n         * @type {string}\n         */\n        this.dim = dim;\n\n        /**\n         * Axis scale\n         * @type {module:echarts/coord/scale/*}\n         */\n        this.scale = scale;\n\n        /**\n         * @type {Array.<number>}\n         * @private\n         */\n        this._extent = extent || [0, 0];\n\n        /**\n         * @type {boolean}\n         */\n        this.inverse = false;\n\n        /**\n         * Usually true when axis has a ordinal scale\n         * @type {boolean}\n         */\n        this.onBand = false;\n\n        /**\n         * @private\n         * @type {number}\n         */\n        this._labelInterval;\n    };\n\n    Axis.prototype = {\n\n        constructor: Axis,\n\n        /**\n         * If axis extent contain given coord\n         * @param {number} coord\n         * @return {boolean}\n         */\n        contain: function (coord) {\n            var extent = this._extent;\n            var min = Math.min(extent[0], extent[1]);\n            var max = Math.max(extent[0], extent[1]);\n            return coord >= min && coord <= max;\n        },\n\n        /**\n         * If axis extent contain given data\n         * @param {number} data\n         * @return {boolean}\n         */\n        containData: function (data) {\n            return this.contain(this.dataToCoord(data));\n        },\n\n        /**\n         * Get coord extent.\n         * @return {Array.<number>}\n         */\n        getExtent: function () {\n            return this._extent.slice();\n        },\n\n        /**\n         * Get precision used for formatting\n         * @param {Array.<number>} [dataExtent]\n         * @return {number}\n         */\n        getPixelPrecision: function (dataExtent) {\n            return numberUtil.getPixelPrecision(\n                dataExtent || this.scale.getExtent(),\n                this._extent\n            );\n        },\n\n        /**\n         * Set coord extent\n         * @param {number} start\n         * @param {number} end\n         */\n        setExtent: function (start, end) {\n            var extent = this._extent;\n            extent[0] = start;\n            extent[1] = end;\n        },\n\n        /**\n         * Convert data to coord. Data is the rank if it has a ordinal scale\n         * @param {number} data\n         * @param  {boolean} clamp\n         * @return {number}\n         */\n        dataToCoord: function (data, clamp) {\n            var extent = this._extent;\n            var scale = this.scale;\n            data = scale.normalize(data);\n\n            if (this.onBand && scale.type === 'ordinal') {\n                extent = extent.slice();\n                fixExtentWithBands(extent, scale.count());\n            }\n\n            return linearMap(data, normalizedExtent, extent, clamp);\n        },\n\n        /**\n         * Convert coord to data. Data is the rank if it has a ordinal scale\n         * @param {number} coord\n         * @param  {boolean} clamp\n         * @return {number}\n         */\n        coordToData: function (coord, clamp) {\n            var extent = this._extent;\n            var scale = this.scale;\n\n            if (this.onBand && scale.type === 'ordinal') {\n                extent = extent.slice();\n                fixExtentWithBands(extent, scale.count());\n            }\n\n            var t = linearMap(coord, extent, normalizedExtent, clamp);\n\n            return this.scale.scale(t);\n        },\n\n        /**\n         * Convert pixel point to data in axis\n         * @param {Array.<number>} point\n         * @param  {boolean} clamp\n         * @return {number} data\n         */\n        pointToData: function (point, clamp) {\n            // Should be implemented in derived class if necessary.\n        },\n\n        /**\n         * @return {Array.<number>}\n         */\n        getTicksCoords: function (alignWithLabel) {\n            if (this.onBand && !alignWithLabel) {\n                var bands = this.getBands();\n                var coords = [];\n                for (var i = 0; i < bands.length; i++) {\n                    coords.push(bands[i][0]);\n                }\n                if (bands[i - 1]) {\n                    coords.push(bands[i - 1][1]);\n                }\n                return coords;\n            }\n            else {\n                return zrUtil.map(this.scale.getTicks(), this.dataToCoord, this);\n            }\n        },\n\n        /**\n         * Coords of labels are on the ticks or on the middle of bands\n         * @return {Array.<number>}\n         */\n        getLabelsCoords: function () {\n            return zrUtil.map(this.scale.getTicks(), this.dataToCoord, this);\n        },\n\n        /**\n         * Get bands.\n         *\n         * If axis has labels [1, 2, 3, 4]. Bands on the axis are\n         * |---1---|---2---|---3---|---4---|.\n         *\n         * @return {Array}\n         */\n         // FIXME Situation when labels is on ticks\n        getBands: function () {\n            var extent = this.getExtent();\n            var bands = [];\n            var len = this.scale.count();\n            var start = extent[0];\n            var end = extent[1];\n            var span = end - start;\n\n            for (var i = 0; i < len; i++) {\n                bands.push([\n                    span * i / len + start,\n                    span * (i + 1) / len + start\n                ]);\n            }\n            return bands;\n        },\n\n        /**\n         * Get width of band\n         * @return {number}\n         */\n        getBandWidth: function () {\n            var axisExtent = this._extent;\n            var dataExtent = this.scale.getExtent();\n\n            var len = dataExtent[1] - dataExtent[0] + (this.onBand ? 1 : 0);\n            // Fix #2728, avoid NaN when only one data.\n            len === 0 && (len = 1);\n\n            var size = Math.abs(axisExtent[1] - axisExtent[0]);\n\n            return Math.abs(size) / len;\n        },\n\n        /**\n         * Get interval of the axis label.\n         * @return {number}\n         */\n        getLabelInterval: function () {\n            var labelInterval = this._labelInterval;\n            if (!labelInterval) {\n                var axisModel = this.model;\n                var labelModel = axisModel.getModel('axisLabel');\n                var interval = labelModel.get('interval');\n                if (!(this.type === 'category' && interval === 'auto')) {\n                    labelInterval = interval === 'auto' ? 0 : interval;\n                }\n                else if (this.isHorizontal){\n                    labelInterval = axisHelper.getAxisLabelInterval(\n                        zrUtil.map(this.scale.getTicks(), this.dataToCoord, this),\n                        axisModel.getFormattedLabels(),\n                        labelModel.getModel('textStyle').getFont(),\n                        this.isHorizontal()\n                    );\n                }\n                this._labelInterval = labelInterval;\n            }\n            return labelInterval;\n        }\n\n    };\n\n    module.exports = Axis;\n\n\n/***/ }),\n\n/***/ \"X6QE\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n// FIXME emphasis label position is not same with normal label position\n\n\n    var textContain = __webpack_require__(\"45MQ\");\n\n    function adjustSingleSide(list, cx, cy, r, dir, viewWidth, viewHeight) {\n        list.sort(function (a, b) {\n            return a.y - b.y;\n        });\n\n        // 压\n        function shiftDown(start, end, delta, dir) {\n            for (var j = start; j < end; j++) {\n                list[j].y += delta;\n                if (j > start\n                    && j + 1 < end\n                    && list[j + 1].y > list[j].y + list[j].height\n                ) {\n                    shiftUp(j, delta / 2);\n                    return;\n                }\n            }\n\n            shiftUp(end - 1, delta / 2);\n        }\n\n        // 弹\n        function shiftUp(end, delta) {\n            for (var j = end; j >= 0; j--) {\n                list[j].y -= delta;\n                if (j > 0\n                    && list[j].y > list[j - 1].y + list[j - 1].height\n                ) {\n                    break;\n                }\n            }\n        }\n\n        function changeX(list, isDownList, cx, cy, r, dir) {\n            var lastDeltaX = dir > 0\n                ? isDownList                // 右侧\n                    ? Number.MAX_VALUE      // 下\n                    : 0                     // 上\n                : isDownList                // 左侧\n                    ? Number.MAX_VALUE      // 下\n                    : 0;                    // 上\n\n            for (var i = 0, l = list.length; i < l; i++) {\n                // Not change x for center label\n                if (list[i].position === 'center') {\n                    continue;\n                }\n                var deltaY = Math.abs(list[i].y - cy);\n                var length = list[i].len;\n                var length2 = list[i].len2;\n                var deltaX = (deltaY < r + length)\n                    ? Math.sqrt(\n                          (r + length + length2) * (r + length + length2)\n                          - deltaY * deltaY\n                      )\n                    : Math.abs(list[i].x - cx);\n                if (isDownList && deltaX >= lastDeltaX) {\n                    // 右下，左下\n                    deltaX = lastDeltaX - 10;\n                }\n                if (!isDownList && deltaX <= lastDeltaX) {\n                    // 右上，左上\n                    deltaX = lastDeltaX + 10;\n                }\n\n                list[i].x = cx + deltaX * dir;\n                lastDeltaX = deltaX;\n            }\n        }\n\n        var lastY = 0;\n        var delta;\n        var len = list.length;\n        var upList = [];\n        var downList = [];\n        for (var i = 0; i < len; i++) {\n            delta = list[i].y - lastY;\n            if (delta < 0) {\n                shiftDown(i, len, -delta, dir);\n            }\n            lastY = list[i].y + list[i].height;\n        }\n        if (viewHeight - lastY < 0) {\n            shiftUp(len - 1, lastY - viewHeight);\n        }\n        for (var i = 0; i < len; i++) {\n            if (list[i].y >= cy) {\n                downList.push(list[i]);\n            }\n            else {\n                upList.push(list[i]);\n            }\n        }\n        changeX(upList, false, cx, cy, r, dir);\n        changeX(downList, true, cx, cy, r, dir);\n    }\n\n    function avoidOverlap(labelLayoutList, cx, cy, r, viewWidth, viewHeight) {\n        var leftList = [];\n        var rightList = [];\n        for (var i = 0; i < labelLayoutList.length; i++) {\n            if (labelLayoutList[i].x < cx) {\n                leftList.push(labelLayoutList[i]);\n            }\n            else {\n                rightList.push(labelLayoutList[i]);\n            }\n        }\n\n        adjustSingleSide(rightList, cx, cy, r, 1, viewWidth, viewHeight);\n        adjustSingleSide(leftList, cx, cy, r, -1, viewWidth, viewHeight);\n\n        for (var i = 0; i < labelLayoutList.length; i++) {\n            var linePoints = labelLayoutList[i].linePoints;\n            if (linePoints) {\n                var dist = linePoints[1][0] - linePoints[2][0];\n                if (labelLayoutList[i].x < cx) {\n                    linePoints[2][0] = labelLayoutList[i].x + 3;\n                }\n                else {\n                    linePoints[2][0] = labelLayoutList[i].x - 3;\n                }\n                linePoints[1][1] = linePoints[2][1] = labelLayoutList[i].y;\n                linePoints[1][0] = linePoints[2][0] + dist;\n            }\n        }\n    }\n\n    module.exports = function (seriesModel, r, viewWidth, viewHeight) {\n        var data = seriesModel.getData();\n        var labelLayoutList = [];\n        var cx;\n        var cy;\n        var hasLabelRotate = false;\n\n        data.each(function (idx) {\n            var layout = data.getItemLayout(idx);\n\n            var itemModel = data.getItemModel(idx);\n            var labelModel = itemModel.getModel('label.normal');\n            // Use position in normal or emphasis\n            var labelPosition = labelModel.get('position') || itemModel.get('label.emphasis.position');\n\n            var labelLineModel = itemModel.getModel('labelLine.normal');\n            var labelLineLen = labelLineModel.get('length');\n            var labelLineLen2 = labelLineModel.get('length2');\n\n            var midAngle = (layout.startAngle + layout.endAngle) / 2;\n            var dx = Math.cos(midAngle);\n            var dy = Math.sin(midAngle);\n\n            var textX;\n            var textY;\n            var linePoints;\n            var textAlign;\n\n            cx = layout.cx;\n            cy = layout.cy;\n\n            var isLabelInside = labelPosition === 'inside' || labelPosition === 'inner';\n            if (labelPosition === 'center') {\n                textX = layout.cx;\n                textY = layout.cy;\n                textAlign = 'center';\n            }\n            else {\n                var x1 = (isLabelInside ? (layout.r + layout.r0) / 2 * dx : layout.r * dx) + cx;\n                var y1 = (isLabelInside ? (layout.r + layout.r0) / 2 * dy : layout.r * dy) + cy;\n\n                textX = x1 + dx * 3;\n                textY = y1 + dy * 3;\n\n                if (!isLabelInside) {\n                    // For roseType\n                    var x2 = x1 + dx * (labelLineLen + r - layout.r);\n                    var y2 = y1 + dy * (labelLineLen + r - layout.r);\n                    var x3 = x2 + ((dx < 0 ? -1 : 1) * labelLineLen2);\n                    var y3 = y2;\n\n                    textX = x3 + (dx < 0 ? -5 : 5);\n                    textY = y3;\n                    linePoints = [[x1, y1], [x2, y2], [x3, y3]];\n                }\n\n                textAlign = isLabelInside ? 'center' : (dx > 0 ? 'left' : 'right');\n            }\n            var font = labelModel.getModel('textStyle').getFont();\n\n            var labelRotate = labelModel.get('rotate')\n                ? (dx < 0 ? -midAngle + Math.PI : -midAngle) : 0;\n            var text = seriesModel.getFormattedLabel(idx, 'normal')\n                        || data.getName(idx);\n            var textRect = textContain.getBoundingRect(\n                text, font, textAlign, 'top'\n            );\n            hasLabelRotate = !!labelRotate;\n            layout.label = {\n                x: textX,\n                y: textY,\n                position: labelPosition,\n                height: textRect.height,\n                len: labelLineLen,\n                len2: labelLineLen2,\n                linePoints: linePoints,\n                textAlign: textAlign,\n                verticalAlign: 'middle',\n                font: font,\n                rotation: labelRotate\n            };\n\n            // Not layout the inside label\n            if (!isLabelInside) {\n                labelLayoutList.push(layout.label);\n            }\n        });\n        if (!hasLabelRotate && seriesModel.get('avoidLabelOverlap')) {\n            avoidOverlap(labelLayoutList, cx, cy, r, viewWidth, viewHeight);\n        }\n    };\n\n\n/***/ }),\n\n/***/ \"XEbH\":\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * Legend component entry file8\n */\n\n\n    __webpack_require__(\"29ze\");\n    __webpack_require__(\"wmWp\");\n    __webpack_require__(\"xI8J\");\n\n    var echarts = __webpack_require__(\"Cwwa\");\n    // Series Filter\n    echarts.registerProcessor(__webpack_require__(\"EXqP\"));\n\n\n/***/ }),\n\n/***/ \"XL7f\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\n    var zrUtil = __webpack_require__(\"nw1Z\");\n    var graphic = __webpack_require__(\"y2WT\");\n    var throttle = __webpack_require__(\"fIB7\");\n    var DataZoomView = __webpack_require__(\"uliI\");\n    var Rect = graphic.Rect;\n    var numberUtil = __webpack_require__(\"0+Kq\");\n    var linearMap = numberUtil.linearMap;\n    var layout = __webpack_require__(\"zxuD\");\n    var sliderMove = __webpack_require__(\"biqb\");\n    var eventTool = __webpack_require__(\"kawL\");\n\n    var asc = numberUtil.asc;\n    var bind = zrUtil.bind;\n    // var mathMax = Math.max;\n    var each = zrUtil.each;\n\n    // Constants\n    var DEFAULT_LOCATION_EDGE_GAP = 7;\n    var DEFAULT_FRAME_BORDER_WIDTH = 1;\n    var DEFAULT_FILLER_SIZE = 30;\n    var HORIZONTAL = 'horizontal';\n    var VERTICAL = 'vertical';\n    var LABEL_GAP = 5;\n    var SHOW_DATA_SHADOW_SERIES_TYPE = ['line', 'bar', 'candlestick', 'scatter'];\n\n    var SliderZoomView = DataZoomView.extend({\n\n        type: 'dataZoom.slider',\n\n        init: function (ecModel, api) {\n\n            /**\n             * @private\n             * @type {Object}\n             */\n            this._displayables = {};\n\n            /**\n             * @private\n             * @type {string}\n             */\n            this._orient;\n\n            /**\n             * [0, 100]\n             * @private\n             */\n            this._range;\n\n            /**\n             * [coord of the first handle, coord of the second handle]\n             * @private\n             */\n            this._handleEnds;\n\n            /**\n             * [length, thick]\n             * @private\n             * @type {Array.<number>}\n             */\n            this._size;\n\n            /**\n             * @private\n             * @type {number}\n             */\n            this._handleWidth;\n\n            /**\n             * @private\n             * @type {number}\n             */\n            this._handleHeight;\n\n            /**\n             * @private\n             */\n            this._location;\n\n            /**\n             * @private\n             */\n            this._dragging;\n\n            /**\n             * @private\n             */\n            this._dataShadowInfo;\n\n            this.api = api;\n        },\n\n        /**\n         * @override\n         */\n        render: function (dataZoomModel, ecModel, api, payload) {\n            SliderZoomView.superApply(this, 'render', arguments);\n\n            throttle.createOrUpdate(\n                this,\n                '_dispatchZoomAction',\n                this.dataZoomModel.get('throttle'),\n                'fixRate'\n            );\n\n            this._orient = dataZoomModel.get('orient');\n\n            if (this.dataZoomModel.get('show') === false) {\n                this.group.removeAll();\n                return;\n            }\n\n            // Notice: this._resetInterval() should not be executed when payload.type\n            // is 'dataZoom', origin this._range should be maintained, otherwise 'pan'\n            // or 'zoom' info will be missed because of 'throttle' of this.dispatchAction,\n            if (!payload || payload.type !== 'dataZoom' || payload.from !== this.uid) {\n                this._buildView();\n            }\n\n            this._updateView();\n        },\n\n        /**\n         * @override\n         */\n        remove: function () {\n            SliderZoomView.superApply(this, 'remove', arguments);\n            throttle.clear(this, '_dispatchZoomAction');\n        },\n\n        /**\n         * @override\n         */\n        dispose: function () {\n            SliderZoomView.superApply(this, 'dispose', arguments);\n            throttle.clear(this, '_dispatchZoomAction');\n        },\n\n        _buildView: function () {\n            var thisGroup = this.group;\n\n            thisGroup.removeAll();\n\n            this._resetLocation();\n            this._resetInterval();\n\n            var barGroup = this._displayables.barGroup = new graphic.Group();\n\n            this._renderBackground();\n\n            this._renderHandle();\n\n            this._renderDataShadow();\n\n            thisGroup.add(barGroup);\n\n            this._positionGroup();\n        },\n\n        /**\n         * @private\n         */\n        _resetLocation: function () {\n            var dataZoomModel = this.dataZoomModel;\n            var api = this.api;\n\n            // If some of x/y/width/height are not specified,\n            // auto-adapt according to target grid.\n            var coordRect = this._findCoordRect();\n            var ecSize = {width: api.getWidth(), height: api.getHeight()};\n            // Default align by coordinate system rect.\n            var positionInfo = this._orient === HORIZONTAL\n                ? {\n                    // Why using 'right', because right should be used in vertical,\n                    // and it is better to be consistent for dealing with position param merge.\n                    right: ecSize.width - coordRect.x - coordRect.width,\n                    top: (ecSize.height - DEFAULT_FILLER_SIZE - DEFAULT_LOCATION_EDGE_GAP),\n                    width: coordRect.width,\n                    height: DEFAULT_FILLER_SIZE\n                }\n                : { // vertical\n                    right: DEFAULT_LOCATION_EDGE_GAP,\n                    top: coordRect.y,\n                    width: DEFAULT_FILLER_SIZE,\n                    height: coordRect.height\n                };\n\n            // Do not write back to option and replace value 'ph', because\n            // the 'ph' value should be recalculated when resize.\n            var layoutParams = layout.getLayoutParams(dataZoomModel.option);\n\n            // Replace the placeholder value.\n            zrUtil.each(['right', 'top', 'width', 'height'], function (name) {\n                if (layoutParams[name] === 'ph') {\n                    layoutParams[name] = positionInfo[name];\n                }\n            });\n\n            var layoutRect = layout.getLayoutRect(\n                layoutParams,\n                ecSize,\n                dataZoomModel.padding\n            );\n\n            this._location = {x: layoutRect.x, y: layoutRect.y};\n            this._size = [layoutRect.width, layoutRect.height];\n            this._orient === VERTICAL && this._size.reverse();\n        },\n\n        /**\n         * @private\n         */\n        _positionGroup: function () {\n            var thisGroup = this.group;\n            var location = this._location;\n            var orient = this._orient;\n\n            // Just use the first axis to determine mapping.\n            var targetAxisModel = this.dataZoomModel.getFirstTargetAxisModel();\n            var inverse = targetAxisModel && targetAxisModel.get('inverse');\n\n            var barGroup = this._displayables.barGroup;\n            var otherAxisInverse = (this._dataShadowInfo || {}).otherAxisInverse;\n\n            // Transform barGroup.\n            barGroup.attr(\n                (orient === HORIZONTAL && !inverse)\n                ? {scale: otherAxisInverse ? [1, 1] : [1, -1]}\n                : (orient === HORIZONTAL && inverse)\n                ? {scale: otherAxisInverse ? [-1, 1] : [-1, -1]}\n                : (orient === VERTICAL && !inverse)\n                ? {scale: otherAxisInverse ? [1, -1] : [1, 1], rotation: Math.PI / 2}\n                // Dont use Math.PI, considering shadow direction.\n                : {scale: otherAxisInverse ? [-1, -1] : [-1, 1], rotation: Math.PI / 2}\n            );\n\n            // Position barGroup\n            var rect = thisGroup.getBoundingRect([barGroup]);\n            thisGroup.attr('position', [location.x - rect.x, location.y - rect.y]);\n        },\n\n        /**\n         * @private\n         */\n        _getViewExtent: function () {\n            return [0, this._size[0]];\n        },\n\n        _renderBackground: function () {\n            var dataZoomModel = this.dataZoomModel;\n            var size = this._size;\n            var barGroup = this._displayables.barGroup;\n\n            barGroup.add(new Rect({\n                silent: true,\n                shape: {\n                    x: 0, y: 0, width: size[0], height: size[1]\n                },\n                style: {\n                    fill: dataZoomModel.get('backgroundColor')\n                },\n                z2: -40\n            }));\n\n            // Click panel, over shadow, below handles.\n            barGroup.add(new Rect({\n                shape: {\n                    x: 0, y: 0, width: size[0], height: size[1]\n                },\n                style: {\n                    fill: 'transparent'\n                },\n                z2: 0,\n                onclick: zrUtil.bind(this._onClickPanelClick, this)\n            }));\n        },\n\n        _renderDataShadow: function () {\n            var info = this._dataShadowInfo = this._prepareDataShadowInfo();\n\n            if (!info) {\n                return;\n            }\n\n            var size = this._size;\n            var seriesModel = info.series;\n            var data = seriesModel.getRawData();\n            var otherDim = seriesModel.getShadowDim\n                ? seriesModel.getShadowDim() // @see candlestick\n                : info.otherDim;\n\n            if (otherDim == null) {\n                return;\n            }\n\n            var otherDataExtent = data.getDataExtent(otherDim);\n            // Nice extent.\n            var otherOffset = (otherDataExtent[1] - otherDataExtent[0]) * 0.3;\n            otherDataExtent = [\n                otherDataExtent[0] - otherOffset,\n                otherDataExtent[1] + otherOffset\n            ];\n            var otherShadowExtent = [0, size[1]];\n\n            var thisShadowExtent = [0, size[0]];\n\n            var areaPoints = [[size[0], 0], [0, 0]];\n            var linePoints = [];\n            var step = thisShadowExtent[1] / (data.count() - 1);\n            var thisCoord = 0;\n\n            // Optimize for large data shadow\n            var stride = Math.round(data.count() / size[0]);\n            var lastIsEmpty;\n            data.each([otherDim], function (value, index) {\n                if (stride > 0 && (index % stride)) {\n                    thisCoord += step;\n                    return;\n                }\n\n                // FIXME\n                // Should consider axis.min/axis.max when drawing dataShadow.\n\n                // FIXME\n                // 应该使用统一的空判断？还是在list里进行空判断？\n                var isEmpty = value == null || isNaN(value) || value === '';\n                // See #4235.\n                var otherCoord = isEmpty\n                    ? 0 : linearMap(value, otherDataExtent, otherShadowExtent, true);\n\n                // Attempt to draw data shadow precisely when there are empty value.\n                if (isEmpty && !lastIsEmpty && index) {\n                    areaPoints.push([areaPoints[areaPoints.length - 1][0], 0]);\n                    linePoints.push([linePoints[linePoints.length - 1][0], 0]);\n                }\n                else if (!isEmpty && lastIsEmpty) {\n                    areaPoints.push([thisCoord, 0]);\n                    linePoints.push([thisCoord, 0]);\n                }\n\n                areaPoints.push([thisCoord, otherCoord]);\n                linePoints.push([thisCoord, otherCoord]);\n\n                thisCoord += step;\n                lastIsEmpty = isEmpty;\n            });\n\n            var dataZoomModel = this.dataZoomModel;\n            // var dataBackgroundModel = dataZoomModel.getModel('dataBackground');\n            this._displayables.barGroup.add(new graphic.Polygon({\n                shape: {points: areaPoints},\n                style: zrUtil.defaults(\n                    {fill: dataZoomModel.get('dataBackgroundColor')},\n                    dataZoomModel.getModel('dataBackground.areaStyle').getAreaStyle()\n                ),\n                silent: true,\n                z2: -20\n            }));\n            this._displayables.barGroup.add(new graphic.Polyline({\n                shape: {points: linePoints},\n                style: dataZoomModel.getModel('dataBackground.lineStyle').getLineStyle(),\n                silent: true,\n                z2: -19\n            }));\n        },\n\n        _prepareDataShadowInfo: function () {\n            var dataZoomModel = this.dataZoomModel;\n            var showDataShadow = dataZoomModel.get('showDataShadow');\n\n            if (showDataShadow === false) {\n                return;\n            }\n\n            // Find a representative series.\n            var result;\n            var ecModel = this.ecModel;\n\n            dataZoomModel.eachTargetAxis(function (dimNames, axisIndex) {\n                var seriesModels = dataZoomModel\n                    .getAxisProxy(dimNames.name, axisIndex)\n                    .getTargetSeriesModels();\n\n                zrUtil.each(seriesModels, function (seriesModel) {\n                    if (result) {\n                        return;\n                    }\n\n                    if (showDataShadow !== true && zrUtil.indexOf(\n                            SHOW_DATA_SHADOW_SERIES_TYPE, seriesModel.get('type')\n                        ) < 0\n                    ) {\n                        return;\n                    }\n\n                    var thisAxis = ecModel.getComponent(dimNames.axis, axisIndex).axis;\n                    var otherDim = getOtherDim(dimNames.name);\n                    var otherAxisInverse;\n                    var coordSys = seriesModel.coordinateSystem;\n                    if (otherDim != null && coordSys.getOtherAxis) {\n                        otherAxisInverse = coordSys.getOtherAxis(thisAxis).inverse;\n                    }\n\n                    result = {\n                        thisAxis: thisAxis,\n                        series: seriesModel,\n                        thisDim: dimNames.name,\n                        otherDim: otherDim,\n                        otherAxisInverse: otherAxisInverse\n                    };\n\n                }, this);\n\n            }, this);\n\n            return result;\n        },\n\n        _renderHandle: function () {\n            var displaybles = this._displayables;\n            var handles = displaybles.handles = [];\n            var handleLabels = displaybles.handleLabels = [];\n            var barGroup = this._displayables.barGroup;\n            var size = this._size;\n            var dataZoomModel = this.dataZoomModel;\n\n            barGroup.add(displaybles.filler = new Rect({\n                draggable: true,\n                cursor: 'move',\n                drift: bind(this._onDragMove, this, 'all'),\n                onmousemove: function (e) {\n                    // Fot mobile devicem, prevent screen slider on the button.\n                    eventTool.stop(e.event);\n                },\n                ondragstart: bind(this._showDataInfo, this, true),\n                ondragend: bind(this._onDragEnd, this),\n                onmouseover: bind(this._showDataInfo, this, true),\n                onmouseout: bind(this._showDataInfo, this, false),\n                style: {\n                    fill: dataZoomModel.get('fillerColor'),\n                    textPosition : 'inside'\n                }\n            }));\n\n            // Frame border.\n            barGroup.add(new Rect(graphic.subPixelOptimizeRect({\n                silent: true,\n                shape: {\n                    x: 0,\n                    y: 0,\n                    width: size[0],\n                    height: size[1]\n                },\n                style: {\n                    stroke: dataZoomModel.get('dataBackgroundColor')\n                        || dataZoomModel.get('borderColor'),\n                    lineWidth: DEFAULT_FRAME_BORDER_WIDTH,\n                    fill: 'rgba(0,0,0,0)'\n                }\n            })));\n\n            var iconStr = dataZoomModel.get('handleIcon');\n            each([0, 1], function (handleIndex) {\n                var iconOpt = {\n                    style: {\n                        strokeNoScale: true\n                    },\n                    rectHover: true,\n                    cursor: this._orient === 'vertical' ? 'ns-resize' : 'ew-resize',\n                    draggable: true,\n                    drift: bind(this._onDragMove, this, handleIndex),\n                    onmousemove: function (e) {\n                        // Fot mobile devicem, prevent screen slider on the button.\n                        eventTool.stop(e.event);\n                    },\n                    ondragend: bind(this._onDragEnd, this),\n                    onmouseover: bind(this._showDataInfo, this, true),\n                    onmouseout: bind(this._showDataInfo, this, false)\n                };\n                var iconStyle = {x: -1, y: 0, width: 2, height: 2};\n\n                var path = iconStr.indexOf('image://') === 0\n                    ? (\n                        iconStyle.image = iconStr.slice(8),\n                        iconOpt.style = iconStyle,\n                        new graphic.Image(iconOpt)\n                    )\n                    : graphic.makePath(\n                        iconStr.replace('path://', ''),\n                        iconOpt,\n                        iconStyle,\n                        'center'\n                    );\n\n                var bRect = path.getBoundingRect();\n                this._handleHeight = numberUtil.parsePercent(dataZoomModel.get('handleSize'), this._size[1]);\n                this._handleWidth = bRect.width / bRect.height * this._handleHeight;\n\n                path.setStyle(dataZoomModel.getModel('handleStyle').getItemStyle());\n                var handleColor = dataZoomModel.get('handleColor');\n                // Compatitable with previous version\n                if (handleColor != null) {\n                    path.style.fill = handleColor;\n                }\n\n                barGroup.add(handles[handleIndex] = path);\n\n                var textStyleModel = dataZoomModel.textStyleModel;\n\n                this.group.add(\n                    handleLabels[handleIndex] = new graphic.Text({\n                    silent: true,\n                    invisible: true,\n                    style: {\n                        x: 0, y: 0, text: '',\n                        textVerticalAlign: 'middle',\n                        textAlign: 'center',\n                        fill: textStyleModel.getTextColor(),\n                        textFont: textStyleModel.getFont()\n                    },\n                    z2: 10\n                }));\n\n            }, this);\n        },\n\n        /**\n         * @private\n         */\n        _resetInterval: function () {\n            var range = this._range = this.dataZoomModel.getPercentRange();\n            var viewExtent = this._getViewExtent();\n\n            this._handleEnds = [\n                linearMap(range[0], [0, 100], viewExtent, true),\n                linearMap(range[1], [0, 100], viewExtent, true)\n            ];\n        },\n\n        /**\n         * @private\n         * @param {(number|string)} handleIndex 0 or 1 or 'all'\n         * @param {number} delta\n         */\n        _updateInterval: function (handleIndex, delta) {\n            var dataZoomModel = this.dataZoomModel;\n            var handleEnds = this._handleEnds;\n            var viewExtend = this._getViewExtent();\n            var minMaxSpan = dataZoomModel.findRepresentativeAxisProxy().getMinMaxSpan();\n            var percentExtent = [0, 100];\n\n            sliderMove(\n                delta,\n                handleEnds,\n                viewExtend,\n                dataZoomModel.get('zoomLock') ? 'all' : handleIndex,\n                minMaxSpan.minSpan != null\n                    ? linearMap(minMaxSpan.minSpan, percentExtent, viewExtend, true) : null,\n                minMaxSpan.maxSpan != null\n                    ? linearMap(minMaxSpan.maxSpan, percentExtent, viewExtend, true) : null\n            );\n\n            this._range = asc([\n                linearMap(handleEnds[0], viewExtend, percentExtent, true),\n                linearMap(handleEnds[1], viewExtend, percentExtent, true)\n            ]);\n        },\n\n        /**\n         * @private\n         */\n        _updateView: function (nonRealtime) {\n            var displaybles = this._displayables;\n            var handleEnds = this._handleEnds;\n            var handleInterval = asc(handleEnds.slice());\n            var size = this._size;\n\n            each([0, 1], function (handleIndex) {\n                // Handles\n                var handle = displaybles.handles[handleIndex];\n                var handleHeight = this._handleHeight;\n                handle.attr({\n                    scale: [handleHeight / 2, handleHeight / 2],\n                    position: [handleEnds[handleIndex], size[1] / 2 - handleHeight / 2]\n                });\n            }, this);\n\n            // Filler\n            displaybles.filler.setShape({\n                x: handleInterval[0],\n                y: 0,\n                width: handleInterval[1] - handleInterval[0],\n                height: size[1]\n            });\n\n            this._updateDataInfo(nonRealtime);\n        },\n\n        /**\n         * @private\n         */\n        _updateDataInfo: function (nonRealtime) {\n            var dataZoomModel = this.dataZoomModel;\n            var displaybles = this._displayables;\n            var handleLabels = displaybles.handleLabels;\n            var orient = this._orient;\n            var labelTexts = ['', ''];\n\n            // FIXME\n            // date型，支持formatter，autoformatter（ec2 date.getAutoFormatter）\n            if (dataZoomModel.get('showDetail')) {\n                var axisProxy = dataZoomModel.findRepresentativeAxisProxy();\n\n                if (axisProxy) {\n                    var axis = axisProxy.getAxisModel().axis;\n                    var range = this._range;\n\n                    var dataInterval = nonRealtime\n                        // See #4434, data and axis are not processed and reset yet in non-realtime mode.\n                        ? axisProxy.calculateDataWindow({\n                            start: range[0], end: range[1]\n                        }).valueWindow\n                        : axisProxy.getDataValueWindow();\n\n                    labelTexts = [\n                        this._formatLabel(dataInterval[0], axis),\n                        this._formatLabel(dataInterval[1], axis)\n                    ];\n                }\n            }\n\n            var orderedHandleEnds = asc(this._handleEnds.slice());\n\n            setLabel.call(this, 0);\n            setLabel.call(this, 1);\n\n            function setLabel(handleIndex) {\n                // Label\n                // Text should not transform by barGroup.\n                // Ignore handlers transform\n                var barTransform = graphic.getTransform(\n                    displaybles.handles[handleIndex].parent, this.group\n                );\n                var direction = graphic.transformDirection(\n                    handleIndex === 0 ? 'right' : 'left', barTransform\n                );\n                var offset = this._handleWidth / 2 + LABEL_GAP;\n                var textPoint = graphic.applyTransform(\n                    [\n                        orderedHandleEnds[handleIndex] + (handleIndex === 0 ? -offset : offset),\n                        this._size[1] / 2\n                    ],\n                    barTransform\n                );\n                handleLabels[handleIndex].setStyle({\n                    x: textPoint[0],\n                    y: textPoint[1],\n                    textVerticalAlign: orient === HORIZONTAL ? 'middle' : direction,\n                    textAlign: orient === HORIZONTAL ? direction : 'center',\n                    text: labelTexts[handleIndex]\n                });\n            }\n        },\n\n        /**\n         * @private\n         */\n        _formatLabel: function (value, axis) {\n            var dataZoomModel = this.dataZoomModel;\n            var labelFormatter = dataZoomModel.get('labelFormatter');\n\n            var labelPrecision = dataZoomModel.get('labelPrecision');\n            if (labelPrecision == null || labelPrecision === 'auto') {\n                labelPrecision = axis.getPixelPrecision();\n            }\n\n            var valueStr = (value == null || isNaN(value))\n                ? ''\n                // FIXME Glue code\n                : (axis.type === 'category' || axis.type === 'time')\n                    ? axis.scale.getLabel(Math.round(value))\n                    // param of toFixed should less then 20.\n                    : value.toFixed(Math.min(labelPrecision, 20));\n\n            return zrUtil.isFunction(labelFormatter)\n                ? labelFormatter(value, valueStr)\n                : zrUtil.isString(labelFormatter)\n                ? labelFormatter.replace('{value}', valueStr)\n                : valueStr;\n        },\n\n        /**\n         * @private\n         * @param {boolean} showOrHide true: show, false: hide\n         */\n        _showDataInfo: function (showOrHide) {\n            // Always show when drgging.\n            showOrHide = this._dragging || showOrHide;\n\n            var handleLabels = this._displayables.handleLabels;\n            handleLabels[0].attr('invisible', !showOrHide);\n            handleLabels[1].attr('invisible', !showOrHide);\n        },\n\n        _onDragMove: function (handleIndex, dx, dy) {\n            this._dragging = true;\n\n            // Transform dx, dy to bar coordination.\n            var barTransform = this._displayables.barGroup.getLocalTransform();\n            var vertex = graphic.applyTransform([dx, dy], barTransform, true);\n\n            this._updateInterval(handleIndex, vertex[0]);\n\n            var realtime = this.dataZoomModel.get('realtime');\n\n            this._updateView(!realtime);\n\n            if (realtime) {\n                realtime && this._dispatchZoomAction();\n            }\n        },\n\n        _onDragEnd: function () {\n            this._dragging = false;\n            this._showDataInfo(false);\n            this._dispatchZoomAction();\n        },\n\n        _onClickPanelClick: function (e) {\n            var size = this._size;\n            var localPoint = this._displayables.barGroup.transformCoordToLocal(e.offsetX, e.offsetY);\n\n            if (localPoint[0] < 0 || localPoint[0] > size[0]\n                || localPoint[1] < 0 || localPoint[1] > size[1]\n            ) {\n                return;\n            }\n\n            var handleEnds = this._handleEnds;\n            var center = (handleEnds[0] + handleEnds[1]) / 2;\n\n            this._updateInterval('all', localPoint[0] - center);\n            this._updateView();\n            this._dispatchZoomAction();\n        },\n\n        /**\n         * This action will be throttled.\n         * @private\n         */\n        _dispatchZoomAction: function () {\n            var range = this._range;\n\n            this.api.dispatchAction({\n                type: 'dataZoom',\n                from: this.uid,\n                dataZoomId: this.dataZoomModel.id,\n                start: range[0],\n                end: range[1]\n            });\n        },\n\n        /**\n         * @private\n         */\n        _findCoordRect: function () {\n            // Find the grid coresponding to the first axis referred by dataZoom.\n            var rect;\n            each(this.getTargetCoordInfo(), function (coordInfoList) {\n                if (!rect && coordInfoList.length) {\n                    var coordSys = coordInfoList[0].model.coordinateSystem;\n                    rect = coordSys.getRect && coordSys.getRect();\n                }\n            });\n            if (!rect) {\n                var width = this.api.getWidth();\n                var height = this.api.getHeight();\n                rect = {\n                    x: width * 0.2,\n                    y: height * 0.2,\n                    width: width * 0.6,\n                    height: height * 0.6\n                };\n            }\n\n            return rect;\n        }\n\n    });\n\n    function getOtherDim(thisDim) {\n        // FIXME\n        // 这个逻辑和getOtherAxis里一致，但是写在这里是否不好\n        var map = {x: 'y', y: 'x', radius: 'angle', angle: 'radius'};\n        return map[thisDim];\n    }\n\n    module.exports = SliderZoomView;\n\n\n\n/***/ }),\n\n/***/ \"XQWN\":\n/***/ (function(module, exports) {\n\n\n\n    var helper = {};\n\n    var IRRELEVANT_EXCLUDES = {'axisPointer': 1, 'tooltip': 1, 'brush': 1};\n\n    /**\n     * Avoid that: mouse click on a elements that is over geo or graph,\n     * but roam is triggered.\n     */\n    helper.onIrrelevantElement = function (e, api, targetCoordSysModel) {\n        var model = api.getComponentByElement(e.topTarget);\n        // If model is axisModel, it works only if it is injected with coordinateSystem.\n        var coordSys = model && model.coordinateSystem;\n        return model\n            && model !== targetCoordSysModel\n            && !IRRELEVANT_EXCLUDES[model.mainType]\n            && (coordSys && coordSys.model !== targetCoordSysModel);\n    };\n\n    module.exports = helper;\n\n\n/***/ }),\n\n/***/ \"XZzg\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\n    var createListFromArray = __webpack_require__(\"pwBP\");\n    var symbolUtil = __webpack_require__(\"LDr7\");\n    var axisHelper = __webpack_require__(\"bL7R\");\n    var axisModelCommonMixin = __webpack_require__(\"LLSH\");\n    var Model = __webpack_require__(\"Q4Sk\");\n    var util = __webpack_require__(\"nw1Z\");\n\n    module.exports = {\n        /**\n         * Create a muti dimension List structure from seriesModel.\n         * @param  {module:echarts/model/Model} seriesModel\n         * @return {module:echarts/data/List} list\n         */\n        createList: function (seriesModel) {\n            var data = seriesModel.get('data');\n            return createListFromArray(data, seriesModel, seriesModel.ecModel);\n        },\n\n        /**\n         * @see {module:echarts/data/helper/completeDimensions}\n         */\n        completeDimensions: __webpack_require__(\"Qajf\"),\n\n        /**\n         * Create a symbol element with given symbol configuration: shape, x, y, width, height, color\n         * @see http://echarts.baidu.com/option.html#series-scatter.symbol\n         * @param {string} symbolDesc\n         * @param {number} x\n         * @param {number} y\n         * @param {number} w\n         * @param {number} h\n         * @param {string} color\n         */\n        createSymbol: symbolUtil.createSymbol,\n\n        /**\n         * Create scale\n         * @param {Array.<number>} dataExtent\n         * @param {Object|module:echarts/Model} option\n         */\n        createScale: function (dataExtent, option) {\n            var axisModel = option;\n            if (!(option instanceof Model)) {\n                axisModel = new Model(option);\n                util.mixin(axisModel, axisModelCommonMixin);\n            }\n\n            var scale = axisHelper.createScaleByModel(axisModel);\n            scale.setExtent(dataExtent[0], dataExtent[1]);\n\n            axisHelper.niceScaleExtent(scale, axisModel);\n            return scale;\n        },\n\n        /**\n         * Mixin common methods to axis model,\n         *\n         * Inlcude methods\n         * `getFormattedLabels() => Array.<string>`\n         * `getCategories() => Array.<string>`\n         * `getMin(origin: boolean) => number`\n         * `getMax(origin: boolean) => number`\n         * `getNeedCrossZero() => boolean`\n         * `setRange(start: number, end: number)`\n         * `resetRange()`\n         */\n        mixinAxisModelCommonMethods: function (Model) {\n            util.mixin(Model, axisModelCommonMixin);\n        }\n    };\n\n\n/***/ }),\n\n/***/ \"XrCg\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n\n    var zrUtil = __webpack_require__(\"nw1Z\");\n    var graphic = __webpack_require__(\"y2WT\");\n    var textContain = __webpack_require__(\"45MQ\");\n    var formatUtil = __webpack_require__(\"4oXW\");\n    var matrix = __webpack_require__(\"GjIh\");\n    var axisHelper = __webpack_require__(\"bL7R\");\n    var AxisBuilder = __webpack_require__(\"cH+X\");\n\n    var helper = {};\n\n    /**\n     * @param {module:echarts/model/Model} axisPointerModel\n     */\n    helper.buildElStyle = function (axisPointerModel) {\n        var axisPointerType = axisPointerModel.get('type');\n        var styleModel = axisPointerModel.getModel(axisPointerType + 'Style');\n        var style;\n        if (axisPointerType === 'line') {\n            style = styleModel.getLineStyle();\n            style.fill = null;\n        }\n        else if (axisPointerType === 'shadow') {\n            style = styleModel.getAreaStyle();\n            style.stroke = null;\n        }\n        return style;\n    };\n\n    /**\n     * @param {Function} labelPos {align, verticalAlign, position}\n     */\n    helper.buildLabelElOption = function (\n        elOption, axisModel, axisPointerModel, api, labelPos\n    ) {\n        var value = axisPointerModel.get('value');\n        var text = helper.getValueLabel(\n            value, axisModel.axis, axisModel.ecModel,\n            axisPointerModel.get('seriesDataIndices'),\n            {\n                precision: axisPointerModel.get('label.precision'),\n                formatter: axisPointerModel.get('label.formatter')\n            }\n        );\n        var labelModel = axisPointerModel.getModel('label');\n        var textStyleModel = labelModel.getModel('textStyle');\n        var paddings = formatUtil.normalizeCssArray(labelModel.get('padding') || 0);\n\n        var font = textStyleModel.getFont();\n        var textRect = textContain.getBoundingRect(\n            text, font, labelPos.textAlign, labelPos.textBaseline\n        );\n\n        var position = labelPos.position;\n        var width = textRect.width + paddings[1] + paddings[3];\n        var height = textRect.height + paddings[0] + paddings[2];\n\n        // Adjust by align.\n        var align = labelPos.align;\n        align === 'right' && (position[0] -= width);\n        align === 'center' && (position[0] -= width / 2);\n        var verticalAlign = labelPos.verticalAlign;\n        verticalAlign === 'bottom' && (position[1] -= height);\n        verticalAlign === 'middle' && (position[1] -= height / 2);\n\n        // Not overflow ec container\n        confineInContainer(position, width, height, api);\n\n        var bgColor = labelModel.get('backgroundColor');\n        if (!bgColor || bgColor === 'auto') {\n            bgColor = axisModel.get('axisLine.lineStyle.color');\n        }\n\n        elOption.label = {\n            shape: {x: 0, y: 0, width: width, height: height, r: labelModel.get('borderRadius')},\n            position: position.slice(),\n            style: {\n                text: text,\n                textFont: font,\n                textFill: textStyleModel.getTextColor(),\n                textPosition: 'inside',\n                fill: bgColor,\n                stroke: labelModel.get('borderColor') || 'transparent',\n                lineWidth: labelModel.get('borderWidth') || 0,\n                shadowBlur: labelModel.get('shadowBlur'),\n                shadowColor: labelModel.get('shadowColor'),\n                shadowOffsetX: labelModel.get('shadowOffsetX'),\n                shadowOffsetY: labelModel.get('shadowOffsetY')\n            },\n            // Lable should be over axisPointer.\n            z2: 10\n        };\n    };\n\n    // Do not overflow ec container\n    function confineInContainer(position, width, height, api) {\n        var viewWidth = api.getWidth();\n        var viewHeight = api.getHeight();\n        position[0] = Math.min(position[0] + width, viewWidth) - width;\n        position[1] = Math.min(position[1] + height, viewHeight) - height;\n        position[0] = Math.max(position[0], 0);\n        position[1] = Math.max(position[1], 0);\n    }\n\n    /**\n     * @param {number} value\n     * @param {module:echarts/coord/Axis} axis\n     * @param {module:echarts/model/Global} ecModel\n     * @param {Object} opt\n     * @param {Array.<Object>} seriesDataIndices\n     * @param {number|string} opt.precision 'auto' or a number\n     * @param {string|Function} opt.formatter label formatter\n     */\n    helper.getValueLabel = function (value, axis, ecModel, seriesDataIndices, opt) {\n        var text = axis.scale.getLabel(\n            // If `precision` is set, width can be fixed (like '12.00500'), which\n            // helps to debounce when when moving label.\n            value, {precision: opt.precision}\n        );\n        var formatter = opt.formatter;\n\n        if (formatter) {\n            var params = {\n                value: axisHelper.getAxisRawValue(axis, value),\n                seriesData: []\n            };\n            zrUtil.each(seriesDataIndices, function (idxItem) {\n                var series = ecModel.getSeriesByIndex(idxItem.seriesIndex);\n                var dataIndex = idxItem.dataIndexInside;\n                var dataParams = series && series.getDataParams(dataIndex);\n                dataParams && params.seriesData.push(dataParams);\n            });\n\n            if (zrUtil.isString(formatter)) {\n                text = formatter.replace('{value}', text);\n            }\n            else if (zrUtil.isFunction(formatter)) {\n                text = formatter(params);\n            }\n        }\n\n        return text;\n    };\n\n    /**\n     * @param {module:echarts/coord/Axis} axis\n     * @param {number} value\n     * @param {Object} layoutInfo {\n     *  rotation, position, labelOffset, labelDirection, labelMargin\n     * }\n     */\n    helper.getTransformedPosition = function (axis, value, layoutInfo) {\n        var transform = matrix.create();\n        matrix.rotate(transform, transform, layoutInfo.rotation);\n        matrix.translate(transform, transform, layoutInfo.position);\n\n        return graphic.applyTransform([\n            axis.dataToCoord(value),\n            (layoutInfo.labelOffset || 0)\n                + (layoutInfo.labelDirection || 1) * (layoutInfo.labelMargin || 0)\n        ], transform);\n    };\n\n    helper.buildCartesianSingleLabelElOption = function (\n        value, elOption, layoutInfo, axisModel, axisPointerModel, api\n    ) {\n        var textLayout = AxisBuilder.innerTextLayout(\n            layoutInfo.rotation, 0, layoutInfo.labelDirection\n        );\n        layoutInfo.labelMargin = axisPointerModel.get('label.margin');\n        helper.buildLabelElOption(elOption, axisModel, axisPointerModel, api, {\n            position: helper.getTransformedPosition(axisModel.axis, value, layoutInfo),\n            align: textLayout.textAlign,\n            verticalAlign: textLayout.textVerticalAlign\n        });\n    };\n\n    /**\n     * @param {Array.<number>} p1\n     * @param {Array.<number>} p2\n     * @param {number} [xDimIndex=0] or 1\n     */\n    helper.makeLineShape = function (p1, p2, xDimIndex) {\n        xDimIndex = xDimIndex || 0;\n        return {\n            x1: p1[xDimIndex],\n            y1: p1[1 - xDimIndex],\n            x2: p2[xDimIndex],\n            y2: p2[1 - xDimIndex]\n        };\n    };\n\n    /**\n     * @param {Array.<number>} xy\n     * @param {Array.<number>} wh\n     * @param {number} [xDimIndex=0] or 1\n     */\n    helper.makeRectShape = function (xy, wh, xDimIndex) {\n        xDimIndex = xDimIndex || 0;\n        return {\n            x: xy[xDimIndex],\n            y: xy[1 - xDimIndex],\n            width: wh[xDimIndex],\n            height: wh[1 - xDimIndex]\n        };\n    };\n\n    helper.makeSectorShape = function (cx, cy, r0, r, startAngle, endAngle) {\n        return {\n            cx: cx,\n            cy: cy,\n            r0: r0,\n            r: r,\n            startAngle: startAngle,\n            endAngle: endAngle,\n            clockwise: true\n        };\n    };\n\n    module.exports = helper;\n\n\n/***/ }),\n\n/***/ \"YiND\":\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * Linear continuous scale\n * @module echarts/coord/scale/Ordinal\n *\n * http://en.wikipedia.org/wiki/Level_of_measurement\n */\n\n// FIXME only one data\n\n\n    var zrUtil = __webpack_require__(\"nw1Z\");\n    var Scale = __webpack_require__(\"Tpbs\");\n\n    var scaleProto = Scale.prototype;\n\n    var OrdinalScale = Scale.extend({\n\n        type: 'ordinal',\n\n        init: function (data, extent) {\n            this._data = data;\n            this._extent = extent || [0, data.length - 1];\n        },\n\n        parse: function (val) {\n            return typeof val === 'string'\n                ? zrUtil.indexOf(this._data, val)\n                // val might be float.\n                : Math.round(val);\n        },\n\n        contain: function (rank) {\n            rank = this.parse(rank);\n            return scaleProto.contain.call(this, rank)\n                && this._data[rank] != null;\n        },\n\n        /**\n         * Normalize given rank or name to linear [0, 1]\n         * @param {number|string} [val]\n         * @return {number}\n         */\n        normalize: function (val) {\n            return scaleProto.normalize.call(this, this.parse(val));\n        },\n\n        scale: function (val) {\n            return Math.round(scaleProto.scale.call(this, val));\n        },\n\n        /**\n         * @return {Array}\n         */\n        getTicks: function () {\n            var ticks = [];\n            var extent = this._extent;\n            var rank = extent[0];\n\n            while (rank <= extent[1]) {\n                ticks.push(rank);\n                rank++;\n            }\n\n            return ticks;\n        },\n\n        /**\n         * Get item on rank n\n         * @param {number} n\n         * @return {string}\n         */\n        getLabel: function (n) {\n            return this._data[n];\n        },\n\n        /**\n         * @return {number}\n         */\n        count: function () {\n            return this._extent[1] - this._extent[0] + 1;\n        },\n\n        /**\n         * @override\n         */\n        unionExtentFromData: function (data, dim) {\n            this.unionExtent(data.getDataExtent(dim, false));\n        },\n\n        niceTicks: zrUtil.noop,\n        niceExtent: zrUtil.noop\n    });\n\n    /**\n     * @return {module:echarts/scale/Time}\n     */\n    OrdinalScale.create = function () {\n        return new OrdinalScale();\n    };\n\n    module.exports = OrdinalScale;\n\n\n/***/ }),\n\n/***/ \"ZCII\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\n    var echarts = __webpack_require__(\"Cwwa\");\n\n    var AxisPointerModel = echarts.extendComponentModel({\n\n        type: 'axisPointer',\n\n        coordSysAxesInfo: null,\n\n        defaultOption: {\n            // 'auto' means that show when triggered by tooltip or handle.\n            show: 'auto',\n            // 'click' | 'mousemove' | 'none'\n            triggerOn: null, // set default in AxisPonterView.js\n\n            zlevel: 0,\n            z: 50,\n\n            type: 'line',\n            // axispointer triggered by tootip determine snap automatically,\n            // see `modelHelper`.\n            snap: false,\n            triggerTooltip: true,\n\n            value: null,\n            status: null, // Init value depends on whether handle is used.\n\n            // [group0, group1, ...]\n            // Each group can be: {\n            //      mapper: function () {},\n            //      singleTooltip: 'multiple',  // 'multiple' or 'single'\n            //      xAxisId: ...,\n            //      yAxisName: ...,\n            //      angleAxisIndex: ...\n            // }\n            // mapper: can be ignored.\n            //      input: {axisInfo, value}\n            //      output: {axisInfo, value}\n            link: [],\n\n            // Do not set 'auto' here, otherwise global animation: false\n            // will not effect at this axispointer.\n            animation: null,\n            animationDurationUpdate: 200,\n\n            lineStyle: {\n                color: '#aaa',\n                width: 1,\n                type: 'solid'\n            },\n\n            shadowStyle: {\n                color: 'rgba(150,150,150,0.3)'\n            },\n\n            label: {\n                show: true,\n                formatter: null, // string | Function\n                precision: 'auto', // Or a number like 0, 1, 2 ...\n                margin: 3,\n                textStyle: {\n                    color: '#fff'\n                },\n                padding: [5, 7, 5, 7],\n                backgroundColor: 'auto', // default: axis line color\n                borderColor: null,\n                borderWidth: 0,\n                shadowBlur: 3,\n                shadowColor: '#aaa'\n                // Considering applicability, common style should\n                // better not have shadowOffset.\n                // shadowOffsetX: 0,\n                // shadowOffsetY: 2\n            },\n\n            handle: {\n                show: false,\n                icon: 'M10.7,11.9v-1.3H9.3v1.3c-4.9,0.3-8.8,4.4-8.8,9.4c0,5,3.9,9.1,8.8,9.4h1.3c4.9-0.3,8.8-4.4,8.8-9.4C19.5,16.3,15.6,12.2,10.7,11.9z M13.3,24.4H6.7v-1.2h6.6z M13.3,22H6.7v-1.2h6.6z M13.3,19.6H6.7v-1.2h6.6z', // jshint ignore:line\n                size: 45,\n                // handle margin is from symbol center to axis, which is stable when circular move.\n                margin: 50,\n                // color: '#1b8bbd'\n                // color: '#2f4554'\n                color: '#333',\n                shadowBlur: 3,\n                shadowColor: '#aaa',\n                shadowOffsetX: 0,\n                shadowOffsetY: 2,\n\n                // For mobile performance\n                throttle: 40\n            }\n        }\n\n    });\n\n    module.exports = AxisPointerModel;\n\n\n\n/***/ }),\n\n/***/ \"ZRRT\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\n    __webpack_require__(\"wvll\").registerSubTypeDefaulter('dataZoom', function (option) {\n        // Default 'slider' when no type specified.\n        return 'slider';\n    });\n\n\n\n/***/ }),\n\n/***/ \"aREe\":\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * 多边形\n * @module zrender/shape/Polygon\n */\n\n\n    var polyHelper = __webpack_require__(\"bt+j\");\n\n    module.exports = __webpack_require__(\"CC7E\").extend({\n        \n        type: 'polygon',\n\n        shape: {\n            points: null,\n\n            smooth: false,\n\n            smoothConstraint: null\n        },\n\n        buildPath: function (ctx, shape) {\n            polyHelper.buildPath(ctx, shape, true);\n        }\n    });\n\n\n/***/ }),\n\n/***/ \"ad5Q\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n\n    var zrUtil = __webpack_require__(\"nw1Z\");\n    var graphic = __webpack_require__(\"y2WT\");\n    var helper = __webpack_require__(\"Js5e\");\n\n    var BAR_BORDER_WIDTH_QUERY = ['itemStyle', 'normal', 'barBorderWidth'];\n\n    // FIXME\n    // Just for compatible with ec2.\n    zrUtil.extend(__webpack_require__(\"Q4Sk\").prototype, __webpack_require__(\"qLdl\"));\n\n    var BarView = __webpack_require__(\"Cwwa\").extendChartView({\n\n        type: 'bar',\n\n        render: function (seriesModel, ecModel, api) {\n            var coordinateSystemType = seriesModel.get('coordinateSystem');\n\n            if (coordinateSystemType === 'cartesian2d'\n                || coordinateSystemType === 'polar'\n            ) {\n                this._render(seriesModel, ecModel, api);\n            }\n            else if (__DEV__) {\n                console.warn('Only cartesian2d and polar supported for bar.');\n            }\n\n            return this.group;\n        },\n\n        dispose: zrUtil.noop,\n\n        _render: function (seriesModel, ecModel, api) {\n            var group = this.group;\n            var data = seriesModel.getData();\n            var oldData = this._data;\n\n            var coord = seriesModel.coordinateSystem;\n            var baseAxis = coord.getBaseAxis();\n            var isHorizontalOrRadial;\n\n            if (coord.type === 'cartesian2d') {\n                isHorizontalOrRadial = baseAxis.isHorizontal();\n            }\n            else if (coord.type === 'polar') {\n                isHorizontalOrRadial = baseAxis.dim === 'angle';\n            }\n\n            var animationModel = seriesModel.isAnimationEnabled() ? seriesModel : null;\n\n            data.diff(oldData)\n                .add(function (dataIndex) {\n                    if (!data.hasValue(dataIndex)) {\n                        return;\n                    }\n\n                    var itemModel = data.getItemModel(dataIndex);\n                    var layout = getLayout[coord.type](data, dataIndex, itemModel);\n                    var el = elementCreator[coord.type](\n                        data, dataIndex, itemModel, layout, isHorizontalOrRadial, animationModel\n                    );\n                    data.setItemGraphicEl(dataIndex, el);\n                    group.add(el);\n\n                    updateStyle(\n                        el, data, dataIndex, itemModel, layout,\n                        seriesModel, isHorizontalOrRadial, coord.type === 'polar'\n                    );\n                })\n                .update(function (newIndex, oldIndex) {\n                    var el = oldData.getItemGraphicEl(oldIndex);\n\n                    if (!data.hasValue(newIndex)) {\n                        group.remove(el);\n                        return;\n                    }\n\n                    var itemModel = data.getItemModel(newIndex);\n                    var layout = getLayout[coord.type](data, newIndex, itemModel);\n\n                    if (el) {\n                        graphic.updateProps(el, {shape: layout}, animationModel, newIndex);\n                    }\n                    else {\n                        el = elementCreator[coord.type](\n                            data, newIndex, itemModel, layout, isHorizontalOrRadial, animationModel, true\n                        );\n                    }\n\n                    data.setItemGraphicEl(newIndex, el);\n                    // Add back\n                    group.add(el);\n\n                    updateStyle(\n                        el, data, newIndex, itemModel, layout,\n                        seriesModel, isHorizontalOrRadial, coord.type === 'polar'\n                    );\n                })\n                .remove(function (dataIndex) {\n                    var el = oldData.getItemGraphicEl(dataIndex);\n                    if (coord.type === 'cartesian2d') {\n                        el && removeRect(dataIndex, animationModel, el);\n                    }\n                    else {\n                        el && removeSector(dataIndex, animationModel, el);\n                    }\n                })\n                .execute();\n\n            this._data = data;\n        },\n\n        remove: function (ecModel, api) {\n            var group = this.group;\n            var data = this._data;\n            if (ecModel.get('animation')) {\n                if (data) {\n                    data.eachItemGraphicEl(function (el) {\n                        if (el.type === 'sector') {\n                            removeSector(el.dataIndex, ecModel, el);\n                        }\n                        else {\n                            removeRect(el.dataIndex, ecModel, el);\n                        }\n                    });\n                }\n            }\n            else {\n                group.removeAll();\n            }\n        }\n    });\n\n    var elementCreator = {\n\n        cartesian2d: function (\n            data, dataIndex, itemModel, layout, isHorizontal,\n            animationModel, isUpdate\n        ) {\n            var rect = new graphic.Rect({shape: zrUtil.extend({}, layout)});\n\n            // Animation\n            if (animationModel) {\n                var rectShape = rect.shape;\n                var animateProperty = isHorizontal ? 'height' : 'width';\n                var animateTarget = {};\n                rectShape[animateProperty] = 0;\n                animateTarget[animateProperty] = layout[animateProperty];\n                graphic[isUpdate ? 'updateProps' : 'initProps'](rect, {\n                    shape: animateTarget\n                }, animationModel, dataIndex);\n            }\n\n            return rect;\n        },\n\n        polar: function (\n            data, dataIndex, itemModel, layout, isRadial,\n            animationModel, isUpdate\n        ) {\n            var sector = new graphic.Sector({shape: zrUtil.extend({}, layout)});\n\n            // Animation\n            if (animationModel) {\n                var sectorShape = sector.shape;\n                var animateProperty = isRadial ? 'r' : 'endAngle';\n                var animateTarget = {};\n                sectorShape[animateProperty] = isRadial ? 0 : layout.startAngle;\n                animateTarget[animateProperty] = layout[animateProperty];\n                graphic[isUpdate ? 'updateProps' : 'initProps'](sector, {\n                    shape: animateTarget\n                }, animationModel, dataIndex);\n            }\n\n            return sector;\n        }\n    };\n\n    function removeRect(dataIndex, animationModel, el) {\n        // Not show text when animating\n        el.style.text = '';\n        graphic.updateProps(el, {\n            shape: {\n                width: 0\n            }\n        }, animationModel, dataIndex, function () {\n            el.parent && el.parent.remove(el);\n        });\n    }\n\n    function removeSector(dataIndex, animationModel, el) {\n        // Not show text when animating\n        el.style.text = '';\n        graphic.updateProps(el, {\n            shape: {\n                r: el.shape.r0\n            }\n        }, animationModel, dataIndex, function () {\n            el.parent && el.parent.remove(el);\n        });\n    }\n\n    var getLayout = {\n        cartesian2d: function (data, dataIndex, itemModel) {\n            var layout = data.getItemLayout(dataIndex);\n            var fixedLineWidth = getLineWidth(itemModel, layout);\n\n            // fix layout with lineWidth\n            var signX = layout.width > 0 ? 1 : -1;\n            var signY = layout.height > 0 ? 1 : -1;\n            return {\n                x: layout.x + signX * fixedLineWidth / 2,\n                y: layout.y + signY * fixedLineWidth / 2,\n                width: layout.width - signX * fixedLineWidth,\n                height: layout.height - signY * fixedLineWidth\n            };\n        },\n\n        polar: function (data, dataIndex, itemModel) {\n            var layout = data.getItemLayout(dataIndex);\n            return {\n                cx: layout.cx,\n                cy: layout.cy,\n                r0: layout.r0,\n                r: layout.r,\n                startAngle: layout.startAngle,\n                endAngle: layout.endAngle\n            };\n        }\n    };\n\n    function updateStyle(\n        el, data, dataIndex, itemModel, layout, seriesModel, isHorizontal, isPolar\n    ) {\n        var color = data.getItemVisual(dataIndex, 'color');\n        var opacity = data.getItemVisual(dataIndex, 'opacity');\n        var itemStyleModel = itemModel.getModel('itemStyle.normal');\n        var hoverStyle = itemModel.getModel('itemStyle.emphasis').getBarItemStyle();\n\n        if (!isPolar && isHorizontal) {\n            el.setShape('r', itemStyleModel.get('barBorderRadius') || 0);\n        }\n\n        el.useStyle(zrUtil.defaults(\n            {\n                fill: color,\n                opacity: opacity\n            },\n            itemStyleModel.getBarItemStyle()\n        ));\n\n        var labelPositionOutside = isHorizontal\n            ? (layout.height > 0 ? 'bottom' : 'top')\n            : (layout.width > 0 ? 'left' : 'right');\n\n        if (!isPolar) {\n            helper.setLabel(\n                el.style, hoverStyle, itemModel, color,\n                seriesModel, dataIndex, labelPositionOutside\n            );\n        }\n\n        graphic.setHoverStyle(el, hoverStyle);\n    }\n\n    // In case width or height are too small.\n    function getLineWidth(itemModel, rawLayout) {\n        var lineWidth = itemModel.get(BAR_BORDER_WIDTH_QUERY) || 0;\n        return Math.min(lineWidth, Math.abs(rawLayout.width), Math.abs(rawLayout.height));\n    }\n\n    module.exports = BarView;\n\n\n/***/ }),\n\n/***/ \"ai9K\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\n    var globalListener = __webpack_require__(\"sEAT\");\n\n    var AxisPonterView = __webpack_require__(\"Cwwa\").extendComponentView({\n\n        type: 'axisPointer',\n\n        render: function (globalAxisPointerModel, ecModel, api) {\n            var globalTooltipModel = ecModel.getComponent('tooltip');\n            var triggerOn = globalAxisPointerModel.get('triggerOn')\n                || (globalTooltipModel && globalTooltipModel.get('triggerOn') || 'mousemove|click');\n\n            // Register global listener in AxisPointerView to enable\n            // AxisPointerView to be independent to Tooltip.\n            globalListener.register(\n                'axisPointer',\n                api,\n                function (currTrigger, e, dispatchAction) {\n                    // If 'none', it is not controlled by mouse totally.\n                    if (triggerOn !== 'none'\n                        && (currTrigger === 'leave' || triggerOn.indexOf(currTrigger) >= 0)\n                    ) {\n                        dispatchAction({\n                            type: 'updateAxisPointer',\n                            currTrigger: currTrigger,\n                            x: e && e.offsetX,\n                            y: e && e.offsetY\n                        });\n                    }\n                }\n            );\n        },\n\n        /**\n         * @override\n         */\n        remove: function (ecModel, api) {\n            globalListener.disopse(api.getZr(), 'axisPointer');\n            AxisPonterView.superApply(this._model, 'remove', arguments);\n        },\n\n        /**\n         * @override\n         */\n        dispose: function (ecModel, api) {\n            globalListener.unregister('axisPointer', api);\n            AxisPonterView.superApply(this._model, 'dispose', arguments);\n        }\n\n    });\n\n\n\n/***/ }),\n\n/***/ \"bHR6\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n\n    var zrUtil = __webpack_require__(\"nw1Z\");\n\n    var Gradient = __webpack_require__(\"0iiL\");\n\n    /**\n     * x, y, r are all percent from 0 to 1\n     * @param {number} [x=0.5]\n     * @param {number} [y=0.5]\n     * @param {number} [r=0.5]\n     * @param {Array.<Object>} [colorStops]\n     * @param {boolean} [globalCoord=false]\n     */\n    var RadialGradient = function (x, y, r, colorStops, globalCoord) {\n        // Should do nothing more in this constructor. Because gradient can be\n        // declard by `color: {type: 'radial', colorStops: ...}`, where\n        // this constructor will not be called.\n\n        this.x = x == null ? 0.5 : x;\n\n        this.y = y == null ? 0.5 : y;\n\n        this.r = r == null ? 0.5 : r;\n\n        // Can be cloned\n        this.type = 'radial';\n\n        // If use global coord\n        this.global = globalCoord || false;\n\n        Gradient.call(this, colorStops);\n    };\n\n    RadialGradient.prototype = {\n\n        constructor: RadialGradient\n    };\n\n    zrUtil.inherits(RadialGradient, Gradient);\n\n    module.exports = RadialGradient;\n\n\n/***/ }),\n\n/***/ \"bL7R\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\n    var OrdinalScale = __webpack_require__(\"YiND\");\n    var IntervalScale = __webpack_require__(\"L5YH\");\n    __webpack_require__(\"cDka\");\n    __webpack_require__(\"GmGe\");\n    var Scale = __webpack_require__(\"Tpbs\");\n\n    var numberUtil = __webpack_require__(\"0+Kq\");\n    var zrUtil = __webpack_require__(\"nw1Z\");\n    var textContain = __webpack_require__(\"45MQ\");\n    var axisHelper = {};\n\n    /**\n     * Get axis scale extent before niced.\n     * Item of returned array can only be number (including Infinity and NaN).\n     */\n    axisHelper.getScaleExtent = function (scale, model) {\n        var scaleType = scale.type;\n\n        var min = model.getMin();\n        var max = model.getMax();\n        var fixMin = min != null;\n        var fixMax = max != null;\n        var originalExtent = scale.getExtent();\n\n        var axisDataLen;\n        var boundaryGap;\n        var span;\n        if (scaleType === 'ordinal') {\n            axisDataLen = (model.get('data') || []).length;\n        }\n        else {\n            boundaryGap = model.get('boundaryGap');\n            if (!zrUtil.isArray(boundaryGap)) {\n                boundaryGap = [boundaryGap || 0, boundaryGap || 0];\n            }\n            if (typeof boundaryGap[0] === 'boolean') {\n                if (__DEV__) {\n                    console.warn('Boolean type for boundaryGap is only '\n                        + 'allowed for ordinal axis. Please use string in '\n                        + 'percentage instead, e.g., \"20%\". Currently, '\n                        + 'boundaryGap is set to be 0.');\n                }\n                boundaryGap = [0, 0];\n            }\n            boundaryGap[0] = numberUtil.parsePercent(boundaryGap[0], 1);\n            boundaryGap[1] = numberUtil.parsePercent(boundaryGap[1], 1);\n            span = (originalExtent[1] - originalExtent[0])\n                || Math.abs(originalExtent[0]);\n        }\n\n        // Notice: When min/max is not set (that is, when there are null/undefined,\n        // which is the most common case), these cases should be ensured:\n        // (1) For 'ordinal', show all axis.data.\n        // (2) For others:\n        //      + `boundaryGap` is applied (if min/max set, boundaryGap is\n        //      disabled).\n        //      + If `needCrossZero`, min/max should be zero, otherwise, min/max should\n        //      be the result that originalExtent enlarged by boundaryGap.\n        // (3) If no data, it should be ensured that `scale.setBlank` is set.\n\n        // FIXME\n        // (1) When min/max is 'dataMin' or 'dataMax', should boundaryGap be able to used?\n        // (2) When `needCrossZero` and all data is positive/negative, should it be ensured\n        // that the results processed by boundaryGap are positive/negative?\n\n        if (min == null) {\n            min = scaleType === 'ordinal'\n                ? (axisDataLen ? 0 : NaN)\n                : originalExtent[0] - boundaryGap[0] * span;\n        }\n        if (max == null) {\n            max = scaleType === 'ordinal'\n                ? (axisDataLen ? axisDataLen - 1 : NaN)\n                : originalExtent[1] + boundaryGap[1] * span;\n        }\n\n        if (min === 'dataMin') {\n            min = originalExtent[0];\n        }\n        if (max === 'dataMax') {\n            max = originalExtent[1];\n        }\n\n        (min == null || !isFinite(min)) && (min = NaN);\n        (max == null || !isFinite(max)) && (max = NaN);\n\n        scale.setBlank(zrUtil.eqNaN(min) || zrUtil.eqNaN(max));\n\n        // Evaluate if axis needs cross zero\n        if (model.getNeedCrossZero()) {\n            // Axis is over zero and min is not set\n            if (min > 0 && max > 0 && !fixMin) {\n                min = 0;\n            }\n            // Axis is under zero and max is not set\n            if (min < 0 && max < 0 && !fixMax) {\n                max = 0;\n            }\n        }\n\n        return [min, max];\n    };\n\n    axisHelper.niceScaleExtent = function (scale, model) {\n        var extent = axisHelper.getScaleExtent(scale, model);\n        var fixMin = model.getMin() != null;\n        var fixMax = model.getMax() != null;\n        var splitNumber = model.get('splitNumber');\n\n        if (scale.type === 'log') {\n            scale.base = model.get('logBase');\n        }\n\n        scale.setExtent(extent[0], extent[1]);\n        scale.niceExtent({\n            splitNumber: splitNumber,\n            fixMin: fixMin,\n            fixMax: fixMax,\n            minInterval: scale.type === 'interval' ? model.get('minInterval') : null\n        });\n\n        // If some one specified the min, max. And the default calculated interval\n        // is not good enough. He can specify the interval. It is often appeared\n        // in angle axis with angle 0 - 360. Interval calculated in interval scale is hard\n        // to be 60.\n        // FIXME\n        var interval = model.get('interval');\n        if (interval != null) {\n            scale.setInterval && scale.setInterval(interval);\n        }\n    };\n\n    /**\n     * @param {module:echarts/model/Model} model\n     * @param {string} [axisType] Default retrieve from model.type\n     * @return {module:echarts/scale/*}\n     */\n    axisHelper.createScaleByModel = function(model, axisType) {\n        axisType = axisType || model.get('type');\n        if (axisType) {\n            switch (axisType) {\n                // Buildin scale\n                case 'category':\n                    return new OrdinalScale(\n                        model.getCategories(), [Infinity, -Infinity]\n                    );\n                case 'value':\n                    return new IntervalScale();\n                // Extended scale, like time and log\n                default:\n                    return (Scale.getClass(axisType) || IntervalScale).create(model);\n            }\n        }\n    };\n\n    /**\n     * Check if the axis corss 0\n     */\n    axisHelper.ifAxisCrossZero = function (axis) {\n        var dataExtent = axis.scale.getExtent();\n        var min = dataExtent[0];\n        var max = dataExtent[1];\n        return !((min > 0 && max > 0) || (min < 0 && max < 0));\n    };\n\n    /**\n     * @param {Array.<number>} tickCoords In axis self coordinate.\n     * @param {Array.<string>} labels\n     * @param {string} font\n     * @param {boolean} isAxisHorizontal\n     * @return {number}\n     */\n    axisHelper.getAxisLabelInterval = function (tickCoords, labels, font, isAxisHorizontal) {\n        // FIXME\n        // 不同角的axis和label，不只是horizontal和vertical.\n\n        var textSpaceTakenRect;\n        var autoLabelInterval = 0;\n        var accumulatedLabelInterval = 0;\n\n        var step = 1;\n        if (labels.length > 40) {\n            // Simple optimization for large amount of labels\n            step = Math.floor(labels.length / 40);\n        }\n\n        for (var i = 0; i < tickCoords.length; i += step) {\n            var tickCoord = tickCoords[i];\n            var rect = textContain.getBoundingRect(\n                labels[i], font, 'center', 'top'\n            );\n            rect[isAxisHorizontal ? 'x' : 'y'] += tickCoord;\n            // FIXME Magic number 1.5\n            rect[isAxisHorizontal ? 'width' : 'height'] *= 1.3;\n            if (!textSpaceTakenRect) {\n                textSpaceTakenRect = rect.clone();\n            }\n            // There is no space for current label;\n            else if (textSpaceTakenRect.intersect(rect)) {\n                accumulatedLabelInterval++;\n                autoLabelInterval = Math.max(autoLabelInterval, accumulatedLabelInterval);\n            }\n            else {\n                textSpaceTakenRect.union(rect);\n                // Reset\n                accumulatedLabelInterval = 0;\n            }\n        }\n        if (autoLabelInterval === 0 && step > 1) {\n            return step;\n        }\n        return (autoLabelInterval + 1) * step - 1;\n    };\n\n    /**\n     * @param {Object} axis\n     * @param {Function} labelFormatter\n     * @return {Array.<string>}\n     */\n    axisHelper.getFormattedLabels = function (axis, labelFormatter) {\n        var scale = axis.scale;\n        var labels = scale.getTicksLabels();\n        var ticks = scale.getTicks();\n        if (typeof labelFormatter === 'string') {\n            labelFormatter = (function (tpl) {\n                return function (val) {\n                    return tpl.replace('{value}', val != null ? val : '');\n                };\n            })(labelFormatter);\n            // Consider empty array\n            return zrUtil.map(labels, labelFormatter);\n        }\n        else if (typeof labelFormatter === 'function') {\n            return zrUtil.map(ticks, function (tick, idx) {\n                return labelFormatter(\n                    axisHelper.getAxisRawValue(axis, tick),\n                    idx\n                );\n            }, this);\n        }\n        else {\n            return labels;\n        }\n    };\n\n    axisHelper.getAxisRawValue = function (axis, value) {\n        // In category axis with data zoom, tick is not the original\n        // index of axis.data. So tick should not be exposed to user\n        // in category axis.\n        return axis.type === 'category' ? axis.scale.getLabel(value) : value;\n    };\n\n    module.exports = axisHelper;\n\n\n/***/ }),\n\n/***/ \"biqb\":\n/***/ (function(module, exports) {\n\n\n\n    /**\n     * Calculate slider move result.\n     * Usage:\n     * (1) If both handle0 and handle1 are needed to be moved, set minSpan the same as\n     * maxSpan and the same as `Math.abs(handleEnd[1] - handleEnds[0])`.\n     * (2) If handle0 is forbidden to cross handle1, set minSpan as `0`.\n     *\n     * @param {number} delta Move length.\n     * @param {Array.<number>} handleEnds handleEnds[0] can be bigger then handleEnds[1].\n     *              handleEnds will be modified in this method.\n     * @param {Array.<number>} extent handleEnds is restricted by extent.\n     *              extent[0] should less or equals than extent[1].\n     * @param {number|string} handleIndex Can be 'all', means that both move the two handleEnds,\n     *              where the input minSpan and maxSpan will not work.\n     * @param {number} [minSpan] The range of dataZoom can not be smaller than that.\n     *              If not set, handle0 and cross handle1. If set as a non-negative\n     *              number (including `0`), handles will push each other when reaching\n     *              the minSpan.\n     * @param {number} [maxSpan] The range of dataZoom can not be larger than that.\n     * @return {Array.<number>} The input handleEnds.\n     */\n    module.exports = function (delta, handleEnds, extent, handleIndex, minSpan, maxSpan) {\n        // Normalize firstly.\n        handleEnds[0] = restrict(handleEnds[0], extent);\n        handleEnds[1] = restrict(handleEnds[1], extent);\n\n        delta = delta || 0;\n\n        var extentSpan = extent[1] - extent[0];\n\n        // Notice maxSpan and minSpan can be null/undefined.\n        if (minSpan != null) {\n            minSpan = restrict(minSpan, [0, extentSpan]);\n        }\n        if (maxSpan != null) {\n            maxSpan = Math.max(maxSpan, minSpan != null ? minSpan : 0);\n        }\n        if (handleIndex === 'all') {\n            minSpan = maxSpan = Math.abs(handleEnds[1] - handleEnds[0]);\n            handleIndex = 0;\n        }\n\n        var originalDistSign = getSpanSign(handleEnds, handleIndex);\n\n        handleEnds[handleIndex] += delta;\n\n        // Restrict in extent.\n        var extentMinSpan = minSpan || 0;\n        var realExtent = extent.slice();\n        originalDistSign.sign < 0 ? (realExtent[0] += extentMinSpan) : (realExtent[1] -= extentMinSpan);\n        handleEnds[handleIndex] = restrict(handleEnds[handleIndex], realExtent);\n\n        // Expand span.\n        var currDistSign = getSpanSign(handleEnds, handleIndex);\n        if (minSpan != null && (\n            currDistSign.sign !== originalDistSign.sign || currDistSign.span < minSpan\n        )) {\n            // If minSpan exists, 'cross' is forbinden.\n            handleEnds[1 - handleIndex] = handleEnds[handleIndex] + originalDistSign.sign * minSpan;\n        }\n\n        // Shrink span.\n        var currDistSign = getSpanSign(handleEnds, handleIndex);\n        if (maxSpan != null && currDistSign.span > maxSpan) {\n            handleEnds[1 - handleIndex] = handleEnds[handleIndex] + currDistSign.sign * maxSpan;\n        }\n\n        return handleEnds;\n    };\n\n    function getSpanSign(handleEnds, handleIndex) {\n        var dist = handleEnds[handleIndex] - handleEnds[1 - handleIndex];\n        // If `handleEnds[0] === handleEnds[1]`, always believe that handleEnd[0]\n        // is at left of handleEnds[1] for non-cross case.\n        return {span: Math.abs(dist), sign: dist > 0 ? -1 : dist < 0 ? 1 : handleIndex ? -1 : 1};\n    }\n\n    function restrict(value, extend) {\n        return Math.min(extend[1], Math.max(extend[0], value));\n    }\n\n\n/***/ }),\n\n/***/ \"bpLu\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\n    var CMD = __webpack_require__(\"f/vB\").CMD;\n    var vec2 = __webpack_require__(\"Krco\");\n    var v2ApplyTransform = vec2.applyTransform;\n\n    var points = [[], [], []];\n    var mathSqrt = Math.sqrt;\n    var mathAtan2 = Math.atan2;\n    function transformPath(path, m) {\n        var data = path.data;\n        var cmd;\n        var nPoint;\n        var i;\n        var j;\n        var k;\n        var p;\n\n        var M = CMD.M;\n        var C = CMD.C;\n        var L = CMD.L;\n        var R = CMD.R;\n        var A = CMD.A;\n        var Q = CMD.Q;\n\n        for (i = 0, j = 0; i < data.length;) {\n            cmd = data[i++];\n            j = i;\n            nPoint = 0;\n\n            switch (cmd) {\n                case M:\n                    nPoint = 1;\n                    break;\n                case L:\n                    nPoint = 1;\n                    break;\n                case C:\n                    nPoint = 3;\n                    break;\n                case Q:\n                    nPoint = 2;\n                    break;\n                case A:\n                    var x = m[4];\n                    var y = m[5];\n                    var sx = mathSqrt(m[0] * m[0] + m[1] * m[1]);\n                    var sy = mathSqrt(m[2] * m[2] + m[3] * m[3]);\n                    var angle = mathAtan2(-m[1] / sy, m[0] / sx);\n                    // cx\n                    data[i] *= sx;\n                    data[i++] += x;\n                    // cy\n                    data[i] *= sy;\n                    data[i++] += y;\n                    // Scale rx and ry\n                    // FIXME Assume psi is 0 here\n                    data[i++] *= sx;\n                    data[i++] *= sy;\n\n                    // Start angle\n                    data[i++] += angle;\n                    // end angle\n                    data[i++] += angle;\n                    // FIXME psi\n                    i += 2;\n                    j = i;\n                    break;\n                case R:\n                    // x0, y0\n                    p[0] = data[i++];\n                    p[1] = data[i++];\n                    v2ApplyTransform(p, p, m);\n                    data[j++] = p[0];\n                    data[j++] = p[1];\n                    // x1, y1\n                    p[0] += data[i++];\n                    p[1] += data[i++];\n                    v2ApplyTransform(p, p, m);\n                    data[j++] = p[0];\n                    data[j++] = p[1];\n            }\n\n            for (k = 0; k < nPoint; k++) {\n                var p = points[k];\n                p[0] = data[i++];\n                p[1] = data[i++];\n\n                v2ApplyTransform(p, p, m);\n                // Write back\n                data[j++] = p[0];\n                data[j++] = p[1];\n            }\n        }\n    }\n\n    module.exports = transformPath;\n\n\n/***/ }),\n\n/***/ \"bt+j\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\n    var smoothSpline = __webpack_require__(\"gUUB\");\n    var smoothBezier = __webpack_require__(\"geKH\");\n\n    module.exports = {\n        buildPath: function (ctx, shape, closePath) {\n            var points = shape.points;\n            var smooth = shape.smooth;\n            if (points && points.length >= 2) {\n                if (smooth && smooth !== 'spline') {\n                    var controlPoints = smoothBezier(\n                        points, smooth, closePath, shape.smoothConstraint\n                    );\n\n                    ctx.moveTo(points[0][0], points[0][1]);\n                    var len = points.length;\n                    for (var i = 0; i < (closePath ? len : len - 1); i++) {\n                        var cp1 = controlPoints[i * 2];\n                        var cp2 = controlPoints[i * 2 + 1];\n                        var p = points[(i + 1) % len];\n                        ctx.bezierCurveTo(\n                            cp1[0], cp1[1], cp2[0], cp2[1], p[0], p[1]\n                        );\n                    }\n                }\n                else {\n                    if (smooth === 'spline') {\n                        points = smoothSpline(points, closePath);\n                    }\n\n                    ctx.moveTo(points[0][0], points[0][1]);\n                    for (var i = 1, l = points.length; i < l; i++) {\n                        ctx.lineTo(points[i][0], points[i][1]);\n                    }\n                }\n\n                closePath && ctx.closePath();\n            }\n        }\n    };\n\n\n/***/ }),\n\n/***/ \"bv/E\":\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * @file Data zoom processor\n */\n\n\n    var echarts = __webpack_require__(\"Cwwa\");\n\n    echarts.registerProcessor(function (ecModel, api) {\n\n        ecModel.eachComponent('dataZoom', function (dataZoomModel) {\n            // We calculate window and reset axis here but not in model\n            // init stage and not after action dispatch handler, because\n            // reset should be called after seriesData.restoreData.\n            dataZoomModel.eachTargetAxis(resetSingleAxis);\n\n            // Caution: data zoom filtering is order sensitive when using\n            // percent range and no min/max/scale set on axis.\n            // For example, we have dataZoom definition:\n            // [\n            //      {xAxisIndex: 0, start: 30, end: 70},\n            //      {yAxisIndex: 0, start: 20, end: 80}\n            // ]\n            // In this case, [20, 80] of y-dataZoom should be based on data\n            // that have filtered by x-dataZoom using range of [30, 70],\n            // but should not be based on full raw data. Thus sliding\n            // x-dataZoom will change both ranges of xAxis and yAxis,\n            // while sliding y-dataZoom will only change the range of yAxis.\n            // So we should filter x-axis after reset x-axis immediately,\n            // and then reset y-axis and filter y-axis.\n            dataZoomModel.eachTargetAxis(filterSingleAxis);\n        });\n\n        ecModel.eachComponent('dataZoom', function (dataZoomModel) {\n            // Fullfill all of the range props so that user\n            // is able to get them from chart.getOption().\n            var axisProxy = dataZoomModel.findRepresentativeAxisProxy();\n            var percentRange = axisProxy.getDataPercentWindow();\n            var valueRange = axisProxy.getDataValueWindow();\n\n            dataZoomModel.setRawRange({\n                start: percentRange[0],\n                end: percentRange[1],\n                startValue: valueRange[0],\n                endValue: valueRange[1]\n            }, true);\n        });\n    });\n\n    function resetSingleAxis(dimNames, axisIndex, dataZoomModel) {\n        dataZoomModel.getAxisProxy(dimNames.name, axisIndex).reset(dataZoomModel);\n    }\n\n    function filterSingleAxis(dimNames, axisIndex, dataZoomModel) {\n        dataZoomModel.getAxisProxy(dimNames.name, axisIndex).filterData(dataZoomModel);\n    }\n\n\n\n\n/***/ }),\n\n/***/ \"c3To\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n\n    var zrUtil = __webpack_require__(\"nw1Z\");\n    var clazzUtil = __webpack_require__(\"fzq8\");\n    var graphic = __webpack_require__(\"y2WT\");\n    var get = __webpack_require__(\"LFYx\").makeGetter();\n    var axisPointerModelHelper = __webpack_require__(\"Rj1V\");\n    var eventTool = __webpack_require__(\"kawL\");\n    var throttle = __webpack_require__(\"fIB7\");\n\n    var clone = zrUtil.clone;\n    var bind = zrUtil.bind;\n\n    /**\n     * Base axis pointer class in 2D.\n     * Implemenents {module:echarts/component/axis/IAxisPointer}.\n     */\n    function BaseAxisPointer () {\n    }\n\n    BaseAxisPointer.prototype = {\n\n        /**\n         * @private\n         */\n        _group: null,\n\n        /**\n         * @private\n         */\n        _lastGraphicKey: null,\n\n        /**\n         * @private\n         */\n        _handle: null,\n\n        /**\n         * @private\n         */\n        _dragging: false,\n\n        /**\n         * @private\n         */\n        _lastValue: null,\n\n        /**\n         * @private\n         */\n        _lastStatus: null,\n\n        /**\n         * @private\n         */\n        _payloadInfo: null,\n\n        /**\n         * In px, arbitrary value. Do not set too small,\n         * no animation is ok for most cases.\n         * @protected\n         */\n        animationThreshold: 15,\n\n        /**\n         * @implement\n         */\n        render: function (axisModel, axisPointerModel, api, forceRender) {\n            var value = axisPointerModel.get('value');\n            var status = axisPointerModel.get('status');\n\n            // Bind them to `this`, not in closure, otherwise they will not\n            // be replaced when user calling setOption in not merge mode.\n            this._axisModel = axisModel;\n            this._axisPointerModel = axisPointerModel;\n            this._api = api;\n\n            // Optimize: `render` will be called repeatly during mouse move.\n            // So it is power consuming if performing `render` each time,\n            // especially on mobile device.\n            if (!forceRender\n                && this._lastValue === value\n                && this._lastStatus === status\n            ) {\n                return;\n            }\n            this._lastValue = value;\n            this._lastStatus = status;\n\n            var group = this._group;\n            var handle = this._handle;\n\n            if (!status || status === 'hide') {\n                // Do not clear here, for animation better.\n                group && group.hide();\n                handle && handle.hide();\n                return;\n            }\n            group && group.show();\n            handle && handle.show();\n\n            // Otherwise status is 'show'\n            var elOption = {};\n            this.makeElOption(elOption, value, axisModel, axisPointerModel, api);\n\n            // Enable change axis pointer type.\n            var graphicKey = elOption.graphicKey;\n            if (graphicKey !== this._lastGraphicKey) {\n                this.clear(api);\n            }\n            this._lastGraphicKey = graphicKey;\n\n            var moveAnimation = this._moveAnimation =\n                this.determineAnimation(axisModel, axisPointerModel);\n\n            if (!group) {\n                group = this._group = new graphic.Group();\n                this.createPointerEl(group, elOption, axisModel, axisPointerModel);\n                this.createLabelEl(group, elOption, axisModel, axisPointerModel);\n                api.getZr().add(group);\n            }\n            else {\n                var doUpdateProps = zrUtil.curry(updateProps, axisPointerModel, moveAnimation);\n                this.updatePointerEl(group, elOption, doUpdateProps, axisPointerModel);\n                this.updateLabelEl(group, elOption, doUpdateProps, axisPointerModel);\n            }\n\n            updateMandatoryProps(group, axisPointerModel, true);\n\n            this._renderHandle(value);\n        },\n\n        /**\n         * @implement\n         */\n        remove: function (api) {\n            this.clear(api);\n        },\n\n        /**\n         * @implement\n         */\n        dispose: function (api) {\n            this.clear(api);\n        },\n\n        /**\n         * @protected\n         */\n        determineAnimation: function (axisModel, axisPointerModel) {\n            var animation = axisPointerModel.get('animation');\n            var axis = axisModel.axis;\n            var isCategoryAxis = axis.type === 'category';\n            var useSnap = axisPointerModel.get('snap');\n\n            // Value axis without snap always do not snap.\n            if (!useSnap && !isCategoryAxis) {\n                return false;\n            }\n\n            if (animation === 'auto' || animation == null) {\n                var animationThreshold = this.animationThreshold;\n                if (isCategoryAxis && axis.getBandWidth() > animationThreshold) {\n                    return true;\n                }\n\n                // It is important to auto animation when snap used. Consider if there is\n                // a dataZoom, animation will be disabled when too many points exist, while\n                // it will be enabled for better visual effect when little points exist.\n                if (useSnap) {\n                    var seriesDataCount = axisPointerModelHelper.getAxisInfo(axisModel).seriesDataCount;\n                    var axisExtent = axis.getExtent();\n                    // Approximate band width\n                    return Math.abs(axisExtent[0] - axisExtent[1]) / seriesDataCount > animationThreshold;\n                }\n\n                return false;\n            }\n\n            return animation === true;\n        },\n\n        /**\n         * add {pointer, label, graphicKey} to elOption\n         * @protected\n         */\n        makeElOption: function (elOption, value, axisModel, axisPointerModel, api) {\n            // Shoule be implemenented by sub-class.\n        },\n\n        /**\n         * @protected\n         */\n        createPointerEl: function (group, elOption, axisModel, axisPointerModel) {\n            var pointerOption = elOption.pointer;\n            if (pointerOption) {\n                var pointerEl = get(group).pointerEl = new graphic[pointerOption.type](\n                    clone(elOption.pointer)\n                );\n                group.add(pointerEl);\n            }\n        },\n\n        /**\n         * @protected\n         */\n        createLabelEl: function (group, elOption, axisModel, axisPointerModel) {\n            if (elOption.label) {\n                var labelEl = get(group).labelEl = new graphic.Rect(\n                    clone(elOption.label)\n                );\n\n                group.add(labelEl);\n                updateLabelShowHide(labelEl, axisPointerModel);\n            }\n        },\n\n        /**\n         * @protected\n         */\n        updatePointerEl: function (group, elOption, updateProps) {\n            var pointerEl = get(group).pointerEl;\n            if (pointerEl) {\n                pointerEl.setStyle(elOption.pointer.style);\n                updateProps(pointerEl, {shape: elOption.pointer.shape});\n            }\n        },\n\n        /**\n         * @protected\n         */\n        updateLabelEl: function (group, elOption, updateProps, axisPointerModel) {\n            var labelEl = get(group).labelEl;\n            if (labelEl) {\n                labelEl.setStyle(elOption.label.style);\n                updateProps(labelEl, {\n                    // Consider text length change in vertical axis, animation should\n                    // be used on shape, otherwise the effect will be weird.\n                    shape: elOption.label.shape,\n                    position: elOption.label.position\n                });\n\n                updateLabelShowHide(labelEl, axisPointerModel);\n            }\n        },\n\n        /**\n         * @private\n         */\n        _renderHandle: function (value) {\n            if (this._dragging || !this.updateHandleTransform) {\n                return;\n            }\n\n            var axisPointerModel = this._axisPointerModel;\n            var zr = this._api.getZr();\n            var handle = this._handle;\n            var handleModel = axisPointerModel.getModel('handle');\n\n            var status = axisPointerModel.get('status');\n            if (!handleModel.get('show') || !status || status === 'hide') {\n                handle && zr.remove(handle);\n                this._handle = null;\n                return;\n            }\n\n            var isInit;\n            if (!this._handle) {\n                isInit = true;\n                handle = this._handle = createIcon(handleModel, {\n                    onmousemove: function (e) {\n                        // Fot mobile devicem, prevent screen slider on the button.\n                        eventTool.stop(e.event);\n                    },\n                    onmousedown: bind(this._onHandleDragMove, this, 0, 0),\n                    drift: bind(this._onHandleDragMove, this),\n                    ondragend: bind(this._onHandleDragEnd, this)\n                });\n                zr.add(handle);\n            }\n\n            updateMandatoryProps(handle, axisPointerModel, false);\n\n            // update style\n            var includeStyles = [\n                'color', 'borderColor', 'borderWidth', 'opacity',\n                'shadowColor', 'shadowBlur', 'shadowOffsetX', 'shadowOffsetY'\n            ];\n            handle.setStyle(handleModel.getItemStyle(null, includeStyles));\n\n            // update position\n            var handleSize = handleModel.get('size');\n            if (!zrUtil.isArray(handleSize)) {\n                handleSize = [handleSize, handleSize];\n            }\n            handle.attr('scale', [handleSize[0] / 2, handleSize[1] / 2]);\n\n            throttle.createOrUpdate(\n                this,\n                '_doDispatchAxisPointer',\n                handleModel.get('throttle') || 0,\n                'fixRate'\n            );\n\n            this._moveHandleToValue(value, isInit);\n        },\n\n        /**\n         * @private\n         */\n        _moveHandleToValue: function (value, isInit) {\n            updateProps(\n                this._axisPointerModel,\n                !isInit && this._moveAnimation,\n                this._handle,\n                getHandleTransProps(this.getHandleTransform(\n                    value, this._axisModel, this._axisPointerModel\n                ))\n            );\n        },\n\n        /**\n         * @private\n         */\n        _onHandleDragMove: function (dx, dy) {\n            var handle = this._handle;\n            if (!handle) {\n                return;\n            }\n\n            this._dragging = true;\n\n            // Persistent for throttle.\n            var trans = this.updateHandleTransform(\n                getHandleTransProps(handle),\n                [dx, dy],\n                this._axisModel,\n                this._axisPointerModel\n            );\n            this._payloadInfo = trans;\n\n            handle.stopAnimation();\n            handle.attr(getHandleTransProps(trans));\n            get(handle).lastProp = null;\n\n            this._doDispatchAxisPointer();\n        },\n\n        /**\n         * Throttled method.\n         * @private\n         */\n        _doDispatchAxisPointer: function () {\n            var handle = this._handle;\n            if (!handle) {\n                return;\n            }\n\n            var payloadInfo = this._payloadInfo;\n            var axisModel = this._axisModel;\n            this._api.dispatchAction({\n                type: 'updateAxisPointer',\n                x: payloadInfo.cursorPoint[0],\n                y: payloadInfo.cursorPoint[1],\n                tooltipOption: payloadInfo.tooltipOption,\n                axesInfo: [{\n                    axisDim: axisModel.axis.dim,\n                    axisIndex: axisModel.componentIndex\n                }]\n            });\n        },\n\n        /**\n         * @private\n         */\n        _onHandleDragEnd: function (moveAnimation) {\n            this._dragging = false;\n            var handle = this._handle;\n            if (!handle) {\n                return;\n            }\n\n            var value = this._axisPointerModel.get('value');\n            // Consider snap or categroy axis, handle may be not consistent with\n            // axisPointer. So move handle to align the exact value position when\n            // drag ended.\n            this._moveHandleToValue(value);\n\n            // For the effect: tooltip will be shown when finger holding on handle\n            // button, and will be hidden after finger left handle button.\n            this._api.dispatchAction({\n                type: 'hideTip'\n            });\n        },\n\n        /**\n         * Should be implemenented by sub-class if support `handle`.\n         * @protected\n         * @param {number} value\n         * @param {module:echarts/model/Model} axisModel\n         * @param {module:echarts/model/Model} axisPointerModel\n         * @return {Object} {position: [x, y], rotation: 0}\n         */\n        getHandleTransform: null,\n\n        /**\n         * * Should be implemenented by sub-class if support `handle`.\n         * @protected\n         * @param {Object} transform {position, rotation}\n         * @param {Array.<number>} delta [dx, dy]\n         * @param {module:echarts/model/Model} axisModel\n         * @param {module:echarts/model/Model} axisPointerModel\n         * @return {Object} {position: [x, y], rotation: 0, cursorPoint: [x, y]}\n         */\n        updateHandleTransform: null,\n\n        /**\n         * @private\n         */\n        clear: function (api) {\n            this._lastValue = null;\n            this._lastStatus = null;\n\n            var zr = api.getZr();\n            var group = this._group;\n            var handle = this._handle;\n            if (zr && group) {\n                this._lastGraphicKey = null;\n                group && zr.remove(group);\n                handle && zr.remove(handle);\n                this._group = null;\n                this._handle = null;\n                this._payloadInfo = null;\n            }\n        },\n\n        /**\n         * @protected\n         */\n        doClear: function () {\n            // Implemented by sub-class if necessary.\n        },\n\n        /**\n         * @protected\n         * @param {Array.<number>} xy\n         * @param {Array.<number>} wh\n         * @param {number} [xDimIndex=0] or 1\n         */\n        buildLabel: function (xy, wh, xDimIndex) {\n            xDimIndex = xDimIndex || 0;\n            return {\n                x: xy[xDimIndex],\n                y: xy[1 - xDimIndex],\n                width: wh[xDimIndex],\n                height: wh[1 - xDimIndex]\n            };\n        }\n    };\n\n    BaseAxisPointer.prototype.constructor = BaseAxisPointer;\n\n\n    function updateProps(animationModel, moveAnimation, el, props) {\n        // Animation optimize.\n        if (!propsEqual(get(el).lastProp, props)) {\n            get(el).lastProp = props;\n            moveAnimation\n                ? graphic.updateProps(el, props, animationModel)\n                : (el.stopAnimation(), el.attr(props));\n        }\n    }\n\n    function propsEqual(lastProps, newProps) {\n        if (zrUtil.isObject(lastProps) && zrUtil.isObject(newProps)) {\n            var equals = true;\n            zrUtil.each(newProps, function (item, key) {\n                equals &= propsEqual(lastProps[key], item);\n            });\n            return !!equals;\n        }\n        else {\n            return lastProps === newProps;\n        }\n    }\n\n    function updateLabelShowHide(labelEl, axisPointerModel) {\n        labelEl[axisPointerModel.get('label.show') ? 'show' : 'hide']();\n    }\n\n    function getHandleTransProps(trans) {\n        return {\n            position: trans.position.slice(),\n            rotation: trans.rotation || 0\n        };\n    }\n\n    function createIcon(handleModel, handlers) {\n        var iconStr = handleModel.get('icon');\n        var style = {\n            x: -1, y: -1, width: 2, height: 2\n        };\n        var opt = zrUtil.extend({\n            style: {\n                strokeNoScale: true\n            },\n            rectHover: true,\n            cursor: 'move',\n            draggable: true\n        }, handlers);\n\n        return iconStr.indexOf('image://') === 0\n            ? (\n                style.image = iconStr.slice(8),\n                opt.style = style,\n                new graphic.Image(opt)\n            )\n            : graphic.makePath(\n                iconStr.replace('path://', ''),\n                opt,\n                style,\n                'center'\n            );\n    }\n\n    function updateMandatoryProps(group, axisPointerModel, silent) {\n        var z = axisPointerModel.get('z');\n        var zlevel = axisPointerModel.get('zlevel');\n\n        group && group.traverse(function (el) {\n            if (el.type !== 'group') {\n                z != null && (el.z = z);\n                zlevel != null && (el.zlevel = zlevel);\n                el.silent = silent;\n            }\n        });\n    }\n\n    clazzUtil.enableClassExtend(BaseAxisPointer);\n\n    module.exports = BaseAxisPointer;\n\n\n/***/ }),\n\n/***/ \"cDka\":\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * Interval scale\n * @module echarts/coord/scale/Time\n */\n\n\n\n    // [About UTC and local time zone]:\n    // In most cases, `number.parseDate` will treat input data string as local time\n    // (except time zone is specified in time string). And `format.formateTime` returns\n    // local time by default. option.useUTC is false by default. This design have\n    // concidered these common case:\n    // (1) Time that is persistent in server is in UTC, but it is needed to be diplayed\n    // in local time by default.\n    // (2) By default, the input data string (e.g., '2011-01-02') should be displayed\n    // as its original time, without any time difference.\n\n    var zrUtil = __webpack_require__(\"nw1Z\");\n    var numberUtil = __webpack_require__(\"0+Kq\");\n    var formatUtil = __webpack_require__(\"4oXW\");\n    var scaleHelper = __webpack_require__(\"svhf\");\n\n    var IntervalScale = __webpack_require__(\"L5YH\");\n\n    var intervalScaleProto = IntervalScale.prototype;\n\n    var mathCeil = Math.ceil;\n    var mathFloor = Math.floor;\n    var ONE_SECOND = 1000;\n    var ONE_MINUTE = ONE_SECOND * 60;\n    var ONE_HOUR = ONE_MINUTE * 60;\n    var ONE_DAY = ONE_HOUR * 24;\n\n    // FIXME 公用？\n    var bisect = function (a, x, lo, hi) {\n        while (lo < hi) {\n            var mid = lo + hi >>> 1;\n            if (a[mid][2] < x) {\n                lo = mid + 1;\n            }\n            else {\n                hi  = mid;\n            }\n        }\n        return lo;\n    };\n\n    /**\n     * @alias module:echarts/coord/scale/Time\n     * @constructor\n     */\n    var TimeScale = IntervalScale.extend({\n        type: 'time',\n\n        /**\n         * @override\n         */\n        getLabel: function (val) {\n            var stepLvl = this._stepLvl;\n\n            var date = new Date(val);\n\n            return formatUtil.formatTime(stepLvl[0], date, this.getSetting('useUTC'));\n        },\n\n        /**\n         * @override\n         */\n        niceExtent: function (opt) {\n            var extent = this._extent;\n            // If extent start and end are same, expand them\n            if (extent[0] === extent[1]) {\n                // Expand extent\n                extent[0] -= ONE_DAY;\n                extent[1] += ONE_DAY;\n            }\n            // If there are no data and extent are [Infinity, -Infinity]\n            if (extent[1] === -Infinity && extent[0] === Infinity) {\n                var d = new Date();\n                extent[1] = new Date(d.getFullYear(), d.getMonth(), d.getDate());\n                extent[0] = extent[1] - ONE_DAY;\n            }\n\n            this.niceTicks(opt.splitNumber);\n\n            // var extent = this._extent;\n            var interval = this._interval;\n\n            if (!opt.fixMin) {\n                extent[0] = numberUtil.round(mathFloor(extent[0] / interval) * interval);\n            }\n            if (!opt.fixMax) {\n                extent[1] = numberUtil.round(mathCeil(extent[1] / interval) * interval);\n            }\n        },\n\n        /**\n         * @override\n         */\n        niceTicks: function (approxTickNum) {\n            var timezoneOffset = this.getSetting('useUTC')\n                ? 0 : numberUtil.getTimezoneOffset() * 60 * 1000;\n            approxTickNum = approxTickNum || 10;\n\n            var extent = this._extent;\n            var span = extent[1] - extent[0];\n            var approxInterval = span / approxTickNum;\n            var scaleLevelsLen = scaleLevels.length;\n            var idx = bisect(scaleLevels, approxInterval, 0, scaleLevelsLen);\n\n            var level = scaleLevels[Math.min(idx, scaleLevelsLen - 1)];\n            var interval = level[2];\n            // Same with interval scale if span is much larger than 1 year\n            if (level[0] === 'year') {\n                var yearSpan = span / interval;\n\n                // From \"Nice Numbers for Graph Labels\" of Graphic Gems\n                // var niceYearSpan = numberUtil.nice(yearSpan, false);\n                var yearStep = numberUtil.nice(yearSpan / approxTickNum, true);\n\n                interval *= yearStep;\n            }\n\n            var niceExtent = [\n                Math.round(mathCeil((extent[0] - timezoneOffset) / interval) * interval + timezoneOffset),\n                Math.round(mathFloor((extent[1] - timezoneOffset)/ interval) * interval + timezoneOffset)\n            ];\n\n            scaleHelper.fixExtent(niceExtent, extent);\n\n            this._stepLvl = level;\n            // Interval will be used in getTicks\n            this._interval = interval;\n            this._niceExtent = niceExtent;\n        },\n\n        parse: function (val) {\n            // val might be float.\n            return +numberUtil.parseDate(val);\n        }\n    });\n\n    zrUtil.each(['contain', 'normalize'], function (methodName) {\n        TimeScale.prototype[methodName] = function (val) {\n            return intervalScaleProto[methodName].call(this, this.parse(val));\n        };\n    });\n\n    // Steps from d3\n    var scaleLevels = [\n        // Format       step    interval\n        ['hh:mm:ss',    1,      ONE_SECOND],           // 1s\n        ['hh:mm:ss',    5,      ONE_SECOND * 5],       // 5s\n        ['hh:mm:ss',    10,     ONE_SECOND * 10],      // 10s\n        ['hh:mm:ss',    15,     ONE_SECOND * 15],      // 15s\n        ['hh:mm:ss',    30,     ONE_SECOND * 30],      // 30s\n        ['hh:mm\\nMM-dd',1,      ONE_MINUTE],          // 1m\n        ['hh:mm\\nMM-dd',5,      ONE_MINUTE * 5],      // 5m\n        ['hh:mm\\nMM-dd',10,     ONE_MINUTE * 10],     // 10m\n        ['hh:mm\\nMM-dd',15,     ONE_MINUTE * 15],     // 15m\n        ['hh:mm\\nMM-dd',30,     ONE_MINUTE * 30],     // 30m\n        ['hh:mm\\nMM-dd',1,      ONE_HOUR],        // 1h\n        ['hh:mm\\nMM-dd',2,      ONE_HOUR * 2],    // 2h\n        ['hh:mm\\nMM-dd',6,      ONE_HOUR * 6],    // 6h\n        ['hh:mm\\nMM-dd',12,     ONE_HOUR * 12],   // 12h\n        ['MM-dd\\nyyyy', 1,      ONE_DAY],   // 1d\n        ['week',        7,      ONE_DAY * 7],        // 7d\n        ['month',       1,      ONE_DAY * 31],       // 1M\n        ['quarter',     3,      ONE_DAY * 380 / 4],  // 3M\n        ['half-year',   6,      ONE_DAY * 380 / 2],  // 6M\n        ['year',        1,      ONE_DAY * 380]       // 1Y\n    ];\n\n    /**\n     * @param {module:echarts/model/Model}\n     * @return {module:echarts/scale/Time}\n     */\n    TimeScale.create = function (model) {\n        return new TimeScale({useUTC: model.ecModel.get('useUTC')});\n    };\n\n    module.exports = TimeScale;\n\n\n/***/ }),\n\n/***/ \"cH+X\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\n    var zrUtil = __webpack_require__(\"nw1Z\");\n    var formatUtil = __webpack_require__(\"4oXW\");\n    var graphic = __webpack_require__(\"y2WT\");\n    var Model = __webpack_require__(\"Q4Sk\");\n    var numberUtil = __webpack_require__(\"0+Kq\");\n    var remRadian = numberUtil.remRadian;\n    var isRadianAroundZero = numberUtil.isRadianAroundZero;\n    var vec2 = __webpack_require__(\"Krco\");\n    var matrix = __webpack_require__(\"GjIh\");\n    var v2ApplyTransform = vec2.applyTransform;\n    var retrieve = zrUtil.retrieve;\n\n    var PI = Math.PI;\n\n    function makeAxisEventDataBase(axisModel) {\n        var eventData = {\n            componentType: axisModel.mainType\n        };\n        eventData[axisModel.mainType + 'Index'] = axisModel.componentIndex;\n        return eventData;\n    }\n\n    /**\n     * A final axis is translated and rotated from a \"standard axis\".\n     * So opt.position and opt.rotation is required.\n     *\n     * A standard axis is and axis from [0, 0] to [0, axisExtent[1]],\n     * for example: (0, 0) ------------> (0, 50)\n     *\n     * nameDirection or tickDirection or labelDirection is 1 means tick\n     * or label is below the standard axis, whereas is -1 means above\n     * the standard axis. labelOffset means offset between label and axis,\n     * which is useful when 'onZero', where axisLabel is in the grid and\n     * label in outside grid.\n     *\n     * Tips: like always,\n     * positive rotation represents anticlockwise, and negative rotation\n     * represents clockwise.\n     * The direction of position coordinate is the same as the direction\n     * of screen coordinate.\n     *\n     * Do not need to consider axis 'inverse', which is auto processed by\n     * axis extent.\n     *\n     * @param {module:zrender/container/Group} group\n     * @param {Object} axisModel\n     * @param {Object} opt Standard axis parameters.\n     * @param {Array.<number>} opt.position [x, y]\n     * @param {number} opt.rotation by radian\n     * @param {number} [opt.nameDirection=1] 1 or -1 Used when nameLocation is 'middle'.\n     * @param {number} [opt.tickDirection=1] 1 or -1\n     * @param {number} [opt.labelDirection=1] 1 or -1\n     * @param {number} [opt.labelOffset=0] Usefull when onZero.\n     * @param {string} [opt.axisLabelShow] default get from axisModel.\n     * @param {string} [opt.axisName] default get from axisModel.\n     * @param {number} [opt.axisNameAvailableWidth]\n     * @param {number} [opt.labelRotate] by degree, default get from axisModel.\n     * @param {number} [opt.labelInterval] Default label interval when label\n     *                                     interval from model is null or 'auto'.\n     * @param {number} [opt.strokeContainThreshold] Default label interval when label\n     * @param {number} [opt.nameTruncateMaxWidth]\n     */\n    var AxisBuilder = function (axisModel, opt) {\n\n        /**\n         * @readOnly\n         */\n        this.opt = opt;\n\n        /**\n         * @readOnly\n         */\n        this.axisModel = axisModel;\n\n        // Default value\n        zrUtil.defaults(\n            opt,\n            {\n                labelOffset: 0,\n                nameDirection: 1,\n                tickDirection: 1,\n                labelDirection: 1,\n                silent: true\n            }\n        );\n\n        /**\n         * @readOnly\n         */\n        this.group = new graphic.Group();\n\n        // FIXME Not use a seperate text group?\n        var dumbGroup = new graphic.Group({\n            position: opt.position.slice(),\n            rotation: opt.rotation\n        });\n\n        // this.group.add(dumbGroup);\n        // this._dumbGroup = dumbGroup;\n\n        dumbGroup.updateTransform();\n        this._transform = dumbGroup.transform;\n\n        this._dumbGroup = dumbGroup;\n    };\n\n    AxisBuilder.prototype = {\n\n        constructor: AxisBuilder,\n\n        hasBuilder: function (name) {\n            return !!builders[name];\n        },\n\n        add: function (name) {\n            builders[name].call(this);\n        },\n\n        getGroup: function () {\n            return this.group;\n        }\n\n    };\n\n    var builders = {\n\n        /**\n         * @private\n         */\n        axisLine: function () {\n            var opt = this.opt;\n            var axisModel = this.axisModel;\n\n            if (!axisModel.get('axisLine.show')) {\n                return;\n            }\n\n            var extent = this.axisModel.axis.getExtent();\n\n            var matrix = this._transform;\n            var pt1 = [extent[0], 0];\n            var pt2 = [extent[1], 0];\n            if (matrix) {\n                v2ApplyTransform(pt1, pt1, matrix);\n                v2ApplyTransform(pt2, pt2, matrix);\n            }\n\n            this.group.add(new graphic.Line(graphic.subPixelOptimizeLine({\n\n                // Id for animation\n                anid: 'line',\n\n                shape: {\n                    x1: pt1[0],\n                    y1: pt1[1],\n                    x2: pt2[0],\n                    y2: pt2[1]\n                },\n                style: zrUtil.extend(\n                    {lineCap: 'round'},\n                    axisModel.getModel('axisLine.lineStyle').getLineStyle()\n                ),\n                strokeContainThreshold: opt.strokeContainThreshold || 5,\n                silent: true,\n                z2: 1\n            })));\n        },\n\n        /**\n         * @private\n         */\n        axisTick: function () {\n            var axisModel = this.axisModel;\n            var axis = axisModel.axis;\n\n            if (!axisModel.get('axisTick.show') || axis.scale.isBlank()) {\n                return;\n            }\n\n            var tickModel = axisModel.getModel('axisTick');\n            var opt = this.opt;\n\n            var lineStyleModel = tickModel.getModel('lineStyle');\n            var tickLen = tickModel.get('length');\n\n            var tickInterval = getInterval(tickModel, opt.labelInterval);\n            var ticksCoords = axis.getTicksCoords(tickModel.get('alignWithLabel'));\n            var ticks = axis.scale.getTicks();\n\n            var pt1 = [];\n            var pt2 = [];\n            var matrix = this._transform;\n\n            for (var i = 0; i < ticksCoords.length; i++) {\n                // Only ordinal scale support tick interval\n                if (ifIgnoreOnTick(axis, i, tickInterval)) {\n                     continue;\n                }\n\n                var tickCoord = ticksCoords[i];\n\n                pt1[0] = tickCoord;\n                pt1[1] = 0;\n                pt2[0] = tickCoord;\n                pt2[1] = opt.tickDirection * tickLen;\n\n                if (matrix) {\n                    v2ApplyTransform(pt1, pt1, matrix);\n                    v2ApplyTransform(pt2, pt2, matrix);\n                }\n                // Tick line, Not use group transform to have better line draw\n                this.group.add(new graphic.Line(graphic.subPixelOptimizeLine({\n\n                    // Id for animation\n                    anid: 'tick_' + ticks[i],\n\n                    shape: {\n                        x1: pt1[0],\n                        y1: pt1[1],\n                        x2: pt2[0],\n                        y2: pt2[1]\n                    },\n                    style: zrUtil.defaults(\n                        lineStyleModel.getLineStyle(),\n                        {\n                            stroke: axisModel.get('axisLine.lineStyle.color')\n                        }\n                    ),\n                    z2: 2,\n                    silent: true\n                })));\n            }\n        },\n\n        /**\n         * @param {module:echarts/coord/cartesian/AxisModel} axisModel\n         * @param {module:echarts/coord/cartesian/GridModel} gridModel\n         * @private\n         */\n        axisLabel: function () {\n            var opt = this.opt;\n            var axisModel = this.axisModel;\n            var axis = axisModel.axis;\n            var show = retrieve(opt.axisLabelShow, axisModel.get('axisLabel.show'));\n\n            if (!show || axis.scale.isBlank()) {\n                return;\n            }\n\n            var labelModel = axisModel.getModel('axisLabel');\n            var textStyleModel = labelModel.getModel('textStyle');\n            var labelMargin = labelModel.get('margin');\n            var ticks = axis.scale.getTicks();\n            var labels = axisModel.getFormattedLabels();\n\n            // Special label rotate.\n            var labelRotation = (\n                retrieve(opt.labelRotate, labelModel.get('rotate')) || 0\n            ) * PI / 180;\n\n            var labelLayout = innerTextLayout(opt.rotation, labelRotation, opt.labelDirection);\n            var categoryData = axisModel.get('data');\n\n            var textEls = [];\n            var silent = isSilent(axisModel);\n            var triggerEvent = axisModel.get('triggerEvent');\n\n            zrUtil.each(ticks, function (tickVal, index) {\n                if (ifIgnoreOnTick(axis, index, opt.labelInterval)) {\n                     return;\n                }\n\n                var itemTextStyleModel = textStyleModel;\n                if (categoryData && categoryData[tickVal] && categoryData[tickVal].textStyle) {\n                    itemTextStyleModel = new Model(\n                        categoryData[tickVal].textStyle, textStyleModel, axisModel.ecModel\n                    );\n                }\n                var textColor = itemTextStyleModel.getTextColor()\n                    || axisModel.get('axisLine.lineStyle.color');\n\n                var tickCoord = axis.dataToCoord(tickVal);\n                var pos = [\n                    tickCoord,\n                    opt.labelOffset + opt.labelDirection * labelMargin\n                ];\n                var labelStr = axis.scale.getLabel(tickVal);\n\n                var textEl = new graphic.Text({\n\n                    // Id for animation\n                    anid: 'label_' + tickVal,\n\n                    style: {\n                        text: labels[index],\n                        textAlign: itemTextStyleModel.get('align', true) || labelLayout.textAlign,\n                        textVerticalAlign: itemTextStyleModel.get('baseline', true) || labelLayout.textVerticalAlign,\n                        textFont: itemTextStyleModel.getFont(),\n                        fill: typeof textColor === 'function'\n                            ? textColor(\n                                // (1) In category axis with data zoom, tick is not the original\n                                // index of axis.data. So tick should not be exposed to user\n                                // in category axis.\n                                // (2) Compatible with previous version, which always returns labelStr.\n                                // But in interval scale labelStr is like '223,445', which maked\n                                // user repalce ','. So we modify it to return original val but remain\n                                // it as 'string' to avoid error in replacing.\n                                axis.type === 'category' ? labelStr : axis.type === 'value' ? tickVal + '' : tickVal,\n                                index\n                            )\n                            : textColor\n                    },\n                    position: pos,\n                    rotation: labelLayout.rotation,\n                    silent: silent,\n                    z2: 10\n                });\n\n                // Pack data for mouse event\n                if (triggerEvent) {\n                    textEl.eventData = makeAxisEventDataBase(axisModel);\n                    textEl.eventData.targetType = 'axisLabel';\n                    textEl.eventData.value = labelStr;\n                }\n\n                // FIXME\n                this._dumbGroup.add(textEl);\n                textEl.updateTransform();\n\n                textEls.push(textEl);\n                this.group.add(textEl);\n\n                textEl.decomposeTransform();\n\n            }, this);\n\n            fixMinMaxLabelShow(axisModel, textEls);\n        },\n\n        /**\n         * @private\n         */\n        axisName: function () {\n            var opt = this.opt;\n            var axisModel = this.axisModel;\n            var name = retrieve(opt.axisName, axisModel.get('name'));\n\n            if (!name) {\n                return;\n            }\n\n            var nameLocation = axisModel.get('nameLocation');\n            var nameDirection = opt.nameDirection;\n            var textStyleModel = axisModel.getModel('nameTextStyle');\n            var gap = axisModel.get('nameGap') || 0;\n\n            var extent = this.axisModel.axis.getExtent();\n            var gapSignal = extent[0] > extent[1] ? -1 : 1;\n            var pos = [\n                nameLocation === 'start'\n                    ? extent[0] - gapSignal * gap\n                    : nameLocation === 'end'\n                    ? extent[1] + gapSignal * gap\n                    : (extent[0] + extent[1]) / 2, // 'middle'\n                // Reuse labelOffset.\n                nameLocation === 'middle' ? opt.labelOffset + nameDirection * gap : 0\n            ];\n\n            var labelLayout;\n\n            var nameRotation = axisModel.get('nameRotate');\n            if (nameRotation != null) {\n                nameRotation = nameRotation * PI / 180; // To radian.\n            }\n\n            var axisNameAvailableWidth;\n\n            if (nameLocation === 'middle') {\n                labelLayout = innerTextLayout(\n                    opt.rotation,\n                    nameRotation != null ? nameRotation : opt.rotation, // Adapt to axis.\n                    nameDirection\n                );\n            }\n            else {\n                labelLayout = endTextLayout(\n                    opt, nameLocation, nameRotation || 0, extent\n                );\n\n                axisNameAvailableWidth = opt.axisNameAvailableWidth;\n                if (axisNameAvailableWidth != null) {\n                    axisNameAvailableWidth = Math.abs(\n                        axisNameAvailableWidth / Math.sin(labelLayout.rotation)\n                    );\n                    !isFinite(axisNameAvailableWidth) && (axisNameAvailableWidth = null);\n                }\n            }\n\n            var textFont = textStyleModel.getFont();\n\n            var truncateOpt = axisModel.get('nameTruncate', true) || {};\n            var ellipsis = truncateOpt.ellipsis;\n            var maxWidth = retrieve(\n                opt.nameTruncateMaxWidth, truncateOpt.maxWidth, axisNameAvailableWidth\n            );\n            var truncatedText = (ellipsis != null && maxWidth != null)\n                ? formatUtil.truncateText(\n                    name, maxWidth, textFont, ellipsis,\n                    {minChar: 2, placeholder: truncateOpt.placeholder}\n                )\n                : name;\n\n            var tooltipOpt = axisModel.get('tooltip', true);\n\n            var mainType = axisModel.mainType;\n            var formatterParams = {\n                componentType: mainType,\n                name: name,\n                $vars: ['name']\n            };\n            formatterParams[mainType + 'Index'] = axisModel.componentIndex;\n\n            var textEl = new graphic.Text({\n\n                // Id for animation\n                anid: 'name',\n\n                __fullText: name,\n                __truncatedText: truncatedText,\n\n                style: {\n                    text: truncatedText,\n                    textFont: textFont,\n                    fill: textStyleModel.getTextColor()\n                        || axisModel.get('axisLine.lineStyle.color'),\n                    textAlign: labelLayout.textAlign,\n                    textVerticalAlign: labelLayout.textVerticalAlign\n                },\n                position: pos,\n                rotation: labelLayout.rotation,\n                silent: isSilent(axisModel),\n                z2: 1,\n                tooltip: (tooltipOpt && tooltipOpt.show)\n                    ? zrUtil.extend({\n                        content: name,\n                        formatter: function () {\n                            return name;\n                        },\n                        formatterParams: formatterParams\n                    }, tooltipOpt)\n                    : null\n            });\n\n            if (axisModel.get('triggerEvent')) {\n                textEl.eventData = makeAxisEventDataBase(axisModel);\n                textEl.eventData.targetType = 'axisName';\n                textEl.eventData.name = name;\n            }\n\n            // FIXME\n            this._dumbGroup.add(textEl);\n            textEl.updateTransform();\n\n            this.group.add(textEl);\n\n            textEl.decomposeTransform();\n        }\n\n    };\n\n    /**\n     * @public\n     * @static\n     * @param {Object} opt\n     * @param {number} axisRotation in radian\n     * @param {number} textRotation in radian\n     * @param {number} direction\n     * @return {Object} {\n     *  rotation, // according to axis\n     *  textAlign,\n     *  textVerticalAlign\n     * }\n     */\n    var innerTextLayout = AxisBuilder.innerTextLayout = function (axisRotation, textRotation, direction) {\n        var rotationDiff = remRadian(textRotation - axisRotation);\n        var textAlign;\n        var textVerticalAlign;\n\n        if (isRadianAroundZero(rotationDiff)) { // Label is parallel with axis line.\n            textVerticalAlign = direction > 0 ? 'top' : 'bottom';\n            textAlign = 'center';\n        }\n        else if (isRadianAroundZero(rotationDiff - PI)) { // Label is inverse parallel with axis line.\n            textVerticalAlign = direction > 0 ? 'bottom' : 'top';\n            textAlign = 'center';\n        }\n        else {\n            textVerticalAlign = 'middle';\n\n            if (rotationDiff > 0 && rotationDiff < PI) {\n                textAlign = direction > 0 ? 'right' : 'left';\n            }\n            else {\n                textAlign = direction > 0 ? 'left' : 'right';\n            }\n        }\n\n        return {\n            rotation: rotationDiff,\n            textAlign: textAlign,\n            textVerticalAlign: textVerticalAlign\n        };\n    };\n\n    function endTextLayout(opt, textPosition, textRotate, extent) {\n        var rotationDiff = remRadian(textRotate - opt.rotation);\n        var textAlign;\n        var textVerticalAlign;\n        var inverse = extent[0] > extent[1];\n        var onLeft = (textPosition === 'start' && !inverse)\n            || (textPosition !== 'start' && inverse);\n\n        if (isRadianAroundZero(rotationDiff - PI / 2)) {\n            textVerticalAlign = onLeft ? 'bottom' : 'top';\n            textAlign = 'center';\n        }\n        else if (isRadianAroundZero(rotationDiff - PI * 1.5)) {\n            textVerticalAlign = onLeft ? 'top' : 'bottom';\n            textAlign = 'center';\n        }\n        else {\n            textVerticalAlign = 'middle';\n            if (rotationDiff < PI * 1.5 && rotationDiff > PI / 2) {\n                textAlign = onLeft ? 'left' : 'right';\n            }\n            else {\n                textAlign = onLeft ? 'right' : 'left';\n            }\n        }\n\n        return {\n            rotation: rotationDiff,\n            textAlign: textAlign,\n            textVerticalAlign: textVerticalAlign\n        };\n    }\n\n    function isSilent(axisModel) {\n        var tooltipOpt = axisModel.get('tooltip');\n        return axisModel.get('silent')\n            // Consider mouse cursor, add these restrictions.\n            || !(\n                axisModel.get('triggerEvent') || (tooltipOpt && tooltipOpt.show)\n            );\n    }\n\n    function fixMinMaxLabelShow(axisModel, textEls) {\n        // If min or max are user set, we need to check\n        // If the tick on min(max) are overlap on their neighbour tick\n        // If they are overlapped, we need to hide the min(max) tick label\n        var showMinLabel = axisModel.get('axisLabel.showMinLabel');\n        var showMaxLabel = axisModel.get('axisLabel.showMaxLabel');\n        var firstLabel = textEls[0];\n        var nextLabel = textEls[1];\n        var lastLabel = textEls[textEls.length - 1];\n        var prevLabel = textEls[textEls.length - 2];\n\n        if (showMinLabel === false) {\n            firstLabel.ignore = true;\n        }\n        else if (axisModel.getMin() != null && isTwoLabelOverlapped(firstLabel, nextLabel)) {\n            showMinLabel ? (nextLabel.ignore = true) : (firstLabel.ignore = true);\n        }\n\n        if (showMaxLabel === false) {\n            lastLabel.ignore = true;\n        }\n        else if (axisModel.getMax() != null && isTwoLabelOverlapped(prevLabel, lastLabel)) {\n            showMaxLabel ? (prevLabel.ignore = true) : (lastLabel.ignore = true);\n        }\n    }\n\n    function isTwoLabelOverlapped(current, next, labelLayout) {\n        // current and next has the same rotation.\n        var firstRect = current && current.getBoundingRect().clone();\n        var nextRect = next && next.getBoundingRect().clone();\n\n        if (!firstRect || !nextRect) {\n            return;\n        }\n\n        // When checking intersect of two rotated labels, we use mRotationBack\n        // to avoid that boundingRect is enlarge when using `boundingRect.applyTransform`.\n        var mRotationBack = matrix.identity([]);\n        matrix.rotate(mRotationBack, mRotationBack, -current.rotation);\n\n        firstRect.applyTransform(matrix.mul([], mRotationBack, current.getLocalTransform()));\n        nextRect.applyTransform(matrix.mul([], mRotationBack, next.getLocalTransform()));\n\n        return firstRect.intersect(nextRect);\n    }\n\n\n    /**\n     * @static\n     */\n    var ifIgnoreOnTick = AxisBuilder.ifIgnoreOnTick = function (axis, i, interval) {\n        var rawTick;\n        var scale = axis.scale;\n        return scale.type === 'ordinal'\n            && (\n                typeof interval === 'function'\n                    ? (\n                        rawTick = scale.getTicks()[i],\n                        !interval(rawTick, scale.getLabel(rawTick))\n                    )\n                    : i % (interval + 1)\n            );\n    };\n\n    /**\n     * @static\n     */\n    var getInterval = AxisBuilder.getInterval = function (model, labelInterval) {\n        var interval = model.get('interval');\n        if (interval == null || interval == 'auto') {\n            interval = labelInterval;\n        }\n        return interval;\n    };\n\n    module.exports = AxisBuilder;\n\n\n\n/***/ }),\n\n/***/ \"cOuU\":\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * Box selection tool.\n *\n * @module echarts/component/helper/BrushController\n */\n\n\n\n    var Eventful = __webpack_require__(\"feXt\");\n    var zrUtil = __webpack_require__(\"nw1Z\");\n    var graphic = __webpack_require__(\"y2WT\");\n    var interactionMutex = __webpack_require__(\"NPNz\");\n    var DataDiffer = __webpack_require__(\"VfTC\");\n\n    var curry = zrUtil.curry;\n    var each = zrUtil.each;\n    var map = zrUtil.map;\n    var mathMin = Math.min;\n    var mathMax = Math.max;\n    var mathPow = Math.pow;\n\n    var COVER_Z = 10000;\n    var UNSELECT_THRESHOLD = 6;\n    var MIN_RESIZE_LINE_WIDTH = 6;\n    var MUTEX_RESOURCE_KEY = 'globalPan';\n\n    var DIRECTION_MAP = {\n        w: [0, 0],\n        e: [0, 1],\n        n: [1, 0],\n        s: [1, 1]\n    };\n    var CURSOR_MAP = {\n        w: 'ew',\n        e: 'ew',\n        n: 'ns',\n        s: 'ns',\n        ne: 'nesw',\n        sw: 'nesw',\n        nw: 'nwse',\n        se: 'nwse'\n    };\n    var DEFAULT_BRUSH_OPT = {\n        brushStyle: {\n            lineWidth: 2,\n            stroke: 'rgba(0,0,0,0.3)',\n            fill: 'rgba(0,0,0,0.1)'\n        },\n        transformable: true,\n        brushMode: 'single',\n        removeOnClick: false\n    };\n\n    var baseUID = 0;\n\n    /**\n     * @alias module:echarts/component/helper/BrushController\n     * @constructor\n     * @mixin {module:zrender/mixin/Eventful}\n     * @event module:echarts/component/helper/BrushController#brush\n     *        params:\n     *            areas: Array.<Array>, coord relates to container group,\n     *                                    If no container specified, to global.\n     *            opt {\n     *                isEnd: boolean,\n     *                removeOnClick: boolean\n     *            }\n     *\n     * @param {module:zrender/zrender~ZRender} zr\n     */\n    function BrushController(zr) {\n\n        if (__DEV__) {\n            zrUtil.assert(zr);\n        }\n\n        Eventful.call(this);\n\n        /**\n         * @type {module:zrender/zrender~ZRender}\n         * @private\n         */\n        this._zr = zr;\n\n        /**\n         * @type {module:zrender/container/Group}\n         * @readOnly\n         */\n        this.group = new graphic.Group();\n\n        /**\n         * Only for drawing (after enabledBrush).\n         *     'line', 'rect', 'polygon' or false\n         *     If passing false/null/undefined, disable brush.\n         *     If passing 'auto', determined by panel.defaultBrushType\n         * @private\n         * @type {string}\n         */\n        this._brushType;\n\n        /**\n         * Only for drawing (after enabledBrush).\n         *\n         * @private\n         * @type {Object}\n         */\n        this._brushOption;\n\n        /**\n         * @private\n         * @type {Object}\n         */\n        this._panels;\n\n        /**\n         * @private\n         * @type {Array.<nubmer>}\n         */\n        this._track = [];\n\n        /**\n         * @private\n         * @type {boolean}\n         */\n        this._dragging;\n\n        /**\n         * @private\n         * @type {Array}\n         */\n        this._covers = [];\n\n        /**\n         * @private\n         * @type {moudule:zrender/container/Group}\n         */\n        this._creatingCover;\n\n        /**\n         * `true` means global panel\n         * @private\n         * @type {module:zrender/container/Group|boolean}\n         */\n        this._creatingPanel;\n\n        /**\n         * @private\n         * @type {boolean}\n         */\n        this._enableGlobalPan;\n\n        /**\n         * @private\n         * @type {boolean}\n         */\n        if (__DEV__) {\n            this._mounted;\n        }\n\n        /**\n         * @private\n         * @type {string}\n         */\n        this._uid = 'brushController_' + baseUID++;\n\n        /**\n         * @private\n         * @type {Object}\n         */\n        this._handlers = {};\n        each(mouseHandlers, function (handler, eventName) {\n            this._handlers[eventName] = zrUtil.bind(handler, this);\n        }, this);\n    }\n\n    BrushController.prototype = {\n\n        constructor: BrushController,\n\n        /**\n         * If set to null/undefined/false, select disabled.\n         * @param {Object} brushOption\n         * @param {string|boolean} brushOption.brushType 'line', 'rect', 'polygon' or false\n         *                          If passing false/null/undefined, disable brush.\n         *                          If passing 'auto', determined by panel.defaultBrushType.\n         *                              ('auto' can not be used in global panel)\n         * @param {number} [brushOption.brushMode='single'] 'single' or 'multiple'\n         * @param {boolean} [brushOption.transformable=true]\n         * @param {boolean} [brushOption.removeOnClick=false]\n         * @param {Object} [brushOption.brushStyle]\n         * @param {number} [brushOption.brushStyle.width]\n         * @param {number} [brushOption.brushStyle.lineWidth]\n         * @param {string} [brushOption.brushStyle.stroke]\n         * @param {string} [brushOption.brushStyle.fill]\n         * @param {number} [brushOption.z]\n         */\n        enableBrush: function (brushOption) {\n            if (__DEV__) {\n                zrUtil.assert(this._mounted);\n            }\n\n            this._brushType && doDisableBrush(this);\n            brushOption.brushType && doEnableBrush(this, brushOption);\n\n            return this;\n        },\n\n        /**\n         * @param {Array.<Object>} panelOpts If not pass, it is global brush.\n         *        Each items: {\n         *            panelId, // mandatory.\n         *            clipPath, // mandatory. function.\n         *            isTargetByCursor, // mandatory. function.\n         *            defaultBrushType, // optional, only used when brushType is 'auto'.\n         *            getLinearBrushOtherExtent, // optional. function.\n         *        }\n         */\n        setPanels: function (panelOpts) {\n            if (panelOpts && panelOpts.length) {\n                var panels = this._panels = {};\n                zrUtil.each(panelOpts, function (panelOpts) {\n                    panels[panelOpts.panelId] = zrUtil.clone(panelOpts);\n                });\n            }\n            else {\n                this._panels = null;\n            }\n            return this;\n        },\n\n        /**\n         * @param {Object} [opt]\n         * @return {boolean} [opt.enableGlobalPan=false]\n         */\n        mount: function (opt) {\n            opt = opt || {};\n\n            if (__DEV__) {\n                this._mounted = true; // should be at first.\n            }\n\n            this._enableGlobalPan = opt.enableGlobalPan;\n\n            var thisGroup = this.group;\n            this._zr.add(thisGroup);\n\n            thisGroup.attr({\n                position: opt.position || [0, 0],\n                rotation: opt.rotation || 0,\n                scale: opt.scale || [1, 1]\n            });\n            this._transform = thisGroup.getLocalTransform();\n\n            return this;\n        },\n\n        eachCover: function (cb, context) {\n            each(this._covers, cb, context);\n        },\n\n        /**\n         * Update covers.\n         * @param {Array.<Object>} brushOptionList Like:\n         *        [\n         *            {id: 'xx', brushType: 'line', range: [23, 44], brushStyle, transformable},\n         *            {id: 'yy', brushType: 'rect', range: [[23, 44], [23, 54]]},\n         *            ...\n         *        ]\n         *        `brushType` is required in each cover info. (can not be 'auto')\n         *        `id` is not mandatory.\n         *        `brushStyle`, `transformable` is not mandatory, use DEFAULT_BRUSH_OPT by default.\n         *        If brushOptionList is null/undefined, all covers removed.\n         */\n        updateCovers: function (brushOptionList) {\n            if (__DEV__) {\n                zrUtil.assert(this._mounted);\n            }\n\n            brushOptionList = zrUtil.map(brushOptionList, function (brushOption) {\n                return zrUtil.merge(zrUtil.clone(DEFAULT_BRUSH_OPT), brushOption, true);\n            });\n\n            var tmpIdPrefix = '\\0-brush-index-';\n            var oldCovers = this._covers;\n            var newCovers = this._covers = [];\n            var controller = this;\n            var creatingCover = this._creatingCover;\n\n            (new DataDiffer(oldCovers, brushOptionList, oldGetKey, getKey))\n                .add(addOrUpdate)\n                .update(addOrUpdate)\n                .remove(remove)\n                .execute();\n\n            return this;\n\n            function getKey(brushOption, index) {\n                return (brushOption.id != null ? brushOption.id : tmpIdPrefix + index)\n                    + '-' + brushOption.brushType;\n            }\n\n            function oldGetKey(cover, index) {\n                return getKey(cover.__brushOption, index);\n            }\n\n            function addOrUpdate(newIndex, oldIndex) {\n                var newBrushOption = brushOptionList[newIndex];\n                // Consider setOption in event listener of brushSelect,\n                // where updating cover when creating should be forbiden.\n                if (oldIndex != null && oldCovers[oldIndex] === creatingCover) {\n                    newCovers[newIndex] = oldCovers[oldIndex];\n                }\n                else {\n                    var cover = newCovers[newIndex] = oldIndex != null\n                        ? (\n                            oldCovers[oldIndex].__brushOption = newBrushOption,\n                            oldCovers[oldIndex]\n                        )\n                        : endCreating(controller, createCover(controller, newBrushOption));\n                    updateCoverAfterCreation(controller, cover);\n                }\n            }\n\n            function remove(oldIndex) {\n                if (oldCovers[oldIndex] !== creatingCover) {\n                    controller.group.remove(oldCovers[oldIndex]);\n                }\n            }\n        },\n\n        unmount: function () {\n            if (__DEV__) {\n                if (!this._mounted) {\n                    return;\n                }\n            }\n\n            this.enableBrush(false);\n\n            // container may 'removeAll' outside.\n            clearCovers(this);\n            this._zr.remove(this.group);\n\n            if (__DEV__) {\n                this._mounted = false; // should be at last.\n            }\n\n            return this;\n        },\n\n        dispose: function () {\n            this.unmount();\n            this.off();\n        }\n    };\n\n    zrUtil.mixin(BrushController, Eventful);\n\n    function doEnableBrush(controller, brushOption) {\n        var zr = controller._zr;\n\n        // Consider roam, which takes globalPan too.\n        if (!controller._enableGlobalPan) {\n            interactionMutex.take(zr, MUTEX_RESOURCE_KEY, controller._uid);\n        }\n\n        each(controller._handlers, function (handler, eventName) {\n            zr.on(eventName, handler);\n        });\n\n        controller._brushType = brushOption.brushType;\n        controller._brushOption = zrUtil.merge(zrUtil.clone(DEFAULT_BRUSH_OPT), brushOption, true);\n    }\n\n    function doDisableBrush(controller) {\n        var zr = controller._zr;\n\n        interactionMutex.release(zr, MUTEX_RESOURCE_KEY, controller._uid);\n\n        each(controller._handlers, function (handler, eventName) {\n            zr.off(eventName, handler);\n        });\n\n        controller._brushType = controller._brushOption = null;\n    }\n\n    function createCover(controller, brushOption) {\n        var cover = coverRenderers[brushOption.brushType].createCover(controller, brushOption);\n        cover.__brushOption = brushOption;\n        updateZ(cover, brushOption);\n        controller.group.add(cover);\n        return cover;\n    }\n\n    function endCreating(controller, creatingCover) {\n        var coverRenderer = getCoverRenderer(creatingCover);\n        if (coverRenderer.endCreating) {\n            coverRenderer.endCreating(controller, creatingCover);\n            updateZ(creatingCover, creatingCover.__brushOption);\n        }\n        return creatingCover;\n    }\n\n    function updateCoverShape(controller, cover) {\n        var brushOption = cover.__brushOption;\n        getCoverRenderer(cover).updateCoverShape(\n            controller, cover, brushOption.range, brushOption\n        );\n    }\n\n    function updateZ(cover, brushOption) {\n        var z = brushOption.z;\n        z == null && (z = COVER_Z);\n        cover.traverse(function (el) {\n            el.z = z;\n            el.z2 = z; // Consider in given container.\n        });\n    }\n\n    function updateCoverAfterCreation(controller, cover) {\n        getCoverRenderer(cover).updateCommon(controller, cover);\n        updateCoverShape(controller, cover);\n    }\n\n    function getCoverRenderer(cover) {\n        return coverRenderers[cover.__brushOption.brushType];\n    }\n\n    // return target panel or `true` (means global panel)\n    function getPanelByPoint(controller, e, localCursorPoint) {\n        var panels = controller._panels;\n        if (!panels) {\n            return true; // Global panel\n        }\n        var panel;\n        var transform = controller._transform;\n        each(panels, function (pn) {\n            pn.isTargetByCursor(e, localCursorPoint, transform) && (panel = pn);\n        });\n        return panel;\n    }\n\n    // Return a panel or true\n    function getPanelByCover(controller, cover) {\n        var panels = controller._panels;\n        if (!panels) {\n            return true; // Global panel\n        }\n        var panelId = cover.__brushOption.panelId;\n        // User may give cover without coord sys info,\n        // which is then treated as global panel.\n        return panelId != null ? panels[panelId] : true;\n    }\n\n    function clearCovers(controller) {\n        var covers = controller._covers;\n        var originalLength = covers.length;\n        each(covers, function (cover) {\n            controller.group.remove(cover);\n        }, controller);\n        covers.length = 0;\n\n        return !!originalLength;\n    }\n\n    function trigger(controller, opt) {\n        var areas = map(controller._covers, function (cover) {\n            var brushOption = cover.__brushOption;\n            var range = zrUtil.clone(brushOption.range);\n            return {\n                brushType: brushOption.brushType,\n                panelId: brushOption.panelId,\n                range: range\n            };\n        });\n\n        controller.trigger('brush', areas, {\n            isEnd: !!opt.isEnd,\n            removeOnClick: !!opt.removeOnClick\n        });\n    }\n\n    function shouldShowCover(controller) {\n        var track = controller._track;\n\n        if (!track.length) {\n            return false;\n        }\n\n        var p2 = track[track.length - 1];\n        var p1 = track[0];\n        var dx = p2[0] - p1[0];\n        var dy = p2[1] - p1[1];\n        var dist = mathPow(dx * dx + dy * dy, 0.5);\n\n        return dist > UNSELECT_THRESHOLD;\n    }\n\n    function getTrackEnds(track) {\n        var tail = track.length - 1;\n        tail < 0 && (tail = 0);\n        return [track[0], track[tail]];\n    }\n\n    function createBaseRectCover(doDrift, controller, brushOption, edgeNames) {\n        var cover = new graphic.Group();\n\n        cover.add(new graphic.Rect({\n            name: 'main',\n            style: makeStyle(brushOption),\n            silent: true,\n            draggable: true,\n            cursor: 'move',\n            drift: curry(doDrift, controller, cover, 'nswe'),\n            ondragend: curry(trigger, controller, {isEnd: true})\n        }));\n\n        each(\n            edgeNames,\n            function (name) {\n                cover.add(new graphic.Rect({\n                    name: name,\n                    style: {opacity: 0},\n                    draggable: true,\n                    silent: true,\n                    invisible: true,\n                    drift: curry(doDrift, controller, cover, name),\n                    ondragend: curry(trigger, controller, {isEnd: true})\n                }));\n            }\n        );\n\n        return cover;\n    }\n\n    function updateBaseRect(controller, cover, localRange, brushOption) {\n        var lineWidth = brushOption.brushStyle.lineWidth || 0;\n        var handleSize = mathMax(lineWidth, MIN_RESIZE_LINE_WIDTH);\n        var x = localRange[0][0];\n        var y = localRange[1][0];\n        var xa = x - lineWidth / 2;\n        var ya = y - lineWidth / 2;\n        var x2 = localRange[0][1];\n        var y2 = localRange[1][1];\n        var x2a = x2 - handleSize + lineWidth / 2;\n        var y2a = y2 - handleSize + lineWidth / 2;\n        var width = x2 - x;\n        var height = y2 - y;\n        var widtha = width + lineWidth;\n        var heighta = height + lineWidth;\n\n        updateRectShape(controller, cover, 'main', x, y, width, height);\n\n        if (brushOption.transformable) {\n            updateRectShape(controller, cover, 'w', xa, ya, handleSize, heighta);\n            updateRectShape(controller, cover, 'e', x2a, ya, handleSize, heighta);\n            updateRectShape(controller, cover, 'n', xa, ya, widtha, handleSize);\n            updateRectShape(controller, cover, 's', xa, y2a, widtha, handleSize);\n\n            updateRectShape(controller, cover, 'nw', xa, ya, handleSize, handleSize);\n            updateRectShape(controller, cover, 'ne', x2a, ya, handleSize, handleSize);\n            updateRectShape(controller, cover, 'sw', xa, y2a, handleSize, handleSize);\n            updateRectShape(controller, cover, 'se', x2a, y2a, handleSize, handleSize);\n        }\n    }\n\n    function updateCommon(controller, cover) {\n        var brushOption = cover.__brushOption;\n        var transformable = brushOption.transformable;\n\n        var mainEl = cover.childAt(0);\n        mainEl.useStyle(makeStyle(brushOption));\n        mainEl.attr({\n            silent: !transformable,\n            cursor: transformable ? 'move' : 'default'\n        });\n\n        each(\n            ['w', 'e', 'n', 's', 'se', 'sw', 'ne', 'nw'],\n            function (name) {\n                var el = cover.childOfName(name);\n                var globalDir = getGlobalDirection(controller, name);\n\n                el && el.attr({\n                    silent: !transformable,\n                    invisible: !transformable,\n                    cursor: transformable ? CURSOR_MAP[globalDir] + '-resize' : null\n                });\n            }\n        );\n    }\n\n    function updateRectShape(controller, cover, name, x, y, w, h) {\n        var el = cover.childOfName(name);\n        el && el.setShape(pointsToRect(\n            clipByPanel(controller, cover, [[x, y], [x + w, y + h]])\n        ));\n    }\n\n    function makeStyle(brushOption) {\n        return zrUtil.defaults({strokeNoScale: true}, brushOption.brushStyle);\n    }\n\n    function formatRectRange(x, y, x2, y2) {\n        var min = [mathMin(x, x2), mathMin(y, y2)];\n        var max = [mathMax(x, x2), mathMax(y, y2)];\n\n        return [\n            [min[0], max[0]], // x range\n            [min[1], max[1]] // y range\n        ];\n    }\n\n    function getTransform(controller) {\n        return graphic.getTransform(controller.group);\n    }\n\n    function getGlobalDirection(controller, localDirection) {\n        if (localDirection.length > 1) {\n            localDirection = localDirection.split('');\n            var globalDir = [\n                getGlobalDirection(controller, localDirection[0]),\n                getGlobalDirection(controller, localDirection[1])\n            ];\n            (globalDir[0] === 'e' || globalDir[0] === 'w') && globalDir.reverse();\n            return globalDir.join('');\n        }\n        else {\n            var map = {w: 'left', e: 'right', n: 'top', s: 'bottom'};\n            var inverseMap = {left: 'w', right: 'e', top: 'n', bottom: 's'};\n            var globalDir = graphic.transformDirection(\n                map[localDirection], getTransform(controller)\n            );\n            return inverseMap[globalDir];\n        }\n    }\n\n    function driftRect(toRectRange, fromRectRange, controller, cover, name, dx, dy, e) {\n        var brushOption = cover.__brushOption;\n        var rectRange = toRectRange(brushOption.range);\n        var localDelta = toLocalDelta(controller, dx, dy);\n\n        each(name.split(''), function (namePart) {\n            var ind = DIRECTION_MAP[namePart];\n            rectRange[ind[0]][ind[1]] += localDelta[ind[0]];\n        });\n\n        brushOption.range = fromRectRange(formatRectRange(\n            rectRange[0][0], rectRange[1][0], rectRange[0][1], rectRange[1][1]\n        ));\n\n        updateCoverAfterCreation(controller, cover);\n        trigger(controller, {isEnd: false});\n    }\n\n    function driftPolygon(controller, cover, dx, dy, e) {\n        var range = cover.__brushOption.range;\n        var localDelta = toLocalDelta(controller, dx, dy);\n\n        each(range, function (point) {\n            point[0] += localDelta[0];\n            point[1] += localDelta[1];\n        });\n\n        updateCoverAfterCreation(controller, cover);\n        trigger(controller, {isEnd: false});\n    }\n\n    function toLocalDelta(controller, dx, dy) {\n        var thisGroup = controller.group;\n        var localD = thisGroup.transformCoordToLocal(dx, dy);\n        var localZero = thisGroup.transformCoordToLocal(0, 0);\n\n        return [localD[0] - localZero[0], localD[1] - localZero[1]];\n    }\n\n    function clipByPanel(controller, cover, data) {\n        var panel = getPanelByCover(controller, cover);\n\n        return (panel && panel !== true)\n            ? panel.clipPath(data, controller._transform)\n            : zrUtil.clone(data);\n    }\n\n    function pointsToRect(points) {\n        var xmin = mathMin(points[0][0], points[1][0]);\n        var ymin = mathMin(points[0][1], points[1][1]);\n        var xmax = mathMax(points[0][0], points[1][0]);\n        var ymax = mathMax(points[0][1], points[1][1]);\n\n        return {\n            x: xmin,\n            y: ymin,\n            width: xmax - xmin,\n            height: ymax - ymin\n        };\n    }\n\n    function resetCursor(controller, e, localCursorPoint) {\n        // Check active\n        if (!controller._brushType) {\n            return;\n        }\n\n        var zr = controller._zr;\n        var covers = controller._covers;\n        var currPanel = getPanelByPoint(controller, e, localCursorPoint);\n\n        // Check whether in covers.\n        if (!controller._dragging) {\n            for (var i = 0; i < covers.length; i++) {\n                var brushOption = covers[i].__brushOption;\n                if (currPanel\n                    && (currPanel === true || brushOption.panelId === currPanel.panelId)\n                    && coverRenderers[brushOption.brushType].contain(\n                        covers[i], localCursorPoint[0], localCursorPoint[1]\n                    )\n                ) {\n                    // Use cursor style set on cover.\n                    return;\n                }\n            }\n        }\n\n        currPanel && zr.setCursorStyle('crosshair');\n    }\n\n    function preventDefault(e) {\n        var rawE = e.event;\n        rawE.preventDefault && rawE.preventDefault();\n    }\n\n    function mainShapeContain(cover, x, y) {\n        return cover.childOfName('main').contain(x, y);\n    }\n\n    function updateCoverByMouse(controller, e, localCursorPoint, isEnd) {\n        var creatingCover = controller._creatingCover;\n        var panel = controller._creatingPanel;\n        var thisBrushOption = controller._brushOption;\n        var eventParams;\n\n        controller._track.push(localCursorPoint.slice());\n\n        if (shouldShowCover(controller) || creatingCover) {\n\n            if (panel && !creatingCover) {\n                thisBrushOption.brushMode === 'single' && clearCovers(controller);\n                var brushOption = zrUtil.clone(thisBrushOption);\n                brushOption.brushType = determineBrushType(brushOption.brushType, panel);\n                brushOption.panelId = panel === true ? null : panel.panelId;\n                creatingCover = controller._creatingCover = createCover(controller, brushOption);\n                controller._covers.push(creatingCover);\n            }\n\n            if (creatingCover) {\n                var coverRenderer = coverRenderers[determineBrushType(controller._brushType, panel)];\n                var coverBrushOption = creatingCover.__brushOption;\n\n                coverBrushOption.range = coverRenderer.getCreatingRange(\n                    clipByPanel(controller, creatingCover, controller._track)\n                );\n\n                if (isEnd) {\n                    endCreating(controller, creatingCover);\n                    coverRenderer.updateCommon(controller, creatingCover);\n                }\n\n                updateCoverShape(controller, creatingCover);\n\n                eventParams = {isEnd: isEnd};\n            }\n        }\n        else if (\n            isEnd\n            && thisBrushOption.brushMode === 'single'\n            && thisBrushOption.removeOnClick\n        ) {\n            // Help user to remove covers easily, only by a tiny drag, in 'single' mode.\n            // But a single click do not clear covers, because user may have casual\n            // clicks (for example, click on other component and do not expect covers\n            // disappear).\n            // Only some cover removed, trigger action, but not every click trigger action.\n            if (getPanelByPoint(controller, e, localCursorPoint) && clearCovers(controller)) {\n                eventParams = {isEnd: isEnd, removeOnClick: true};\n            }\n        }\n\n        return eventParams;\n    }\n\n    function determineBrushType(brushType, panel) {\n        if (brushType === 'auto') {\n            if (__DEV__) {\n                zrUtil.assert(\n                    panel && panel.defaultBrushType,\n                    'MUST have defaultBrushType when brushType is \"atuo\"'\n                );\n            }\n            return panel.defaultBrushType;\n        }\n        return brushType;\n    }\n\n    var mouseHandlers = {\n\n        mousedown: function (e) {\n            if (this._dragging) {\n                // In case some browser do not support globalOut,\n                // and release mose out side the browser.\n                handleDragEnd.call(this, e);\n            }\n            else if (!e.target || !e.target.draggable) {\n\n                preventDefault(e);\n\n                var localCursorPoint = this.group.transformCoordToLocal(e.offsetX, e.offsetY);\n\n                this._creatingCover = null;\n                var panel = this._creatingPanel = getPanelByPoint(this, e, localCursorPoint);\n\n                if (panel) {\n                    this._dragging = true;\n                    this._track = [localCursorPoint.slice()];\n                }\n            }\n        },\n\n        mousemove: function (e) {\n            var localCursorPoint = this.group.transformCoordToLocal(e.offsetX, e.offsetY);\n\n            resetCursor(this, e, localCursorPoint);\n\n            if (this._dragging) {\n\n                preventDefault(e);\n\n                var eventParams = updateCoverByMouse(this, e, localCursorPoint, false);\n\n                eventParams && trigger(this, eventParams);\n            }\n        },\n\n        mouseup: handleDragEnd //,\n\n        // FIXME\n        // in tooltip, globalout should not be triggered.\n        // globalout: handleDragEnd\n    };\n\n    function handleDragEnd(e) {\n        if (this._dragging) {\n\n            preventDefault(e);\n\n            var localCursorPoint = this.group.transformCoordToLocal(e.offsetX, e.offsetY);\n            var eventParams = updateCoverByMouse(this, e, localCursorPoint, true);\n\n            this._dragging = false;\n            this._track = [];\n            this._creatingCover = null;\n\n            // trigger event shoule be at final, after procedure will be nested.\n            eventParams && trigger(this, eventParams);\n        }\n    }\n\n    /**\n     * key: brushType\n     * @type {Object}\n     */\n    var coverRenderers = {\n\n        lineX: getLineRenderer(0),\n\n        lineY: getLineRenderer(1),\n\n        rect: {\n            createCover: function (controller, brushOption) {\n                return createBaseRectCover(\n                    curry(\n                        driftRect,\n                        function (range) {\n                            return range;\n                        },\n                        function (range) {\n                            return range;\n                        }\n                    ),\n                    controller,\n                    brushOption,\n                    ['w', 'e', 'n', 's', 'se', 'sw', 'ne', 'nw']\n                );\n            },\n            getCreatingRange: function (localTrack) {\n                var ends = getTrackEnds(localTrack);\n                return formatRectRange(ends[1][0], ends[1][1], ends[0][0], ends[0][1]);\n            },\n            updateCoverShape: function (controller, cover, localRange, brushOption) {\n                updateBaseRect(controller, cover, localRange, brushOption);\n            },\n            updateCommon: updateCommon,\n            contain: mainShapeContain\n        },\n\n        polygon: {\n            createCover: function (controller, brushOption) {\n                var cover = new graphic.Group();\n\n                // Do not use graphic.Polygon because graphic.Polyline do not close the\n                // border of the shape when drawing, which is a better experience for user.\n                cover.add(new graphic.Polyline({\n                    name: 'main',\n                    style: makeStyle(brushOption),\n                    silent: true\n                }));\n\n                return cover;\n            },\n            getCreatingRange: function (localTrack) {\n                return localTrack;\n            },\n            endCreating: function (controller, cover) {\n                cover.remove(cover.childAt(0));\n                // Use graphic.Polygon close the shape.\n                cover.add(new graphic.Polygon({\n                    name: 'main',\n                    draggable: true,\n                    drift: curry(driftPolygon, controller, cover),\n                    ondragend: curry(trigger, controller, {isEnd: true})\n                }));\n            },\n            updateCoverShape: function (controller, cover, localRange, brushOption) {\n                cover.childAt(0).setShape({\n                    points: clipByPanel(controller, cover, localRange)\n                });\n            },\n            updateCommon: updateCommon,\n            contain: mainShapeContain\n        }\n    };\n\n    function getLineRenderer(xyIndex) {\n        return {\n            createCover: function (controller, brushOption) {\n                return createBaseRectCover(\n                    curry(\n                        driftRect,\n                        function (range) {\n                            var rectRange = [range, [0, 100]];\n                            xyIndex && rectRange.reverse();\n                            return rectRange;\n                        },\n                        function (rectRange) {\n                            return rectRange[xyIndex];\n                        }\n                    ),\n                    controller,\n                    brushOption,\n                    [['w', 'e'], ['n', 's']][xyIndex]\n                );\n            },\n            getCreatingRange: function (localTrack) {\n                var ends = getTrackEnds(localTrack);\n                var min = mathMin(ends[0][xyIndex], ends[1][xyIndex]);\n                var max = mathMax(ends[0][xyIndex], ends[1][xyIndex]);\n\n                return [min, max];\n            },\n            updateCoverShape: function (controller, cover, localRange, brushOption) {\n                var otherExtent;\n                // If brushWidth not specified, fit the panel.\n                var panel = getPanelByCover(controller, cover);\n                if (panel !== true && panel.getLinearBrushOtherExtent) {\n                    otherExtent = panel.getLinearBrushOtherExtent(\n                        xyIndex, controller._transform\n                    );\n                }\n                else {\n                    var zr = controller._zr;\n                    otherExtent = [0, [zr.getWidth(), zr.getHeight()][1 - xyIndex]];\n                }\n                var rectRange = [localRange, otherExtent];\n                xyIndex && rectRange.reverse();\n\n                updateBaseRect(controller, cover, rectRange, brushOption);\n            },\n            updateCommon: updateCommon,\n            contain: mainShapeContain\n        };\n    }\n\n    module.exports = BrushController;\n\n\n/***/ }),\n\n/***/ \"cZ/t\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n/**\n * 曲线辅助模块\n * @module zrender/core/curve\n * @author pissang(https://www.github.com/pissang)\n */\n\n\n    var vec2 = __webpack_require__(\"Krco\");\n    var v2Create = vec2.create;\n    var v2DistSquare = vec2.distSquare;\n    var mathPow = Math.pow;\n    var mathSqrt = Math.sqrt;\n\n    var EPSILON = 1e-8;\n    var EPSILON_NUMERIC = 1e-4;\n\n    var THREE_SQRT = mathSqrt(3);\n    var ONE_THIRD = 1 / 3;\n\n    // 临时变量\n    var _v0 = v2Create();\n    var _v1 = v2Create();\n    var _v2 = v2Create();\n    // var _v3 = vec2.create();\n\n    function isAroundZero(val) {\n        return val > -EPSILON && val < EPSILON;\n    }\n    function isNotAroundZero(val) {\n        return val > EPSILON || val < -EPSILON;\n    }\n    /**\n     * 计算三次贝塞尔值\n     * @memberOf module:zrender/core/curve\n     * @param  {number} p0\n     * @param  {number} p1\n     * @param  {number} p2\n     * @param  {number} p3\n     * @param  {number} t\n     * @return {number}\n     */\n    function cubicAt(p0, p1, p2, p3, t) {\n        var onet = 1 - t;\n        return onet * onet * (onet * p0 + 3 * t * p1)\n             + t * t * (t * p3 + 3 * onet * p2);\n    }\n\n    /**\n     * 计算三次贝塞尔导数值\n     * @memberOf module:zrender/core/curve\n     * @param  {number} p0\n     * @param  {number} p1\n     * @param  {number} p2\n     * @param  {number} p3\n     * @param  {number} t\n     * @return {number}\n     */\n    function cubicDerivativeAt(p0, p1, p2, p3, t) {\n        var onet = 1 - t;\n        return 3 * (\n            ((p1 - p0) * onet + 2 * (p2 - p1) * t) * onet\n            + (p3 - p2) * t * t\n        );\n    }\n\n    /**\n     * 计算三次贝塞尔方程根，使用盛金公式\n     * @memberOf module:zrender/core/curve\n     * @param  {number} p0\n     * @param  {number} p1\n     * @param  {number} p2\n     * @param  {number} p3\n     * @param  {number} val\n     * @param  {Array.<number>} roots\n     * @return {number} 有效根数目\n     */\n    function cubicRootAt(p0, p1, p2, p3, val, roots) {\n        // Evaluate roots of cubic functions\n        var a = p3 + 3 * (p1 - p2) - p0;\n        var b = 3 * (p2 - p1 * 2 + p0);\n        var c = 3 * (p1  - p0);\n        var d = p0 - val;\n\n        var A = b * b - 3 * a * c;\n        var B = b * c - 9 * a * d;\n        var C = c * c - 3 * b * d;\n\n        var n = 0;\n\n        if (isAroundZero(A) && isAroundZero(B)) {\n            if (isAroundZero(b)) {\n                roots[0] = 0;\n            }\n            else {\n                var t1 = -c / b;  //t1, t2, t3, b is not zero\n                if (t1 >= 0 && t1 <= 1) {\n                    roots[n++] = t1;\n                }\n            }\n        }\n        else {\n            var disc = B * B - 4 * A * C;\n\n            if (isAroundZero(disc)) {\n                var K = B / A;\n                var t1 = -b / a + K;  // t1, a is not zero\n                var t2 = -K / 2;  // t2, t3\n                if (t1 >= 0 && t1 <= 1) {\n                    roots[n++] = t1;\n                }\n                if (t2 >= 0 && t2 <= 1) {\n                    roots[n++] = t2;\n                }\n            }\n            else if (disc > 0) {\n                var discSqrt = mathSqrt(disc);\n                var Y1 = A * b + 1.5 * a * (-B + discSqrt);\n                var Y2 = A * b + 1.5 * a * (-B - discSqrt);\n                if (Y1 < 0) {\n                    Y1 = -mathPow(-Y1, ONE_THIRD);\n                }\n                else {\n                    Y1 = mathPow(Y1, ONE_THIRD);\n                }\n                if (Y2 < 0) {\n                    Y2 = -mathPow(-Y2, ONE_THIRD);\n                }\n                else {\n                    Y2 = mathPow(Y2, ONE_THIRD);\n                }\n                var t1 = (-b - (Y1 + Y2)) / (3 * a);\n                if (t1 >= 0 && t1 <= 1) {\n                    roots[n++] = t1;\n                }\n            }\n            else {\n                var T = (2 * A * b - 3 * a * B) / (2 * mathSqrt(A * A * A));\n                var theta = Math.acos(T) / 3;\n                var ASqrt = mathSqrt(A);\n                var tmp = Math.cos(theta);\n\n                var t1 = (-b - 2 * ASqrt * tmp) / (3 * a);\n                var t2 = (-b + ASqrt * (tmp + THREE_SQRT * Math.sin(theta))) / (3 * a);\n                var t3 = (-b + ASqrt * (tmp - THREE_SQRT * Math.sin(theta))) / (3 * a);\n                if (t1 >= 0 && t1 <= 1) {\n                    roots[n++] = t1;\n                }\n                if (t2 >= 0 && t2 <= 1) {\n                    roots[n++] = t2;\n                }\n                if (t3 >= 0 && t3 <= 1) {\n                    roots[n++] = t3;\n                }\n            }\n        }\n        return n;\n    }\n\n    /**\n     * 计算三次贝塞尔方程极限值的位置\n     * @memberOf module:zrender/core/curve\n     * @param  {number} p0\n     * @param  {number} p1\n     * @param  {number} p2\n     * @param  {number} p3\n     * @param  {Array.<number>} extrema\n     * @return {number} 有效数目\n     */\n    function cubicExtrema(p0, p1, p2, p3, extrema) {\n        var b = 6 * p2 - 12 * p1 + 6 * p0;\n        var a = 9 * p1 + 3 * p3 - 3 * p0 - 9 * p2;\n        var c = 3 * p1 - 3 * p0;\n\n        var n = 0;\n        if (isAroundZero(a)) {\n            if (isNotAroundZero(b)) {\n                var t1 = -c / b;\n                if (t1 >= 0 && t1 <=1) {\n                    extrema[n++] = t1;\n                }\n            }\n        }\n        else {\n            var disc = b * b - 4 * a * c;\n            if (isAroundZero(disc)) {\n                extrema[0] = -b / (2 * a);\n            }\n            else if (disc > 0) {\n                var discSqrt = mathSqrt(disc);\n                var t1 = (-b + discSqrt) / (2 * a);\n                var t2 = (-b - discSqrt) / (2 * a);\n                if (t1 >= 0 && t1 <= 1) {\n                    extrema[n++] = t1;\n                }\n                if (t2 >= 0 && t2 <= 1) {\n                    extrema[n++] = t2;\n                }\n            }\n        }\n        return n;\n    }\n\n    /**\n     * 细分三次贝塞尔曲线\n     * @memberOf module:zrender/core/curve\n     * @param  {number} p0\n     * @param  {number} p1\n     * @param  {number} p2\n     * @param  {number} p3\n     * @param  {number} t\n     * @param  {Array.<number>} out\n     */\n    function cubicSubdivide(p0, p1, p2, p3, t, out) {\n        var p01 = (p1 - p0) * t + p0;\n        var p12 = (p2 - p1) * t + p1;\n        var p23 = (p3 - p2) * t + p2;\n\n        var p012 = (p12 - p01) * t + p01;\n        var p123 = (p23 - p12) * t + p12;\n\n        var p0123 = (p123 - p012) * t + p012;\n        // Seg0\n        out[0] = p0;\n        out[1] = p01;\n        out[2] = p012;\n        out[3] = p0123;\n        // Seg1\n        out[4] = p0123;\n        out[5] = p123;\n        out[6] = p23;\n        out[7] = p3;\n    }\n\n    /**\n     * 投射点到三次贝塞尔曲线上，返回投射距离。\n     * 投射点有可能会有一个或者多个，这里只返回其中距离最短的一个。\n     * @param {number} x0\n     * @param {number} y0\n     * @param {number} x1\n     * @param {number} y1\n     * @param {number} x2\n     * @param {number} y2\n     * @param {number} x3\n     * @param {number} y3\n     * @param {number} x\n     * @param {number} y\n     * @param {Array.<number>} [out] 投射点\n     * @return {number}\n     */\n    function cubicProjectPoint(\n        x0, y0, x1, y1, x2, y2, x3, y3,\n        x, y, out\n    ) {\n        // http://pomax.github.io/bezierinfo/#projections\n        var t;\n        var interval = 0.005;\n        var d = Infinity;\n        var prev;\n        var next;\n        var d1;\n        var d2;\n\n        _v0[0] = x;\n        _v0[1] = y;\n\n        // 先粗略估计一下可能的最小距离的 t 值\n        // PENDING\n        for (var _t = 0; _t < 1; _t += 0.05) {\n            _v1[0] = cubicAt(x0, x1, x2, x3, _t);\n            _v1[1] = cubicAt(y0, y1, y2, y3, _t);\n            d1 = v2DistSquare(_v0, _v1);\n            if (d1 < d) {\n                t = _t;\n                d = d1;\n            }\n        }\n        d = Infinity;\n\n        // At most 32 iteration\n        for (var i = 0; i < 32; i++) {\n            if (interval < EPSILON_NUMERIC) {\n                break;\n            }\n            prev = t - interval;\n            next = t + interval;\n            // t - interval\n            _v1[0] = cubicAt(x0, x1, x2, x3, prev);\n            _v1[1] = cubicAt(y0, y1, y2, y3, prev);\n\n            d1 = v2DistSquare(_v1, _v0);\n\n            if (prev >= 0 && d1 < d) {\n                t = prev;\n                d = d1;\n            }\n            else {\n                // t + interval\n                _v2[0] = cubicAt(x0, x1, x2, x3, next);\n                _v2[1] = cubicAt(y0, y1, y2, y3, next);\n                d2 = v2DistSquare(_v2, _v0);\n\n                if (next <= 1 && d2 < d) {\n                    t = next;\n                    d = d2;\n                }\n                else {\n                    interval *= 0.5;\n                }\n            }\n        }\n        // t\n        if (out) {\n            out[0] = cubicAt(x0, x1, x2, x3, t);\n            out[1] = cubicAt(y0, y1, y2, y3, t);\n        }\n        // console.log(interval, i);\n        return mathSqrt(d);\n    }\n\n    /**\n     * 计算二次方贝塞尔值\n     * @param  {number} p0\n     * @param  {number} p1\n     * @param  {number} p2\n     * @param  {number} t\n     * @return {number}\n     */\n    function quadraticAt(p0, p1, p2, t) {\n        var onet = 1 - t;\n        return onet * (onet * p0 + 2 * t * p1) + t * t * p2;\n    }\n\n    /**\n     * 计算二次方贝塞尔导数值\n     * @param  {number} p0\n     * @param  {number} p1\n     * @param  {number} p2\n     * @param  {number} t\n     * @return {number}\n     */\n    function quadraticDerivativeAt(p0, p1, p2, t) {\n        return 2 * ((1 - t) * (p1 - p0) + t * (p2 - p1));\n    }\n\n    /**\n     * 计算二次方贝塞尔方程根\n     * @param  {number} p0\n     * @param  {number} p1\n     * @param  {number} p2\n     * @param  {number} t\n     * @param  {Array.<number>} roots\n     * @return {number} 有效根数目\n     */\n    function quadraticRootAt(p0, p1, p2, val, roots) {\n        var a = p0 - 2 * p1 + p2;\n        var b = 2 * (p1 - p0);\n        var c = p0 - val;\n\n        var n = 0;\n        if (isAroundZero(a)) {\n            if (isNotAroundZero(b)) {\n                var t1 = -c / b;\n                if (t1 >= 0 && t1 <= 1) {\n                    roots[n++] = t1;\n                }\n            }\n        }\n        else {\n            var disc = b * b - 4 * a * c;\n            if (isAroundZero(disc)) {\n                var t1 = -b / (2 * a);\n                if (t1 >= 0 && t1 <= 1) {\n                    roots[n++] = t1;\n                }\n            }\n            else if (disc > 0) {\n                var discSqrt = mathSqrt(disc);\n                var t1 = (-b + discSqrt) / (2 * a);\n                var t2 = (-b - discSqrt) / (2 * a);\n                if (t1 >= 0 && t1 <= 1) {\n                    roots[n++] = t1;\n                }\n                if (t2 >= 0 && t2 <= 1) {\n                    roots[n++] = t2;\n                }\n            }\n        }\n        return n;\n    }\n\n    /**\n     * 计算二次贝塞尔方程极限值\n     * @memberOf module:zrender/core/curve\n     * @param  {number} p0\n     * @param  {number} p1\n     * @param  {number} p2\n     * @return {number}\n     */\n    function quadraticExtremum(p0, p1, p2) {\n        var divider = p0 + p2 - 2 * p1;\n        if (divider === 0) {\n            // p1 is center of p0 and p2\n            return 0.5;\n        }\n        else {\n            return (p0 - p1) / divider;\n        }\n    }\n\n    /**\n     * 细分二次贝塞尔曲线\n     * @memberOf module:zrender/core/curve\n     * @param  {number} p0\n     * @param  {number} p1\n     * @param  {number} p2\n     * @param  {number} t\n     * @param  {Array.<number>} out\n     */\n    function quadraticSubdivide(p0, p1, p2, t, out) {\n        var p01 = (p1 - p0) * t + p0;\n        var p12 = (p2 - p1) * t + p1;\n        var p012 = (p12 - p01) * t + p01;\n\n        // Seg0\n        out[0] = p0;\n        out[1] = p01;\n        out[2] = p012;\n\n        // Seg1\n        out[3] = p012;\n        out[4] = p12;\n        out[5] = p2;\n    }\n\n    /**\n     * 投射点到二次贝塞尔曲线上，返回投射距离。\n     * 投射点有可能会有一个或者多个，这里只返回其中距离最短的一个。\n     * @param {number} x0\n     * @param {number} y0\n     * @param {number} x1\n     * @param {number} y1\n     * @param {number} x2\n     * @param {number} y2\n     * @param {number} x\n     * @param {number} y\n     * @param {Array.<number>} out 投射点\n     * @return {number}\n     */\n    function quadraticProjectPoint(\n        x0, y0, x1, y1, x2, y2,\n        x, y, out\n    ) {\n        // http://pomax.github.io/bezierinfo/#projections\n        var t;\n        var interval = 0.005;\n        var d = Infinity;\n\n        _v0[0] = x;\n        _v0[1] = y;\n\n        // 先粗略估计一下可能的最小距离的 t 值\n        // PENDING\n        for (var _t = 0; _t < 1; _t += 0.05) {\n            _v1[0] = quadraticAt(x0, x1, x2, _t);\n            _v1[1] = quadraticAt(y0, y1, y2, _t);\n            var d1 = v2DistSquare(_v0, _v1);\n            if (d1 < d) {\n                t = _t;\n                d = d1;\n            }\n        }\n        d = Infinity;\n\n        // At most 32 iteration\n        for (var i = 0; i < 32; i++) {\n            if (interval < EPSILON_NUMERIC) {\n                break;\n            }\n            var prev = t - interval;\n            var next = t + interval;\n            // t - interval\n            _v1[0] = quadraticAt(x0, x1, x2, prev);\n            _v1[1] = quadraticAt(y0, y1, y2, prev);\n\n            var d1 = v2DistSquare(_v1, _v0);\n\n            if (prev >= 0 && d1 < d) {\n                t = prev;\n                d = d1;\n            }\n            else {\n                // t + interval\n                _v2[0] = quadraticAt(x0, x1, x2, next);\n                _v2[1] = quadraticAt(y0, y1, y2, next);\n                var d2 = v2DistSquare(_v2, _v0);\n                if (next <= 1 && d2 < d) {\n                    t = next;\n                    d = d2;\n                }\n                else {\n                    interval *= 0.5;\n                }\n            }\n        }\n        // t\n        if (out) {\n            out[0] = quadraticAt(x0, x1, x2, t);\n            out[1] = quadraticAt(y0, y1, y2, t);\n        }\n        // console.log(interval, i);\n        return mathSqrt(d);\n    }\n\n    module.exports = {\n\n        cubicAt: cubicAt,\n\n        cubicDerivativeAt: cubicDerivativeAt,\n\n        cubicRootAt: cubicRootAt,\n\n        cubicExtrema: cubicExtrema,\n\n        cubicSubdivide: cubicSubdivide,\n\n        cubicProjectPoint: cubicProjectPoint,\n\n        quadraticAt: quadraticAt,\n\n        quadraticDerivativeAt: quadraticDerivativeAt,\n\n        quadraticRootAt: quadraticRootAt,\n\n        quadraticExtremum: quadraticExtremum,\n\n        quadraticSubdivide: quadraticSubdivide,\n\n        quadraticProjectPoint: quadraticProjectPoint\n    };\n\n\n/***/ }),\n\n/***/ \"cwCJ\":\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * @module zrender/tool/color\n */\n\n\n    var LRU = __webpack_require__(\"i4I6\");\n\n    var kCSSColorTable = {\n        'transparent': [0,0,0,0], 'aliceblue': [240,248,255,1],\n        'antiquewhite': [250,235,215,1], 'aqua': [0,255,255,1],\n        'aquamarine': [127,255,212,1], 'azure': [240,255,255,1],\n        'beige': [245,245,220,1], 'bisque': [255,228,196,1],\n        'black': [0,0,0,1], 'blanchedalmond': [255,235,205,1],\n        'blue': [0,0,255,1], 'blueviolet': [138,43,226,1],\n        'brown': [165,42,42,1], 'burlywood': [222,184,135,1],\n        'cadetblue': [95,158,160,1], 'chartreuse': [127,255,0,1],\n        'chocolate': [210,105,30,1], 'coral': [255,127,80,1],\n        'cornflowerblue': [100,149,237,1], 'cornsilk': [255,248,220,1],\n        'crimson': [220,20,60,1], 'cyan': [0,255,255,1],\n        'darkblue': [0,0,139,1], 'darkcyan': [0,139,139,1],\n        'darkgoldenrod': [184,134,11,1], 'darkgray': [169,169,169,1],\n        'darkgreen': [0,100,0,1], 'darkgrey': [169,169,169,1],\n        'darkkhaki': [189,183,107,1], 'darkmagenta': [139,0,139,1],\n        'darkolivegreen': [85,107,47,1], 'darkorange': [255,140,0,1],\n        'darkorchid': [153,50,204,1], 'darkred': [139,0,0,1],\n        'darksalmon': [233,150,122,1], 'darkseagreen': [143,188,143,1],\n        'darkslateblue': [72,61,139,1], 'darkslategray': [47,79,79,1],\n        'darkslategrey': [47,79,79,1], 'darkturquoise': [0,206,209,1],\n        'darkviolet': [148,0,211,1], 'deeppink': [255,20,147,1],\n        'deepskyblue': [0,191,255,1], 'dimgray': [105,105,105,1],\n        'dimgrey': [105,105,105,1], 'dodgerblue': [30,144,255,1],\n        'firebrick': [178,34,34,1], 'floralwhite': [255,250,240,1],\n        'forestgreen': [34,139,34,1], 'fuchsia': [255,0,255,1],\n        'gainsboro': [220,220,220,1], 'ghostwhite': [248,248,255,1],\n        'gold': [255,215,0,1], 'goldenrod': [218,165,32,1],\n        'gray': [128,128,128,1], 'green': [0,128,0,1],\n        'greenyellow': [173,255,47,1], 'grey': [128,128,128,1],\n        'honeydew': [240,255,240,1], 'hotpink': [255,105,180,1],\n        'indianred': [205,92,92,1], 'indigo': [75,0,130,1],\n        'ivory': [255,255,240,1], 'khaki': [240,230,140,1],\n        'lavender': [230,230,250,1], 'lavenderblush': [255,240,245,1],\n        'lawngreen': [124,252,0,1], 'lemonchiffon': [255,250,205,1],\n        'lightblue': [173,216,230,1], 'lightcoral': [240,128,128,1],\n        'lightcyan': [224,255,255,1], 'lightgoldenrodyellow': [250,250,210,1],\n        'lightgray': [211,211,211,1], 'lightgreen': [144,238,144,1],\n        'lightgrey': [211,211,211,1], 'lightpink': [255,182,193,1],\n        'lightsalmon': [255,160,122,1], 'lightseagreen': [32,178,170,1],\n        'lightskyblue': [135,206,250,1], 'lightslategray': [119,136,153,1],\n        'lightslategrey': [119,136,153,1], 'lightsteelblue': [176,196,222,1],\n        'lightyellow': [255,255,224,1], 'lime': [0,255,0,1],\n        'limegreen': [50,205,50,1], 'linen': [250,240,230,1],\n        'magenta': [255,0,255,1], 'maroon': [128,0,0,1],\n        'mediumaquamarine': [102,205,170,1], 'mediumblue': [0,0,205,1],\n        'mediumorchid': [186,85,211,1], 'mediumpurple': [147,112,219,1],\n        'mediumseagreen': [60,179,113,1], 'mediumslateblue': [123,104,238,1],\n        'mediumspringgreen': [0,250,154,1], 'mediumturquoise': [72,209,204,1],\n        'mediumvioletred': [199,21,133,1], 'midnightblue': [25,25,112,1],\n        'mintcream': [245,255,250,1], 'mistyrose': [255,228,225,1],\n        'moccasin': [255,228,181,1], 'navajowhite': [255,222,173,1],\n        'navy': [0,0,128,1], 'oldlace': [253,245,230,1],\n        'olive': [128,128,0,1], 'olivedrab': [107,142,35,1],\n        'orange': [255,165,0,1], 'orangered': [255,69,0,1],\n        'orchid': [218,112,214,1], 'palegoldenrod': [238,232,170,1],\n        'palegreen': [152,251,152,1], 'paleturquoise': [175,238,238,1],\n        'palevioletred': [219,112,147,1], 'papayawhip': [255,239,213,1],\n        'peachpuff': [255,218,185,1], 'peru': [205,133,63,1],\n        'pink': [255,192,203,1], 'plum': [221,160,221,1],\n        'powderblue': [176,224,230,1], 'purple': [128,0,128,1],\n        'red': [255,0,0,1], 'rosybrown': [188,143,143,1],\n        'royalblue': [65,105,225,1], 'saddlebrown': [139,69,19,1],\n        'salmon': [250,128,114,1], 'sandybrown': [244,164,96,1],\n        'seagreen': [46,139,87,1], 'seashell': [255,245,238,1],\n        'sienna': [160,82,45,1], 'silver': [192,192,192,1],\n        'skyblue': [135,206,235,1], 'slateblue': [106,90,205,1],\n        'slategray': [112,128,144,1], 'slategrey': [112,128,144,1],\n        'snow': [255,250,250,1], 'springgreen': [0,255,127,1],\n        'steelblue': [70,130,180,1], 'tan': [210,180,140,1],\n        'teal': [0,128,128,1], 'thistle': [216,191,216,1],\n        'tomato': [255,99,71,1], 'turquoise': [64,224,208,1],\n        'violet': [238,130,238,1], 'wheat': [245,222,179,1],\n        'white': [255,255,255,1], 'whitesmoke': [245,245,245,1],\n        'yellow': [255,255,0,1], 'yellowgreen': [154,205,50,1]\n    };\n\n    function clampCssByte(i) {  // Clamp to integer 0 .. 255.\n        i = Math.round(i);  // Seems to be what Chrome does (vs truncation).\n        return i < 0 ? 0 : i > 255 ? 255 : i;\n    }\n\n    function clampCssAngle(i) {  // Clamp to integer 0 .. 360.\n        i = Math.round(i);  // Seems to be what Chrome does (vs truncation).\n        return i < 0 ? 0 : i > 360 ? 360 : i;\n    }\n\n    function clampCssFloat(f) {  // Clamp to float 0.0 .. 1.0.\n        return f < 0 ? 0 : f > 1 ? 1 : f;\n    }\n\n    function parseCssInt(str) {  // int or percentage.\n        if (str.length && str.charAt(str.length - 1) === '%') {\n            return clampCssByte(parseFloat(str) / 100 * 255);\n        }\n        return clampCssByte(parseInt(str, 10));\n    }\n\n    function parseCssFloat(str) {  // float or percentage.\n        if (str.length && str.charAt(str.length - 1) === '%') {\n            return clampCssFloat(parseFloat(str) / 100);\n        }\n        return clampCssFloat(parseFloat(str));\n    }\n\n    function cssHueToRgb(m1, m2, h) {\n        if (h < 0) {\n            h += 1;\n        }\n        else if (h > 1) {\n            h -= 1;\n        }\n\n        if (h * 6 < 1) {\n            return m1 + (m2 - m1) * h * 6;\n        }\n        if (h * 2 < 1) {\n            return m2;\n        }\n        if (h * 3 < 2) {\n            return m1 + (m2 - m1) * (2/3 - h) * 6;\n        }\n        return m1;\n    }\n\n    function lerp(a, b, p) {\n        return a + (b - a) * p;\n    }\n\n    function setRgba(out, r, g, b, a) {\n        out[0] = r; out[1] = g; out[2] = b; out[3] = a;\n        return out;\n    }\n    function copyRgba(out, a) {\n        out[0] = a[0]; out[1] = a[1]; out[2] = a[2]; out[3] = a[3];\n        return out;\n    }\n    var colorCache = new LRU(20);\n    var lastRemovedArr = null;\n    function putToCache(colorStr, rgbaArr) {\n        // Reuse removed array\n        if (lastRemovedArr) {\n            copyRgba(lastRemovedArr, rgbaArr);\n        }\n        lastRemovedArr = colorCache.put(colorStr, lastRemovedArr || (rgbaArr.slice()));\n    }\n    /**\n     * @param {string} colorStr\n     * @param {Array.<number>} out\n     * @return {Array.<number>}\n     * @memberOf module:zrender/util/color\n     */\n    function parse(colorStr, rgbaArr) {\n        if (!colorStr) {\n            return;\n        }\n        rgbaArr = rgbaArr || [];\n\n        var cached = colorCache.get(colorStr);\n        if (cached) {\n            return copyRgba(rgbaArr, cached);\n        }\n\n        // colorStr may be not string\n        colorStr = colorStr + '';\n        // Remove all whitespace, not compliant, but should just be more accepting.\n        var str = colorStr.replace(/ /g, '').toLowerCase();\n\n        // Color keywords (and transparent) lookup.\n        if (str in kCSSColorTable) {\n            copyRgba(rgbaArr, kCSSColorTable[str]);\n            putToCache(colorStr, rgbaArr);\n            return rgbaArr;\n        }\n\n        // #abc and #abc123 syntax.\n        if (str.charAt(0) === '#') {\n            if (str.length === 4) {\n                var iv = parseInt(str.substr(1), 16);  // TODO(deanm): Stricter parsing.\n                if (!(iv >= 0 && iv <= 0xfff)) {\n                    setRgba(rgbaArr, 0, 0, 0, 1);\n                    return;  // Covers NaN.\n                }\n                setRgba(rgbaArr,\n                    ((iv & 0xf00) >> 4) | ((iv & 0xf00) >> 8),\n                    (iv & 0xf0) | ((iv & 0xf0) >> 4),\n                    (iv & 0xf) | ((iv & 0xf) << 4),\n                    1\n                );\n                putToCache(colorStr, rgbaArr);\n                return rgbaArr;\n            }\n            else if (str.length === 7) {\n                var iv = parseInt(str.substr(1), 16);  // TODO(deanm): Stricter parsing.\n                if (!(iv >= 0 && iv <= 0xffffff)) {\n                    setRgba(rgbaArr, 0, 0, 0, 1);\n                    return;  // Covers NaN.\n                }\n                setRgba(rgbaArr,\n                    (iv & 0xff0000) >> 16,\n                    (iv & 0xff00) >> 8,\n                    iv & 0xff,\n                    1\n                );\n                putToCache(colorStr, rgbaArr);\n                return rgbaArr;\n            }\n\n            return;\n        }\n        var op = str.indexOf('('), ep = str.indexOf(')');\n        if (op !== -1 && ep + 1 === str.length) {\n            var fname = str.substr(0, op);\n            var params = str.substr(op + 1, ep - (op + 1)).split(',');\n            var alpha = 1;  // To allow case fallthrough.\n            switch (fname) {\n                case 'rgba':\n                    if (params.length !== 4) {\n                        setRgba(rgbaArr, 0, 0, 0, 1);\n                        return;\n                    }\n                    alpha = parseCssFloat(params.pop()); // jshint ignore:line\n                // Fall through.\n                case 'rgb':\n                    if (params.length !== 3) {\n                        setRgba(rgbaArr, 0, 0, 0, 1);\n                        return;\n                    }\n                    setRgba(rgbaArr,\n                        parseCssInt(params[0]),\n                        parseCssInt(params[1]),\n                        parseCssInt(params[2]),\n                        alpha\n                    );\n                    putToCache(colorStr, rgbaArr);\n                    return rgbaArr;\n                case 'hsla':\n                    if (params.length !== 4) {\n                        setRgba(rgbaArr, 0, 0, 0, 1);\n                        return;\n                    }\n                    params[3] = parseCssFloat(params[3]);\n                    hsla2rgba(params, rgbaArr);\n                    putToCache(colorStr, rgbaArr);\n                    return rgbaArr;\n                case 'hsl':\n                    if (params.length !== 3) {\n                        setRgba(rgbaArr, 0, 0, 0, 1);\n                        return;\n                    }\n                    hsla2rgba(params, rgbaArr);\n                    putToCache(colorStr, rgbaArr);\n                    return rgbaArr;\n                default:\n                    return;\n            }\n        }\n\n        setRgba(rgbaArr, 0, 0, 0, 1);\n        return;\n    }\n\n    /**\n     * @param {Array.<number>} hsla\n     * @param {Array.<number>} rgba\n     * @return {Array.<number>} rgba\n     */\n    function hsla2rgba(hsla, rgba) {\n        var h = (((parseFloat(hsla[0]) % 360) + 360) % 360) / 360;  // 0 .. 1\n        // NOTE(deanm): According to the CSS spec s/l should only be\n        // percentages, but we don't bother and let float or percentage.\n        var s = parseCssFloat(hsla[1]);\n        var l = parseCssFloat(hsla[2]);\n        var m2 = l <= 0.5 ? l * (s + 1) : l + s - l * s;\n        var m1 = l * 2 - m2;\n\n        rgba = rgba || [];\n        setRgba(rgba,\n            clampCssByte(cssHueToRgb(m1, m2, h + 1 / 3) * 255),\n            clampCssByte(cssHueToRgb(m1, m2, h) * 255),\n            clampCssByte(cssHueToRgb(m1, m2, h - 1 / 3) * 255),\n            1\n        );\n\n        if (hsla.length === 4) {\n            rgba[3] = hsla[3];\n        }\n\n        return rgba;\n    }\n\n    /**\n     * @param {Array.<number>} rgba\n     * @return {Array.<number>} hsla\n     */\n    function rgba2hsla(rgba) {\n        if (!rgba) {\n            return;\n        }\n\n        // RGB from 0 to 255\n        var R = rgba[0] / 255;\n        var G = rgba[1] / 255;\n        var B = rgba[2] / 255;\n\n        var vMin = Math.min(R, G, B); // Min. value of RGB\n        var vMax = Math.max(R, G, B); // Max. value of RGB\n        var delta = vMax - vMin; // Delta RGB value\n\n        var L = (vMax + vMin) / 2;\n        var H;\n        var S;\n        // HSL results from 0 to 1\n        if (delta === 0) {\n            H = 0;\n            S = 0;\n        }\n        else {\n            if (L < 0.5) {\n                S = delta / (vMax + vMin);\n            }\n            else {\n                S = delta / (2 - vMax - vMin);\n            }\n\n            var deltaR = (((vMax - R) / 6) + (delta / 2)) / delta;\n            var deltaG = (((vMax - G) / 6) + (delta / 2)) / delta;\n            var deltaB = (((vMax - B) / 6) + (delta / 2)) / delta;\n\n            if (R === vMax) {\n                H = deltaB - deltaG;\n            }\n            else if (G === vMax) {\n                H = (1 / 3) + deltaR - deltaB;\n            }\n            else if (B === vMax) {\n                H = (2 / 3) + deltaG - deltaR;\n            }\n\n            if (H < 0) {\n                H += 1;\n            }\n\n            if (H > 1) {\n                H -= 1;\n            }\n        }\n\n        var hsla = [H * 360, S, L];\n\n        if (rgba[3] != null) {\n            hsla.push(rgba[3]);\n        }\n\n        return hsla;\n    }\n\n    /**\n     * @param {string} color\n     * @param {number} level\n     * @return {string}\n     * @memberOf module:zrender/util/color\n     */\n    function lift(color, level) {\n        var colorArr = parse(color);\n        if (colorArr) {\n            for (var i = 0; i < 3; i++) {\n                if (level < 0) {\n                    colorArr[i] = colorArr[i] * (1 - level) | 0;\n                }\n                else {\n                    colorArr[i] = ((255 - colorArr[i]) * level + colorArr[i]) | 0;\n                }\n            }\n            return stringify(colorArr, colorArr.length === 4 ? 'rgba' : 'rgb');\n        }\n    }\n\n    /**\n     * @param {string} color\n     * @return {string}\n     * @memberOf module:zrender/util/color\n     */\n    function toHex(color, level) {\n        var colorArr = parse(color);\n        if (colorArr) {\n            return ((1 << 24) + (colorArr[0] << 16) + (colorArr[1] << 8) + (+colorArr[2])).toString(16).slice(1);\n        }\n    }\n\n    /**\n     * Map value to color. Faster than mapToColor methods because color is represented by rgba array.\n     * @param {number} normalizedValue A float between 0 and 1.\n     * @param {Array.<Array.<number>>} colors List of rgba color array\n     * @param {Array.<number>} [out] Mapped gba color array\n     * @return {Array.<number>} will be null/undefined if input illegal.\n     */\n    function fastMapToColor(normalizedValue, colors, out) {\n        if (!(colors && colors.length)\n            || !(normalizedValue >= 0 && normalizedValue <= 1)\n        ) {\n            return;\n        }\n\n        out = out || [];\n\n        var value = normalizedValue * (colors.length - 1);\n        var leftIndex = Math.floor(value);\n        var rightIndex = Math.ceil(value);\n        var leftColor = colors[leftIndex];\n        var rightColor = colors[rightIndex];\n        var dv = value - leftIndex;\n        out[0] = clampCssByte(lerp(leftColor[0], rightColor[0], dv));\n        out[1] = clampCssByte(lerp(leftColor[1], rightColor[1], dv));\n        out[2] = clampCssByte(lerp(leftColor[2], rightColor[2], dv));\n        out[3] = clampCssFloat(lerp(leftColor[3], rightColor[3], dv));\n\n        return out;\n    }\n    /**\n     * @param {number} normalizedValue A float between 0 and 1.\n     * @param {Array.<string>} colors Color list.\n     * @param {boolean=} fullOutput Default false.\n     * @return {(string|Object)} Result color. If fullOutput,\n     *                           return {color: ..., leftIndex: ..., rightIndex: ..., value: ...},\n     * @memberOf module:zrender/util/color\n     */\n    function mapToColor(normalizedValue, colors, fullOutput) {\n        if (!(colors && colors.length)\n            || !(normalizedValue >= 0 && normalizedValue <= 1)\n        ) {\n            return;\n        }\n\n        var value = normalizedValue * (colors.length - 1);\n        var leftIndex = Math.floor(value);\n        var rightIndex = Math.ceil(value);\n        var leftColor = parse(colors[leftIndex]);\n        var rightColor = parse(colors[rightIndex]);\n        var dv = value - leftIndex;\n\n        var color = stringify(\n            [\n                clampCssByte(lerp(leftColor[0], rightColor[0], dv)),\n                clampCssByte(lerp(leftColor[1], rightColor[1], dv)),\n                clampCssByte(lerp(leftColor[2], rightColor[2], dv)),\n                clampCssFloat(lerp(leftColor[3], rightColor[3], dv))\n            ],\n            'rgba'\n        );\n\n        return fullOutput\n            ? {\n                color: color,\n                leftIndex: leftIndex,\n                rightIndex: rightIndex,\n                value: value\n            }\n            : color;\n    }\n\n    /**\n     * @param {string} color\n     * @param {number=} h 0 ~ 360, ignore when null.\n     * @param {number=} s 0 ~ 1, ignore when null.\n     * @param {number=} l 0 ~ 1, ignore when null.\n     * @return {string} Color string in rgba format.\n     * @memberOf module:zrender/util/color\n     */\n    function modifyHSL(color, h, s, l) {\n        color = parse(color);\n\n        if (color) {\n            color = rgba2hsla(color);\n            h != null && (color[0] = clampCssAngle(h));\n            s != null && (color[1] = parseCssFloat(s));\n            l != null && (color[2] = parseCssFloat(l));\n\n            return stringify(hsla2rgba(color), 'rgba');\n        }\n    }\n\n    /**\n     * @param {string} color\n     * @param {number=} alpha 0 ~ 1\n     * @return {string} Color string in rgba format.\n     * @memberOf module:zrender/util/color\n     */\n    function modifyAlpha(color, alpha) {\n        color = parse(color);\n\n        if (color && alpha != null) {\n            color[3] = clampCssFloat(alpha);\n            return stringify(color, 'rgba');\n        }\n    }\n\n    /**\n     * @param {Array.<number>} arrColor like [12,33,44,0.4]\n     * @param {string} type 'rgba', 'hsva', ...\n     * @return {string} Result color. (If input illegal, return undefined).\n     */\n    function stringify(arrColor, type) {\n        if (!arrColor || !arrColor.length) {\n            return;\n        }\n        var colorStr = arrColor[0] + ',' + arrColor[1] + ',' + arrColor[2];\n        if (type === 'rgba' || type === 'hsva' || type === 'hsla') {\n            colorStr += ',' + arrColor[3];\n        }\n        return type + '(' + colorStr + ')';\n    }\n\n    module.exports = {\n        parse: parse,\n        lift: lift,\n        toHex: toHex,\n        fastMapToColor: fastMapToColor,\n        mapToColor: mapToColor,\n        modifyHSL: modifyHSL,\n        modifyAlpha: modifyAlpha,\n        stringify: stringify\n    };\n\n\n\n\n/***/ }),\n\n/***/ \"d/Zd\":\n/***/ (function(module, exports) {\n\n\n\n    module.exports = {\n        buildPath: function (ctx, shape) {\n            var x = shape.x;\n            var y = shape.y;\n            var width = shape.width;\n            var height = shape.height;\n            var r = shape.r;\n            var r1;\n            var r2;\n            var r3;\n            var r4;\n\n            // Convert width and height to positive for better borderRadius\n            if (width < 0) {\n                x = x + width;\n                width = -width;\n            }\n            if (height < 0) {\n                y = y + height;\n                height = -height;\n            }\n\n            if (typeof r === 'number') {\n                r1 = r2 = r3 = r4 = r;\n            }\n            else if (r instanceof Array) {\n                if (r.length === 1) {\n                    r1 = r2 = r3 = r4 = r[0];\n                }\n                else if (r.length === 2) {\n                    r1 = r3 = r[0];\n                    r2 = r4 = r[1];\n                }\n                else if (r.length === 3) {\n                    r1 = r[0];\n                    r2 = r4 = r[1];\n                    r3 = r[2];\n                }\n                else {\n                    r1 = r[0];\n                    r2 = r[1];\n                    r3 = r[2];\n                    r4 = r[3];\n                }\n            }\n            else {\n                r1 = r2 = r3 = r4 = 0;\n            }\n\n            var total;\n            if (r1 + r2 > width) {\n                total = r1 + r2;\n                r1 *= width / total;\n                r2 *= width / total;\n            }\n            if (r3 + r4 > width) {\n                total = r3 + r4;\n                r3 *= width / total;\n                r4 *= width / total;\n            }\n            if (r2 + r3 > height) {\n                total = r2 + r3;\n                r2 *= height / total;\n                r3 *= height / total;\n            }\n            if (r1 + r4 > height) {\n                total = r1 + r4;\n                r1 *= height / total;\n                r4 *= height / total;\n            }\n            ctx.moveTo(x + r1, y);\n            ctx.lineTo(x + width - r2, y);\n            r2 !== 0 && ctx.quadraticCurveTo(\n                x + width, y, x + width, y + r2\n            );\n            ctx.lineTo(x + width, y + height - r3);\n            r3 !== 0 && ctx.quadraticCurveTo(\n                x + width, y + height, x + width - r3, y + height\n            );\n            ctx.lineTo(x + r4, y + height);\n            r4 !== 0 && ctx.quadraticCurveTo(\n                x, y + height, x, y + height - r4\n            );\n            ctx.lineTo(x, y + r1);\n            r1 !== 0 && ctx.quadraticCurveTo(x, y, x + r1, y);\n        }\n    };\n\n\n/***/ }),\n\n/***/ \"dCDA\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\n    var classUtil = __webpack_require__(\"fzq8\");\n    var set = classUtil.set;\n    var get = classUtil.get;\n\n    module.exports = {\n        clearColorPalette: function () {\n            set(this, 'colorIdx', 0);\n            set(this, 'colorNameMap', {});\n        },\n\n        getColorFromPalette: function (name, scope) {\n            scope = scope || this;\n            var colorIdx = get(scope, 'colorIdx') || 0;\n            var colorNameMap = get(scope, 'colorNameMap') || set(scope, 'colorNameMap', {});\n            // Use `hasOwnProperty` to avoid conflict with Object.prototype.\n            if (colorNameMap.hasOwnProperty(name)) {\n                return colorNameMap[name];\n            }\n            var colorPalette = this.get('color', true) || [];\n            if (!colorPalette.length) {\n                return;\n            }\n\n            var color = colorPalette[colorIdx];\n            if (name) {\n                colorNameMap[name] = color;\n            }\n            set(scope, 'colorIdx', (colorIdx + 1) % colorPalette.length);\n\n            return color;\n        }\n    };\n\n\n/***/ }),\n\n/***/ \"e1yY\":\n/***/ (function(module, exports) {\n\n\n    module.exports = function windingLine(x0, y0, x1, y1, x, y) {\n        if ((y > y0 && y > y1) || (y < y0 && y < y1)) {\n            return 0;\n        }\n        // Ignore horizontal line\n        if (y1 === y0) {\n            return 0;\n        }\n        var dir = y1 < y0 ? 1 : -1;\n        var t = (y - y0) / (y1 - y0);\n\n        // Avoid winding error when intersection point is the connect point of two line of polygon\n        if (t === 1 || t === 0) {\n            dir = y1 < y0 ? 0.5 : -0.5;\n        }\n\n        var x_ = t * (x1 - x0) + x0;\n\n        return x_ > x ? dir : 0;\n    };\n\n\n/***/ }),\n\n/***/ \"e36O\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\n    var zrUtil = __webpack_require__(\"nw1Z\");\n    var clazz = __webpack_require__(\"fzq8\");\n\n    var parseClassType = clazz.parseClassType;\n\n    var base = 0;\n\n    var componentUtil = {};\n\n    var DELIMITER = '_';\n\n    /**\n     * @public\n     * @param {string} type\n     * @return {string}\n     */\n    componentUtil.getUID = function (type) {\n        // Considering the case of crossing js context,\n        // use Math.random to make id as unique as possible.\n        return [(type || ''), base++, Math.random()].join(DELIMITER);\n    };\n\n    /**\n     * @inner\n     */\n    componentUtil.enableSubTypeDefaulter = function (entity) {\n\n        var subTypeDefaulters = {};\n\n        entity.registerSubTypeDefaulter = function (componentType, defaulter) {\n            componentType = parseClassType(componentType);\n            subTypeDefaulters[componentType.main] = defaulter;\n        };\n\n        entity.determineSubType = function (componentType, option) {\n            var type = option.type;\n            if (!type) {\n                var componentTypeMain = parseClassType(componentType).main;\n                if (entity.hasSubTypes(componentType) && subTypeDefaulters[componentTypeMain]) {\n                    type = subTypeDefaulters[componentTypeMain](option);\n                }\n            }\n            return type;\n        };\n\n        return entity;\n    };\n\n    /**\n     * Topological travel on Activity Network (Activity On Vertices).\n     * Dependencies is defined in Model.prototype.dependencies, like ['xAxis', 'yAxis'].\n     *\n     * If 'xAxis' or 'yAxis' is absent in componentTypeList, just ignore it in topology.\n     *\n     * If there is circle dependencey, Error will be thrown.\n     *\n     */\n    componentUtil.enableTopologicalTravel = function (entity, dependencyGetter) {\n\n        /**\n         * @public\n         * @param {Array.<string>} targetNameList Target Component type list.\n         *                                           Can be ['aa', 'bb', 'aa.xx']\n         * @param {Array.<string>} fullNameList By which we can build dependency graph.\n         * @param {Function} callback Params: componentType, dependencies.\n         * @param {Object} context Scope of callback.\n         */\n        entity.topologicalTravel = function (targetNameList, fullNameList, callback, context) {\n            if (!targetNameList.length) {\n                return;\n            }\n\n            var result = makeDepndencyGraph(fullNameList);\n            var graph = result.graph;\n            var stack = result.noEntryList;\n\n            var targetNameSet = {};\n            zrUtil.each(targetNameList, function (name) {\n                targetNameSet[name] = true;\n            });\n\n            while (stack.length) {\n                var currComponentType = stack.pop();\n                var currVertex = graph[currComponentType];\n                var isInTargetNameSet = !!targetNameSet[currComponentType];\n                if (isInTargetNameSet) {\n                    callback.call(context, currComponentType, currVertex.originalDeps.slice());\n                    delete targetNameSet[currComponentType];\n                }\n                zrUtil.each(\n                    currVertex.successor,\n                    isInTargetNameSet ? removeEdgeAndAdd : removeEdge\n                );\n            }\n\n            zrUtil.each(targetNameSet, function () {\n                throw new Error('Circle dependency may exists');\n            });\n\n            function removeEdge(succComponentType) {\n                graph[succComponentType].entryCount--;\n                if (graph[succComponentType].entryCount === 0) {\n                    stack.push(succComponentType);\n                }\n            }\n\n            // Consider this case: legend depends on series, and we call\n            // chart.setOption({series: [...]}), where only series is in option.\n            // If we do not have 'removeEdgeAndAdd', legendModel.mergeOption will\n            // not be called, but only sereis.mergeOption is called. Thus legend\n            // have no chance to update its local record about series (like which\n            // name of series is available in legend).\n            function removeEdgeAndAdd(succComponentType) {\n                targetNameSet[succComponentType] = true;\n                removeEdge(succComponentType);\n            }\n        };\n\n        /**\n         * DepndencyGraph: {Object}\n         * key: conponentType,\n         * value: {\n         *     successor: [conponentTypes...],\n         *     originalDeps: [conponentTypes...],\n         *     entryCount: {number}\n         * }\n         */\n        function makeDepndencyGraph(fullNameList) {\n            var graph = {};\n            var noEntryList = [];\n\n            zrUtil.each(fullNameList, function (name) {\n\n                var thisItem = createDependencyGraphItem(graph, name);\n                var originalDeps = thisItem.originalDeps = dependencyGetter(name);\n\n                var availableDeps = getAvailableDependencies(originalDeps, fullNameList);\n                thisItem.entryCount = availableDeps.length;\n                if (thisItem.entryCount === 0) {\n                    noEntryList.push(name);\n                }\n\n                zrUtil.each(availableDeps, function (dependentName) {\n                    if (zrUtil.indexOf(thisItem.predecessor, dependentName) < 0) {\n                        thisItem.predecessor.push(dependentName);\n                    }\n                    var thatItem = createDependencyGraphItem(graph, dependentName);\n                    if (zrUtil.indexOf(thatItem.successor, dependentName) < 0) {\n                        thatItem.successor.push(name);\n                    }\n                });\n            });\n\n            return {graph: graph, noEntryList: noEntryList};\n        }\n\n        function createDependencyGraphItem(graph, name) {\n            if (!graph[name]) {\n                graph[name] = {predecessor: [], successor: []};\n            }\n            return graph[name];\n        }\n\n        function getAvailableDependencies(originalDeps, fullNameList) {\n            var availableDeps = [];\n            zrUtil.each(originalDeps, function (dep) {\n                zrUtil.indexOf(fullNameList, dep) >= 0 && availableDeps.push(dep);\n            });\n            return availableDeps;\n        }\n    };\n\n    module.exports = componentUtil;\n\n\n/***/ }),\n\n/***/ \"eScH\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n\n    var SeriesModel = __webpack_require__(\"vd24\");\n    var createListFromArray = __webpack_require__(\"pwBP\");\n\n    module.exports = SeriesModel.extend({\n\n        type: 'series.__base_bar__',\n\n        getInitialData: function (option, ecModel) {\n            return createListFromArray(option.data, this, ecModel);\n        },\n\n        getMarkerPosition: function (value) {\n            var coordSys = this.coordinateSystem;\n            if (coordSys) {\n                // PENDING if clamp ?\n                var pt = coordSys.dataToPoint(value, true);\n                var data = this.getData();\n                var offset = data.getLayout('offset');\n                var size = data.getLayout('size');\n                var offsetIndex = coordSys.getBaseAxis().isHorizontal() ? 0 : 1;\n                pt[offsetIndex] += offset + size / 2;\n                return pt;\n            }\n            return [NaN, NaN];\n        },\n\n        defaultOption: {\n            zlevel: 0,                  // 一级层叠\n            z: 2,                       // 二级层叠\n            coordinateSystem: 'cartesian2d',\n            legendHoverLink: true,\n            // stack: null\n\n            // Cartesian coordinate system\n            // xAxisIndex: 0,\n            // yAxisIndex: 0,\n\n            // 最小高度改为0\n            barMinHeight: 0,\n            // 最小角度为0，仅对极坐标系下的柱状图有效\n            barMinAngle: 0,\n\n            // barMaxWidth: null,\n            // 默认自适应\n            // barWidth: null,\n            // 柱间距离，默认为柱形宽度的30%，可设固定值\n            // barGap: '30%',\n            // 类目间柱形距离，默认为类目间距的20%，可设固定值\n            // barCategoryGap: '20%',\n            // label: {\n            //     normal: {\n            //         show: false\n            //     }\n            // },\n            itemStyle: {\n                normal: {\n                    // color: '各异'\n                },\n                emphasis: {}\n            }\n        }\n    });\n\n\n/***/ }),\n\n/***/ \"f/vB\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n/**\n * Path 代理，可以在`buildPath`中用于替代`ctx`, 会保存每个path操作的命令到pathCommands属性中\n * 可以用于 isInsidePath 判断以及获取boundingRect\n *\n * @module zrender/core/PathProxy\n * @author Yi Shen (http://www.github.com/pissang)\n */\n\n // TODO getTotalLength, getPointAtLength\n\n\n    var curve = __webpack_require__(\"cZ/t\");\n    var vec2 = __webpack_require__(\"Krco\");\n    var bbox = __webpack_require__(\"DAQg\");\n    var BoundingRect = __webpack_require__(\"W4Cx\");\n    var dpr = __webpack_require__(\"xFPV\").devicePixelRatio;\n\n    var CMD = {\n        M: 1,\n        L: 2,\n        C: 3,\n        Q: 4,\n        A: 5,\n        Z: 6,\n        // Rect\n        R: 7\n    };\n\n    // var CMD_MEM_SIZE = {\n    //     M: 3,\n    //     L: 3,\n    //     C: 7,\n    //     Q: 5,\n    //     A: 9,\n    //     R: 5,\n    //     Z: 1\n    // };\n\n    var min = [];\n    var max = [];\n    var min2 = [];\n    var max2 = [];\n    var mathMin = Math.min;\n    var mathMax = Math.max;\n    var mathCos = Math.cos;\n    var mathSin = Math.sin;\n    var mathSqrt = Math.sqrt;\n    var mathAbs = Math.abs;\n\n    var hasTypedArray = typeof Float32Array != 'undefined';\n\n    /**\n     * @alias module:zrender/core/PathProxy\n     * @constructor\n     */\n    var PathProxy = function (notSaveData) {\n\n        this._saveData = !(notSaveData || false);\n\n        if (this._saveData) {\n            /**\n             * Path data. Stored as flat array\n             * @type {Array.<Object>}\n             */\n            this.data = [];\n        }\n\n        this._ctx = null;\n    };\n\n    /**\n     * 快速计算Path包围盒（并不是最小包围盒）\n     * @return {Object}\n     */\n    PathProxy.prototype = {\n\n        constructor: PathProxy,\n\n        _xi: 0,\n        _yi: 0,\n\n        _x0: 0,\n        _y0: 0,\n        // Unit x, Unit y. Provide for avoiding drawing that too short line segment\n        _ux: 0,\n        _uy: 0,\n\n        _len: 0,\n\n        _lineDash: null,\n\n        _dashOffset: 0,\n\n        _dashIdx: 0,\n\n        _dashSum: 0,\n\n        /**\n         * @readOnly\n         */\n        setScale: function (sx, sy) {\n            this._ux = mathAbs(1 / dpr / sx) || 0;\n            this._uy = mathAbs(1 / dpr / sy) || 0;\n        },\n\n        getContext: function () {\n            return this._ctx;\n        },\n\n        /**\n         * @param  {CanvasRenderingContext2D} ctx\n         * @return {module:zrender/core/PathProxy}\n         */\n        beginPath: function (ctx) {\n\n            this._ctx = ctx;\n\n            ctx && ctx.beginPath();\n\n            ctx && (this.dpr = ctx.dpr);\n\n            // Reset\n            if (this._saveData) {\n                this._len = 0;\n            }\n\n            if (this._lineDash) {\n                this._lineDash = null;\n\n                this._dashOffset = 0;\n            }\n\n            return this;\n        },\n\n        /**\n         * @param  {number} x\n         * @param  {number} y\n         * @return {module:zrender/core/PathProxy}\n         */\n        moveTo: function (x, y) {\n            this.addData(CMD.M, x, y);\n            this._ctx && this._ctx.moveTo(x, y);\n\n            // x0, y0, xi, yi 是记录在 _dashedXXXXTo 方法中使用\n            // xi, yi 记录当前点, x0, y0 在 closePath 的时候回到起始点。\n            // 有可能在 beginPath 之后直接调用 lineTo，这时候 x0, y0 需要\n            // 在 lineTo 方法中记录，这里先不考虑这种情况，dashed line 也只在 IE10- 中不支持\n            this._x0 = x;\n            this._y0 = y;\n\n            this._xi = x;\n            this._yi = y;\n\n            return this;\n        },\n\n        /**\n         * @param  {number} x\n         * @param  {number} y\n         * @return {module:zrender/core/PathProxy}\n         */\n        lineTo: function (x, y) {\n            var exceedUnit = mathAbs(x - this._xi) > this._ux\n                || mathAbs(y - this._yi) > this._uy\n                // Force draw the first segment\n                || this._len < 5;\n\n            this.addData(CMD.L, x, y);\n\n            if (this._ctx && exceedUnit) {\n                this._needsDash() ? this._dashedLineTo(x, y)\n                    : this._ctx.lineTo(x, y);\n            }\n            if (exceedUnit) {\n                this._xi = x;\n                this._yi = y;\n            }\n\n            return this;\n        },\n\n        /**\n         * @param  {number} x1\n         * @param  {number} y1\n         * @param  {number} x2\n         * @param  {number} y2\n         * @param  {number} x3\n         * @param  {number} y3\n         * @return {module:zrender/core/PathProxy}\n         */\n        bezierCurveTo: function (x1, y1, x2, y2, x3, y3) {\n            this.addData(CMD.C, x1, y1, x2, y2, x3, y3);\n            if (this._ctx) {\n                this._needsDash() ? this._dashedBezierTo(x1, y1, x2, y2, x3, y3)\n                    : this._ctx.bezierCurveTo(x1, y1, x2, y2, x3, y3);\n            }\n            this._xi = x3;\n            this._yi = y3;\n            return this;\n        },\n\n        /**\n         * @param  {number} x1\n         * @param  {number} y1\n         * @param  {number} x2\n         * @param  {number} y2\n         * @return {module:zrender/core/PathProxy}\n         */\n        quadraticCurveTo: function (x1, y1, x2, y2) {\n            this.addData(CMD.Q, x1, y1, x2, y2);\n            if (this._ctx) {\n                this._needsDash() ? this._dashedQuadraticTo(x1, y1, x2, y2)\n                    : this._ctx.quadraticCurveTo(x1, y1, x2, y2);\n            }\n            this._xi = x2;\n            this._yi = y2;\n            return this;\n        },\n\n        /**\n         * @param  {number} cx\n         * @param  {number} cy\n         * @param  {number} r\n         * @param  {number} startAngle\n         * @param  {number} endAngle\n         * @param  {boolean} anticlockwise\n         * @return {module:zrender/core/PathProxy}\n         */\n        arc: function (cx, cy, r, startAngle, endAngle, anticlockwise) {\n            this.addData(\n                CMD.A, cx, cy, r, r, startAngle, endAngle - startAngle, 0, anticlockwise ? 0 : 1\n            );\n            this._ctx && this._ctx.arc(cx, cy, r, startAngle, endAngle, anticlockwise);\n\n            this._xi = mathCos(endAngle) * r + cx;\n            this._yi = mathSin(endAngle) * r + cx;\n            return this;\n        },\n\n        // TODO\n        arcTo: function (x1, y1, x2, y2, radius) {\n            if (this._ctx) {\n                this._ctx.arcTo(x1, y1, x2, y2, radius);\n            }\n            return this;\n        },\n\n        // TODO\n        rect: function (x, y, w, h) {\n            this._ctx && this._ctx.rect(x, y, w, h);\n            this.addData(CMD.R, x, y, w, h);\n            return this;\n        },\n\n        /**\n         * @return {module:zrender/core/PathProxy}\n         */\n        closePath: function () {\n            this.addData(CMD.Z);\n\n            var ctx = this._ctx;\n            var x0 = this._x0;\n            var y0 = this._y0;\n            if (ctx) {\n                this._needsDash() && this._dashedLineTo(x0, y0);\n                ctx.closePath();\n            }\n\n            this._xi = x0;\n            this._yi = y0;\n            return this;\n        },\n\n        /**\n         * Context 从外部传入，因为有可能是 rebuildPath 完之后再 fill。\n         * stroke 同样\n         * @param {CanvasRenderingContext2D} ctx\n         * @return {module:zrender/core/PathProxy}\n         */\n        fill: function (ctx) {\n            ctx && ctx.fill();\n            this.toStatic();\n        },\n\n        /**\n         * @param {CanvasRenderingContext2D} ctx\n         * @return {module:zrender/core/PathProxy}\n         */\n        stroke: function (ctx) {\n            ctx && ctx.stroke();\n            this.toStatic();\n        },\n\n        /**\n         * 必须在其它绘制命令前调用\n         * Must be invoked before all other path drawing methods\n         * @return {module:zrender/core/PathProxy}\n         */\n        setLineDash: function (lineDash) {\n            if (lineDash instanceof Array) {\n                this._lineDash = lineDash;\n\n                this._dashIdx = 0;\n\n                var lineDashSum = 0;\n                for (var i = 0; i < lineDash.length; i++) {\n                    lineDashSum += lineDash[i];\n                }\n                this._dashSum = lineDashSum;\n            }\n            return this;\n        },\n\n        /**\n         * 必须在其它绘制命令前调用\n         * Must be invoked before all other path drawing methods\n         * @return {module:zrender/core/PathProxy}\n         */\n        setLineDashOffset: function (offset) {\n            this._dashOffset = offset;\n            return this;\n        },\n\n        /**\n         *\n         * @return {boolean}\n         */\n        len: function () {\n            return this._len;\n        },\n\n        /**\n         * 直接设置 Path 数据\n         */\n        setData: function (data) {\n\n            var len = data.length;\n\n            if (! (this.data && this.data.length == len) && hasTypedArray) {\n                this.data = new Float32Array(len);\n            }\n\n            for (var i = 0; i < len; i++) {\n                this.data[i] = data[i];\n            }\n\n            this._len = len;\n        },\n\n        /**\n         * 添加子路径\n         * @param {module:zrender/core/PathProxy|Array.<module:zrender/core/PathProxy>} path\n         */\n        appendPath: function (path) {\n            if (!(path instanceof Array)) {\n                path = [path];\n            }\n            var len = path.length;\n            var appendSize = 0;\n            var offset = this._len;\n            for (var i = 0; i < len; i++) {\n                appendSize += path[i].len();\n            }\n            if (hasTypedArray && (this.data instanceof Float32Array)) {\n                this.data = new Float32Array(offset + appendSize);\n            }\n            for (var i = 0; i < len; i++) {\n                var appendPathData = path[i].data;\n                for (var k = 0; k < appendPathData.length; k++) {\n                    this.data[offset++] = appendPathData[k];\n                }\n            }\n            this._len = offset;\n        },\n\n        /**\n         * 填充 Path 数据。\n         * 尽量复用而不申明新的数组。大部分图形重绘的指令数据长度都是不变的。\n         */\n        addData: function (cmd) {\n            if (!this._saveData) {\n                return;\n            }\n\n            var data = this.data;\n            if (this._len + arguments.length > data.length) {\n                // 因为之前的数组已经转换成静态的 Float32Array\n                // 所以不够用时需要扩展一个新的动态数组\n                this._expandData();\n                data = this.data;\n            }\n            for (var i = 0; i < arguments.length; i++) {\n                data[this._len++] = arguments[i];\n            }\n\n            this._prevCmd = cmd;\n        },\n\n        _expandData: function () {\n            // Only if data is Float32Array\n            if (!(this.data instanceof Array)) {\n                var newData = [];\n                for (var i = 0; i < this._len; i++) {\n                    newData[i] = this.data[i];\n                }\n                this.data = newData;\n            }\n        },\n\n        /**\n         * If needs js implemented dashed line\n         * @return {boolean}\n         * @private\n         */\n        _needsDash: function () {\n            return this._lineDash;\n        },\n\n        _dashedLineTo: function (x1, y1) {\n            var dashSum = this._dashSum;\n            var offset = this._dashOffset;\n            var lineDash = this._lineDash;\n            var ctx = this._ctx;\n\n            var x0 = this._xi;\n            var y0 = this._yi;\n            var dx = x1 - x0;\n            var dy = y1 - y0;\n            var dist = mathSqrt(dx * dx + dy * dy);\n            var x = x0;\n            var y = y0;\n            var dash;\n            var nDash = lineDash.length;\n            var idx;\n            dx /= dist;\n            dy /= dist;\n\n            if (offset < 0) {\n                // Convert to positive offset\n                offset = dashSum + offset;\n            }\n            offset %= dashSum;\n            x -= offset * dx;\n            y -= offset * dy;\n\n            while ((dx > 0 && x <= x1) || (dx < 0 && x >= x1)\n            || (dx == 0 && ((dy > 0 && y <= y1) || (dy < 0 && y >= y1)))) {\n                idx = this._dashIdx;\n                dash = lineDash[idx];\n                x += dx * dash;\n                y += dy * dash;\n                this._dashIdx = (idx + 1) % nDash;\n                // Skip positive offset\n                if ((dx > 0 && x < x0) || (dx < 0 && x > x0) || (dy > 0 && y < y0) || (dy < 0 && y > y0)) {\n                    continue;\n                }\n                ctx[idx % 2 ? 'moveTo' : 'lineTo'](\n                    dx >= 0 ? mathMin(x, x1) : mathMax(x, x1),\n                    dy >= 0 ? mathMin(y, y1) : mathMax(y, y1)\n                );\n            }\n            // Offset for next lineTo\n            dx = x - x1;\n            dy = y - y1;\n            this._dashOffset = -mathSqrt(dx * dx + dy * dy);\n        },\n\n        // Not accurate dashed line to\n        _dashedBezierTo: function (x1, y1, x2, y2, x3, y3) {\n            var dashSum = this._dashSum;\n            var offset = this._dashOffset;\n            var lineDash = this._lineDash;\n            var ctx = this._ctx;\n\n            var x0 = this._xi;\n            var y0 = this._yi;\n            var t;\n            var dx;\n            var dy;\n            var cubicAt = curve.cubicAt;\n            var bezierLen = 0;\n            var idx = this._dashIdx;\n            var nDash = lineDash.length;\n\n            var x;\n            var y;\n\n            var tmpLen = 0;\n\n            if (offset < 0) {\n                // Convert to positive offset\n                offset = dashSum + offset;\n            }\n            offset %= dashSum;\n            // Bezier approx length\n            for (t = 0; t < 1; t += 0.1) {\n                dx = cubicAt(x0, x1, x2, x3, t + 0.1)\n                    - cubicAt(x0, x1, x2, x3, t);\n                dy = cubicAt(y0, y1, y2, y3, t + 0.1)\n                    - cubicAt(y0, y1, y2, y3, t);\n                bezierLen += mathSqrt(dx * dx + dy * dy);\n            }\n\n            // Find idx after add offset\n            for (; idx < nDash; idx++) {\n                tmpLen += lineDash[idx];\n                if (tmpLen > offset) {\n                    break;\n                }\n            }\n            t = (tmpLen - offset) / bezierLen;\n\n            while (t <= 1) {\n\n                x = cubicAt(x0, x1, x2, x3, t);\n                y = cubicAt(y0, y1, y2, y3, t);\n\n                // Use line to approximate dashed bezier\n                // Bad result if dash is long\n                idx % 2 ? ctx.moveTo(x, y)\n                    : ctx.lineTo(x, y);\n\n                t += lineDash[idx] / bezierLen;\n\n                idx = (idx + 1) % nDash;\n            }\n\n            // Finish the last segment and calculate the new offset\n            (idx % 2 !== 0) && ctx.lineTo(x3, y3);\n            dx = x3 - x;\n            dy = y3 - y;\n            this._dashOffset = -mathSqrt(dx * dx + dy * dy);\n        },\n\n        _dashedQuadraticTo: function (x1, y1, x2, y2) {\n            // Convert quadratic to cubic using degree elevation\n            var x3 = x2;\n            var y3 = y2;\n            x2 = (x2 + 2 * x1) / 3;\n            y2 = (y2 + 2 * y1) / 3;\n            x1 = (this._xi + 2 * x1) / 3;\n            y1 = (this._yi + 2 * y1) / 3;\n\n            this._dashedBezierTo(x1, y1, x2, y2, x3, y3);\n        },\n\n        /**\n         * 转成静态的 Float32Array 减少堆内存占用\n         * Convert dynamic array to static Float32Array\n         */\n        toStatic: function () {\n            var data = this.data;\n            if (data instanceof Array) {\n                data.length = this._len;\n                if (hasTypedArray) {\n                    this.data = new Float32Array(data);\n                }\n            }\n        },\n\n        /**\n         * @return {module:zrender/core/BoundingRect}\n         */\n        getBoundingRect: function () {\n            min[0] = min[1] = min2[0] = min2[1] = Number.MAX_VALUE;\n            max[0] = max[1] = max2[0] = max2[1] = -Number.MAX_VALUE;\n\n            var data = this.data;\n            var xi = 0;\n            var yi = 0;\n            var x0 = 0;\n            var y0 = 0;\n\n            for (var i = 0; i < data.length;) {\n                var cmd = data[i++];\n\n                if (i == 1) {\n                    // 如果第一个命令是 L, C, Q\n                    // 则 previous point 同绘制命令的第一个 point\n                    //\n                    // 第一个命令为 Arc 的情况下会在后面特殊处理\n                    xi = data[i];\n                    yi = data[i + 1];\n\n                    x0 = xi;\n                    y0 = yi;\n                }\n\n                switch (cmd) {\n                    case CMD.M:\n                        // moveTo 命令重新创建一个新的 subpath, 并且更新新的起点\n                        // 在 closePath 的时候使用\n                        x0 = data[i++];\n                        y0 = data[i++];\n                        xi = x0;\n                        yi = y0;\n                        min2[0] = x0;\n                        min2[1] = y0;\n                        max2[0] = x0;\n                        max2[1] = y0;\n                        break;\n                    case CMD.L:\n                        bbox.fromLine(xi, yi, data[i], data[i + 1], min2, max2);\n                        xi = data[i++];\n                        yi = data[i++];\n                        break;\n                    case CMD.C:\n                        bbox.fromCubic(\n                            xi, yi, data[i++], data[i++], data[i++], data[i++], data[i], data[i + 1],\n                            min2, max2\n                        );\n                        xi = data[i++];\n                        yi = data[i++];\n                        break;\n                    case CMD.Q:\n                        bbox.fromQuadratic(\n                            xi, yi, data[i++], data[i++], data[i], data[i + 1],\n                            min2, max2\n                        );\n                        xi = data[i++];\n                        yi = data[i++];\n                        break;\n                    case CMD.A:\n                        // TODO Arc 判断的开销比较大\n                        var cx = data[i++];\n                        var cy = data[i++];\n                        var rx = data[i++];\n                        var ry = data[i++];\n                        var startAngle = data[i++];\n                        var endAngle = data[i++] + startAngle;\n                        // TODO Arc 旋转\n                        var psi = data[i++];\n                        var anticlockwise = 1 - data[i++];\n\n                        if (i == 1) {\n                            // 直接使用 arc 命令\n                            // 第一个命令起点还未定义\n                            x0 = mathCos(startAngle) * rx + cx;\n                            y0 = mathSin(startAngle) * ry + cy;\n                        }\n\n                        bbox.fromArc(\n                            cx, cy, rx, ry, startAngle, endAngle,\n                            anticlockwise, min2, max2\n                        );\n\n                        xi = mathCos(endAngle) * rx + cx;\n                        yi = mathSin(endAngle) * ry + cy;\n                        break;\n                    case CMD.R:\n                        x0 = xi = data[i++];\n                        y0 = yi = data[i++];\n                        var width = data[i++];\n                        var height = data[i++];\n                        // Use fromLine\n                        bbox.fromLine(x0, y0, x0 + width, y0 + height, min2, max2);\n                        break;\n                    case CMD.Z:\n                        xi = x0;\n                        yi = y0;\n                        break;\n                }\n\n                // Union\n                vec2.min(min, min, min2);\n                vec2.max(max, max, max2);\n            }\n\n            // No data\n            if (i === 0) {\n                min[0] = min[1] = max[0] = max[1] = 0;\n            }\n\n            return new BoundingRect(\n                min[0], min[1], max[0] - min[0], max[1] - min[1]\n            );\n        },\n\n        /**\n         * Rebuild path from current data\n         * Rebuild path will not consider javascript implemented line dash.\n         * @param {CanvasRenderingContext} ctx\n         */\n        rebuildPath: function (ctx) {\n            var d = this.data;\n            var x0, y0;\n            var xi, yi;\n            var x, y;\n            var ux = this._ux;\n            var uy = this._uy;\n            var len = this._len;\n            for (var i = 0; i < len;) {\n                var cmd = d[i++];\n\n                if (i == 1) {\n                    // 如果第一个命令是 L, C, Q\n                    // 则 previous point 同绘制命令的第一个 point\n                    //\n                    // 第一个命令为 Arc 的情况下会在后面特殊处理\n                    xi = d[i];\n                    yi = d[i + 1];\n\n                    x0 = xi;\n                    y0 = yi;\n                }\n                switch (cmd) {\n                    case CMD.M:\n                        x0 = xi = d[i++];\n                        y0 = yi = d[i++];\n                        ctx.moveTo(xi, yi);\n                        break;\n                    case CMD.L:\n                        x = d[i++];\n                        y = d[i++];\n                        // Not draw too small seg between\n                        if (mathAbs(x - xi) > ux || mathAbs(y - yi) > uy || i === len - 1) {\n                            ctx.lineTo(x, y);\n                            xi = x;\n                            yi = y;\n                        }\n                        break;\n                    case CMD.C:\n                        ctx.bezierCurveTo(\n                            d[i++], d[i++], d[i++], d[i++], d[i++], d[i++]\n                        );\n                        xi = d[i - 2];\n                        yi = d[i - 1];\n                        break;\n                    case CMD.Q:\n                        ctx.quadraticCurveTo(d[i++], d[i++], d[i++], d[i++]);\n                        xi = d[i - 2];\n                        yi = d[i - 1];\n                        break;\n                    case CMD.A:\n                        var cx = d[i++];\n                        var cy = d[i++];\n                        var rx = d[i++];\n                        var ry = d[i++];\n                        var theta = d[i++];\n                        var dTheta = d[i++];\n                        var psi = d[i++];\n                        var fs = d[i++];\n                        var r = (rx > ry) ? rx : ry;\n                        var scaleX = (rx > ry) ? 1 : rx / ry;\n                        var scaleY = (rx > ry) ? ry / rx : 1;\n                        var isEllipse = Math.abs(rx - ry) > 1e-3;\n                        var endAngle = theta + dTheta;\n                        if (isEllipse) {\n                            ctx.translate(cx, cy);\n                            ctx.rotate(psi);\n                            ctx.scale(scaleX, scaleY);\n                            ctx.arc(0, 0, r, theta, endAngle, 1 - fs);\n                            ctx.scale(1 / scaleX, 1 / scaleY);\n                            ctx.rotate(-psi);\n                            ctx.translate(-cx, -cy);\n                        }\n                        else {\n                            ctx.arc(cx, cy, r, theta, endAngle, 1 - fs);\n                        }\n\n                        if (i == 1) {\n                            // 直接使用 arc 命令\n                            // 第一个命令起点还未定义\n                            x0 = mathCos(theta) * rx + cx;\n                            y0 = mathSin(theta) * ry + cy;\n                        }\n                        xi = mathCos(endAngle) * rx + cx;\n                        yi = mathSin(endAngle) * ry + cy;\n                        break;\n                    case CMD.R:\n                        x0 = xi = d[i];\n                        y0 = yi = d[i + 1];\n                        ctx.rect(d[i++], d[i++], d[i++], d[i++]);\n                        break;\n                    case CMD.Z:\n                        ctx.closePath();\n                        xi = x0;\n                        yi = y0;\n                }\n            }\n        }\n    };\n\n    PathProxy.CMD = CMD;\n\n    module.exports = PathProxy;\n\n\n/***/ }),\n\n/***/ \"fIB7\":\n/***/ (function(module, exports) {\n\n\n\n    var lib = {};\n\n    var ORIGIN_METHOD = '\\0__throttleOriginMethod';\n    var RATE = '\\0__throttleRate';\n    var THROTTLE_TYPE = '\\0__throttleType';\n\n    /**\n     * @public\n     * @param {(Function)} fn\n     * @param {number} [delay=0] Unit: ms.\n     * @param {boolean} [debounce=false]\n     *        true: If call interval less than `delay`, only the last call works.\n     *        false: If call interval less than `delay, call works on fixed rate.\n     * @return {(Function)} throttled fn.\n     */\n    lib.throttle = function (fn, delay, debounce) {\n\n        var currCall;\n        var lastCall = 0;\n        var lastExec = 0;\n        var timer = null;\n        var diff;\n        var scope;\n        var args;\n        var debounceNextCall;\n\n        delay = delay || 0;\n\n        function exec() {\n            lastExec = (new Date()).getTime();\n            timer = null;\n            fn.apply(scope, args || []);\n        }\n\n        var cb = function () {\n            currCall = (new Date()).getTime();\n            scope = this;\n            args = arguments;\n            var thisDelay = debounceNextCall || delay;\n            var thisDebounce = debounceNextCall || debounce;\n            debounceNextCall = null;\n            diff = currCall - (thisDebounce ? lastCall : lastExec) - thisDelay;\n\n            clearTimeout(timer);\n\n            if (thisDebounce) {\n                timer = setTimeout(exec, thisDelay);\n            }\n            else {\n                if (diff >= 0) {\n                    exec();\n                }\n                else {\n                    timer = setTimeout(exec, -diff);\n                }\n            }\n\n            lastCall = currCall;\n        };\n\n        /**\n         * Clear throttle.\n         * @public\n         */\n        cb.clear = function () {\n            if (timer) {\n                clearTimeout(timer);\n                timer = null;\n            }\n        };\n\n        /**\n         * Enable debounce once.\n         */\n        cb.debounceNextCall = function (debounceDelay) {\n            debounceNextCall = debounceDelay;\n        };\n\n        return cb;\n    };\n\n    /**\n     * Create throttle method or update throttle rate.\n     *\n     * @example\n     * ComponentView.prototype.render = function () {\n     *     ...\n     *     throttle.createOrUpdate(\n     *         this,\n     *         '_dispatchAction',\n     *         this.model.get('throttle'),\n     *         'fixRate'\n     *     );\n     * };\n     * ComponentView.prototype.remove = function () {\n     *     throttle.clear(this, '_dispatchAction');\n     * };\n     * ComponentView.prototype.dispose = function () {\n     *     throttle.clear(this, '_dispatchAction');\n     * };\n     *\n     * @public\n     * @param {Object} obj\n     * @param {string} fnAttr\n     * @param {number} [rate]\n     * @param {string} [throttleType='fixRate'] 'fixRate' or 'debounce'\n     * @return {Function} throttled function.\n     */\n    lib.createOrUpdate = function (obj, fnAttr, rate, throttleType) {\n        var fn = obj[fnAttr];\n\n        if (!fn) {\n            return;\n        }\n\n        var originFn = fn[ORIGIN_METHOD] || fn;\n        var lastThrottleType = fn[THROTTLE_TYPE];\n        var lastRate = fn[RATE];\n\n        if (lastRate !== rate || lastThrottleType !== throttleType) {\n            if (rate == null || !throttleType) {\n                return (obj[fnAttr] = originFn);\n            }\n\n            fn = obj[fnAttr] = lib.throttle(\n                originFn, rate, throttleType === 'debounce'\n            );\n            fn[ORIGIN_METHOD] = originFn;\n            fn[THROTTLE_TYPE] = throttleType;\n            fn[RATE] = rate;\n        }\n\n        return fn;\n    };\n\n    /**\n     * Clear throttle. Example see throttle.createOrUpdate.\n     *\n     * @public\n     * @param {Object} obj\n     * @param {string} fnAttr\n     */\n    lib.clear = function (obj, fnAttr) {\n        var fn = obj[fnAttr];\n        if (fn && fn[ORIGIN_METHOD]) {\n            obj[fnAttr] = fn[ORIGIN_METHOD];\n        }\n    };\n\n    module.exports = lib;\n\n\n\n/***/ }),\n\n/***/ \"feXt\":\n/***/ (function(module, exports) {\n\n/**\n * 事件扩展\n * @module zrender/mixin/Eventful\n * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)\n *         pissang (https://www.github.com/pissang)\n */\n\n\n    var arrySlice = Array.prototype.slice;\n\n    /**\n     * 事件分发器\n     * @alias module:zrender/mixin/Eventful\n     * @constructor\n     */\n    var Eventful = function () {\n        this._$handlers = {};\n    };\n\n    Eventful.prototype = {\n\n        constructor: Eventful,\n\n        /**\n         * 单次触发绑定，trigger后销毁\n         *\n         * @param {string} event 事件名\n         * @param {Function} handler 响应函数\n         * @param {Object} context\n         */\n        one: function (event, handler, context) {\n            var _h = this._$handlers;\n\n            if (!handler || !event) {\n                return this;\n            }\n\n            if (!_h[event]) {\n                _h[event] = [];\n            }\n\n            for (var i = 0; i < _h[event].length; i++) {\n                if (_h[event][i].h === handler) {\n                    return this;\n                }\n            }\n\n            _h[event].push({\n                h: handler,\n                one: true,\n                ctx: context || this\n            });\n\n            return this;\n        },\n\n        /**\n         * 绑定事件\n         * @param {string} event 事件名\n         * @param {Function} handler 事件处理函数\n         * @param {Object} [context]\n         */\n        on: function (event, handler, context) {\n            var _h = this._$handlers;\n\n            if (!handler || !event) {\n                return this;\n            }\n\n            if (!_h[event]) {\n                _h[event] = [];\n            }\n\n            for (var i = 0; i < _h[event].length; i++) {\n                if (_h[event][i].h === handler) {\n                    return this;\n                }\n            }\n\n            _h[event].push({\n                h: handler,\n                one: false,\n                ctx: context || this\n            });\n\n            return this;\n        },\n\n        /**\n         * 是否绑定了事件\n         * @param  {string}  event\n         * @return {boolean}\n         */\n        isSilent: function (event) {\n            var _h = this._$handlers;\n            return _h[event] && _h[event].length;\n        },\n\n        /**\n         * 解绑事件\n         * @param {string} event 事件名\n         * @param {Function} [handler] 事件处理函数\n         */\n        off: function (event, handler) {\n            var _h = this._$handlers;\n\n            if (!event) {\n                this._$handlers = {};\n                return this;\n            }\n\n            if (handler) {\n                if (_h[event]) {\n                    var newList = [];\n                    for (var i = 0, l = _h[event].length; i < l; i++) {\n                        if (_h[event][i]['h'] != handler) {\n                            newList.push(_h[event][i]);\n                        }\n                    }\n                    _h[event] = newList;\n                }\n\n                if (_h[event] && _h[event].length === 0) {\n                    delete _h[event];\n                }\n            }\n            else {\n                delete _h[event];\n            }\n\n            return this;\n        },\n\n        /**\n         * 事件分发\n         *\n         * @param {string} type 事件类型\n         */\n        trigger: function (type) {\n            if (this._$handlers[type]) {\n                var args = arguments;\n                var argLen = args.length;\n\n                if (argLen > 3) {\n                    args = arrySlice.call(args, 1);\n                }\n\n                var _h = this._$handlers[type];\n                var len = _h.length;\n                for (var i = 0; i < len;) {\n                    // Optimize advise from backbone\n                    switch (argLen) {\n                        case 1:\n                            _h[i]['h'].call(_h[i]['ctx']);\n                            break;\n                        case 2:\n                            _h[i]['h'].call(_h[i]['ctx'], args[1]);\n                            break;\n                        case 3:\n                            _h[i]['h'].call(_h[i]['ctx'], args[1], args[2]);\n                            break;\n                        default:\n                            // have more than 2 given arguments\n                            _h[i]['h'].apply(_h[i]['ctx'], args);\n                            break;\n                    }\n\n                    if (_h[i]['one']) {\n                        _h.splice(i, 1);\n                        len--;\n                    }\n                    else {\n                        i++;\n                    }\n                }\n            }\n\n            return this;\n        },\n\n        /**\n         * 带有context的事件分发, 最后一个参数是事件回调的context\n         * @param {string} type 事件类型\n         */\n        triggerWithContext: function (type) {\n            if (this._$handlers[type]) {\n                var args = arguments;\n                var argLen = args.length;\n\n                if (argLen > 4) {\n                    args = arrySlice.call(args, 1, args.length - 1);\n                }\n                var ctx = args[args.length - 1];\n\n                var _h = this._$handlers[type];\n                var len = _h.length;\n                for (var i = 0; i < len;) {\n                    // Optimize advise from backbone\n                    switch (argLen) {\n                        case 1:\n                            _h[i]['h'].call(ctx);\n                            break;\n                        case 2:\n                            _h[i]['h'].call(ctx, args[1]);\n                            break;\n                        case 3:\n                            _h[i]['h'].call(ctx, args[1], args[2]);\n                            break;\n                        default:\n                            // have more than 2 given arguments\n                            _h[i]['h'].apply(ctx, args);\n                            break;\n                    }\n\n                    if (_h[i]['one']) {\n                        _h.splice(i, 1);\n                        len--;\n                    }\n                    else {\n                        i++;\n                    }\n                }\n            }\n\n            return this;\n        }\n    };\n\n    // 对象可以通过 onxxxx 绑定事件\n    /**\n     * @event module:zrender/mixin/Eventful#onclick\n     * @type {Function}\n     * @default null\n     */\n    /**\n     * @event module:zrender/mixin/Eventful#onmouseover\n     * @type {Function}\n     * @default null\n     */\n    /**\n     * @event module:zrender/mixin/Eventful#onmouseout\n     * @type {Function}\n     * @default null\n     */\n    /**\n     * @event module:zrender/mixin/Eventful#onmousemove\n     * @type {Function}\n     * @default null\n     */\n    /**\n     * @event module:zrender/mixin/Eventful#onmousewheel\n     * @type {Function}\n     * @default null\n     */\n    /**\n     * @event module:zrender/mixin/Eventful#onmousedown\n     * @type {Function}\n     * @default null\n     */\n    /**\n     * @event module:zrender/mixin/Eventful#onmouseup\n     * @type {Function}\n     * @default null\n     */\n    /**\n     * @event module:zrender/mixin/Eventful#ondrag\n     * @type {Function}\n     * @default null\n     */\n    /**\n     * @event module:zrender/mixin/Eventful#ondragstart\n     * @type {Function}\n     * @default null\n     */\n    /**\n     * @event module:zrender/mixin/Eventful#ondragend\n     * @type {Function}\n     * @default null\n     */\n    /**\n     * @event module:zrender/mixin/Eventful#ondragenter\n     * @type {Function}\n     * @default null\n     */\n    /**\n     * @event module:zrender/mixin/Eventful#ondragleave\n     * @type {Function}\n     * @default null\n     */\n    /**\n     * @event module:zrender/mixin/Eventful#ondragover\n     * @type {Function}\n     * @default null\n     */\n    /**\n     * @event module:zrender/mixin/Eventful#ondrop\n     * @type {Function}\n     * @default null\n     */\n\n    module.exports = Eventful;\n\n\n\n/***/ }),\n\n/***/ \"fzq8\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\n    var zrUtil = __webpack_require__(\"nw1Z\");\n\n    var clazz = {};\n\n    var TYPE_DELIMITER = '.';\n    var IS_CONTAINER = '___EC__COMPONENT__CONTAINER___';\n    var MEMBER_PRIFIX = '\\0ec_\\0';\n\n    /**\n     * Hide private class member.\n     * The same behavior as `host[name] = value;` (can be right-value)\n     * @public\n     */\n    clazz.set = function (host, name, value) {\n        return (host[MEMBER_PRIFIX + name] = value);\n    };\n\n    /**\n     * Hide private class member.\n     * The same behavior as `host[name];`\n     * @public\n     */\n    clazz.get = function (host, name) {\n        return host[MEMBER_PRIFIX + name];\n    };\n\n    /**\n     * For hidden private class member.\n     * The same behavior as `host.hasOwnProperty(name);`\n     * @public\n     */\n    clazz.hasOwn = function (host, name) {\n        return host.hasOwnProperty(MEMBER_PRIFIX + name);\n    };\n\n    /**\n     * Notice, parseClassType('') should returns {main: '', sub: ''}\n     * @public\n     */\n    var parseClassType = clazz.parseClassType = function (componentType) {\n        var ret = {main: '', sub: ''};\n        if (componentType) {\n            componentType = componentType.split(TYPE_DELIMITER);\n            ret.main = componentType[0] || '';\n            ret.sub = componentType[1] || '';\n        }\n        return ret;\n    };\n\n    /**\n     * @public\n     */\n    function checkClassType(componentType) {\n        zrUtil.assert(\n            /^[a-zA-Z0-9_]+([.][a-zA-Z0-9_]+)?$/.test(componentType),\n            'componentType \"' + componentType + '\" illegal'\n        );\n    }\n\n    /**\n     * @public\n     */\n    clazz.enableClassExtend = function (RootClass, mandatoryMethods) {\n\n        RootClass.$constructor = RootClass;\n        RootClass.extend = function (proto) {\n\n            if (__DEV__) {\n                zrUtil.each(mandatoryMethods, function (method) {\n                    if (!proto[method]) {\n                        console.warn(\n                            'Method `' + method + '` should be implemented'\n                            + (proto.type ? ' in ' + proto.type : '') + '.'\n                        );\n                    }\n                });\n            }\n\n            var superClass = this;\n            var ExtendedClass = function () {\n                if (!proto.$constructor) {\n                    superClass.apply(this, arguments);\n                }\n                else {\n                    proto.$constructor.apply(this, arguments);\n                }\n            };\n\n            zrUtil.extend(ExtendedClass.prototype, proto);\n\n            ExtendedClass.extend = this.extend;\n            ExtendedClass.superCall = superCall;\n            ExtendedClass.superApply = superApply;\n            zrUtil.inherits(ExtendedClass, this);\n            ExtendedClass.superClass = superClass;\n\n            return ExtendedClass;\n        };\n    };\n\n    // superCall should have class info, which can not be fetch from 'this'.\n    // Consider this case:\n    // class A has method f,\n    // class B inherits class A, overrides method f, f call superApply('f'),\n    // class C inherits class B, do not overrides method f,\n    // then when method of class C is called, dead loop occured.\n    function superCall(context, methodName) {\n        var args = zrUtil.slice(arguments, 2);\n        return this.superClass.prototype[methodName].apply(context, args);\n    }\n\n    function superApply(context, methodName, args) {\n        return this.superClass.prototype[methodName].apply(context, args);\n    }\n\n    /**\n     * @param {Object} entity\n     * @param {Object} options\n     * @param {boolean} [options.registerWhenExtend]\n     * @public\n     */\n    clazz.enableClassManagement = function (entity, options) {\n        options = options || {};\n\n        /**\n         * Component model classes\n         * key: componentType,\n         * value:\n         *     componentClass, when componentType is 'xxx'\n         *     or Object.<subKey, componentClass>, when componentType is 'xxx.yy'\n         * @type {Object}\n         */\n        var storage = {};\n\n        entity.registerClass = function (Clazz, componentType) {\n            if (componentType) {\n                checkClassType(componentType);\n                componentType = parseClassType(componentType);\n\n                if (!componentType.sub) {\n                    if (__DEV__) {\n                        if (storage[componentType.main]) {\n                            console.warn(componentType.main + ' exists.');\n                        }\n                    }\n                    storage[componentType.main] = Clazz;\n                }\n                else if (componentType.sub !== IS_CONTAINER) {\n                    var container = makeContainer(componentType);\n                    container[componentType.sub] = Clazz;\n                }\n            }\n            return Clazz;\n        };\n\n        entity.getClass = function (componentMainType, subType, throwWhenNotFound) {\n            var Clazz = storage[componentMainType];\n\n            if (Clazz && Clazz[IS_CONTAINER]) {\n                Clazz = subType ? Clazz[subType] : null;\n            }\n\n            if (throwWhenNotFound && !Clazz) {\n                throw new Error(\n                    !subType\n                        ? componentMainType + '.' + 'type should be specified.'\n                        : 'Component ' + componentMainType + '.' + (subType || '') + ' not exists. Load it first.'\n                );\n            }\n\n            return Clazz;\n        };\n\n        entity.getClassesByMainType = function (componentType) {\n            componentType = parseClassType(componentType);\n\n            var result = [];\n            var obj = storage[componentType.main];\n\n            if (obj && obj[IS_CONTAINER]) {\n                zrUtil.each(obj, function (o, type) {\n                    type !== IS_CONTAINER && result.push(o);\n                });\n            }\n            else {\n                result.push(obj);\n            }\n\n            return result;\n        };\n\n        entity.hasClass = function (componentType) {\n            // Just consider componentType.main.\n            componentType = parseClassType(componentType);\n            return !!storage[componentType.main];\n        };\n\n        /**\n         * @return {Array.<string>} Like ['aa', 'bb'], but can not be ['aa.xx']\n         */\n        entity.getAllClassMainTypes = function () {\n            var types = [];\n            zrUtil.each(storage, function (obj, type) {\n                types.push(type);\n            });\n            return types;\n        };\n\n        /**\n         * If a main type is container and has sub types\n         * @param  {string}  mainType\n         * @return {boolean}\n         */\n        entity.hasSubTypes = function (componentType) {\n            componentType = parseClassType(componentType);\n            var obj = storage[componentType.main];\n            return obj && obj[IS_CONTAINER];\n        };\n\n        entity.parseClassType = parseClassType;\n\n        function makeContainer(componentType) {\n            var container = storage[componentType.main];\n            if (!container || !container[IS_CONTAINER]) {\n                container = storage[componentType.main] = {};\n                container[IS_CONTAINER] = true;\n            }\n            return container;\n        }\n\n        if (options.registerWhenExtend) {\n            var originalExtend = entity.extend;\n            if (originalExtend) {\n                entity.extend = function (proto) {\n                    var ExtendedClass = originalExtend.call(this, proto);\n                    return entity.registerClass(ExtendedClass, proto.type);\n                };\n            }\n        }\n\n        return entity;\n    };\n\n    /**\n     * @param {string|Array.<string>} properties\n     */\n    clazz.setReadOnly = function (obj, properties) {\n        // FIXME It seems broken in IE8 simulation of IE11\n        // if (!zrUtil.isArray(properties)) {\n        //     properties = properties != null ? [properties] : [];\n        // }\n        // zrUtil.each(properties, function (prop) {\n        //     var value = obj[prop];\n\n        //     Object.defineProperty\n        //         && Object.defineProperty(obj, prop, {\n        //             value: value, writable: false\n        //         });\n        //     zrUtil.isArray(obj[prop])\n        //         && Object.freeze\n        //         && Object.freeze(obj[prop]);\n        // });\n    };\n\n    module.exports = clazz;\n\n\n/***/ }),\n\n/***/ \"g07m\":\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * 可绘制的图形基类\n * Base class of all displayable graphic objects\n * @module zrender/graphic/Displayable\n */\n\n\n\n    var zrUtil = __webpack_require__(\"nw1Z\");\n\n    var Style = __webpack_require__(\"JKcJ\");\n\n    var Element = __webpack_require__(\"3z8c\");\n    var RectText = __webpack_require__(\"WkjF\");\n    // var Stateful = require('./mixin/Stateful');\n\n    /**\n     * @alias module:zrender/graphic/Displayable\n     * @extends module:zrender/Element\n     * @extends module:zrender/graphic/mixin/RectText\n     */\n    function Displayable(opts) {\n\n        opts = opts || {};\n\n        Element.call(this, opts);\n\n        // Extend properties\n        for (var name in opts) {\n            if (\n                opts.hasOwnProperty(name) &&\n                name !== 'style'\n            ) {\n                this[name] = opts[name];\n            }\n        }\n\n        /**\n         * @type {module:zrender/graphic/Style}\n         */\n        this.style = new Style(opts.style);\n\n        this._rect = null;\n        // Shapes for cascade clipping.\n        this.__clipPaths = [];\n\n        // FIXME Stateful must be mixined after style is setted\n        // Stateful.call(this, opts);\n    }\n\n    Displayable.prototype = {\n\n        constructor: Displayable,\n\n        type: 'displayable',\n\n        /**\n         * Displayable 是否为脏，Painter 中会根据该标记判断是否需要是否需要重新绘制\n         * Dirty flag. From which painter will determine if this displayable object needs brush\n         * @name module:zrender/graphic/Displayable#__dirty\n         * @type {boolean}\n         */\n        __dirty: true,\n\n        /**\n         * 图形是否可见，为true时不绘制图形，但是仍能触发鼠标事件\n         * If ignore drawing of the displayable object. Mouse event will still be triggered\n         * @name module:/zrender/graphic/Displayable#invisible\n         * @type {boolean}\n         * @default false\n         */\n        invisible: false,\n\n        /**\n         * @name module:/zrender/graphic/Displayable#z\n         * @type {number}\n         * @default 0\n         */\n        z: 0,\n\n        /**\n         * @name module:/zrender/graphic/Displayable#z\n         * @type {number}\n         * @default 0\n         */\n        z2: 0,\n\n        /**\n         * z层level，决定绘画在哪层canvas中\n         * @name module:/zrender/graphic/Displayable#zlevel\n         * @type {number}\n         * @default 0\n         */\n        zlevel: 0,\n\n        /**\n         * 是否可拖拽\n         * @name module:/zrender/graphic/Displayable#draggable\n         * @type {boolean}\n         * @default false\n         */\n        draggable: false,\n\n        /**\n         * 是否正在拖拽\n         * @name module:/zrender/graphic/Displayable#draggable\n         * @type {boolean}\n         * @default false\n         */\n        dragging: false,\n\n        /**\n         * 是否相应鼠标事件\n         * @name module:/zrender/graphic/Displayable#silent\n         * @type {boolean}\n         * @default false\n         */\n        silent: false,\n\n        /**\n         * If enable culling\n         * @type {boolean}\n         * @default false\n         */\n        culling: false,\n\n        /**\n         * Mouse cursor when hovered\n         * @name module:/zrender/graphic/Displayable#cursor\n         * @type {string}\n         */\n        cursor: 'pointer',\n\n        /**\n         * If hover area is bounding rect\n         * @name module:/zrender/graphic/Displayable#rectHover\n         * @type {string}\n         */\n        rectHover: false,\n\n        /**\n         * Render the element progressively when the value >= 0,\n         * usefull for large data.\n         * @type {number}\n         */\n        progressive: -1,\n\n        beforeBrush: function (ctx) {},\n\n        afterBrush: function (ctx) {},\n\n        /**\n         * 图形绘制方法\n         * @param {Canvas2DRenderingContext} ctx\n         */\n        // Interface\n        brush: function (ctx, prevEl) {},\n\n        /**\n         * 获取最小包围盒\n         * @return {module:zrender/core/BoundingRect}\n         */\n        // Interface\n        getBoundingRect: function () {},\n\n        /**\n         * 判断坐标 x, y 是否在图形上\n         * If displayable element contain coord x, y\n         * @param  {number} x\n         * @param  {number} y\n         * @return {boolean}\n         */\n        contain: function (x, y) {\n            return this.rectContain(x, y);\n        },\n\n        /**\n         * @param  {Function} cb\n         * @param  {}   context\n         */\n        traverse: function (cb, context) {\n            cb.call(context, this);\n        },\n\n        /**\n         * 判断坐标 x, y 是否在图形的包围盒上\n         * If bounding rect of element contain coord x, y\n         * @param  {number} x\n         * @param  {number} y\n         * @return {boolean}\n         */\n        rectContain: function (x, y) {\n            var coord = this.transformCoordToLocal(x, y);\n            var rect = this.getBoundingRect();\n            return rect.contain(coord[0], coord[1]);\n        },\n\n        /**\n         * 标记图形元素为脏，并且在下一帧重绘\n         * Mark displayable element dirty and refresh next frame\n         */\n        dirty: function () {\n            this.__dirty = true;\n\n            this._rect = null;\n\n            this.__zr && this.__zr.refresh();\n        },\n\n        /**\n         * 图形是否会触发事件\n         * If displayable object binded any event\n         * @return {boolean}\n         */\n        // TODO, 通过 bind 绑定的事件\n        // isSilent: function () {\n        //     return !(\n        //         this.hoverable || this.draggable\n        //         || this.onmousemove || this.onmouseover || this.onmouseout\n        //         || this.onmousedown || this.onmouseup || this.onclick\n        //         || this.ondragenter || this.ondragover || this.ondragleave\n        //         || this.ondrop\n        //     );\n        // },\n        /**\n         * Alias for animate('style')\n         * @param {boolean} loop\n         */\n        animateStyle: function (loop) {\n            return this.animate('style', loop);\n        },\n\n        attrKV: function (key, value) {\n            if (key !== 'style') {\n                Element.prototype.attrKV.call(this, key, value);\n            }\n            else {\n                this.style.set(value);\n            }\n        },\n\n        /**\n         * @param {Object|string} key\n         * @param {*} value\n         */\n        setStyle: function (key, value) {\n            this.style.set(key, value);\n            this.dirty(false);\n            return this;\n        },\n\n        /**\n         * Use given style object\n         * @param  {Object} obj\n         */\n        useStyle: function (obj) {\n            this.style = new Style(obj);\n            this.dirty(false);\n            return this;\n        }\n    };\n\n    zrUtil.inherits(Displayable, Element);\n\n    zrUtil.mixin(Displayable, RectText);\n    // zrUtil.mixin(Displayable, Stateful);\n\n    module.exports = Displayable;\n\n\n/***/ }),\n\n/***/ \"gE7w\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n/**\n * 圆形\n * @module zrender/shape/Circle\n */\n\n\n\n    module.exports = __webpack_require__(\"CC7E\").extend({\n\n        type: 'circle',\n\n        shape: {\n            cx: 0,\n            cy: 0,\n            r: 0\n        },\n\n\n        buildPath : function (ctx, shape, inBundle) {\n            // Better stroking in ShapeBundle\n            // Always do it may have performence issue ( fill may be 2x more cost)\n            if (inBundle) {\n                ctx.moveTo(shape.cx + shape.r, shape.cy);\n            }\n            // else {\n            //     if (ctx.allocate && !ctx.data.length) {\n            //         ctx.allocate(ctx.CMD_MEM_SIZE.A);\n            //     }\n            // }\n            // Better stroking in ShapeBundle\n            // ctx.moveTo(shape.cx + shape.r, shape.cy);\n            ctx.arc(shape.cx, shape.cy, shape.r, 0, Math.PI * 2, true);\n        }\n    });\n\n\n\n/***/ }),\n\n/***/ \"gUUB\":\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * Catmull-Rom spline 插值折线\n * @module zrender/shape/util/smoothSpline\n * @author pissang (https://www.github.com/pissang)\n *         Kener (@Kener-林峰, kener.linfeng@gmail.com)\n *         errorrik (errorrik@gmail.com)\n */\n\n    var vec2 = __webpack_require__(\"Krco\");\n\n    /**\n     * @inner\n     */\n    function interpolate(p0, p1, p2, p3, t, t2, t3) {\n        var v0 = (p2 - p0) * 0.5;\n        var v1 = (p3 - p1) * 0.5;\n        return (2 * (p1 - p2) + v0 + v1) * t3\n                + (-3 * (p1 - p2) - 2 * v0 - v1) * t2\n                + v0 * t + p1;\n    }\n\n    /**\n     * @alias module:zrender/shape/util/smoothSpline\n     * @param {Array} points 线段顶点数组\n     * @param {boolean} isLoop\n     * @return {Array}\n     */\n    module.exports = function (points, isLoop) {\n        var len = points.length;\n        var ret = [];\n\n        var distance = 0;\n        for (var i = 1; i < len; i++) {\n            distance += vec2.distance(points[i - 1], points[i]);\n        }\n\n        var segs = distance / 2;\n        segs = segs < len ? len : segs;\n        for (var i = 0; i < segs; i++) {\n            var pos = i / (segs - 1) * (isLoop ? len : len - 1);\n            var idx = Math.floor(pos);\n\n            var w = pos - idx;\n\n            var p0;\n            var p1 = points[idx % len];\n            var p2;\n            var p3;\n            if (!isLoop) {\n                p0 = points[idx === 0 ? idx : idx - 1];\n                p2 = points[idx > len - 2 ? len - 1 : idx + 1];\n                p3 = points[idx > len - 3 ? len - 1 : idx + 2];\n            }\n            else {\n                p0 = points[(idx - 1 + len) % len];\n                p2 = points[(idx + 1) % len];\n                p3 = points[(idx + 2) % len];\n            }\n\n            var w2 = w * w;\n            var w3 = w * w2;\n\n            ret.push([\n                interpolate(p0[0], p1[0], p2[0], p3[0], w, w2, w3),\n                interpolate(p0[1], p1[1], p2[1], p3[1], w, w2, w3)\n            ]);\n        }\n        return ret;\n    };\n\n\n\n/***/ }),\n\n/***/ \"geKH\":\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * 贝塞尔平滑曲线\n * @module zrender/shape/util/smoothBezier\n * @author pissang (https://www.github.com/pissang)\n *         Kener (@Kener-林峰, kener.linfeng@gmail.com)\n *         errorrik (errorrik@gmail.com)\n */\n\n\n    var vec2 = __webpack_require__(\"Krco\");\n    var v2Min = vec2.min;\n    var v2Max = vec2.max;\n    var v2Scale = vec2.scale;\n    var v2Distance = vec2.distance;\n    var v2Add = vec2.add;\n\n    /**\n     * 贝塞尔平滑曲线\n     * @alias module:zrender/shape/util/smoothBezier\n     * @param {Array} points 线段顶点数组\n     * @param {number} smooth 平滑等级, 0-1\n     * @param {boolean} isLoop\n     * @param {Array} constraint 将计算出来的控制点约束在一个包围盒内\n     *                           比如 [[0, 0], [100, 100]], 这个包围盒会与\n     *                           整个折线的包围盒做一个并集用来约束控制点。\n     * @param {Array} 计算出来的控制点数组\n     */\n    module.exports = function (points, smooth, isLoop, constraint) {\n        var cps = [];\n\n        var v = [];\n        var v1 = [];\n        var v2 = [];\n        var prevPoint;\n        var nextPoint;\n\n        var min, max;\n        if (constraint) {\n            min = [Infinity, Infinity];\n            max = [-Infinity, -Infinity];\n            for (var i = 0, len = points.length; i < len; i++) {\n                v2Min(min, min, points[i]);\n                v2Max(max, max, points[i]);\n            }\n            // 与指定的包围盒做并集\n            v2Min(min, min, constraint[0]);\n            v2Max(max, max, constraint[1]);\n        }\n\n        for (var i = 0, len = points.length; i < len; i++) {\n            var point = points[i];\n\n            if (isLoop) {\n                prevPoint = points[i ? i - 1 : len - 1];\n                nextPoint = points[(i + 1) % len];\n            }\n            else {\n                if (i === 0 || i === len - 1) {\n                    cps.push(vec2.clone(points[i]));\n                    continue;\n                }\n                else {\n                    prevPoint = points[i - 1];\n                    nextPoint = points[i + 1];\n                }\n            }\n\n            vec2.sub(v, nextPoint, prevPoint);\n\n            // use degree to scale the handle length\n            v2Scale(v, v, smooth);\n\n            var d0 = v2Distance(point, prevPoint);\n            var d1 = v2Distance(point, nextPoint);\n            var sum = d0 + d1;\n            if (sum !== 0) {\n                d0 /= sum;\n                d1 /= sum;\n            }\n\n            v2Scale(v1, v, -d0);\n            v2Scale(v2, v, d1);\n            var cp0 = v2Add([], point, v1);\n            var cp1 = v2Add([], point, v2);\n            if (constraint) {\n                v2Max(cp0, cp0, min);\n                v2Min(cp0, cp0, max);\n                v2Max(cp1, cp1, min);\n                v2Min(cp1, cp1, max);\n            }\n            cps.push(cp0);\n            cps.push(cp1);\n        }\n\n        if (isLoop) {\n            cps.push(cps.shift());\n        }\n\n        return cps;\n    };\n\n\n\n/***/ }),\n\n/***/ \"hXDN\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\n    var graphic = __webpack_require__(\"y2WT\");\n    var zrUtil = __webpack_require__(\"nw1Z\");\n    var PI = Math.PI;\n    /**\n     * @param {module:echarts/ExtensionAPI} api\n     * @param {Object} [opts]\n     * @param {string} [opts.text]\n     * @param {string} [opts.color]\n     * @param {string} [opts.textColor]\n     * @return {module:zrender/Element}\n     */\n    module.exports = function (api, opts) {\n        opts = opts || {};\n        zrUtil.defaults(opts, {\n            text: 'loading',\n            color: '#c23531',\n            textColor: '#000',\n            maskColor: 'rgba(255, 255, 255, 0.8)',\n            zlevel: 0\n        });\n        var mask = new graphic.Rect({\n            style: {\n                fill: opts.maskColor\n            },\n            zlevel: opts.zlevel,\n            z: 10000\n        });\n        var arc = new graphic.Arc({\n            shape: {\n                startAngle: -PI / 2,\n                endAngle: -PI / 2 + 0.1,\n                r: 10\n            },\n            style: {\n                stroke: opts.color,\n                lineCap: 'round',\n                lineWidth: 5\n            },\n            zlevel: opts.zlevel,\n            z: 10001\n        });\n        var labelRect = new graphic.Rect({\n            style: {\n                fill: 'none',\n                text: opts.text,\n                textPosition: 'right',\n                textDistance: 10,\n                textFill: opts.textColor\n            },\n            zlevel: opts.zlevel,\n            z: 10001\n        });\n\n        arc.animateShape(true)\n            .when(1000, {\n                endAngle: PI * 3 / 2\n            })\n            .start('circularInOut');\n        arc.animateShape(true)\n            .when(1000, {\n                startAngle: PI * 3 / 2\n            })\n            .delay(300)\n            .start('circularInOut');\n\n        var group = new graphic.Group();\n        group.add(arc);\n        group.add(labelRect);\n        group.add(mask);\n        // Inject resize\n        group.resize = function () {\n            var cx = api.getWidth() / 2;\n            var cy = api.getHeight() / 2;\n            arc.setShape({\n                cx: cx,\n                cy: cy\n            });\n            var r = arc.shape.r;\n            labelRect.setShape({\n                x: cx - r,\n                y: cy - r,\n                width: r * 2,\n                height: r * 2\n            });\n\n            mask.setShape({\n                x: 0,\n                y: 0,\n                width: api.getWidth(),\n                height: api.getHeight()\n            });\n        };\n        group.resize();\n        return group;\n    };\n\n\n/***/ }),\n\n/***/ \"hpyJ\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// Compatitable with 2.0\n\n\n    var zrUtil = __webpack_require__(\"nw1Z\");\n    var compatStyle = __webpack_require__(\"FjKD\");\n\n    function get(opt, path) {\n        path = path.split(',');\n        var obj = opt;\n        for (var i = 0; i < path.length; i++) {\n            obj = obj && obj[path[i]];\n            if (obj == null) {\n                break;\n            }\n        }\n        return obj;\n    }\n\n    function set(opt, path, val, overwrite) {\n        path = path.split(',');\n        var obj = opt;\n        var key;\n        for (var i = 0; i < path.length - 1; i++) {\n            key = path[i];\n            if (obj[key] == null) {\n                obj[key] = {};\n            }\n            obj = obj[key];\n        }\n        if (overwrite || obj[path[i]] == null) {\n            obj[path[i]] = val;\n        }\n    }\n\n    function compatLayoutProperties(option) {\n        each(LAYOUT_PROPERTIES, function (prop) {\n            if (prop[0] in option && !(prop[1] in option)) {\n                option[prop[1]] = option[prop[0]];\n            }\n        });\n    }\n\n    var LAYOUT_PROPERTIES = [\n        ['x', 'left'], ['y', 'top'], ['x2', 'right'], ['y2', 'bottom']\n    ];\n\n    var COMPATITABLE_COMPONENTS = [\n        'grid', 'geo', 'parallel', 'legend', 'toolbox', 'title', 'visualMap', 'dataZoom', 'timeline'\n    ];\n\n    var COMPATITABLE_SERIES = [\n        'bar', 'boxplot', 'candlestick', 'chord', 'effectScatter',\n        'funnel', 'gauge', 'lines', 'graph', 'heatmap', 'line', 'map', 'parallel',\n        'pie', 'radar', 'sankey', 'scatter', 'treemap'\n    ];\n\n    var each = zrUtil.each;\n\n    module.exports = function (option) {\n        each(option.series, function (seriesOpt) {\n            if (!zrUtil.isObject(seriesOpt)) {\n                return;\n            }\n\n            var seriesType = seriesOpt.type;\n\n            compatStyle(seriesOpt);\n\n            if (seriesType === 'pie' || seriesType === 'gauge') {\n                if (seriesOpt.clockWise != null) {\n                    seriesOpt.clockwise = seriesOpt.clockWise;\n                }\n            }\n            if (seriesType === 'gauge') {\n                var pointerColor = get(seriesOpt, 'pointer.color');\n                pointerColor != null\n                    && set(seriesOpt, 'itemStyle.normal.color', pointerColor);\n            }\n\n            for (var i = 0; i < COMPATITABLE_SERIES.length; i++) {\n                if (COMPATITABLE_SERIES[i] === seriesOpt.type) {\n                    compatLayoutProperties(seriesOpt);\n                    break;\n                }\n            }\n        });\n\n        // dataRange has changed to visualMap\n        if (option.dataRange) {\n            option.visualMap = option.dataRange;\n        }\n\n        each(COMPATITABLE_COMPONENTS, function (componentName) {\n            var options = option[componentName];\n            if (options) {\n                if (!zrUtil.isArray(options)) {\n                    options = [options];\n                }\n                each(options, function (option) {\n                    compatLayoutProperties(option);\n                });\n            }\n        });\n    };\n\n\n/***/ }),\n\n/***/ \"i4I6\":\n/***/ (function(module, exports) {\n\n// Simple LRU cache use doubly linked list\n// @module zrender/core/LRU\n\n\n    /**\n     * Simple double linked list. Compared with array, it has O(1) remove operation.\n     * @constructor\n     */\n    var LinkedList = function () {\n\n        /**\n         * @type {module:zrender/core/LRU~Entry}\n         */\n        this.head = null;\n\n        /**\n         * @type {module:zrender/core/LRU~Entry}\n         */\n        this.tail = null;\n\n        this._len = 0;\n    };\n\n    var linkedListProto = LinkedList.prototype;\n    /**\n     * Insert a new value at the tail\n     * @param  {} val\n     * @return {module:zrender/core/LRU~Entry}\n     */\n    linkedListProto.insert = function (val) {\n        var entry = new Entry(val);\n        this.insertEntry(entry);\n        return entry;\n    };\n\n    /**\n     * Insert an entry at the tail\n     * @param  {module:zrender/core/LRU~Entry} entry\n     */\n    linkedListProto.insertEntry = function (entry) {\n        if (!this.head) {\n            this.head = this.tail = entry;\n        }\n        else {\n            this.tail.next = entry;\n            entry.prev = this.tail;\n            entry.next = null;\n            this.tail = entry;\n        }\n        this._len++;\n    };\n\n    /**\n     * Remove entry.\n     * @param  {module:zrender/core/LRU~Entry} entry\n     */\n    linkedListProto.remove = function (entry) {\n        var prev = entry.prev;\n        var next = entry.next;\n        if (prev) {\n            prev.next = next;\n        }\n        else {\n            // Is head\n            this.head = next;\n        }\n        if (next) {\n            next.prev = prev;\n        }\n        else {\n            // Is tail\n            this.tail = prev;\n        }\n        entry.next = entry.prev = null;\n        this._len--;\n    };\n\n    /**\n     * @return {number}\n     */\n    linkedListProto.len = function () {\n        return this._len;\n    };\n\n    /**\n     * Clear list\n     */\n    linkedListProto.clear = function () {\n        this.head = this.tail = null;\n        this._len = 0;\n    };\n\n    /**\n     * @constructor\n     * @param {} val\n     */\n    var Entry = function (val) {\n        /**\n         * @type {}\n         */\n        this.value = val;\n\n        /**\n         * @type {module:zrender/core/LRU~Entry}\n         */\n        this.next;\n\n        /**\n         * @type {module:zrender/core/LRU~Entry}\n         */\n        this.prev;\n    };\n\n    /**\n     * LRU Cache\n     * @constructor\n     * @alias module:zrender/core/LRU\n     */\n    var LRU = function (maxSize) {\n\n        this._list = new LinkedList();\n\n        this._map = {};\n\n        this._maxSize = maxSize || 10;\n\n        this._lastRemovedEntry = null;\n    };\n\n    var LRUProto = LRU.prototype;\n\n    /**\n     * @param  {string} key\n     * @param  {} value\n     * @return {} Removed value\n     */\n    LRUProto.put = function (key, value) {\n        var list = this._list;\n        var map = this._map;\n        var removed = null;\n        if (map[key] == null) {\n            var len = list.len();\n            // Reuse last removed entry\n            var entry = this._lastRemovedEntry;\n\n            if (len >= this._maxSize && len > 0) {\n                // Remove the least recently used\n                var leastUsedEntry = list.head;\n                list.remove(leastUsedEntry);\n                delete map[leastUsedEntry.key];\n\n                removed = leastUsedEntry.value;\n                this._lastRemovedEntry = leastUsedEntry;\n            }\n\n            if (entry) {\n                entry.value = value;\n            }\n            else {\n                entry = new Entry(value);\n            }\n            entry.key = key;\n            list.insertEntry(entry);\n            map[key] = entry;\n        }\n\n        return removed;\n    };\n\n    /**\n     * @param  {string} key\n     * @return {}\n     */\n    LRUProto.get = function (key) {\n        var entry = this._map[key];\n        var list = this._list;\n        if (entry != null) {\n            // Put the latest used entry in the tail\n            if (entry !== list.tail) {\n                list.remove(entry);\n                list.insertEntry(entry);\n            }\n\n            return entry.value;\n        }\n    };\n\n    /**\n     * Clear the cache\n     */\n    LRUProto.clear = function () {\n        this._list.clear();\n        this._map = {};\n    };\n\n    module.exports = LRU;\n\n\n/***/ }),\n\n/***/ \"iiGm\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\n    __webpack_require__(\"Cwwa\").extendComponentModel({\n\n        type: 'tooltip',\n\n        dependencies: ['axisPointer'],\n\n        defaultOption: {\n            zlevel: 0,\n\n            z: 8,\n\n            show: true,\n\n            // tooltip主体内容\n            showContent: true,\n\n            // 'trigger' only works on coordinate system.\n            // 'item' | 'axis' | 'none'\n            trigger: 'item',\n\n            // 'click' | 'mousemove' | 'none'\n            triggerOn: 'mousemove|click',\n\n            alwaysShowContent: false,\n\n            displayMode: 'single', // 'single' | 'multipleByCoordSys'\n\n            // 位置 {Array} | {Function}\n            // position: null\n            // Consider triggered from axisPointer handle, verticalAlign should be 'middle'\n            // align: null,\n            // verticalAlign: null,\n\n            // 是否约束 content 在 viewRect 中。默认 false 是为了兼容以前版本。\n            confine: false,\n\n            // 内容格式器：{string}（Template） ¦ {Function}\n            // formatter: null\n\n            showDelay: 0,\n\n            // 隐藏延迟，单位ms\n            hideDelay: 100,\n\n            // 动画变换时间，单位s\n            transitionDuration: 0.4,\n\n            enterable: false,\n\n            // 提示背景颜色，默认为透明度为0.7的黑色\n            backgroundColor: 'rgba(50,50,50,0.7)',\n\n            // 提示边框颜色\n            borderColor: '#333',\n\n            // 提示边框圆角，单位px，默认为4\n            borderRadius: 4,\n\n            // 提示边框线宽，单位px，默认为0（无边框）\n            borderWidth: 0,\n\n            // 提示内边距，单位px，默认各方向内边距为5，\n            // 接受数组分别设定上右下左边距，同css\n            padding: 5,\n\n            // Extra css text\n            extraCssText: '',\n\n            // 坐标轴指示器，坐标轴触发有效\n            axisPointer: {\n                // 默认为直线\n                // 可选为：'line' | 'shadow' | 'cross'\n                type: 'line',\n\n                // type 为 line 的时候有效，指定 tooltip line 所在的轴，可选\n                // 可选 'x' | 'y' | 'angle' | 'radius' | 'auto'\n                // 默认 'auto'，会选择类型为 cateogry 的轴，对于双数值轴，笛卡尔坐标系会默认选择 x 轴\n                // 极坐标系会默认选择 angle 轴\n                axis: 'auto',\n\n                animation: 'auto',\n                animationDurationUpdate: 200,\n                animationEasingUpdate: 'exponentialOut',\n\n                crossStyle: {\n                    color: '#999',\n                    width: 1,\n                    type: 'dashed',\n\n                    // TODO formatter\n                    textStyle: {}\n                }\n\n                // lineStyle and shadowStyle should not be specified here,\n                // otherwise it will always override those styles on option.axisPointer.\n            },\n            textStyle: {\n                color: '#fff',\n                fontSize: 14\n            }\n        }\n    });\n\n\n/***/ }),\n\n/***/ \"ikqo\":\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * @file Axis operator\n */\n\n\n    var zrUtil = __webpack_require__(\"nw1Z\");\n    var numberUtil = __webpack_require__(\"0+Kq\");\n    var helper = __webpack_require__(\"yToh\");\n    var each = zrUtil.each;\n    var asc = numberUtil.asc;\n\n    /**\n     * Operate single axis.\n     * One axis can only operated by one axis operator.\n     * Different dataZoomModels may be defined to operate the same axis.\n     * (i.e. 'inside' data zoom and 'slider' data zoom components)\n     * So dataZoomModels share one axisProxy in that case.\n     *\n     * @class\n     */\n    var AxisProxy = function (dimName, axisIndex, dataZoomModel, ecModel) {\n\n        /**\n         * @private\n         * @type {string}\n         */\n        this._dimName = dimName;\n\n        /**\n         * @private\n         */\n        this._axisIndex = axisIndex;\n\n        /**\n         * @private\n         * @type {Array.<number>}\n         */\n        this._valueWindow;\n\n        /**\n         * @private\n         * @type {Array.<number>}\n         */\n        this._percentWindow;\n\n        /**\n         * @private\n         * @type {Array.<number>}\n         */\n        this._dataExtent;\n\n        /**\n         * {minSpan, maxSpan, minValueSpan, maxValueSpan}\n         * @private\n         * @type {Object}\n         */\n        this._minMaxSpan;\n\n        /**\n         * @readOnly\n         * @type {module: echarts/model/Global}\n         */\n        this.ecModel = ecModel;\n\n        /**\n         * @private\n         * @type {module: echarts/component/dataZoom/DataZoomModel}\n         */\n        this._dataZoomModel = dataZoomModel;\n    };\n\n    AxisProxy.prototype = {\n\n        constructor: AxisProxy,\n\n        /**\n         * Whether the axisProxy is hosted by dataZoomModel.\n         *\n         * @public\n         * @param {module: echarts/component/dataZoom/DataZoomModel} dataZoomModel\n         * @return {boolean}\n         */\n        hostedBy: function (dataZoomModel) {\n            return this._dataZoomModel === dataZoomModel;\n        },\n\n        /**\n         * @return {Array.<number>} Value can only be NaN or finite value.\n         */\n        getDataValueWindow: function () {\n            return this._valueWindow.slice();\n        },\n\n        /**\n         * @return {Array.<number>}\n         */\n        getDataPercentWindow: function () {\n            return this._percentWindow.slice();\n        },\n\n        /**\n         * @public\n         * @param {number} axisIndex\n         * @return {Array} seriesModels\n         */\n        getTargetSeriesModels: function () {\n            var seriesModels = [];\n            var ecModel = this.ecModel;\n\n            ecModel.eachSeries(function (seriesModel) {\n                if (helper.isCoordSupported(seriesModel.get('coordinateSystem'))) {\n                    var dimName = this._dimName;\n                    var axisModel = ecModel.queryComponents({\n                        mainType: dimName + 'Axis',\n                        index: seriesModel.get(dimName + 'AxisIndex'),\n                        id: seriesModel.get(dimName + 'AxisId')\n                    })[0];\n                    if (this._axisIndex === (axisModel && axisModel.componentIndex)) {\n                        seriesModels.push(seriesModel);\n                    }\n                }\n            }, this);\n\n            return seriesModels;\n        },\n\n        getAxisModel: function () {\n            return this.ecModel.getComponent(this._dimName + 'Axis', this._axisIndex);\n        },\n\n        getOtherAxisModel: function () {\n            var axisDim = this._dimName;\n            var ecModel = this.ecModel;\n            var axisModel = this.getAxisModel();\n            var isCartesian = axisDim === 'x' || axisDim === 'y';\n            var otherAxisDim;\n            var coordSysIndexName;\n            if (isCartesian) {\n                coordSysIndexName = 'gridIndex';\n                otherAxisDim = axisDim === 'x' ? 'y' : 'x';\n            }\n            else {\n                coordSysIndexName = 'polarIndex';\n                otherAxisDim = axisDim === 'angle' ? 'radius' : 'angle';\n            }\n            var foundOtherAxisModel;\n            ecModel.eachComponent(otherAxisDim + 'Axis', function (otherAxisModel) {\n                if ((otherAxisModel.get(coordSysIndexName) || 0)\n                    === (axisModel.get(coordSysIndexName) || 0)\n                ) {\n                    foundOtherAxisModel = otherAxisModel;\n                }\n            });\n            return foundOtherAxisModel;\n        },\n\n        getMinMaxSpan: function () {\n            return zrUtil.clone(this._minMaxSpan);\n        },\n\n        /**\n         * Only calculate by given range and this._dataExtent, do not change anything.\n         *\n         * @param {Object} opt\n         * @param {number} [opt.start]\n         * @param {number} [opt.end]\n         * @param {number} [opt.startValue]\n         * @param {number} [opt.endValue]\n         */\n        calculateDataWindow: function (opt) {\n            var dataExtent = this._dataExtent;\n            var axisModel = this.getAxisModel();\n            var scale = axisModel.axis.scale;\n            var rangePropMode = this._dataZoomModel.getRangePropMode();\n            var percentExtent = [0, 100];\n            var percentWindow = [\n                opt.start,\n                opt.end\n            ];\n            var valueWindow = [];\n\n            each(['startValue', 'endValue'], function (prop) {\n                valueWindow.push(opt[prop] != null ? scale.parse(opt[prop]) : null);\n            });\n\n            // Normalize bound.\n            each([0, 1], function (idx) {\n                var boundValue = valueWindow[idx];\n                var boundPercent = percentWindow[idx];\n\n                // Notice: dataZoom is based either on `percentProp` ('start', 'end') or\n                // on `valueProp` ('startValue', 'endValue'). The former one is suitable\n                // for cases that a dataZoom component controls multiple axes with different\n                // unit or extent, and the latter one is suitable for accurate zoom by pixel\n                // (e.g., in dataZoomSelect). `valueProp` can be calculated from `percentProp`,\n                // but it is awkward that `percentProp` can not be obtained from `valueProp`\n                // accurately (because all of values that are overflow the `dataExtent` will\n                // be calculated to percent '100%'). So we have to use\n                // `dataZoom.getRangePropMode()` to mark which prop is used.\n                // `rangePropMode` is updated only when setOption or dispatchAction, otherwise\n                // it remains its original value.\n\n                if (rangePropMode[idx] === 'percent') {\n                    if (boundPercent == null) {\n                        boundPercent = percentExtent[idx];\n                    }\n                    // Use scale.parse to math round for category or time axis.\n                    boundValue = scale.parse(numberUtil.linearMap(\n                        boundPercent, percentExtent, dataExtent, true\n                    ));\n                }\n                else {\n                    // Calculating `percent` from `value` may be not accurate, because\n                    // This calculation can not be inversed, because all of values that\n                    // are overflow the `dataExtent` will be calculated to percent '100%'\n                    boundPercent = numberUtil.linearMap(\n                        boundValue, dataExtent, percentExtent, true\n                    );\n                }\n\n                // valueWindow[idx] = round(boundValue);\n                // percentWindow[idx] = round(boundPercent);\n                valueWindow[idx] = boundValue;\n                percentWindow[idx] = boundPercent;\n            });\n\n            return {\n                valueWindow: asc(valueWindow),\n                percentWindow: asc(percentWindow)\n            };\n        },\n\n        /**\n         * Notice: reset should not be called before series.restoreData() called,\n         * so it is recommanded to be called in \"process stage\" but not \"model init\n         * stage\".\n         *\n         * @param {module: echarts/component/dataZoom/DataZoomModel} dataZoomModel\n         */\n        reset: function (dataZoomModel) {\n            if (dataZoomModel !== this._dataZoomModel) {\n                return;\n            }\n\n            // Culculate data window and data extent, and record them.\n            this._dataExtent = calculateDataExtent(\n                this, this._dimName, this.getTargetSeriesModels()\n            );\n\n            var dataWindow = this.calculateDataWindow(dataZoomModel.option);\n\n            this._valueWindow = dataWindow.valueWindow;\n            this._percentWindow = dataWindow.percentWindow;\n\n            setMinMaxSpan(this);\n\n            // Update axis setting then.\n            setAxisModel(this);\n        },\n\n        /**\n         * @param {module: echarts/component/dataZoom/DataZoomModel} dataZoomModel\n         */\n        restore: function (dataZoomModel) {\n            if (dataZoomModel !== this._dataZoomModel) {\n                return;\n            }\n\n            this._valueWindow = this._percentWindow = null;\n            setAxisModel(this, true);\n        },\n\n        /**\n         * @param {module: echarts/component/dataZoom/DataZoomModel} dataZoomModel\n         */\n        filterData: function (dataZoomModel) {\n            if (dataZoomModel !== this._dataZoomModel) {\n                return;\n            }\n\n            var axisDim = this._dimName;\n            var seriesModels = this.getTargetSeriesModels();\n            var filterMode = dataZoomModel.get('filterMode');\n            var valueWindow = this._valueWindow;\n\n            if (filterMode === 'none') {\n                return;\n            }\n\n            // FIXME\n            // Toolbox may has dataZoom injected. And if there are stacked bar chart\n            // with NaN data, NaN will be filtered and stack will be wrong.\n            // So we need to force the mode to be set empty.\n            // In fect, it is not a big deal that do not support filterMode-'filter'\n            // when using toolbox#dataZoom, utill tooltip#dataZoom support \"single axis\n            // selection\" some day, which might need \"adapt to data extent on the\n            // otherAxis\", which is disabled by filterMode-'empty'.\n            var otherAxisModel = this.getOtherAxisModel();\n            if (dataZoomModel.get('$fromToolbox')\n                && otherAxisModel\n                && otherAxisModel.get('type') === 'category'\n            ) {\n                filterMode = 'empty';\n            }\n\n            // Process series data\n            each(seriesModels, function (seriesModel) {\n                var seriesData = seriesModel.getData();\n                var dataDims = seriesModel.coordDimToDataDim(axisDim);\n\n                if (filterMode === 'weakFilter') {\n                    seriesData && seriesData.filterSelf(function (dataIndex) {\n                        var leftOut;\n                        var rightOut;\n                        var hasValue;\n                        for (var i = 0; i < dataDims.length; i++) {\n                            var value = seriesData.get(dataDims[i], dataIndex);\n                            var thisHasValue = !isNaN(value);\n                            var thisLeftOut = value < valueWindow[0];\n                            var thisRightOut = value > valueWindow[1];\n                            if (thisHasValue && !thisLeftOut && !thisRightOut) {\n                                return true;\n                            }\n                            thisHasValue && (hasValue = true);\n                            thisLeftOut && (leftOut = true);\n                            thisRightOut && (rightOut = true);\n                        }\n                        // If both left out and right out, do not filter.\n                        return hasValue && leftOut && rightOut;\n                    });\n                }\n                else {\n                    seriesData && each(dataDims, function (dim) {\n                        if (filterMode === 'empty') {\n                            seriesModel.setData(\n                                seriesData.map(dim, function (value) {\n                                    return !isInWindow(value) ? NaN : value;\n                                })\n                            );\n                        }\n                        else {\n                            seriesData.filterSelf(dim, isInWindow);\n                        }\n                    });\n                }\n            });\n\n            function isInWindow(value) {\n                return value >= valueWindow[0] && value <= valueWindow[1];\n            }\n        }\n    };\n\n    function calculateDataExtent(axisProxy, axisDim, seriesModels) {\n        var dataExtent = [Infinity, -Infinity];\n\n        each(seriesModels, function (seriesModel) {\n            var seriesData = seriesModel.getData();\n            if (seriesData) {\n                each(seriesModel.coordDimToDataDim(axisDim), function (dim) {\n                    var seriesExtent = seriesData.getDataExtent(dim);\n                    seriesExtent[0] < dataExtent[0] && (dataExtent[0] = seriesExtent[0]);\n                    seriesExtent[1] > dataExtent[1] && (dataExtent[1] = seriesExtent[1]);\n                });\n            }\n        });\n\n        if (dataExtent[1] < dataExtent[0]) {\n            dataExtent = [NaN, NaN];\n        }\n\n        // It is important to get \"consistent\" extent when more then one axes is\n        // controlled by a `dataZoom`, otherwise those axes will not be synchronized\n        // when zooming. But it is difficult to know what is \"consistent\", considering\n        // axes have different type or even different meanings (For example, two\n        // time axes are used to compare data of the same date in different years).\n        // So basically dataZoom just obtains extent by series.data (in category axis\n        // extent can be obtained from axis.data).\n        // Nevertheless, user can set min/max/scale on axes to make extent of axes\n        // consistent.\n        fixExtentByAxis(axisProxy, dataExtent);\n\n        return dataExtent;\n    }\n\n    function fixExtentByAxis(axisProxy, dataExtent) {\n        var axisModel = axisProxy.getAxisModel();\n        var min = axisModel.getMin(true);\n\n        // For category axis, if min/max/scale are not set, extent is determined\n        // by axis.data by default.\n        var isCategoryAxis = axisModel.get('type') === 'category';\n        var axisDataLen = isCategoryAxis && (axisModel.get('data') || []).length;\n\n        if (min != null && min !== 'dataMin') {\n            dataExtent[0] = min;\n        }\n        else if (isCategoryAxis) {\n            dataExtent[0] = axisDataLen > 0 ? 0 : NaN;\n        }\n\n        var max = axisModel.getMax(true);\n        if (max != null && max !== 'dataMax') {\n            dataExtent[1] = max;\n        }\n        else if (isCategoryAxis) {\n            dataExtent[1] = axisDataLen > 0 ? axisDataLen - 1 : NaN;\n        }\n\n        if (!axisModel.get('scale', true)) {\n            dataExtent[0] > 0 && (dataExtent[0] = 0);\n            dataExtent[1] < 0 && (dataExtent[1] = 0);\n        }\n\n        // For value axis, if min/max/scale are not set, we just use the extent obtained\n        // by series data, which may be a little different from the extent calculated by\n        // `axisHelper.getScaleExtent`. But the different just affects the experience a\n        // little when zooming. So it will not be fixed until some users require it strongly.\n\n        return dataExtent;\n    }\n\n    function setAxisModel(axisProxy, isRestore) {\n        var axisModel = axisProxy.getAxisModel();\n\n        var percentWindow = axisProxy._percentWindow;\n        var valueWindow = axisProxy._valueWindow;\n\n        if (!percentWindow) {\n            return;\n        }\n\n        // [0, 500]: arbitrary value, guess axis extent.\n        var precision = numberUtil.getPixelPrecision(valueWindow, [0, 500]);\n        // isRestore or isFull\n        var useOrigin = isRestore || (percentWindow[0] === 0 && percentWindow[1] === 100);\n\n        axisModel.setRange(\n            useOrigin ? null : +valueWindow[0].toFixed(precision),\n            useOrigin ? null : +valueWindow[1].toFixed(precision)\n        );\n    }\n\n    function setMinMaxSpan(axisProxy) {\n        var minMaxSpan = axisProxy._minMaxSpan = {};\n        var dataZoomModel = axisProxy._dataZoomModel;\n\n        each(['min', 'max'], function (minMax) {\n            minMaxSpan[minMax + 'Span'] = dataZoomModel.get(minMax + 'Span');\n\n            // minValueSpan and maxValueSpan has higher priority than minSpan and maxSpan\n            var valueSpan = dataZoomModel.get(minMax + 'ValueSpan');\n            if (valueSpan != null) {\n                minMaxSpan[minMax + 'ValueSpan'] = valueSpan;\n\n                valueSpan = axisProxy.getAxisModel().axis.scale.parse(valueSpan);\n                if (valueSpan != null) {\n                    minMaxSpan[minMax + 'Span'] = numberUtil.linearMap(\n                        valueSpan, axisProxy._dataExtent, [0, 100], true\n                    );\n                }\n            }\n        });\n    }\n\n    module.exports = AxisProxy;\n\n\n\n/***/ }),\n\n/***/ \"jBAq\":\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * @module zrender/Layer\n * @author pissang(https://www.github.com/pissang)\n */\n\n\n    var util = __webpack_require__(\"nw1Z\");\n    var config = __webpack_require__(\"xFPV\");\n    var Style = __webpack_require__(\"JKcJ\");\n    var Pattern = __webpack_require__(\"D8ol\");\n\n    function returnFalse() {\n        return false;\n    }\n\n    /**\n     * 创建dom\n     *\n     * @inner\n     * @param {string} id dom id 待用\n     * @param {string} type dom type，such as canvas, div etc.\n     * @param {Painter} painter painter instance\n     * @param {number} number\n     */\n    function createDom(id, type, painter, dpr) {\n        var newDom = document.createElement(type);\n        var width = painter.getWidth();\n        var height = painter.getHeight();\n\n        var newDomStyle = newDom.style;\n        // 没append呢，请原谅我这样写，清晰~\n        newDomStyle.position = 'absolute';\n        newDomStyle.left = 0;\n        newDomStyle.top = 0;\n        newDomStyle.width = width + 'px';\n        newDomStyle.height = height + 'px';\n        newDom.width = width * dpr;\n        newDom.height = height * dpr;\n\n        // id不作为索引用，避免可能造成的重名，定义为私有属性\n        newDom.setAttribute('data-zr-dom-id', id);\n        return newDom;\n    }\n\n    /**\n     * @alias module:zrender/Layer\n     * @constructor\n     * @extends module:zrender/mixin/Transformable\n     * @param {string} id\n     * @param {module:zrender/Painter} painter\n     * @param {number} [dpr]\n     */\n    var Layer = function(id, painter, dpr) {\n        var dom;\n        dpr = dpr || config.devicePixelRatio;\n        if (typeof id === 'string') {\n            dom = createDom(id, 'canvas', painter, dpr);\n        }\n        // Not using isDom because in node it will return false\n        else if (util.isObject(id)) {\n            dom = id;\n            id = dom.id;\n        }\n        this.id = id;\n        this.dom = dom;\n\n        var domStyle = dom.style;\n        if (domStyle) { // Not in node\n            dom.onselectstart = returnFalse; // 避免页面选中的尴尬\n            domStyle['-webkit-user-select'] = 'none';\n            domStyle['user-select'] = 'none';\n            domStyle['-webkit-touch-callout'] = 'none';\n            domStyle['-webkit-tap-highlight-color'] = 'rgba(0,0,0,0)';\n            domStyle['padding'] = 0;\n            domStyle['margin'] = 0;\n            domStyle['border-width'] = 0;\n        }\n\n        this.domBack = null;\n        this.ctxBack = null;\n\n        this.painter = painter;\n\n        this.config = null;\n\n        // Configs\n        /**\n         * 每次清空画布的颜色\n         * @type {string}\n         * @default 0\n         */\n        this.clearColor = 0;\n        /**\n         * 是否开启动态模糊\n         * @type {boolean}\n         * @default false\n         */\n        this.motionBlur = false;\n        /**\n         * 在开启动态模糊的时候使用，与上一帧混合的alpha值，值越大尾迹越明显\n         * @type {number}\n         * @default 0.7\n         */\n        this.lastFrameAlpha = 0.7;\n\n        /**\n         * Layer dpr\n         * @type {number}\n         */\n        this.dpr = dpr;\n    };\n\n    Layer.prototype = {\n\n        constructor: Layer,\n\n        elCount: 0,\n\n        __dirty: true,\n\n        initContext: function () {\n            this.ctx = this.dom.getContext('2d');\n\n            this.ctx.dpr = this.dpr;\n        },\n\n        createBackBuffer: function () {\n            var dpr = this.dpr;\n\n            this.domBack = createDom('back-' + this.id, 'canvas', this.painter, dpr);\n            this.ctxBack = this.domBack.getContext('2d');\n\n            if (dpr != 1) {\n                this.ctxBack.scale(dpr, dpr);\n            }\n        },\n\n        /**\n         * @param  {number} width\n         * @param  {number} height\n         */\n        resize: function (width, height) {\n            var dpr = this.dpr;\n\n            var dom = this.dom;\n            var domStyle = dom.style;\n            var domBack = this.domBack;\n\n            domStyle.width = width + 'px';\n            domStyle.height = height + 'px';\n\n            dom.width = width * dpr;\n            dom.height = height * dpr;\n\n            if (domBack) {\n                domBack.width = width * dpr;\n                domBack.height = height * dpr;\n\n                if (dpr != 1) {\n                    this.ctxBack.scale(dpr, dpr);\n                }\n            }\n        },\n\n        /**\n         * 清空该层画布\n         * @param {boolean} clearAll Clear all with out motion blur\n         */\n        clear: function (clearAll) {\n            var dom = this.dom;\n            var ctx = this.ctx;\n            var width = dom.width;\n            var height = dom.height;\n\n            var clearColor = this.clearColor;\n            var haveMotionBLur = this.motionBlur && !clearAll;\n            var lastFrameAlpha = this.lastFrameAlpha;\n\n            var dpr = this.dpr;\n\n            if (haveMotionBLur) {\n                if (!this.domBack) {\n                    this.createBackBuffer();\n                }\n\n                this.ctxBack.globalCompositeOperation = 'copy';\n                this.ctxBack.drawImage(\n                    dom, 0, 0,\n                    width / dpr,\n                    height / dpr\n                );\n            }\n\n            ctx.clearRect(0, 0, width, height);\n            if (clearColor) {\n                var clearColorGradientOrPattern;\n                // Gradient\n                if (clearColor.colorStops) {\n                    // Cache canvas gradient\n                    clearColorGradientOrPattern = clearColor.__canvasGradient || Style.getGradient(ctx, clearColor, {\n                        x: 0,\n                        y: 0,\n                        width: width,\n                        height: height\n                    });\n\n                    clearColor.__canvasGradient = clearColorGradientOrPattern;\n                }\n                // Pattern\n                else if (clearColor.image) {\n                    clearColorGradientOrPattern = Pattern.prototype.getCanvasPattern.call(clearColor, ctx);\n                }\n                ctx.save();\n                ctx.fillStyle = clearColorGradientOrPattern || clearColor;\n                ctx.fillRect(0, 0, width, height);\n                ctx.restore();\n            }\n\n            if (haveMotionBLur) {\n                var domBack = this.domBack;\n                ctx.save();\n                ctx.globalAlpha = lastFrameAlpha;\n                ctx.drawImage(domBack, 0, 0, width, height);\n                ctx.restore();\n            }\n        }\n    };\n\n    module.exports = Layer;\n\n\n/***/ }),\n\n/***/ \"jTvm\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n\n    var zrUtil = __webpack_require__(\"nw1Z\");\n\n    var echartsAPIList = [\n        'getDom', 'getZr', 'getWidth', 'getHeight', 'getDevicePixelRatio', 'dispatchAction', 'isDisposed',\n        'on', 'off', 'getDataURL', 'getConnectedDataURL', 'getModel', 'getOption',\n        'getViewOfComponentModel', 'getViewOfSeriesModel'\n    ];\n    // And `getCoordinateSystems` and `getComponentByElement` will be injected in echarts.js\n\n    function ExtensionAPI(chartInstance) {\n        zrUtil.each(echartsAPIList, function (name) {\n            this[name] = zrUtil.bind(chartInstance[name], chartInstance);\n        }, this);\n    }\n\n    module.exports = ExtensionAPI;\n\n\n/***/ }),\n\n/***/ \"kQ9+\":\n/***/ (function(module, exports) {\n\n/**\n * 缓动代码来自 https://github.com/sole/tween.js/blob/master/src/Tween.js\n * @see http://sole.github.io/tween.js/examples/03_graphs.html\n * @exports zrender/animation/easing\n */\n\n    var easing = {\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        linear: function (k) {\n            return k;\n        },\n\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        quadraticIn: function (k) {\n            return k * k;\n        },\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        quadraticOut: function (k) {\n            return k * (2 - k);\n        },\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        quadraticInOut: function (k) {\n            if ((k *= 2) < 1) {\n                return 0.5 * k * k;\n            }\n            return -0.5 * (--k * (k - 2) - 1);\n        },\n\n        // 三次方的缓动（t^3）\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        cubicIn: function (k) {\n            return k * k * k;\n        },\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        cubicOut: function (k) {\n            return --k * k * k + 1;\n        },\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        cubicInOut: function (k) {\n            if ((k *= 2) < 1) {\n                return 0.5 * k * k * k;\n            }\n            return 0.5 * ((k -= 2) * k * k + 2);\n        },\n\n        // 四次方的缓动（t^4）\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        quarticIn: function (k) {\n            return k * k * k * k;\n        },\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        quarticOut: function (k) {\n            return 1 - (--k * k * k * k);\n        },\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        quarticInOut: function (k) {\n            if ((k *= 2) < 1) {\n                return 0.5 * k * k * k * k;\n            }\n            return -0.5 * ((k -= 2) * k * k * k - 2);\n        },\n\n        // 五次方的缓动（t^5）\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        quinticIn: function (k) {\n            return k * k * k * k * k;\n        },\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        quinticOut: function (k) {\n            return --k * k * k * k * k + 1;\n        },\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        quinticInOut: function (k) {\n            if ((k *= 2) < 1) {\n                return 0.5 * k * k * k * k * k;\n            }\n            return 0.5 * ((k -= 2) * k * k * k * k + 2);\n        },\n\n        // 正弦曲线的缓动（sin(t)）\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        sinusoidalIn: function (k) {\n            return 1 - Math.cos(k * Math.PI / 2);\n        },\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        sinusoidalOut: function (k) {\n            return Math.sin(k * Math.PI / 2);\n        },\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        sinusoidalInOut: function (k) {\n            return 0.5 * (1 - Math.cos(Math.PI * k));\n        },\n\n        // 指数曲线的缓动（2^t）\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        exponentialIn: function (k) {\n            return k === 0 ? 0 : Math.pow(1024, k - 1);\n        },\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        exponentialOut: function (k) {\n            return k === 1 ? 1 : 1 - Math.pow(2, -10 * k);\n        },\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        exponentialInOut: function (k) {\n            if (k === 0) {\n                return 0;\n            }\n            if (k === 1) {\n                return 1;\n            }\n            if ((k *= 2) < 1) {\n                return 0.5 * Math.pow(1024, k - 1);\n            }\n            return 0.5 * (-Math.pow(2, -10 * (k - 1)) + 2);\n        },\n\n        // 圆形曲线的缓动（sqrt(1-t^2)）\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        circularIn: function (k) {\n            return 1 - Math.sqrt(1 - k * k);\n        },\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        circularOut: function (k) {\n            return Math.sqrt(1 - (--k * k));\n        },\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        circularInOut: function (k) {\n            if ((k *= 2) < 1) {\n                return -0.5 * (Math.sqrt(1 - k * k) - 1);\n            }\n            return 0.5 * (Math.sqrt(1 - (k -= 2) * k) + 1);\n        },\n\n        // 创建类似于弹簧在停止前来回振荡的动画\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        elasticIn: function (k) {\n            var s;\n            var a = 0.1;\n            var p = 0.4;\n            if (k === 0) {\n                return 0;\n            }\n            if (k === 1) {\n                return 1;\n            }\n            if (!a || a < 1) {\n                a = 1; s = p / 4;\n            }\n            else {\n                s = p * Math.asin(1 / a) / (2 * Math.PI);\n            }\n            return -(a * Math.pow(2, 10 * (k -= 1)) *\n                        Math.sin((k - s) * (2 * Math.PI) / p));\n        },\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        elasticOut: function (k) {\n            var s;\n            var a = 0.1;\n            var p = 0.4;\n            if (k === 0) {\n                return 0;\n            }\n            if (k === 1) {\n                return 1;\n            }\n            if (!a || a < 1) {\n                a = 1; s = p / 4;\n            }\n            else {\n                s = p * Math.asin(1 / a) / (2 * Math.PI);\n            }\n            return (a * Math.pow(2, -10 * k) *\n                    Math.sin((k - s) * (2 * Math.PI) / p) + 1);\n        },\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        elasticInOut: function (k) {\n            var s;\n            var a = 0.1;\n            var p = 0.4;\n            if (k === 0) {\n                return 0;\n            }\n            if (k === 1) {\n                return 1;\n            }\n            if (!a || a < 1) {\n                a = 1; s = p / 4;\n            }\n            else {\n                s = p * Math.asin(1 / a) / (2 * Math.PI);\n            }\n            if ((k *= 2) < 1) {\n                return -0.5 * (a * Math.pow(2, 10 * (k -= 1))\n                    * Math.sin((k - s) * (2 * Math.PI) / p));\n            }\n            return a * Math.pow(2, -10 * (k -= 1))\n                    * Math.sin((k - s) * (2 * Math.PI) / p) * 0.5 + 1;\n\n        },\n\n        // 在某一动画开始沿指示的路径进行动画处理前稍稍收回该动画的移动\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        backIn: function (k) {\n            var s = 1.70158;\n            return k * k * ((s + 1) * k - s);\n        },\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        backOut: function (k) {\n            var s = 1.70158;\n            return --k * k * ((s + 1) * k + s) + 1;\n        },\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        backInOut: function (k) {\n            var s = 1.70158 * 1.525;\n            if ((k *= 2) < 1) {\n                return 0.5 * (k * k * ((s + 1) * k - s));\n            }\n            return 0.5 * ((k -= 2) * k * ((s + 1) * k + s) + 2);\n        },\n\n        // 创建弹跳效果\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        bounceIn: function (k) {\n            return 1 - easing.bounceOut(1 - k);\n        },\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        bounceOut: function (k) {\n            if (k < (1 / 2.75)) {\n                return 7.5625 * k * k;\n            }\n            else if (k < (2 / 2.75)) {\n                return 7.5625 * (k -= (1.5 / 2.75)) * k + 0.75;\n            }\n            else if (k < (2.5 / 2.75)) {\n                return 7.5625 * (k -= (2.25 / 2.75)) * k + 0.9375;\n            }\n            else {\n                return 7.5625 * (k -= (2.625 / 2.75)) * k + 0.984375;\n            }\n        },\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        bounceInOut: function (k) {\n            if (k < 0.5) {\n                return easing.bounceIn(k * 2) * 0.5;\n            }\n            return easing.bounceOut(k * 2 - 1) * 0.5 + 0.5;\n        }\n    };\n\n    module.exports = easing;\n\n\n\n\n/***/ }),\n\n/***/ \"kawL\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n/**\n * 事件辅助类\n * @module zrender/core/event\n * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)\n */\n\n\n    var Eventful = __webpack_require__(\"feXt\");\n    var env = __webpack_require__(\"020c\");\n\n    var isDomLevel2 = (typeof window !== 'undefined') && !!window.addEventListener;\n\n    function getBoundingClientRect(el) {\n        // BlackBerry 5, iOS 3 (original iPhone) don't have getBoundingRect\n        return el.getBoundingClientRect ? el.getBoundingClientRect() : {left: 0, top: 0};\n    }\n\n    // `calculate` is optional, default false\n    function clientToLocal(el, e, out, calculate) {\n        out = out || {};\n\n        // According to the W3C Working Draft, offsetX and offsetY should be relative\n        // to the padding edge of the target element. The only browser using this convention\n        // is IE. Webkit uses the border edge, Opera uses the content edge, and FireFox does\n        // not support the properties.\n        // (see http://www.jacklmoore.com/notes/mouse-position/)\n        // In zr painter.dom, padding edge equals to border edge.\n\n        // FIXME\n        // When mousemove event triggered on ec tooltip, target is not zr painter.dom, and\n        // offsetX/Y is relative to e.target, where the calculation of zrX/Y via offsetX/Y\n        // is too complex. So css-transfrom dont support in this case temporarily.\n        if (calculate || !env.canvasSupported) {\n            defaultGetZrXY(el, e, out);\n        }\n        // Caution: In FireFox, layerX/layerY Mouse position relative to the closest positioned\n        // ancestor element, so we should make sure el is positioned (e.g., not position:static).\n        // BTW1, Webkit don't return the same results as FF in non-simple cases (like add\n        // zoom-factor, overflow / opacity layers, transforms ...)\n        // BTW2, (ev.offsetY || ev.pageY - $(ev.target).offset().top) is not correct in preserve-3d.\n        // <https://bugs.jquery.com/ticket/8523#comment:14>\n        // BTW3, In ff, offsetX/offsetY is always 0.\n        else if (env.browser.firefox && e.layerX != null && e.layerX !== e.offsetX) {\n            out.zrX = e.layerX;\n            out.zrY = e.layerY;\n        }\n        // For IE6+, chrome, safari, opera. (When will ff support offsetX?)\n        else if (e.offsetX != null) {\n            out.zrX = e.offsetX;\n            out.zrY = e.offsetY;\n        }\n        // For some other device, e.g., IOS safari.\n        else {\n            defaultGetZrXY(el, e, out);\n        }\n\n        return out;\n    }\n\n    function defaultGetZrXY(el, e, out) {\n        // This well-known method below does not support css transform.\n        var box = getBoundingClientRect(el);\n        out.zrX = e.clientX - box.left;\n        out.zrY = e.clientY - box.top;\n    }\n\n    /**\n     * 如果存在第三方嵌入的一些dom触发的事件，或touch事件，需要转换一下事件坐标.\n     * `calculate` is optional, default false.\n     */\n    function normalizeEvent(el, e, calculate) {\n\n        e = e || window.event;\n\n        if (e.zrX != null) {\n            return e;\n        }\n\n        var eventType = e.type;\n        var isTouch = eventType && eventType.indexOf('touch') >= 0;\n\n        if (!isTouch) {\n            clientToLocal(el, e, e, calculate);\n            e.zrDelta = (e.wheelDelta) ? e.wheelDelta / 120 : -(e.detail || 0) / 3;\n        }\n        else {\n            var touch = eventType != 'touchend'\n                ? e.targetTouches[0]\n                : e.changedTouches[0];\n            touch && clientToLocal(el, touch, e, calculate);\n        }\n\n        return e;\n    }\n\n    function addEventListener(el, name, handler) {\n        if (isDomLevel2) {\n            el.addEventListener(name, handler);\n        }\n        else {\n            el.attachEvent('on' + name, handler);\n        }\n    }\n\n    function removeEventListener(el, name, handler) {\n        if (isDomLevel2) {\n            el.removeEventListener(name, handler);\n        }\n        else {\n            el.detachEvent('on' + name, handler);\n        }\n    }\n\n    /**\n     * preventDefault and stopPropagation.\n     * Notice: do not do that in zrender. Upper application\n     * do that if necessary.\n     *\n     * @memberOf module:zrender/core/event\n     * @method\n     * @param {Event} e : event对象\n     */\n    var stop = isDomLevel2\n        ? function (e) {\n            e.preventDefault();\n            e.stopPropagation();\n            e.cancelBubble = true;\n        }\n        : function (e) {\n            e.returnValue = false;\n            e.cancelBubble = true;\n        };\n\n    module.exports = {\n        clientToLocal: clientToLocal,\n        normalizeEvent: normalizeEvent,\n        addEventListener: addEventListener,\n        removeEventListener: removeEventListener,\n\n        stop: stop,\n        // 做向上兼容\n        Dispatcher: Eventful\n    };\n\n\n\n/***/ }),\n\n/***/ \"kwh2\":\n/***/ (function(module, exports) {\n\n\n\n    module.exports = function (seriesType, defaultSymbolType, legendSymbol, ecModel, api) {\n\n        // Encoding visual for all series include which is filtered for legend drawing\n        ecModel.eachRawSeriesByType(seriesType, function (seriesModel) {\n            var data = seriesModel.getData();\n\n            var symbolType = seriesModel.get('symbol') || defaultSymbolType;\n            var symbolSize = seriesModel.get('symbolSize');\n\n            data.setVisual({\n                legendSymbol: legendSymbol || symbolType,\n                symbol: symbolType,\n                symbolSize: symbolSize\n            });\n\n            // Only visible series has each data be visual encoded\n            if (!ecModel.isSeriesFiltered(seriesModel)) {\n                if (typeof symbolSize === 'function') {\n                    data.each(function (idx) {\n                        var rawValue = seriesModel.getRawValue(idx);\n                        // FIXME\n                        var params = seriesModel.getDataParams(idx);\n                        data.setItemVisual(idx, 'symbolSize', symbolSize(rawValue, params));\n                    });\n                }\n                data.each(function (idx) {\n                    var itemModel = data.getItemModel(idx);\n                    var itemSymbolType = itemModel.getShallow('symbol', true);\n                    var itemSymbolSize = itemModel.getShallow('symbolSize', true);\n                    // If has item symbol\n                    if (itemSymbolType != null) {\n                        data.setItemVisual(idx, 'symbol', itemSymbolType);\n                    }\n                    if (itemSymbolSize != null) {\n                        // PENDING Transform symbolSize ?\n                        data.setItemVisual(idx, 'symbolSize', itemSymbolSize);\n                    }\n                });\n            }\n        });\n    };\n\n\n/***/ }),\n\n/***/ \"lzeG\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n\n    var ComponentModel = __webpack_require__(\"wvll\");\n    var zrUtil = __webpack_require__(\"nw1Z\");\n    var axisModelCreator = __webpack_require__(\"SAoR\");\n\n    var AxisModel = ComponentModel.extend({\n\n        type: 'cartesian2dAxis',\n\n        /**\n         * @type {module:echarts/coord/cartesian/Axis2D}\n         */\n        axis: null,\n\n        /**\n         * @override\n         */\n        init: function () {\n            AxisModel.superApply(this, 'init', arguments);\n            this.resetRange();\n        },\n\n        /**\n         * @override\n         */\n        mergeOption: function () {\n            AxisModel.superApply(this, 'mergeOption', arguments);\n            this.resetRange();\n        },\n\n        /**\n         * @override\n         */\n        restoreData: function () {\n            AxisModel.superApply(this, 'restoreData', arguments);\n            this.resetRange();\n        },\n\n        /**\n         * @override\n         * @return {module:echarts/model/Component}\n         */\n        getCoordSysModel: function () {\n            return this.ecModel.queryComponents({\n                mainType: 'grid',\n                index: this.option.gridIndex,\n                id: this.option.gridId\n            })[0];\n        }\n\n    });\n\n    function getAxisType(axisDim, option) {\n        // Default axis with data is category axis\n        return option.type || (option.data ? 'category' : 'value');\n    }\n\n    zrUtil.merge(AxisModel.prototype, __webpack_require__(\"LLSH\"));\n\n    var extraOption = {\n        // gridIndex: 0,\n        // gridId: '',\n\n        // Offset is for multiple axis on the same position\n        offset: 0\n    };\n\n    axisModelCreator('x', AxisModel, getAxisType, extraOption);\n    axisModelCreator('y', AxisModel, getAxisType, extraOption);\n\n    module.exports = AxisModel;\n\n\n/***/ }),\n\n/***/ \"n/gz\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\n    var graphic = __webpack_require__(\"y2WT\");\n    var zrUtil = __webpack_require__(\"nw1Z\");\n\n    /**\n     * @param {module:echarts/model/Series} seriesModel\n     * @param {boolean} hasAnimation\n     * @inner\n     */\n    function updateDataSelected(uid, seriesModel, hasAnimation, api) {\n        var data = seriesModel.getData();\n        var dataIndex = this.dataIndex;\n        var name = data.getName(dataIndex);\n        var selectedOffset = seriesModel.get('selectedOffset');\n\n        api.dispatchAction({\n            type: 'pieToggleSelect',\n            from: uid,\n            name: name,\n            seriesId: seriesModel.id\n        });\n\n        data.each(function (idx) {\n            toggleItemSelected(\n                data.getItemGraphicEl(idx),\n                data.getItemLayout(idx),\n                seriesModel.isSelected(data.getName(idx)),\n                selectedOffset,\n                hasAnimation\n            );\n        });\n    }\n\n    /**\n     * @param {module:zrender/graphic/Sector} el\n     * @param {Object} layout\n     * @param {boolean} isSelected\n     * @param {number} selectedOffset\n     * @param {boolean} hasAnimation\n     * @inner\n     */\n    function toggleItemSelected(el, layout, isSelected, selectedOffset, hasAnimation) {\n        var midAngle = (layout.startAngle + layout.endAngle) / 2;\n\n        var dx = Math.cos(midAngle);\n        var dy = Math.sin(midAngle);\n\n        var offset = isSelected ? selectedOffset : 0;\n        var position = [dx * offset, dy * offset];\n\n        hasAnimation\n            // animateTo will stop revious animation like update transition\n            ? el.animate()\n                .when(200, {\n                    position: position\n                })\n                .start('bounceOut')\n            : el.attr('position', position);\n    }\n\n    /**\n     * Piece of pie including Sector, Label, LabelLine\n     * @constructor\n     * @extends {module:zrender/graphic/Group}\n     */\n    function PiePiece(data, idx) {\n\n        graphic.Group.call(this);\n\n        var sector = new graphic.Sector({\n            z2: 2\n        });\n        var polyline = new graphic.Polyline();\n        var text = new graphic.Text();\n        this.add(sector);\n        this.add(polyline);\n        this.add(text);\n\n        this.updateData(data, idx, true);\n\n        // Hover to change label and labelLine\n        function onEmphasis() {\n            polyline.ignore = polyline.hoverIgnore;\n            text.ignore = text.hoverIgnore;\n        }\n        function onNormal() {\n            polyline.ignore = polyline.normalIgnore;\n            text.ignore = text.normalIgnore;\n        }\n        this.on('emphasis', onEmphasis)\n            .on('normal', onNormal)\n            .on('mouseover', onEmphasis)\n            .on('mouseout', onNormal);\n    }\n\n    var piePieceProto = PiePiece.prototype;\n\n    function getLabelStyle(data, idx, state, labelModel, labelPosition) {\n        var textStyleModel = labelModel.getModel('textStyle');\n        var isLabelInside = labelPosition === 'inside' || labelPosition === 'inner';\n        return {\n            fill: textStyleModel.getTextColor()\n                || (isLabelInside ? '#fff' : data.getItemVisual(idx, 'color')),\n            opacity: data.getItemVisual(idx, 'opacity'),\n            textFont: textStyleModel.getFont(),\n            text: zrUtil.retrieve(\n                data.hostModel.getFormattedLabel(idx, state), data.getName(idx)\n            )\n        };\n    }\n\n    piePieceProto.updateData = function (data, idx, firstCreate) {\n\n        var sector = this.childAt(0);\n\n        var seriesModel = data.hostModel;\n        var itemModel = data.getItemModel(idx);\n        var layout = data.getItemLayout(idx);\n        var sectorShape = zrUtil.extend({}, layout);\n        sectorShape.label = null;\n\n        if (firstCreate) {\n            sector.setShape(sectorShape);\n\n            var animationType = seriesModel.getShallow('animationType');\n            if (animationType === 'scale') {\n                sector.shape.r = layout.r0;\n                graphic.initProps(sector, {\n                    shape: {\n                        r: layout.r\n                    }\n                }, seriesModel, idx);\n            }\n            // Expansion\n            else {\n                sector.shape.endAngle = layout.startAngle;\n                graphic.updateProps(sector, {\n                    shape: {\n                        endAngle: layout.endAngle\n                    }\n                }, seriesModel, idx);\n            }\n\n        }\n        else {\n            graphic.updateProps(sector, {\n                shape: sectorShape\n            }, seriesModel, idx);\n        }\n\n        // Update common style\n        var itemStyleModel = itemModel.getModel('itemStyle');\n        var visualColor = data.getItemVisual(idx, 'color');\n\n        sector.useStyle(\n            zrUtil.defaults(\n                {\n                    lineJoin: 'bevel',\n                    fill: visualColor\n                },\n                itemStyleModel.getModel('normal').getItemStyle()\n            )\n        );\n        sector.hoverStyle = itemStyleModel.getModel('emphasis').getItemStyle();\n\n        // Toggle selected\n        toggleItemSelected(\n            this,\n            data.getItemLayout(idx),\n            itemModel.get('selected'),\n            seriesModel.get('selectedOffset'),\n            seriesModel.get('animation')\n        );\n\n        function onEmphasis() {\n            // Sector may has animation of updating data. Force to move to the last frame\n            // Or it may stopped on the wrong shape\n            sector.stopAnimation(true);\n            sector.animateTo({\n                shape: {\n                    r: layout.r + 10\n                }\n            }, 300, 'elasticOut');\n        }\n        function onNormal() {\n            sector.stopAnimation(true);\n            sector.animateTo({\n                shape: {\n                    r: layout.r\n                }\n            }, 300, 'elasticOut');\n        }\n        sector.off('mouseover').off('mouseout').off('emphasis').off('normal');\n        if (itemModel.get('hoverAnimation') && seriesModel.isAnimationEnabled()) {\n            sector\n                .on('mouseover', onEmphasis)\n                .on('mouseout', onNormal)\n                .on('emphasis', onEmphasis)\n                .on('normal', onNormal);\n        }\n\n        this._updateLabel(data, idx);\n\n        graphic.setHoverStyle(this);\n    };\n\n    piePieceProto._updateLabel = function (data, idx) {\n\n        var labelLine = this.childAt(1);\n        var labelText = this.childAt(2);\n\n        var seriesModel = data.hostModel;\n        var itemModel = data.getItemModel(idx);\n        var layout = data.getItemLayout(idx);\n        var labelLayout = layout.label;\n        var visualColor = data.getItemVisual(idx, 'color');\n\n        graphic.updateProps(labelLine, {\n            shape: {\n                points: labelLayout.linePoints || [\n                    [labelLayout.x, labelLayout.y], [labelLayout.x, labelLayout.y], [labelLayout.x, labelLayout.y]\n                ]\n            }\n        }, seriesModel, idx);\n\n        graphic.updateProps(labelText, {\n            style: {\n                x: labelLayout.x,\n                y: labelLayout.y\n            }\n        }, seriesModel, idx);\n        labelText.attr({\n            style: {\n                textVerticalAlign: labelLayout.verticalAlign,\n                textAlign: labelLayout.textAlign,\n                textFont: labelLayout.font\n            },\n            rotation: labelLayout.rotation,\n            origin: [labelLayout.x, labelLayout.y],\n            z2: 10\n        });\n\n        var labelModel = itemModel.getModel('label.normal');\n        var labelHoverModel = itemModel.getModel('label.emphasis');\n        var labelLineModel = itemModel.getModel('labelLine.normal');\n        var labelLineHoverModel = itemModel.getModel('labelLine.emphasis');\n        var labelPosition = labelModel.get('position') || labelHoverModel.get('position');\n\n        labelText.setStyle(getLabelStyle(data, idx, 'normal', labelModel, labelPosition));\n\n        labelText.ignore = labelText.normalIgnore = !labelModel.get('show');\n        labelText.hoverIgnore = !labelHoverModel.get('show');\n\n        labelLine.ignore = labelLine.normalIgnore = !labelLineModel.get('show');\n        labelLine.hoverIgnore = !labelLineHoverModel.get('show');\n\n        // Default use item visual color\n        labelLine.setStyle({\n            stroke: visualColor,\n            opacity: data.getItemVisual(idx, 'opacity')\n        });\n        labelLine.setStyle(labelLineModel.getModel('lineStyle').getLineStyle());\n\n        labelText.hoverStyle = getLabelStyle(data, idx, 'emphasis', labelHoverModel, labelPosition);\n        labelLine.hoverStyle = labelLineHoverModel.getModel('lineStyle').getLineStyle();\n\n        var smooth = labelLineModel.get('smooth');\n        if (smooth && smooth === true) {\n            smooth = 0.4;\n        }\n        labelLine.setShape({\n            smooth: smooth\n        });\n    };\n\n    zrUtil.inherits(PiePiece, graphic.Group);\n\n\n    // Pie view\n    var Pie = __webpack_require__(\"BOb8\").extend({\n\n        type: 'pie',\n\n        init: function () {\n            var sectorGroup = new graphic.Group();\n            this._sectorGroup = sectorGroup;\n        },\n\n        render: function (seriesModel, ecModel, api, payload) {\n            if (payload && (payload.from === this.uid)) {\n                return;\n            }\n\n            var data = seriesModel.getData();\n            var oldData = this._data;\n            var group = this.group;\n\n            var hasAnimation = ecModel.get('animation');\n            var isFirstRender = !oldData;\n            var animationType = seriesModel.get('animationType');\n\n            var onSectorClick = zrUtil.curry(\n                updateDataSelected, this.uid, seriesModel, hasAnimation, api\n            );\n\n            var selectedMode = seriesModel.get('selectedMode');\n\n            data.diff(oldData)\n                .add(function (idx) {\n                    var piePiece = new PiePiece(data, idx);\n                    // Default expansion animation\n                    if (isFirstRender && animationType !== 'scale') {\n                        piePiece.eachChild(function (child) {\n                            child.stopAnimation(true);\n                        });\n                    }\n\n                    selectedMode && piePiece.on('click', onSectorClick);\n\n                    data.setItemGraphicEl(idx, piePiece);\n\n                    group.add(piePiece);\n                })\n                .update(function (newIdx, oldIdx) {\n                    var piePiece = oldData.getItemGraphicEl(oldIdx);\n\n                    piePiece.updateData(data, newIdx);\n\n                    piePiece.off('click');\n                    selectedMode && piePiece.on('click', onSectorClick);\n                    group.add(piePiece);\n                    data.setItemGraphicEl(newIdx, piePiece);\n                })\n                .remove(function (idx) {\n                    var piePiece = oldData.getItemGraphicEl(idx);\n                    group.remove(piePiece);\n                })\n                .execute();\n\n            if (\n                hasAnimation && isFirstRender && data.count() > 0\n                // Default expansion animation\n                && animationType !== 'scale'\n            ) {\n                var shape = data.getItemLayout(0);\n                var r = Math.max(api.getWidth(), api.getHeight()) / 2;\n\n                var removeClipPath = zrUtil.bind(group.removeClipPath, group);\n                group.setClipPath(this._createClipPath(\n                    shape.cx, shape.cy, r, shape.startAngle, shape.clockwise, removeClipPath, seriesModel\n                ));\n            }\n\n            this._data = data;\n        },\n\n        dispose: function () {},\n\n        _createClipPath: function (\n            cx, cy, r, startAngle, clockwise, cb, seriesModel\n        ) {\n            var clipPath = new graphic.Sector({\n                shape: {\n                    cx: cx,\n                    cy: cy,\n                    r0: 0,\n                    r: r,\n                    startAngle: startAngle,\n                    endAngle: startAngle,\n                    clockwise: clockwise\n                }\n            });\n\n            graphic.initProps(clipPath, {\n                shape: {\n                    endAngle: startAngle + (clockwise ? 1 : -1) * Math.PI * 2\n                }\n            }, seriesModel, cb);\n\n            return clipPath;\n        },\n\n        /**\n         * @implement\n         */\n        containPoint: function (point, seriesModel) {\n            var data = seriesModel.getData();\n            var itemLayout = data.getItemLayout(0);\n            if (itemLayout) {\n                var dx = point[0] - itemLayout.cx;\n                var dy = point[1] - itemLayout.cy;\n                var radius = Math.sqrt(dx * dx + dy * dy);\n                return radius <= itemLayout.r && radius >= itemLayout.r0;\n            }\n        }\n\n    });\n\n    module.exports = Pie;\n\n\n/***/ }),\n\n/***/ \"nXqQ\":\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * @file History manager.\n */\n\n\n    var zrUtil = __webpack_require__(\"nw1Z\");\n    var each = zrUtil.each;\n\n    var ATTR = '\\0_ec_hist_store';\n\n    var history = {\n\n        /**\n         * @public\n         * @param {module:echarts/model/Global} ecModel\n         * @param {Object} newSnapshot {dataZoomId, batch: [payloadInfo, ...]}\n         */\n        push: function (ecModel, newSnapshot) {\n            var store = giveStore(ecModel);\n\n            // If previous dataZoom can not be found,\n            // complete an range with current range.\n            each(newSnapshot, function (batchItem, dataZoomId) {\n                var i = store.length - 1;\n                for (; i >= 0; i--) {\n                    var snapshot = store[i];\n                    if (snapshot[dataZoomId]) {\n                        break;\n                    }\n                }\n                if (i < 0) {\n                    // No origin range set, create one by current range.\n                    var dataZoomModel = ecModel.queryComponents(\n                        {mainType: 'dataZoom', subType: 'select', id: dataZoomId}\n                    )[0];\n                    if (dataZoomModel) {\n                        var percentRange = dataZoomModel.getPercentRange();\n                        store[0][dataZoomId] = {\n                            dataZoomId: dataZoomId,\n                            start: percentRange[0],\n                            end: percentRange[1]\n                        };\n                    }\n                }\n            });\n\n            store.push(newSnapshot);\n        },\n\n        /**\n         * @public\n         * @param {module:echarts/model/Global} ecModel\n         * @return {Object} snapshot\n         */\n        pop: function (ecModel) {\n            var store = giveStore(ecModel);\n            var head = store[store.length - 1];\n            store.length > 1 && store.pop();\n\n            // Find top for all dataZoom.\n            var snapshot = {};\n            each(head, function (batchItem, dataZoomId) {\n                for (var i = store.length - 1; i >= 0; i--) {\n                    var batchItem = store[i][dataZoomId];\n                    if (batchItem) {\n                        snapshot[dataZoomId] = batchItem;\n                        break;\n                    }\n                }\n            });\n\n            return snapshot;\n        },\n\n        /**\n         * @public\n         */\n        clear: function (ecModel) {\n            ecModel[ATTR] = null;\n        },\n\n        /**\n         * @public\n         * @param {module:echarts/model/Global} ecModel\n         * @return {number} records. always >= 1.\n         */\n        count: function (ecModel) {\n            return giveStore(ecModel).length;\n        }\n\n    };\n\n    /**\n     * [{key: dataZoomId, value: {dataZoomId, range}}, ...]\n     * History length of each dataZoom may be different.\n     * this._history[0] is used to store origin range.\n     * @type {Array.<Object>}\n     */\n    function giveStore(ecModel) {\n        var store = ecModel[ATTR];\n        if (!store) {\n            store = ecModel[ATTR] = [{}];\n        }\n        return store;\n    }\n\n    module.exports = history;\n\n\n\n/***/ }),\n\n/***/ \"nfmd\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n// FIXME step not support polar\n\n\n    var zrUtil = __webpack_require__(\"nw1Z\");\n    var SymbolDraw = __webpack_require__(\"K/R+\");\n    var Symbol = __webpack_require__(\"JEU6\");\n    var lineAnimationDiff = __webpack_require__(\"89FV\");\n    var graphic = __webpack_require__(\"y2WT\");\n    var modelUtil = __webpack_require__(\"LFYx\");\n    var polyHelper = __webpack_require__(\"LhwB\");\n    var ChartView = __webpack_require__(\"BOb8\");\n\n    function isPointsSame(points1, points2) {\n        if (points1.length !== points2.length) {\n            return;\n        }\n        for (var i = 0; i < points1.length; i++) {\n            var p1 = points1[i];\n            var p2 = points2[i];\n            if (p1[0] !== p2[0] || p1[1] !== p2[1]) {\n                return;\n            }\n        }\n        return true;\n    }\n\n    function getSmooth(smooth) {\n        return typeof (smooth) === 'number' ? smooth : (smooth ? 0.3 : 0);\n    }\n\n    function getAxisExtentWithGap(axis) {\n        var extent = axis.getGlobalExtent();\n        if (axis.onBand) {\n            // Remove extra 1px to avoid line miter in clipped edge\n            var halfBandWidth = axis.getBandWidth() / 2 - 1;\n            var dir = extent[1] > extent[0] ? 1 : -1;\n            extent[0] += dir * halfBandWidth;\n            extent[1] -= dir * halfBandWidth;\n        }\n        return extent;\n    }\n\n    function sign(val) {\n        return val >= 0 ? 1 : -1;\n    }\n    /**\n     * @param {module:echarts/coord/cartesian/Cartesian2D|module:echarts/coord/polar/Polar} coordSys\n     * @param {module:echarts/data/List} data\n     * @param {Array.<Array.<number>>} points\n     * @private\n     */\n    function getStackedOnPoints(coordSys, data) {\n        var baseAxis = coordSys.getBaseAxis();\n        var valueAxis = coordSys.getOtherAxis(baseAxis);\n        var valueStart = baseAxis.onZero\n            ? 0 : valueAxis.scale.getExtent()[0];\n\n        var valueDim = valueAxis.dim;\n\n        var baseDataOffset = valueDim === 'x' || valueDim === 'radius' ? 1 : 0;\n\n        return data.mapArray([valueDim], function (val, idx) {\n            var stackedOnSameSign;\n            var stackedOn = data.stackedOn;\n            // Find first stacked value with same sign\n            while (stackedOn &&\n                sign(stackedOn.get(valueDim, idx)) === sign(val)\n            ) {\n                stackedOnSameSign = stackedOn;\n                break;\n            }\n            var stackedData = [];\n            stackedData[baseDataOffset] = data.get(baseAxis.dim, idx);\n            stackedData[1 - baseDataOffset] = stackedOnSameSign\n                ? stackedOnSameSign.get(valueDim, idx, true) : valueStart;\n\n            return coordSys.dataToPoint(stackedData);\n        }, true);\n    }\n\n    function createGridClipShape(cartesian, hasAnimation, seriesModel) {\n        var xExtent = getAxisExtentWithGap(cartesian.getAxis('x'));\n        var yExtent = getAxisExtentWithGap(cartesian.getAxis('y'));\n        var isHorizontal = cartesian.getBaseAxis().isHorizontal();\n\n        var x = Math.min(xExtent[0], xExtent[1]);\n        var y = Math.min(yExtent[0], yExtent[1]);\n        var width = Math.max(xExtent[0], xExtent[1]) - x;\n        var height = Math.max(yExtent[0], yExtent[1]) - y;\n        var lineWidth = seriesModel.get('lineStyle.normal.width') || 2;\n        // Expand clip shape to avoid clipping when line value exceeds axis\n        var expandSize = seriesModel.get('clipOverflow') ? lineWidth / 2 : Math.max(width, height);\n        if (isHorizontal) {\n            y -= expandSize;\n            height += expandSize * 2;\n        }\n        else {\n            x -= expandSize;\n            width += expandSize * 2;\n        }\n\n        var clipPath = new graphic.Rect({\n            shape: {\n                x: x,\n                y: y,\n                width: width,\n                height: height\n            }\n        });\n\n        if (hasAnimation) {\n            clipPath.shape[isHorizontal ? 'width' : 'height'] = 0;\n            graphic.initProps(clipPath, {\n                shape: {\n                    width: width,\n                    height: height\n                }\n            }, seriesModel);\n        }\n\n        return clipPath;\n    }\n\n    function createPolarClipShape(polar, hasAnimation, seriesModel) {\n        var angleAxis = polar.getAngleAxis();\n        var radiusAxis = polar.getRadiusAxis();\n\n        var radiusExtent = radiusAxis.getExtent();\n        var angleExtent = angleAxis.getExtent();\n\n        var RADIAN = Math.PI / 180;\n\n        var clipPath = new graphic.Sector({\n            shape: {\n                cx: polar.cx,\n                cy: polar.cy,\n                r0: radiusExtent[0],\n                r: radiusExtent[1],\n                startAngle: -angleExtent[0] * RADIAN,\n                endAngle: -angleExtent[1] * RADIAN,\n                clockwise: angleAxis.inverse\n            }\n        });\n\n        if (hasAnimation) {\n            clipPath.shape.endAngle = -angleExtent[0] * RADIAN;\n            graphic.initProps(clipPath, {\n                shape: {\n                    endAngle: -angleExtent[1] * RADIAN\n                }\n            }, seriesModel);\n        }\n\n        return clipPath;\n    }\n\n    function createClipShape(coordSys, hasAnimation, seriesModel) {\n        return coordSys.type === 'polar'\n            ? createPolarClipShape(coordSys, hasAnimation, seriesModel)\n            : createGridClipShape(coordSys, hasAnimation, seriesModel);\n    }\n\n    function turnPointsIntoStep(points, coordSys, stepTurnAt) {\n        var baseAxis = coordSys.getBaseAxis();\n        var baseIndex = baseAxis.dim === 'x' || baseAxis.dim === 'radius' ? 0 : 1;\n\n        var stepPoints = [];\n        for (var i = 0; i < points.length - 1; i++) {\n            var nextPt = points[i + 1];\n            var pt = points[i];\n            stepPoints.push(pt);\n\n            var stepPt = [];\n            switch (stepTurnAt) {\n                case 'end':\n                    stepPt[baseIndex] = nextPt[baseIndex];\n                    stepPt[1 - baseIndex] = pt[1 - baseIndex];\n                    // default is start\n                    stepPoints.push(stepPt);\n                    break;\n                case 'middle':\n                    // default is start\n                    var middle = (pt[baseIndex] + nextPt[baseIndex]) / 2;\n                    var stepPt2 = [];\n                    stepPt[baseIndex] = stepPt2[baseIndex] = middle;\n                    stepPt[1 - baseIndex] = pt[1 - baseIndex];\n                    stepPt2[1 - baseIndex] = nextPt[1 - baseIndex];\n                    stepPoints.push(stepPt);\n                    stepPoints.push(stepPt2);\n                    break;\n                default:\n                    stepPt[baseIndex] = pt[baseIndex];\n                    stepPt[1 - baseIndex] = nextPt[1 - baseIndex];\n                    // default is start\n                    stepPoints.push(stepPt);\n            }\n        }\n        // Last points\n        points[i] && stepPoints.push(points[i]);\n        return stepPoints;\n    }\n\n    function getVisualGradient(data, coordSys) {\n        var visualMetaList = data.getVisual('visualMeta');\n        if (!visualMetaList || !visualMetaList.length || !data.count()) {\n            // When data.count() is 0, gradient range can not be calculated.\n            return;\n        }\n\n        var visualMeta;\n        for (var i = visualMetaList.length - 1; i >= 0; i--) {\n            // Can only be x or y\n            if (visualMetaList[i].dimension < 2) {\n                visualMeta = visualMetaList[i];\n                break;\n            }\n        }\n        if (!visualMeta || coordSys.type !== 'cartesian2d') {\n            if (__DEV__) {\n                console.warn('Visual map on line style only support x or y dimension.');\n            }\n            return;\n        }\n\n        // If the area to be rendered is bigger than area defined by LinearGradient,\n        // the canvas spec prescribes that the color of the first stop and the last\n        // stop should be used. But if two stops are added at offset 0, in effect\n        // browsers use the color of the second stop to render area outside\n        // LinearGradient. So we can only infinitesimally extend area defined in\n        // LinearGradient to render `outerColors`.\n\n        var dimension = visualMeta.dimension;\n        var dimName = data.dimensions[dimension];\n        var axis = coordSys.getAxis(dimName);\n\n        // dataToCoor mapping may not be linear, but must be monotonic.\n        var colorStops = zrUtil.map(visualMeta.stops, function (stop) {\n            return {\n                coord: axis.toGlobalCoord(axis.dataToCoord(stop.value)),\n                color: stop.color\n            };\n        });\n        var stopLen = colorStops.length;\n        var outerColors = visualMeta.outerColors.slice();\n\n        if (stopLen && colorStops[0].coord > colorStops[stopLen - 1].coord) {\n            colorStops.reverse();\n            outerColors.reverse();\n        }\n\n        var tinyExtent = 10; // Arbitrary value: 10px\n        var minCoord = colorStops[0].coord - tinyExtent;\n        var maxCoord = colorStops[stopLen - 1].coord + tinyExtent;\n        var coordSpan = maxCoord - minCoord;\n\n        if (coordSpan < 1e-3) {\n            return 'transparent';\n        }\n\n        zrUtil.each(colorStops, function (stop) {\n            stop.offset = (stop.coord - minCoord) / coordSpan;\n        });\n        colorStops.push({\n            offset: stopLen ? colorStops[stopLen - 1].offset : 0.5,\n            color: outerColors[1] || 'transparent'\n        });\n        colorStops.unshift({ // notice colorStops.length have been changed.\n            offset: stopLen ? colorStops[0].offset : 0.5,\n            color: outerColors[0] || 'transparent'\n        });\n\n        // zrUtil.each(colorStops, function (colorStop) {\n        //     // Make sure each offset has rounded px to avoid not sharp edge\n        //     colorStop.offset = (Math.round(colorStop.offset * (end - start) + start) - start) / (end - start);\n        // });\n\n        var gradient = new graphic.LinearGradient(0, 0, 0, 0, colorStops, true);\n        gradient[dimName] = minCoord;\n        gradient[dimName + '2'] = maxCoord;\n\n        return gradient;\n    }\n\n    module.exports = ChartView.extend({\n\n        type: 'line',\n\n        init: function () {\n            var lineGroup = new graphic.Group();\n\n            var symbolDraw = new SymbolDraw();\n            this.group.add(symbolDraw.group);\n\n            this._symbolDraw = symbolDraw;\n            this._lineGroup = lineGroup;\n        },\n\n        render: function (seriesModel, ecModel, api) {\n            var coordSys = seriesModel.coordinateSystem;\n            var group = this.group;\n            var data = seriesModel.getData();\n            var lineStyleModel = seriesModel.getModel('lineStyle.normal');\n            var areaStyleModel = seriesModel.getModel('areaStyle.normal');\n\n            var points = data.mapArray(data.getItemLayout, true);\n\n            var isCoordSysPolar = coordSys.type === 'polar';\n            var prevCoordSys = this._coordSys;\n\n            var symbolDraw = this._symbolDraw;\n            var polyline = this._polyline;\n            var polygon = this._polygon;\n\n            var lineGroup = this._lineGroup;\n\n            var hasAnimation = seriesModel.get('animation');\n\n            var isAreaChart = !areaStyleModel.isEmpty();\n            var stackedOnPoints = getStackedOnPoints(coordSys, data);\n\n            var showSymbol = seriesModel.get('showSymbol');\n\n            var isSymbolIgnore = showSymbol && !isCoordSysPolar && !seriesModel.get('showAllSymbol')\n                && this._getSymbolIgnoreFunc(data, coordSys);\n\n            // Remove temporary symbols\n            var oldData = this._data;\n            oldData && oldData.eachItemGraphicEl(function (el, idx) {\n                if (el.__temp) {\n                    group.remove(el);\n                    oldData.setItemGraphicEl(idx, null);\n                }\n            });\n\n            // Remove previous created symbols if showSymbol changed to false\n            if (!showSymbol) {\n                symbolDraw.remove();\n            }\n\n            group.add(lineGroup);\n\n            // FIXME step not support polar\n            var step = !isCoordSysPolar && seriesModel.get('step');\n            // Initialization animation or coordinate system changed\n            if (\n                !(polyline && prevCoordSys.type === coordSys.type && step === this._step)\n            ) {\n                showSymbol && symbolDraw.updateData(data, isSymbolIgnore);\n\n                if (step) {\n                    // TODO If stacked series is not step\n                    points = turnPointsIntoStep(points, coordSys, step);\n                    stackedOnPoints = turnPointsIntoStep(stackedOnPoints, coordSys, step);\n                }\n\n                polyline = this._newPolyline(points, coordSys, hasAnimation);\n                if (isAreaChart) {\n                    polygon = this._newPolygon(\n                        points, stackedOnPoints,\n                        coordSys, hasAnimation\n                    );\n                }\n                lineGroup.setClipPath(createClipShape(coordSys, true, seriesModel));\n            }\n            else {\n                if (isAreaChart && !polygon) {\n                    // If areaStyle is added\n                    polygon = this._newPolygon(\n                        points, stackedOnPoints,\n                        coordSys, hasAnimation\n                    );\n                }\n                else if (polygon && !isAreaChart) {\n                    // If areaStyle is removed\n                    lineGroup.remove(polygon);\n                    polygon = this._polygon = null;\n                }\n\n                // Update clipPath\n                lineGroup.setClipPath(createClipShape(coordSys, false, seriesModel));\n\n                // Always update, or it is wrong in the case turning on legend\n                // because points are not changed\n                showSymbol && symbolDraw.updateData(data, isSymbolIgnore);\n\n                // Stop symbol animation and sync with line points\n                // FIXME performance?\n                data.eachItemGraphicEl(function (el) {\n                    el.stopAnimation(true);\n                });\n\n                // In the case data zoom triggerred refreshing frequently\n                // Data may not change if line has a category axis. So it should animate nothing\n                if (!isPointsSame(this._stackedOnPoints, stackedOnPoints)\n                    || !isPointsSame(this._points, points)\n                ) {\n                    if (hasAnimation) {\n                        this._updateAnimation(\n                            data, stackedOnPoints, coordSys, api, step\n                        );\n                    }\n                    else {\n                        // Not do it in update with animation\n                        if (step) {\n                            // TODO If stacked series is not step\n                            points = turnPointsIntoStep(points, coordSys, step);\n                            stackedOnPoints = turnPointsIntoStep(stackedOnPoints, coordSys, step);\n                        }\n\n                        polyline.setShape({\n                            points: points\n                        });\n                        polygon && polygon.setShape({\n                            points: points,\n                            stackedOnPoints: stackedOnPoints\n                        });\n                    }\n                }\n            }\n\n            var visualColor = getVisualGradient(data, coordSys) || data.getVisual('color');\n\n            polyline.useStyle(zrUtil.defaults(\n                // Use color in lineStyle first\n                lineStyleModel.getLineStyle(),\n                {\n                    fill: 'none',\n                    stroke: visualColor,\n                    lineJoin: 'bevel'\n                }\n            ));\n\n            var smooth = seriesModel.get('smooth');\n            smooth = getSmooth(seriesModel.get('smooth'));\n            polyline.setShape({\n                smooth: smooth,\n                smoothMonotone: seriesModel.get('smoothMonotone'),\n                connectNulls: seriesModel.get('connectNulls')\n            });\n\n            if (polygon) {\n                var stackedOn = data.stackedOn;\n                var stackedOnSmooth = 0;\n\n                polygon.useStyle(zrUtil.defaults(\n                    areaStyleModel.getAreaStyle(),\n                    {\n                        fill: visualColor,\n                        opacity: 0.7,\n                        lineJoin: 'bevel'\n                    }\n                ));\n\n                if (stackedOn) {\n                    var stackedOnSeries = stackedOn.hostModel;\n                    stackedOnSmooth = getSmooth(stackedOnSeries.get('smooth'));\n                }\n\n                polygon.setShape({\n                    smooth: smooth,\n                    stackedOnSmooth: stackedOnSmooth,\n                    smoothMonotone: seriesModel.get('smoothMonotone'),\n                    connectNulls: seriesModel.get('connectNulls')\n                });\n            }\n\n            this._data = data;\n            // Save the coordinate system for transition animation when data changed\n            this._coordSys = coordSys;\n            this._stackedOnPoints = stackedOnPoints;\n            this._points = points;\n            this._step = step;\n        },\n\n        dispose: function () {},\n\n        highlight: function (seriesModel, ecModel, api, payload) {\n            var data = seriesModel.getData();\n            var dataIndex = modelUtil.queryDataIndex(data, payload);\n\n            if (!(dataIndex instanceof Array) && dataIndex != null && dataIndex >= 0) {\n                var symbol = data.getItemGraphicEl(dataIndex);\n                if (!symbol) {\n                    // Create a temporary symbol if it is not exists\n                    var pt = data.getItemLayout(dataIndex);\n                    if (!pt) {\n                        // Null data\n                        return;\n                    }\n                    symbol = new Symbol(data, dataIndex);\n                    symbol.position = pt;\n                    symbol.setZ(\n                        seriesModel.get('zlevel'),\n                        seriesModel.get('z')\n                    );\n                    symbol.ignore = isNaN(pt[0]) || isNaN(pt[1]);\n                    symbol.__temp = true;\n                    data.setItemGraphicEl(dataIndex, symbol);\n\n                    // Stop scale animation\n                    symbol.stopSymbolAnimation(true);\n\n                    this.group.add(symbol);\n                }\n                symbol.highlight();\n            }\n            else {\n                // Highlight whole series\n                ChartView.prototype.highlight.call(\n                    this, seriesModel, ecModel, api, payload\n                );\n            }\n        },\n\n        downplay: function (seriesModel, ecModel, api, payload) {\n            var data = seriesModel.getData();\n            var dataIndex = modelUtil.queryDataIndex(data, payload);\n            if (dataIndex != null && dataIndex >= 0) {\n                var symbol = data.getItemGraphicEl(dataIndex);\n                if (symbol) {\n                    if (symbol.__temp) {\n                        data.setItemGraphicEl(dataIndex, null);\n                        this.group.remove(symbol);\n                    }\n                    else {\n                        symbol.downplay();\n                    }\n                }\n            }\n            else {\n                // FIXME\n                // can not downplay completely.\n                // Downplay whole series\n                ChartView.prototype.downplay.call(\n                    this, seriesModel, ecModel, api, payload\n                );\n            }\n        },\n\n        /**\n         * @param {module:zrender/container/Group} group\n         * @param {Array.<Array.<number>>} points\n         * @private\n         */\n        _newPolyline: function (points) {\n            var polyline = this._polyline;\n            // Remove previous created polyline\n            if (polyline) {\n                this._lineGroup.remove(polyline);\n            }\n\n            polyline = new polyHelper.Polyline({\n                shape: {\n                    points: points\n                },\n                silent: true,\n                z2: 10\n            });\n\n            this._lineGroup.add(polyline);\n\n            this._polyline = polyline;\n\n            return polyline;\n        },\n\n        /**\n         * @param {module:zrender/container/Group} group\n         * @param {Array.<Array.<number>>} stackedOnPoints\n         * @param {Array.<Array.<number>>} points\n         * @private\n         */\n        _newPolygon: function (points, stackedOnPoints) {\n            var polygon = this._polygon;\n            // Remove previous created polygon\n            if (polygon) {\n                this._lineGroup.remove(polygon);\n            }\n\n            polygon = new polyHelper.Polygon({\n                shape: {\n                    points: points,\n                    stackedOnPoints: stackedOnPoints\n                },\n                silent: true\n            });\n\n            this._lineGroup.add(polygon);\n\n            this._polygon = polygon;\n            return polygon;\n        },\n        /**\n         * @private\n         */\n        _getSymbolIgnoreFunc: function (data, coordSys) {\n            var categoryAxis = coordSys.getAxesByScale('ordinal')[0];\n            // `getLabelInterval` is provided by echarts/component/axis\n            if (categoryAxis && categoryAxis.isLabelIgnored) {\n                return zrUtil.bind(categoryAxis.isLabelIgnored, categoryAxis);\n            }\n        },\n\n        /**\n         * @private\n         */\n        // FIXME Two value axis\n        _updateAnimation: function (data, stackedOnPoints, coordSys, api, step) {\n            var polyline = this._polyline;\n            var polygon = this._polygon;\n            var seriesModel = data.hostModel;\n\n            var diff = lineAnimationDiff(\n                this._data, data,\n                this._stackedOnPoints, stackedOnPoints,\n                this._coordSys, coordSys\n            );\n\n            var current = diff.current;\n            var stackedOnCurrent = diff.stackedOnCurrent;\n            var next = diff.next;\n            var stackedOnNext = diff.stackedOnNext;\n            if (step) {\n                // TODO If stacked series is not step\n                current = turnPointsIntoStep(diff.current, coordSys, step);\n                stackedOnCurrent = turnPointsIntoStep(diff.stackedOnCurrent, coordSys, step);\n                next = turnPointsIntoStep(diff.next, coordSys, step);\n                stackedOnNext = turnPointsIntoStep(diff.stackedOnNext, coordSys, step);\n            }\n            // `diff.current` is subset of `current` (which should be ensured by\n            // turnPointsIntoStep), so points in `__points` can be updated when\n            // points in `current` are update during animation.\n            polyline.shape.__points = diff.current;\n            polyline.shape.points = current;\n\n            graphic.updateProps(polyline, {\n                shape: {\n                    points: next\n                }\n            }, seriesModel);\n\n            if (polygon) {\n                polygon.setShape({\n                    points: current,\n                    stackedOnPoints: stackedOnCurrent\n                });\n                graphic.updateProps(polygon, {\n                    shape: {\n                        points: next,\n                        stackedOnPoints: stackedOnNext\n                    }\n                }, seriesModel);\n            }\n\n            var updatedDataInfo = [];\n            var diffStatus = diff.status;\n\n            for (var i = 0; i < diffStatus.length; i++) {\n                var cmd = diffStatus[i].cmd;\n                if (cmd === '=') {\n                    var el = data.getItemGraphicEl(diffStatus[i].idx1);\n                    if (el) {\n                        updatedDataInfo.push({\n                            el: el,\n                            ptIdx: i    // Index of points\n                        });\n                    }\n                }\n            }\n\n            if (polyline.animators && polyline.animators.length) {\n                polyline.animators[0].during(function () {\n                    for (var i = 0; i < updatedDataInfo.length; i++) {\n                        var el = updatedDataInfo[i].el;\n                        el.attr('position', polyline.shape.__points[updatedDataInfo[i].ptIdx]);\n                    }\n                });\n            }\n        },\n\n        remove: function (ecModel) {\n            var group = this.group;\n            var oldData = this._data;\n            this._lineGroup.removeAll();\n            this._symbolDraw.remove(true);\n            // Remove temporary created elements when highlighting\n            oldData && oldData.eachItemGraphicEl(function (el, idx) {\n                if (el.__temp) {\n                    group.remove(el);\n                    oldData.setItemGraphicEl(idx, null);\n                }\n            });\n\n            this._polyline =\n            this._polygon =\n            this._coordSys =\n            this._points =\n            this._stackedOnPoints =\n            this._data = null;\n        }\n    });\n\n\n/***/ }),\n\n/***/ \"nw1Z\":\n/***/ (function(module, exports) {\n\n/**\n * @module zrender/core/util\n */\n\n\n    // 用于处理merge时无法遍历Date等对象的问题\n    var BUILTIN_OBJECT = {\n        '[object Function]': 1,\n        '[object RegExp]': 1,\n        '[object Date]': 1,\n        '[object Error]': 1,\n        '[object CanvasGradient]': 1,\n        '[object CanvasPattern]': 1,\n        // For node-canvas\n        '[object Image]': 1,\n        '[object Canvas]': 1\n    };\n\n    var TYPED_ARRAY = {\n        '[object Int8Array]': 1,\n        '[object Uint8Array]': 1,\n        '[object Uint8ClampedArray]': 1,\n        '[object Int16Array]': 1,\n        '[object Uint16Array]': 1,\n        '[object Int32Array]': 1,\n        '[object Uint32Array]': 1,\n        '[object Float32Array]': 1,\n        '[object Float64Array]': 1\n    };\n\n    var objToString = Object.prototype.toString;\n\n    var arrayProto = Array.prototype;\n    var nativeForEach = arrayProto.forEach;\n    var nativeFilter = arrayProto.filter;\n    var nativeSlice = arrayProto.slice;\n    var nativeMap = arrayProto.map;\n    var nativeReduce = arrayProto.reduce;\n\n    /**\n     * Those data types can be cloned:\n     *     Plain object, Array, TypedArray, number, string, null, undefined.\n     * Those data types will be assgined using the orginal data:\n     *     BUILTIN_OBJECT\n     * Instance of user defined class will be cloned to a plain object, without\n     * properties in prototype.\n     * Other data types is not supported (not sure what will happen).\n     *\n     * Caution: do not support clone Date, for performance consideration.\n     * (There might be a large number of date in `series.data`).\n     * So date should not be modified in and out of echarts.\n     *\n     * @param {*} source\n     * @return {*} new\n     */\n    function clone(source) {\n        if (source == null || typeof source != 'object') {\n            return source;\n        }\n\n        var result = source;\n        var typeStr = objToString.call(source);\n\n        if (typeStr === '[object Array]') {\n            result = [];\n            for (var i = 0, len = source.length; i < len; i++) {\n                result[i] = clone(source[i]);\n            }\n        }\n        else if (TYPED_ARRAY[typeStr]) {\n            result = source.constructor.from(source);\n        }\n        else if (!BUILTIN_OBJECT[typeStr] && !isPrimitive(source) && !isDom(source)) {\n            result = {};\n            for (var key in source) {\n                if (source.hasOwnProperty(key)) {\n                    result[key] = clone(source[key]);\n                }\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * @memberOf module:zrender/core/util\n     * @param {*} target\n     * @param {*} source\n     * @param {boolean} [overwrite=false]\n     */\n    function merge(target, source, overwrite) {\n        // We should escapse that source is string\n        // and enter for ... in ...\n        if (!isObject(source) || !isObject(target)) {\n            return overwrite ? clone(source) : target;\n        }\n\n        for (var key in source) {\n            if (source.hasOwnProperty(key)) {\n                var targetProp = target[key];\n                var sourceProp = source[key];\n\n                if (isObject(sourceProp)\n                    && isObject(targetProp)\n                    && !isArray(sourceProp)\n                    && !isArray(targetProp)\n                    && !isDom(sourceProp)\n                    && !isDom(targetProp)\n                    && !isBuiltInObject(sourceProp)\n                    && !isBuiltInObject(targetProp)\n                    && !isPrimitive(sourceProp)\n                    && !isPrimitive(targetProp)\n                ) {\n                    // 如果需要递归覆盖，就递归调用merge\n                    merge(targetProp, sourceProp, overwrite);\n                }\n                else if (overwrite || !(key in target)) {\n                    // 否则只处理overwrite为true，或者在目标对象中没有此属性的情况\n                    // NOTE，在 target[key] 不存在的时候也是直接覆盖\n                    target[key] = clone(source[key], true);\n                }\n            }\n        }\n\n        return target;\n    }\n\n    /**\n     * @param {Array} targetAndSources The first item is target, and the rests are source.\n     * @param {boolean} [overwrite=false]\n     * @return {*} target\n     */\n    function mergeAll(targetAndSources, overwrite) {\n        var result = targetAndSources[0];\n        for (var i = 1, len = targetAndSources.length; i < len; i++) {\n            result = merge(result, targetAndSources[i], overwrite);\n        }\n        return result;\n    }\n\n    /**\n     * @param {*} target\n     * @param {*} source\n     * @memberOf module:zrender/core/util\n     */\n    function extend(target, source) {\n        for (var key in source) {\n            if (source.hasOwnProperty(key)) {\n                target[key] = source[key];\n            }\n        }\n        return target;\n    }\n\n    /**\n     * @param {*} target\n     * @param {*} source\n     * @param {boolen} [overlay=false]\n     * @memberOf module:zrender/core/util\n     */\n    function defaults(target, source, overlay) {\n        for (var key in source) {\n            if (source.hasOwnProperty(key)\n                && (overlay ? source[key] != null : target[key] == null)\n            ) {\n                target[key] = source[key];\n            }\n        }\n        return target;\n    }\n\n    function createCanvas() {\n        return document.createElement('canvas');\n    }\n    // FIXME\n    var _ctx;\n    function getContext() {\n        if (!_ctx) {\n            // Use util.createCanvas instead of createCanvas\n            // because createCanvas may be overwritten in different environment\n            _ctx = util.createCanvas().getContext('2d');\n        }\n        return _ctx;\n    }\n\n    /**\n     * 查询数组中元素的index\n     * @memberOf module:zrender/core/util\n     */\n    function indexOf(array, value) {\n        if (array) {\n            if (array.indexOf) {\n                return array.indexOf(value);\n            }\n            for (var i = 0, len = array.length; i < len; i++) {\n                if (array[i] === value) {\n                    return i;\n                }\n            }\n        }\n        return -1;\n    }\n\n    /**\n     * 构造类继承关系\n     *\n     * @memberOf module:zrender/core/util\n     * @param {Function} clazz 源类\n     * @param {Function} baseClazz 基类\n     */\n    function inherits(clazz, baseClazz) {\n        var clazzPrototype = clazz.prototype;\n        function F() {}\n        F.prototype = baseClazz.prototype;\n        clazz.prototype = new F();\n\n        for (var prop in clazzPrototype) {\n            clazz.prototype[prop] = clazzPrototype[prop];\n        }\n        clazz.prototype.constructor = clazz;\n        clazz.superClass = baseClazz;\n    }\n\n    /**\n     * @memberOf module:zrender/core/util\n     * @param {Object|Function} target\n     * @param {Object|Function} sorce\n     * @param {boolean} overlay\n     */\n    function mixin(target, source, overlay) {\n        target = 'prototype' in target ? target.prototype : target;\n        source = 'prototype' in source ? source.prototype : source;\n\n        defaults(target, source, overlay);\n    }\n\n    /**\n     * Consider typed array.\n     * @param {Array|TypedArray} data\n     */\n    function isArrayLike(data) {\n        if (! data) {\n            return;\n        }\n        if (typeof data == 'string') {\n            return false;\n        }\n        return typeof data.length == 'number';\n    }\n\n    /**\n     * 数组或对象遍历\n     * @memberOf module:zrender/core/util\n     * @param {Object|Array} obj\n     * @param {Function} cb\n     * @param {*} [context]\n     */\n    function each(obj, cb, context) {\n        if (!(obj && cb)) {\n            return;\n        }\n        if (obj.forEach && obj.forEach === nativeForEach) {\n            obj.forEach(cb, context);\n        }\n        else if (obj.length === +obj.length) {\n            for (var i = 0, len = obj.length; i < len; i++) {\n                cb.call(context, obj[i], i, obj);\n            }\n        }\n        else {\n            for (var key in obj) {\n                if (obj.hasOwnProperty(key)) {\n                    cb.call(context, obj[key], key, obj);\n                }\n            }\n        }\n    }\n\n    /**\n     * 数组映射\n     * @memberOf module:zrender/core/util\n     * @param {Array} obj\n     * @param {Function} cb\n     * @param {*} [context]\n     * @return {Array}\n     */\n    function map(obj, cb, context) {\n        if (!(obj && cb)) {\n            return;\n        }\n        if (obj.map && obj.map === nativeMap) {\n            return obj.map(cb, context);\n        }\n        else {\n            var result = [];\n            for (var i = 0, len = obj.length; i < len; i++) {\n                result.push(cb.call(context, obj[i], i, obj));\n            }\n            return result;\n        }\n    }\n\n    /**\n     * @memberOf module:zrender/core/util\n     * @param {Array} obj\n     * @param {Function} cb\n     * @param {Object} [memo]\n     * @param {*} [context]\n     * @return {Array}\n     */\n    function reduce(obj, cb, memo, context) {\n        if (!(obj && cb)) {\n            return;\n        }\n        if (obj.reduce && obj.reduce === nativeReduce) {\n            return obj.reduce(cb, memo, context);\n        }\n        else {\n            for (var i = 0, len = obj.length; i < len; i++) {\n                memo = cb.call(context, memo, obj[i], i, obj);\n            }\n            return memo;\n        }\n    }\n\n    /**\n     * 数组过滤\n     * @memberOf module:zrender/core/util\n     * @param {Array} obj\n     * @param {Function} cb\n     * @param {*} [context]\n     * @return {Array}\n     */\n    function filter(obj, cb, context) {\n        if (!(obj && cb)) {\n            return;\n        }\n        if (obj.filter && obj.filter === nativeFilter) {\n            return obj.filter(cb, context);\n        }\n        else {\n            var result = [];\n            for (var i = 0, len = obj.length; i < len; i++) {\n                if (cb.call(context, obj[i], i, obj)) {\n                    result.push(obj[i]);\n                }\n            }\n            return result;\n        }\n    }\n\n    /**\n     * 数组项查找\n     * @memberOf module:zrender/core/util\n     * @param {Array} obj\n     * @param {Function} cb\n     * @param {*} [context]\n     * @return {Array}\n     */\n    function find(obj, cb, context) {\n        if (!(obj && cb)) {\n            return;\n        }\n        for (var i = 0, len = obj.length; i < len; i++) {\n            if (cb.call(context, obj[i], i, obj)) {\n                return obj[i];\n            }\n        }\n    }\n\n    /**\n     * @memberOf module:zrender/core/util\n     * @param {Function} func\n     * @param {*} context\n     * @return {Function}\n     */\n    function bind(func, context) {\n        var args = nativeSlice.call(arguments, 2);\n        return function () {\n            return func.apply(context, args.concat(nativeSlice.call(arguments)));\n        };\n    }\n\n    /**\n     * @memberOf module:zrender/core/util\n     * @param {Function} func\n     * @return {Function}\n     */\n    function curry(func) {\n        var args = nativeSlice.call(arguments, 1);\n        return function () {\n            return func.apply(this, args.concat(nativeSlice.call(arguments)));\n        };\n    }\n\n    /**\n     * @memberOf module:zrender/core/util\n     * @param {*} value\n     * @return {boolean}\n     */\n    function isArray(value) {\n        return objToString.call(value) === '[object Array]';\n    }\n\n    /**\n     * @memberOf module:zrender/core/util\n     * @param {*} value\n     * @return {boolean}\n     */\n    function isFunction(value) {\n        return typeof value === 'function';\n    }\n\n    /**\n     * @memberOf module:zrender/core/util\n     * @param {*} value\n     * @return {boolean}\n     */\n    function isString(value) {\n        return objToString.call(value) === '[object String]';\n    }\n\n    /**\n     * @memberOf module:zrender/core/util\n     * @param {*} value\n     * @return {boolean}\n     */\n    function isObject(value) {\n        // Avoid a V8 JIT bug in Chrome 19-20.\n        // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.\n        var type = typeof value;\n        return type === 'function' || (!!value && type == 'object');\n    }\n\n    /**\n     * @memberOf module:zrender/core/util\n     * @param {*} value\n     * @return {boolean}\n     */\n    function isBuiltInObject(value) {\n        return !!BUILTIN_OBJECT[objToString.call(value)];\n    }\n\n    /**\n     * @memberOf module:zrender/core/util\n     * @param {*} value\n     * @return {boolean}\n     */\n    function isDom(value) {\n        return typeof value === 'object'\n            && typeof value.nodeType === 'number'\n            && typeof value.ownerDocument === 'object';\n    }\n\n    /**\n     * Whether is exactly NaN. Notice isNaN('a') returns true.\n     * @param {*} value\n     * @return {boolean}\n     */\n    function eqNaN(value) {\n        return value !== value;\n    }\n\n    /**\n     * If value1 is not null, then return value1, otherwise judget rest of values.\n     * @memberOf module:zrender/core/util\n     * @return {*} Final value\n     */\n    function retrieve(values) {\n        for (var i = 0, len = arguments.length; i < len; i++) {\n            if (arguments[i] != null) {\n                return arguments[i];\n            }\n        }\n    }\n\n    /**\n     * @memberOf module:zrender/core/util\n     * @param {Array} arr\n     * @param {number} startIndex\n     * @param {number} endIndex\n     * @return {Array}\n     */\n    function slice() {\n        return Function.call.apply(nativeSlice, arguments);\n    }\n\n    /**\n     * @memberOf module:zrender/core/util\n     * @param {boolean} condition\n     * @param {string} message\n     */\n    function assert(condition, message) {\n        if (!condition) {\n            throw new Error(message);\n        }\n    }\n\n    var primitiveKey = '__ec_primitive__';\n    /**\n     * Set an object as primitive to be ignored traversing children in clone or merge\n     */\n    function setAsPrimitive(obj) {\n        obj[primitiveKey] = true;\n    }\n\n    function isPrimitive(obj) {\n        return obj[primitiveKey];\n    }\n\n    /**\n     * @constructor\n     * @param {Object} obj Only apply `ownProperty`.\n     */\n    function HashMap(obj) {\n        obj && each(obj, function (value, key) {\n            this.set(key, value);\n        }, this);\n    }\n\n    // Add prefix to avoid conflict with Object.prototype.\n    var HASH_MAP_PREFIX = '_ec_';\n    var HASH_MAP_PREFIX_LENGTH = 4;\n\n    HashMap.prototype = {\n        constructor: HashMap,\n        // Do not provide `has` method to avoid defining what is `has`.\n        // (We usually treat `null` and `undefined` as the same, different\n        // from ES6 Map).\n        get: function (key) {\n            return this[HASH_MAP_PREFIX + key];\n        },\n        set: function (key, value) {\n            this[HASH_MAP_PREFIX + key] = value;\n            // Comparing with invocation chaining, `return value` is more commonly\n            // used in this case: `var someVal = map.set('a', genVal());`\n            return value;\n        },\n        // Although util.each can be performed on this hashMap directly, user\n        // should not use the exposed keys, who are prefixed.\n        each: function (cb, context) {\n            context !== void 0 && (cb = bind(cb, context));\n            for (var prefixedKey in this) {\n                this.hasOwnProperty(prefixedKey)\n                    && cb(this[prefixedKey], prefixedKey.slice(HASH_MAP_PREFIX_LENGTH));\n            }\n        },\n        // Do not use this method if performance sensitive.\n        removeKey: function (key) {\n            delete this[key];\n        }\n    };\n\n    function createHashMap(obj) {\n        return new HashMap(obj);\n    }\n\n    var util = {\n        inherits: inherits,\n        mixin: mixin,\n        clone: clone,\n        merge: merge,\n        mergeAll: mergeAll,\n        extend: extend,\n        defaults: defaults,\n        getContext: getContext,\n        createCanvas: createCanvas,\n        indexOf: indexOf,\n        slice: slice,\n        find: find,\n        isArrayLike: isArrayLike,\n        each: each,\n        map: map,\n        reduce: reduce,\n        filter: filter,\n        bind: bind,\n        curry: curry,\n        isArray: isArray,\n        isString: isString,\n        isObject: isObject,\n        isFunction: isFunction,\n        isBuiltInObject: isBuiltInObject,\n        isDom: isDom,\n        eqNaN: eqNaN,\n        retrieve: retrieve,\n        assert: assert,\n        setAsPrimitive: setAsPrimitive,\n        createHashMap: createHashMap,\n        noop: function () {}\n    };\n    module.exports = util;\n\n\n\n/***/ }),\n\n/***/ \"o/Er\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n\n    var zrUtil = __webpack_require__(\"nw1Z\");\n\n    var coordinateSystemCreators = {};\n\n    function CoordinateSystemManager() {\n\n        this._coordinateSystems = [];\n    }\n\n    CoordinateSystemManager.prototype = {\n\n        constructor: CoordinateSystemManager,\n\n        create: function (ecModel, api) {\n            var coordinateSystems = [];\n            zrUtil.each(coordinateSystemCreators, function (creater, type) {\n                var list = creater.create(ecModel, api);\n                coordinateSystems = coordinateSystems.concat(list || []);\n            });\n\n            this._coordinateSystems = coordinateSystems;\n        },\n\n        update: function (ecModel, api) {\n            zrUtil.each(this._coordinateSystems, function (coordSys) {\n                // FIXME MUST have\n                coordSys.update && coordSys.update(ecModel, api);\n            });\n        },\n\n        getCoordinateSystems: function () {\n            return this._coordinateSystems.slice();\n        }\n    };\n\n    CoordinateSystemManager.register = function (type, coordinateSystemCreator) {\n        coordinateSystemCreators[type] = coordinateSystemCreator;\n    };\n\n    CoordinateSystemManager.get = function (type) {\n        return coordinateSystemCreators[type];\n    };\n\n    module.exports = CoordinateSystemManager;\n\n\n/***/ }),\n\n/***/ \"o0M/\":\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * @file Data zoom model\n */\n\n\n    var DataZoomModel = __webpack_require__(\"PtLt\");\n\n    module.exports = DataZoomModel.extend({\n\n        type: 'dataZoom.select'\n\n    });\n\n\n\n/***/ }),\n\n/***/ \"oHN5\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n/**\n * @module zrender/mixin/Animatable\n */\n\n\n    var Animator = __webpack_require__(\"qf1S\");\n    var util = __webpack_require__(\"nw1Z\");\n    var isString = util.isString;\n    var isFunction = util.isFunction;\n    var isObject = util.isObject;\n    var log = __webpack_require__(\"BIYt\");\n\n    /**\n     * @alias modue:zrender/mixin/Animatable\n     * @constructor\n     */\n    var Animatable = function () {\n\n        /**\n         * @type {Array.<module:zrender/animation/Animator>}\n         * @readOnly\n         */\n        this.animators = [];\n    };\n\n    Animatable.prototype = {\n\n        constructor: Animatable,\n\n        /**\n         * 动画\n         *\n         * @param {string} path 需要添加动画的属性获取路径，可以通过a.b.c来获取深层的属性\n         * @param {boolean} [loop] 动画是否循环\n         * @return {module:zrender/animation/Animator}\n         * @example:\n         *     el.animate('style', false)\n         *         .when(1000, {x: 10} )\n         *         .done(function(){ // Animation done })\n         *         .start()\n         */\n        animate: function (path, loop) {\n            var target;\n            var animatingShape = false;\n            var el = this;\n            var zr = this.__zr;\n            if (path) {\n                var pathSplitted = path.split('.');\n                var prop = el;\n                // If animating shape\n                animatingShape = pathSplitted[0] === 'shape';\n                for (var i = 0, l = pathSplitted.length; i < l; i++) {\n                    if (!prop) {\n                        continue;\n                    }\n                    prop = prop[pathSplitted[i]];\n                }\n                if (prop) {\n                    target = prop;\n                }\n            }\n            else {\n                target = el;\n            }\n\n            if (!target) {\n                log(\n                    'Property \"'\n                    + path\n                    + '\" is not existed in element '\n                    + el.id\n                );\n                return;\n            }\n\n            var animators = el.animators;\n\n            var animator = new Animator(target, loop);\n\n            animator.during(function (target) {\n                el.dirty(animatingShape);\n            })\n            .done(function () {\n                // FIXME Animator will not be removed if use `Animator#stop` to stop animation\n                animators.splice(util.indexOf(animators, animator), 1);\n            });\n\n            animators.push(animator);\n\n            // If animate after added to the zrender\n            if (zr) {\n                zr.animation.addAnimator(animator);\n            }\n\n            return animator;\n        },\n\n        /**\n         * 停止动画\n         * @param {boolean} forwardToLast If move to last frame before stop\n         */\n        stopAnimation: function (forwardToLast) {\n            var animators = this.animators;\n            var len = animators.length;\n            for (var i = 0; i < len; i++) {\n                animators[i].stop(forwardToLast);\n            }\n            animators.length = 0;\n\n            return this;\n        },\n\n        /**\n         * @param {Object} target\n         * @param {number} [time=500] Time in ms\n         * @param {string} [easing='linear']\n         * @param {number} [delay=0]\n         * @param {Function} [callback]\n         *\n         * @example\n         *  // Animate position\n         *  el.animateTo({\n         *      position: [10, 10]\n         *  }, function () { // done })\n         *\n         *  // Animate shape, style and position in 100ms, delayed 100ms, with cubicOut easing\n         *  el.animateTo({\n         *      shape: {\n         *          width: 500\n         *      },\n         *      style: {\n         *          fill: 'red'\n         *      }\n         *      position: [10, 10]\n         *  }, 100, 100, 'cubicOut', function () { // done })\n         */\n         // TODO Return animation key\n        animateTo: function (target, time, delay, easing, callback) {\n            // animateTo(target, time, easing, callback);\n            if (isString(delay)) {\n                callback = easing;\n                easing = delay;\n                delay = 0;\n            }\n            // animateTo(target, time, delay, callback);\n            else if (isFunction(easing)) {\n                callback = easing;\n                easing = 'linear';\n                delay = 0;\n            }\n            // animateTo(target, time, callback);\n            else if (isFunction(delay)) {\n                callback = delay;\n                delay = 0;\n            }\n            // animateTo(target, callback)\n            else if (isFunction(time)) {\n                callback = time;\n                time = 500;\n            }\n            // animateTo(target)\n            else if (!time) {\n                time = 500;\n            }\n            // Stop all previous animations\n            this.stopAnimation();\n            this._animateToShallow('', this, target, time, delay, easing, callback);\n\n            // Animators may be removed immediately after start\n            // if there is nothing to animate\n            var animators = this.animators.slice();\n            var count = animators.length;\n            function done() {\n                count--;\n                if (!count) {\n                    callback && callback();\n                }\n            }\n\n            // No animators. This should be checked before animators[i].start(),\n            // because 'done' may be executed immediately if no need to animate.\n            if (!count) {\n                callback && callback();\n            }\n            // Start after all animators created\n            // Incase any animator is done immediately when all animation properties are not changed\n            for (var i = 0; i < animators.length; i++) {\n                animators[i]\n                    .done(done)\n                    .start(easing);\n            }\n        },\n\n        /**\n         * @private\n         * @param {string} path=''\n         * @param {Object} source=this\n         * @param {Object} target\n         * @param {number} [time=500]\n         * @param {number} [delay=0]\n         *\n         * @example\n         *  // Animate position\n         *  el._animateToShallow({\n         *      position: [10, 10]\n         *  })\n         *\n         *  // Animate shape, style and position in 100ms, delayed 100ms\n         *  el._animateToShallow({\n         *      shape: {\n         *          width: 500\n         *      },\n         *      style: {\n         *          fill: 'red'\n         *      }\n         *      position: [10, 10]\n         *  }, 100, 100)\n         */\n        _animateToShallow: function (path, source, target, time, delay) {\n            var objShallow = {};\n            var propertyCount = 0;\n            for (var name in target) {\n                if (!target.hasOwnProperty(name)) {\n                    continue;\n                }\n\n                if (source[name] != null) {\n                    if (isObject(target[name]) && !util.isArrayLike(target[name])) {\n                        this._animateToShallow(\n                            path ? path + '.' + name : name,\n                            source[name],\n                            target[name],\n                            time,\n                            delay\n                        );\n                    }\n                    else {\n                        objShallow[name] = target[name];\n                        propertyCount++;\n                    }\n                }\n                else if (target[name] != null) {\n                    // Attr directly if not has property\n                    // FIXME, if some property not needed for element ?\n                    if (!path) {\n                        this.attr(name, target[name]);\n                    }\n                    else {  // Shape or style\n                        var props = {};\n                        props[path] = {};\n                        props[path][name] = target[name];\n                        this.attr(props);\n                    }\n                }\n            }\n\n            if (propertyCount > 0) {\n                this.animate(path, false)\n                    .when(time == null ? 500 : time, objShallow)\n                    .delay(delay || 0);\n            }\n\n            return this;\n        }\n    };\n\n    module.exports = Animatable;\n\n\n/***/ }),\n\n/***/ \"oge2\":\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * @module zrender/graphic/shape/Polyline\n */\n\n\n    var polyHelper = __webpack_require__(\"bt+j\");\n\n    module.exports = __webpack_require__(\"CC7E\").extend({\n        \n        type: 'polyline',\n\n        shape: {\n            points: null,\n\n            smooth: false,\n\n            smoothConstraint: null\n        },\n\n        style: {\n            stroke: '#000',\n\n            fill: null\n        },\n\n        buildPath: function (ctx, shape) {\n            polyHelper.buildPath(ctx, shape, false);\n        }\n    });\n\n\n/***/ }),\n\n/***/ \"olP8\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n\n    var graphic = __webpack_require__(\"y2WT\");\n    var zrUtil = __webpack_require__(\"nw1Z\");\n    var echarts = __webpack_require__(\"Cwwa\");\n\n    __webpack_require__(\"OfUh\");\n\n    __webpack_require__(\"1QxH\");\n\n    // Grid view\n    echarts.extendComponentView({\n\n        type: 'grid',\n\n        render: function (gridModel, ecModel) {\n            this.group.removeAll();\n            if (gridModel.get('show')) {\n                this.group.add(new graphic.Rect({\n                    shape: gridModel.coordinateSystem.getRect(),\n                    style: zrUtil.defaults({\n                        fill: gridModel.get('backgroundColor')\n                    }, gridModel.getItemStyle()),\n                    silent: true,\n                    z2: -1\n                }));\n            }\n        }\n\n    });\n\n    echarts.registerPreprocessor(function (option) {\n        // Only create grid when need\n        if (option.xAxis && option.yAxis && !option.grid) {\n            option.grid = {};\n        }\n    });\n\n\n/***/ }),\n\n/***/ \"omlO\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\n    var getLineStyle = __webpack_require__(\"5hg5\")(\n        [\n            ['lineWidth', 'width'],\n            ['stroke', 'color'],\n            ['opacity'],\n            ['shadowBlur'],\n            ['shadowOffsetX'],\n            ['shadowOffsetY'],\n            ['shadowColor']\n        ]\n    );\n    module.exports = {\n        getLineStyle: function (excludes) {\n            var style = getLineStyle.call(this, excludes);\n            var lineDash = this.getLineDash(style.lineWidth);\n            lineDash && (style.lineDash = lineDash);\n            return style;\n        },\n\n        getLineDash: function (lineWidth) {\n            if (lineWidth == null) {\n                lineWidth = 1;\n            }\n            var lineType = this.get('type');\n            var dotSize = Math.max(lineWidth, 2);\n            var dashSize = lineWidth * 4;\n            return (lineType === 'solid' || lineType == null) ? null\n                : (lineType === 'dashed' ? [dashSize, dashSize] : [dotSize, dotSize]);\n        }\n    };\n\n\n/***/ }),\n\n/***/ \"p+9T\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n/**\n * Handler\n * @module zrender/Handler\n * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)\n *         errorrik (errorrik@gmail.com)\n *         pissang (shenyi.914@gmail.com)\n */\n\n\n    var util = __webpack_require__(\"nw1Z\");\n    var Draggable = __webpack_require__(\"06Ck\");\n\n    var Eventful = __webpack_require__(\"feXt\");\n\n    var SILENT = 'silent';\n\n    function makeEventPacket(eveType, targetInfo, event) {\n        return {\n            type: eveType,\n            event: event,\n            // target can only be an element that is not silent.\n            target: targetInfo.target,\n            // topTarget can be a silent element.\n            topTarget: targetInfo.topTarget,\n            cancelBubble: false,\n            offsetX: event.zrX,\n            offsetY: event.zrY,\n            gestureEvent: event.gestureEvent,\n            pinchX: event.pinchX,\n            pinchY: event.pinchY,\n            pinchScale: event.pinchScale,\n            wheelDelta: event.zrDelta,\n            zrByTouch: event.zrByTouch\n        };\n    }\n\n    function EmptyProxy () {}\n    EmptyProxy.prototype.dispose = function () {};\n\n    var handlerNames = [\n        'click', 'dblclick', 'mousewheel', 'mouseout',\n        'mouseup', 'mousedown', 'mousemove', 'contextmenu'\n    ];\n    /**\n     * @alias module:zrender/Handler\n     * @constructor\n     * @extends module:zrender/mixin/Eventful\n     * @param {module:zrender/Storage} storage Storage instance.\n     * @param {module:zrender/Painter} painter Painter instance.\n     * @param {module:zrender/dom/HandlerProxy} proxy HandlerProxy instance.\n     * @param {HTMLElement} painterRoot painter.root (not painter.getViewportRoot()).\n     */\n    var Handler = function(storage, painter, proxy, painterRoot) {\n        Eventful.call(this);\n\n        this.storage = storage;\n\n        this.painter = painter;\n\n        this.painterRoot = painterRoot;\n\n        proxy = proxy || new EmptyProxy();\n\n        /**\n         * Proxy of event. can be Dom, WebGLSurface, etc.\n         */\n        this.proxy = proxy;\n\n        // Attach handler\n        proxy.handler = this;\n\n        /**\n         * {target, topTarget}\n         * @private\n         * @type {Object}\n         */\n        this._hovered = {};\n\n        /**\n         * @private\n         * @type {Date}\n         */\n        this._lastTouchMoment;\n\n        /**\n         * @private\n         * @type {number}\n         */\n        this._lastX;\n\n        /**\n         * @private\n         * @type {number}\n         */\n        this._lastY;\n\n\n        Draggable.call(this);\n\n        util.each(handlerNames, function (name) {\n            proxy.on && proxy.on(name, this[name], this);\n        }, this);\n    };\n\n    Handler.prototype = {\n\n        constructor: Handler,\n\n        mousemove: function (event) {\n            var x = event.zrX;\n            var y = event.zrY;\n\n            var lastHovered = this._hovered;\n            var hovered = this._hovered = this.findHover(x, y);\n            var hoveredTarget = hovered.target;\n            var lastHoveredTarget = lastHovered.target;\n\n            var proxy = this.proxy;\n            proxy.setCursor && proxy.setCursor(hoveredTarget ? hoveredTarget.cursor : 'default');\n\n            // Mouse out on previous hovered element\n            if (lastHoveredTarget && hoveredTarget !== lastHoveredTarget && lastHoveredTarget.__zr) {\n                this.dispatchToElement(lastHovered, 'mouseout', event);\n            }\n\n            // Mouse moving on one element\n            this.dispatchToElement(hovered, 'mousemove', event);\n\n            // Mouse over on a new element\n            if (hoveredTarget && hoveredTarget !== lastHoveredTarget) {\n                this.dispatchToElement(hovered, 'mouseover', event);\n            }\n        },\n\n        mouseout: function (event) {\n            this.dispatchToElement(this._hovered, 'mouseout', event);\n\n            // There might be some doms created by upper layer application\n            // at the same level of painter.getViewportRoot() (e.g., tooltip\n            // dom created by echarts), where 'globalout' event should not\n            // be triggered when mouse enters these doms. (But 'mouseout'\n            // should be triggered at the original hovered element as usual).\n            var element = event.toElement || event.relatedTarget;\n            var innerDom;\n            do {\n                element = element && element.parentNode;\n            }\n            while (element && element.nodeType != 9 && !(\n                innerDom = element === this.painterRoot\n            ));\n\n            !innerDom && this.trigger('globalout', {event: event});\n        },\n\n        /**\n         * Resize\n         */\n        resize: function (event) {\n            this._hovered = {};\n        },\n\n        /**\n         * Dispatch event\n         * @param {string} eventName\n         * @param {event=} eventArgs\n         */\n        dispatch: function (eventName, eventArgs) {\n            var handler = this[eventName];\n            handler && handler.call(this, eventArgs);\n        },\n\n        /**\n         * Dispose\n         */\n        dispose: function () {\n\n            this.proxy.dispose();\n\n            this.storage =\n            this.proxy =\n            this.painter = null;\n        },\n\n        /**\n         * 设置默认的cursor style\n         * @param {string} [cursorStyle='default'] 例如 crosshair\n         */\n        setCursorStyle: function (cursorStyle) {\n            var proxy = this.proxy;\n            proxy.setCursor && proxy.setCursor(cursorStyle);\n        },\n\n        /**\n         * 事件分发代理\n         *\n         * @private\n         * @param {Object} targetInfo {target, topTarget} 目标图形元素\n         * @param {string} eventName 事件名称\n         * @param {Object} event 事件对象\n         */\n        dispatchToElement: function (targetInfo, eventName, event) {\n            targetInfo = targetInfo || {};\n            var eventHandler = 'on' + eventName;\n            var eventPacket = makeEventPacket(eventName, targetInfo, event);\n\n            var el = targetInfo.target;\n            while (el) {\n                el[eventHandler]\n                    && (eventPacket.cancelBubble = el[eventHandler].call(el, eventPacket));\n\n                el.trigger(eventName, eventPacket);\n\n                el = el.parent;\n\n                if (eventPacket.cancelBubble) {\n                    break;\n                }\n            }\n\n            if (!eventPacket.cancelBubble) {\n                // 冒泡到顶级 zrender 对象\n                this.trigger(eventName, eventPacket);\n                // 分发事件到用户自定义层\n                // 用户有可能在全局 click 事件中 dispose，所以需要判断下 painter 是否存在\n                this.painter && this.painter.eachOtherLayer(function (layer) {\n                    if (typeof(layer[eventHandler]) == 'function') {\n                        layer[eventHandler].call(layer, eventPacket);\n                    }\n                    if (layer.trigger) {\n                        layer.trigger(eventName, eventPacket);\n                    }\n                });\n            }\n        },\n\n        /**\n         * @private\n         * @param {number} x\n         * @param {number} y\n         * @param {module:zrender/graphic/Displayable} exclude\n         * @return {model:zrender/Element}\n         * @method\n         */\n        findHover: function(x, y, exclude) {\n            var list = this.storage.getDisplayList();\n            var out = {};\n\n            for (var i = list.length - 1; i >= 0 ; i--) {\n                var hoverCheckResult;\n                if (list[i] !== exclude\n                    // getDisplayList may include ignored item in VML mode\n                    && !list[i].ignore\n                    && (hoverCheckResult = isHover(list[i], x, y))\n                ) {\n                    !out.topTarget && (out.topTarget = list[i]);\n                    if (hoverCheckResult !== SILENT) {\n                        out.target = list[i];\n                        break;\n                    }\n                }\n            }\n\n            return out;\n        }\n    };\n\n    // Common handlers\n    util.each(['click', 'mousedown', 'mouseup', 'mousewheel', 'dblclick', 'contextmenu'], function (name) {\n        Handler.prototype[name] = function (event) {\n            // Find hover again to avoid click event is dispatched manually. Or click is triggered without mouseover\n            var hovered = this.findHover(event.zrX, event.zrY);\n            var hoveredTarget = hovered.target;\n\n            if (name === 'mousedown') {\n                this._downel = hoveredTarget;\n                // In case click triggered before mouseup\n                this._upel = hoveredTarget;\n            }\n            else if (name === 'mosueup') {\n                this._upel = hoveredTarget;\n            }\n            else if (name === 'click') {\n                if (this._downel !== this._upel) {\n                    return;\n                }\n            }\n\n            this.dispatchToElement(hovered, name, event);\n        };\n    });\n\n    function isHover(displayable, x, y) {\n        if (displayable[displayable.rectHover ? 'rectContain' : 'contain'](x, y)) {\n            var el = displayable;\n            var isSilent;\n            while (el) {\n                // If clipped by ancestor.\n                // FIXME: If clipPath has neither stroke nor fill,\n                // el.clipPath.contain(x, y) will always return false.\n                if (el.clipPath && !el.clipPath.contain(x, y))  {\n                    return false;\n                }\n                if (el.silent) {\n                    isSilent = true;\n                }\n                el = el.parent;\n            }\n            return isSilent ? SILENT : true;\n        }\n\n        return false;\n    }\n\n    util.mixin(Handler, Eventful);\n    util.mixin(Handler, Draggable);\n\n    module.exports = Handler;\n\n\n\n/***/ }),\n\n/***/ \"pt00\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\n    var echarts = __webpack_require__(\"Cwwa\");\n    var axisPointerModelHelper = __webpack_require__(\"Rj1V\");\n    var axisTrigger = __webpack_require__(\"xLXz\");\n    var zrUtil = __webpack_require__(\"nw1Z\");\n\n    __webpack_require__(\"ZCII\");\n    __webpack_require__(\"ai9K\");\n\n    // CartesianAxisPointer is not supposed to be required here. But consider\n    // echarts.simple.js and online build tooltip, which only require gridSimple,\n    // CartesianAxisPointer should be able to required somewhere.\n    __webpack_require__(\"wLby\");\n\n    echarts.registerPreprocessor(function (option) {\n        // Always has a global axisPointerModel for default setting.\n        if (option) {\n            (!option.axisPointer || option.axisPointer.length === 0)\n                && (option.axisPointer = {});\n\n            var link = option.axisPointer.link;\n            // Normalize to array to avoid object mergin. But if link\n            // is not set, remain null/undefined, otherwise it will\n            // override existent link setting.\n            if (link && !zrUtil.isArray(link)) {\n                option.axisPointer.link = [link];\n            }\n        }\n    });\n\n    // This process should proformed after coordinate systems created\n    // and series data processed. So put it on statistic processing stage.\n    echarts.registerProcessor(echarts.PRIORITY.PROCESSOR.STATISTIC, function (ecModel, api) {\n        // Build axisPointerModel, mergin tooltip.axisPointer model for each axis.\n        // allAxesInfo should be updated when setOption performed.\n        ecModel.getComponent('axisPointer').coordSysAxesInfo\n            = axisPointerModelHelper.collect(ecModel, api);\n    });\n\n    // Broadcast to all views.\n    echarts.registerAction({\n        type: 'updateAxisPointer',\n        event: 'updateAxisPointer',\n        update: ':updateAxisPointer'\n    }, function (payload, ecModel, api) {\n        var outputFinder = axisTrigger(\n            ecModel.getComponent('axisPointer').coordSysAxesInfo,\n            payload.currTrigger,\n            [payload.x, payload.y],\n            payload,\n            payload.dispatchAction || zrUtil.bind(api.dispatchAction, api),\n            ecModel,\n            api,\n            payload.tooltipOption\n        );\n\n        return outputFinder;\n    });\n\n\n\n/***/ }),\n\n/***/ \"pwBP\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n\n    var List = __webpack_require__(\"LgKv\");\n    var completeDimensions = __webpack_require__(\"Qajf\");\n    var zrUtil = __webpack_require__(\"nw1Z\");\n    var modelUtil = __webpack_require__(\"LFYx\");\n    var CoordinateSystem = __webpack_require__(\"o/Er\");\n    var getDataItemValue = modelUtil.getDataItemValue;\n    var converDataValue = modelUtil.converDataValue;\n\n    function firstDataNotNull(data) {\n        var i = 0;\n        while (i < data.length && data[i] == null) {\n            i++;\n        }\n        return data[i];\n    }\n    function ifNeedCompleteOrdinalData(data) {\n        var sampleItem = firstDataNotNull(data);\n        return sampleItem != null\n            && !zrUtil.isArray(getDataItemValue(sampleItem));\n    }\n\n    /**\n     * Helper function to create a list from option data\n     */\n    function createListFromArray(data, seriesModel, ecModel) {\n        // If data is undefined\n        data = data || [];\n\n        if (__DEV__) {\n            if (!zrUtil.isArray(data)) {\n                throw new Error('Invalid data.');\n            }\n        }\n\n        var coordSysName = seriesModel.get('coordinateSystem');\n        var creator = creators[coordSysName];\n        var registeredCoordSys = CoordinateSystem.get(coordSysName);\n        var completeDimOpt = {\n            encodeDef: seriesModel.get('encode'),\n            dimsDef: seriesModel.get('dimensions')\n        };\n\n        // FIXME\n        var axesInfo = creator && creator(data, seriesModel, ecModel, completeDimOpt);\n        var dimensions = axesInfo && axesInfo.dimensions;\n        if (!dimensions) {\n            // Get dimensions from registered coordinate system\n            dimensions = (registeredCoordSys && (\n                registeredCoordSys.getDimensionsInfo\n                    ? registeredCoordSys.getDimensionsInfo()\n                    : registeredCoordSys.dimensions.slice()\n            )) || ['x', 'y'];\n            dimensions = completeDimensions(dimensions, data, completeDimOpt);\n        }\n\n        var categoryIndex = axesInfo ? axesInfo.categoryIndex : -1;\n\n        var list = new List(dimensions, seriesModel);\n\n        var nameList = createNameList(axesInfo, data);\n\n        var categories = {};\n        var dimValueGetter = (categoryIndex >= 0 && ifNeedCompleteOrdinalData(data))\n            ? function (itemOpt, dimName, dataIndex, dimIndex) {\n                // If any dataItem is like { value: 10 }\n                if (modelUtil.isDataItemOption(itemOpt)) {\n                    list.hasItemOption = true;\n                }\n\n                // Use dataIndex as ordinal value in categoryAxis\n                return dimIndex === categoryIndex\n                    ? dataIndex\n                    : converDataValue(getDataItemValue(itemOpt), dimensions[dimIndex]);\n            }\n            : function (itemOpt, dimName, dataIndex, dimIndex) {\n                var value = getDataItemValue(itemOpt);\n                var val = converDataValue(value && value[dimIndex], dimensions[dimIndex]);\n                // If any dataItem is like { value: 10 }\n                if (modelUtil.isDataItemOption(itemOpt)) {\n                    list.hasItemOption = true;\n                }\n\n                var categoryAxesModels = axesInfo && axesInfo.categoryAxesModels;\n                if (categoryAxesModels && categoryAxesModels[dimName]) {\n                    // If given value is a category string\n                    if (typeof val === 'string') {\n                        // Lazy get categories\n                        categories[dimName] = categories[dimName]\n                            || categoryAxesModels[dimName].getCategories();\n                        val = zrUtil.indexOf(categories[dimName], val);\n                        if (val < 0 && !isNaN(val)) {\n                            // In case some one write '1', '2' istead of 1, 2\n                            val = +val;\n                        }\n                    }\n                }\n                return val;\n            };\n\n        list.hasItemOption = false;\n        list.initData(data, nameList, dimValueGetter);\n\n        return list;\n    }\n\n    function isStackable(axisType) {\n        return axisType !== 'category' && axisType !== 'time';\n    }\n\n    function getDimTypeByAxis(axisType) {\n        return axisType === 'category'\n            ? 'ordinal'\n            : axisType === 'time'\n            ? 'time'\n            : 'float';\n    }\n\n    /**\n     * Creaters for each coord system.\n     */\n    var creators = {\n\n        cartesian2d: function (data, seriesModel, ecModel, completeDimOpt) {\n\n            var axesModels = zrUtil.map(['xAxis', 'yAxis'], function (name) {\n                return ecModel.queryComponents({\n                    mainType: name,\n                    index: seriesModel.get(name + 'Index'),\n                    id: seriesModel.get(name + 'Id')\n                })[0];\n            });\n            var xAxisModel = axesModels[0];\n            var yAxisModel = axesModels[1];\n\n            if (__DEV__) {\n                if (!xAxisModel) {\n                    throw new Error('xAxis \"' + zrUtil.retrieve(\n                        seriesModel.get('xAxisIndex'),\n                        seriesModel.get('xAxisId'),\n                        0\n                    ) + '\" not found');\n                }\n                if (!yAxisModel) {\n                    throw new Error('yAxis \"' + zrUtil.retrieve(\n                        seriesModel.get('xAxisIndex'),\n                        seriesModel.get('yAxisId'),\n                        0\n                    ) + '\" not found');\n                }\n            }\n\n            var xAxisType = xAxisModel.get('type');\n            var yAxisType = yAxisModel.get('type');\n\n            var dimensions = [\n                {\n                    name: 'x',\n                    type: getDimTypeByAxis(xAxisType),\n                    stackable: isStackable(xAxisType)\n                },\n                {\n                    name: 'y',\n                    // If two category axes\n                    type: getDimTypeByAxis(yAxisType),\n                    stackable: isStackable(yAxisType)\n                }\n            ];\n\n            var isXAxisCateogry = xAxisType === 'category';\n            var isYAxisCategory = yAxisType === 'category';\n\n            dimensions = completeDimensions(dimensions, data, completeDimOpt);\n\n            var categoryAxesModels = {};\n            if (isXAxisCateogry) {\n                categoryAxesModels.x = xAxisModel;\n            }\n            if (isYAxisCategory) {\n                categoryAxesModels.y = yAxisModel;\n            }\n            return {\n                dimensions: dimensions,\n                categoryIndex: isXAxisCateogry ? 0 : (isYAxisCategory ? 1 : -1),\n                categoryAxesModels: categoryAxesModels\n            };\n        },\n\n        singleAxis: function (data, seriesModel, ecModel, completeDimOpt) {\n\n            var singleAxisModel = ecModel.queryComponents({\n                mainType: 'singleAxis',\n                index: seriesModel.get('singleAxisIndex'),\n                id: seriesModel.get('singleAxisId')\n            })[0];\n\n            if (__DEV__) {\n                if (!singleAxisModel) {\n                    throw new Error('singleAxis should be specified.');\n                }\n            }\n\n            var singleAxisType = singleAxisModel.get('type');\n            var isCategory = singleAxisType === 'category';\n\n            var dimensions = [{\n                name: 'single',\n                type: getDimTypeByAxis(singleAxisType),\n                stackable: isStackable(singleAxisType)\n            }];\n\n            dimensions = completeDimensions(dimensions, data, completeDimOpt);\n\n            var categoryAxesModels = {};\n            if (isCategory) {\n                categoryAxesModels.single = singleAxisModel;\n            }\n\n            return {\n                dimensions: dimensions,\n                categoryIndex: isCategory ? 0 : -1,\n                categoryAxesModels: categoryAxesModels\n            };\n        },\n\n        polar: function (data, seriesModel, ecModel, completeDimOpt) {\n            var polarModel = ecModel.queryComponents({\n                mainType: 'polar',\n                index: seriesModel.get('polarIndex'),\n                id: seriesModel.get('polarId')\n            })[0];\n\n            var angleAxisModel = polarModel.findAxisModel('angleAxis');\n            var radiusAxisModel = polarModel.findAxisModel('radiusAxis');\n\n            if (__DEV__) {\n                if (!angleAxisModel) {\n                    throw new Error('angleAxis option not found');\n                }\n                if (!radiusAxisModel) {\n                    throw new Error('radiusAxis option not found');\n                }\n            }\n\n            var radiusAxisType = radiusAxisModel.get('type');\n            var angleAxisType = angleAxisModel.get('type');\n\n            var dimensions = [\n                {\n                    name: 'radius',\n                    type: getDimTypeByAxis(radiusAxisType),\n                    stackable: isStackable(radiusAxisType)\n                },\n                {\n                    name: 'angle',\n                    type: getDimTypeByAxis(angleAxisType),\n                    stackable: isStackable(angleAxisType)\n                }\n            ];\n            var isAngleAxisCateogry = angleAxisType === 'category';\n            var isRadiusAxisCateogry = radiusAxisType === 'category';\n\n            dimensions = completeDimensions(dimensions, data, completeDimOpt);\n\n            var categoryAxesModels = {};\n            if (isRadiusAxisCateogry) {\n                categoryAxesModels.radius = radiusAxisModel;\n            }\n            if (isAngleAxisCateogry) {\n                categoryAxesModels.angle = angleAxisModel;\n            }\n            return {\n                dimensions: dimensions,\n                categoryIndex: isAngleAxisCateogry ? 1 : (isRadiusAxisCateogry ? 0 : -1),\n                categoryAxesModels: categoryAxesModels\n            };\n        },\n\n        geo: function (data, seriesModel, ecModel, completeDimOpt) {\n            // TODO Region\n            // 多个散点图系列在同一个地区的时候\n            return {\n                dimensions: completeDimensions([\n                    {name: 'lng'},\n                    {name: 'lat'}\n                ], data, completeDimOpt)\n            };\n        }\n    };\n\n    function createNameList(result, data) {\n        var nameList = [];\n\n        var categoryDim = result && result.dimensions[result.categoryIndex];\n        var categoryAxisModel;\n        if (categoryDim) {\n            categoryAxisModel = result.categoryAxesModels[categoryDim.name];\n        }\n\n        if (categoryAxisModel) {\n            // FIXME Two category axis\n            var categories = categoryAxisModel.getCategories();\n            if (categories) {\n                var dataLen = data.length;\n                // Ordered data is given explicitly like\n                // [[3, 0.2], [1, 0.3], [2, 0.15]]\n                // or given scatter data,\n                // pick the category\n                if (zrUtil.isArray(data[0]) && data[0].length > 1) {\n                    nameList = [];\n                    for (var i = 0; i < dataLen; i++) {\n                        nameList[i] = categories[data[i][result.categoryIndex || 0]];\n                    }\n                }\n                else {\n                    nameList = categories.slice(0);\n                }\n            }\n        }\n\n        return nameList;\n    }\n\n    module.exports = createListFromArray;\n\n\n\n/***/ }),\n\n/***/ \"qLdl\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\n\n    var getBarItemStyle = __webpack_require__(\"5hg5\")(\n        [\n            ['fill', 'color'],\n            ['stroke', 'borderColor'],\n            ['lineWidth', 'borderWidth'],\n            // Compatitable with 2\n            ['stroke', 'barBorderColor'],\n            ['lineWidth', 'barBorderWidth'],\n            ['opacity'],\n            ['shadowBlur'],\n            ['shadowOffsetX'],\n            ['shadowOffsetY'],\n            ['shadowColor']\n        ]\n    );\n    module.exports = {\n        getBarItemStyle: function (excludes) {\n            var style = getBarItemStyle.call(this, excludes);\n            if (this.getBorderLineDash) {\n                var lineDash = this.getBorderLineDash();\n                lineDash && (style.lineDash = lineDash);\n            }\n            return style;\n        }\n    };\n\n\n/***/ }),\n\n/***/ \"qYWS\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n/**\n * 动画主类, 调度和管理所有动画控制器\n *\n * @module zrender/animation/Animation\n * @author pissang(https://github.com/pissang)\n */\n// TODO Additive animation\n// http://iosoteric.com/additive-animations-animatewithduration-in-ios-8/\n// https://developer.apple.com/videos/wwdc2014/#236\n\n\n    var util = __webpack_require__(\"nw1Z\");\n    var Dispatcher = __webpack_require__(\"kawL\").Dispatcher;\n\n    var requestAnimationFrame = __webpack_require__(\"BgTn\");\n\n    var Animator = __webpack_require__(\"qf1S\");\n    /**\n     * @typedef {Object} IZRenderStage\n     * @property {Function} update\n     */\n\n    /**\n     * @alias module:zrender/animation/Animation\n     * @constructor\n     * @param {Object} [options]\n     * @param {Function} [options.onframe]\n     * @param {IZRenderStage} [options.stage]\n     * @example\n     *     var animation = new Animation();\n     *     var obj = {\n     *         x: 100,\n     *         y: 100\n     *     };\n     *     animation.animate(node.position)\n     *         .when(1000, {\n     *             x: 500,\n     *             y: 500\n     *         })\n     *         .when(2000, {\n     *             x: 100,\n     *             y: 100\n     *         })\n     *         .start('spline');\n     */\n    var Animation = function (options) {\n\n        options = options || {};\n\n        this.stage = options.stage || {};\n\n        this.onframe = options.onframe || function() {};\n\n        // private properties\n        this._clips = [];\n\n        this._running = false;\n\n        this._time;\n\n        this._pausedTime;\n\n        this._pauseStart;\n\n        this._paused = false;\n\n        Dispatcher.call(this);\n    };\n\n    Animation.prototype = {\n\n        constructor: Animation,\n        /**\n         * 添加 clip\n         * @param {module:zrender/animation/Clip} clip\n         */\n        addClip: function (clip) {\n            this._clips.push(clip);\n        },\n        /**\n         * 添加 animator\n         * @param {module:zrender/animation/Animator} animator\n         */\n        addAnimator: function (animator) {\n            animator.animation = this;\n            var clips = animator.getClips();\n            for (var i = 0; i < clips.length; i++) {\n                this.addClip(clips[i]);\n            }\n        },\n        /**\n         * 删除动画片段\n         * @param {module:zrender/animation/Clip} clip\n         */\n        removeClip: function(clip) {\n            var idx = util.indexOf(this._clips, clip);\n            if (idx >= 0) {\n                this._clips.splice(idx, 1);\n            }\n        },\n\n        /**\n         * 删除动画片段\n         * @param {module:zrender/animation/Animator} animator\n         */\n        removeAnimator: function (animator) {\n            var clips = animator.getClips();\n            for (var i = 0; i < clips.length; i++) {\n                this.removeClip(clips[i]);\n            }\n            animator.animation = null;\n        },\n\n        _update: function() {\n\n            var time = new Date().getTime() - this._pausedTime;\n            var delta = time - this._time;\n            var clips = this._clips;\n            var len = clips.length;\n\n            var deferredEvents = [];\n            var deferredClips = [];\n            for (var i = 0; i < len; i++) {\n                var clip = clips[i];\n                var e = clip.step(time, delta);\n                // Throw out the events need to be called after\n                // stage.update, like destroy\n                if (e) {\n                    deferredEvents.push(e);\n                    deferredClips.push(clip);\n                }\n            }\n\n            // Remove the finished clip\n            for (var i = 0; i < len;) {\n                if (clips[i]._needsRemove) {\n                    clips[i] = clips[len - 1];\n                    clips.pop();\n                    len--;\n                }\n                else {\n                    i++;\n                }\n            }\n\n            len = deferredEvents.length;\n            for (var i = 0; i < len; i++) {\n                deferredClips[i].fire(deferredEvents[i]);\n            }\n\n            this._time = time;\n\n            this.onframe(delta);\n\n            this.trigger('frame', delta);\n\n            if (this.stage.update) {\n                this.stage.update();\n            }\n        },\n\n        _startLoop: function () {\n            var self = this;\n\n            this._running = true;\n\n            function step() {\n                if (self._running) {\n\n                    requestAnimationFrame(step);\n\n                    !self._paused && self._update();\n                }\n            }\n\n            requestAnimationFrame(step);\n        },\n\n        /**\n         * 开始运行动画\n         */\n        start: function () {\n\n            this._time = new Date().getTime();\n            this._pausedTime = 0;\n\n            this._startLoop();\n        },\n        /**\n         * 停止运行动画\n         */\n        stop: function () {\n            this._running = false;\n        },\n\n        /**\n         * Pause\n         */\n        pause: function () {\n            if (!this._paused) {\n                this._pauseStart = new Date().getTime();\n                this._paused = true;\n            }\n        },\n\n        /**\n         * Resume\n         */\n        resume: function () {\n            if (this._paused) {\n                this._pausedTime += (new Date().getTime()) - this._pauseStart;\n                this._paused = false;\n            }\n        },\n\n        /**\n         * 清除所有动画片段\n         */\n        clear: function () {\n            this._clips = [];\n        },\n        /**\n         * 对一个目标创建一个animator对象，可以指定目标中的属性使用动画\n         * @param  {Object} target\n         * @param  {Object} options\n         * @param  {boolean} [options.loop=false] 是否循环播放动画\n         * @param  {Function} [options.getter=null]\n         *         如果指定getter函数，会通过getter函数取属性值\n         * @param  {Function} [options.setter=null]\n         *         如果指定setter函数，会通过setter函数设置属性值\n         * @return {module:zrender/animation/Animation~Animator}\n         */\n        // TODO Gap\n        animate: function (target, options) {\n            options = options || {};\n\n            var animator = new Animator(\n                target,\n                options.loop,\n                options.getter,\n                options.setter\n            );\n\n            this.addAnimator(animator);\n\n            return animator;\n        }\n    };\n\n    util.mixin(Animation, Dispatcher);\n\n    module.exports = Animation;\n\n\n\n/***/ }),\n\n/***/ \"qf1S\":\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * @module echarts/animation/Animator\n */\n\n\n    var Clip = __webpack_require__(\"6UAp\");\n    var color = __webpack_require__(\"cwCJ\");\n    var util = __webpack_require__(\"nw1Z\");\n    var isArrayLike = util.isArrayLike;\n\n    var arraySlice = Array.prototype.slice;\n\n    function defaultGetter(target, key) {\n        return target[key];\n    }\n\n    function defaultSetter(target, key, value) {\n        target[key] = value;\n    }\n\n    /**\n     * @param  {number} p0\n     * @param  {number} p1\n     * @param  {number} percent\n     * @return {number}\n     */\n    function interpolateNumber(p0, p1, percent) {\n        return (p1 - p0) * percent + p0;\n    }\n\n    /**\n     * @param  {string} p0\n     * @param  {string} p1\n     * @param  {number} percent\n     * @return {string}\n     */\n    function interpolateString(p0, p1, percent) {\n        return percent > 0.5 ? p1 : p0;\n    }\n\n    /**\n     * @param  {Array} p0\n     * @param  {Array} p1\n     * @param  {number} percent\n     * @param  {Array} out\n     * @param  {number} arrDim\n     */\n    function interpolateArray(p0, p1, percent, out, arrDim) {\n        var len = p0.length;\n        if (arrDim == 1) {\n            for (var i = 0; i < len; i++) {\n                out[i] = interpolateNumber(p0[i], p1[i], percent);\n            }\n        }\n        else {\n            var len2 = len && p0[0].length;\n            for (var i = 0; i < len; i++) {\n                for (var j = 0; j < len2; j++) {\n                    out[i][j] = interpolateNumber(\n                        p0[i][j], p1[i][j], percent\n                    );\n                }\n            }\n        }\n    }\n\n    // arr0 is source array, arr1 is target array.\n    // Do some preprocess to avoid error happened when interpolating from arr0 to arr1\n    function fillArr(arr0, arr1, arrDim) {\n        var arr0Len = arr0.length;\n        var arr1Len = arr1.length;\n        if (arr0Len !== arr1Len) {\n            // FIXME Not work for TypedArray\n            var isPreviousLarger = arr0Len > arr1Len;\n            if (isPreviousLarger) {\n                // Cut the previous\n                arr0.length = arr1Len;\n            }\n            else {\n                // Fill the previous\n                for (var i = arr0Len; i < arr1Len; i++) {\n                    arr0.push(\n                        arrDim === 1 ? arr1[i] : arraySlice.call(arr1[i])\n                    );\n                }\n            }\n        }\n        // Handling NaN value\n        var len2 = arr0[0] && arr0[0].length;\n        for (var i = 0; i < arr0.length; i++) {\n            if (arrDim === 1) {\n                if (isNaN(arr0[i])) {\n                    arr0[i] = arr1[i];\n                }\n            }\n            else {\n                for (var j = 0; j < len2; j++) {\n                    if (isNaN(arr0[i][j])) {\n                        arr0[i][j] = arr1[i][j];\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * @param  {Array} arr0\n     * @param  {Array} arr1\n     * @param  {number} arrDim\n     * @return {boolean}\n     */\n    function isArraySame(arr0, arr1, arrDim) {\n        if (arr0 === arr1) {\n            return true;\n        }\n        var len = arr0.length;\n        if (len !== arr1.length) {\n            return false;\n        }\n        if (arrDim === 1) {\n            for (var i = 0; i < len; i++) {\n                if (arr0[i] !== arr1[i]) {\n                    return false;\n                }\n            }\n        }\n        else {\n            var len2 = arr0[0].length;\n            for (var i = 0; i < len; i++) {\n                for (var j = 0; j < len2; j++) {\n                    if (arr0[i][j] !== arr1[i][j]) {\n                        return false;\n                    }\n                }\n            }\n        }\n        return true;\n    }\n\n    /**\n     * Catmull Rom interpolate array\n     * @param  {Array} p0\n     * @param  {Array} p1\n     * @param  {Array} p2\n     * @param  {Array} p3\n     * @param  {number} t\n     * @param  {number} t2\n     * @param  {number} t3\n     * @param  {Array} out\n     * @param  {number} arrDim\n     */\n    function catmullRomInterpolateArray(\n        p0, p1, p2, p3, t, t2, t3, out, arrDim\n    ) {\n        var len = p0.length;\n        if (arrDim == 1) {\n            for (var i = 0; i < len; i++) {\n                out[i] = catmullRomInterpolate(\n                    p0[i], p1[i], p2[i], p3[i], t, t2, t3\n                );\n            }\n        }\n        else {\n            var len2 = p0[0].length;\n            for (var i = 0; i < len; i++) {\n                for (var j = 0; j < len2; j++) {\n                    out[i][j] = catmullRomInterpolate(\n                        p0[i][j], p1[i][j], p2[i][j], p3[i][j],\n                        t, t2, t3\n                    );\n                }\n            }\n        }\n    }\n\n    /**\n     * Catmull Rom interpolate number\n     * @param  {number} p0\n     * @param  {number} p1\n     * @param  {number} p2\n     * @param  {number} p3\n     * @param  {number} t\n     * @param  {number} t2\n     * @param  {number} t3\n     * @return {number}\n     */\n    function catmullRomInterpolate(p0, p1, p2, p3, t, t2, t3) {\n        var v0 = (p2 - p0) * 0.5;\n        var v1 = (p3 - p1) * 0.5;\n        return (2 * (p1 - p2) + v0 + v1) * t3\n                + (-3 * (p1 - p2) - 2 * v0 - v1) * t2\n                + v0 * t + p1;\n    }\n\n    function cloneValue(value) {\n        if (isArrayLike(value)) {\n            var len = value.length;\n            if (isArrayLike(value[0])) {\n                var ret = [];\n                for (var i = 0; i < len; i++) {\n                    ret.push(arraySlice.call(value[i]));\n                }\n                return ret;\n            }\n\n            return arraySlice.call(value);\n        }\n\n        return value;\n    }\n\n    function rgba2String(rgba) {\n        rgba[0] = Math.floor(rgba[0]);\n        rgba[1] = Math.floor(rgba[1]);\n        rgba[2] = Math.floor(rgba[2]);\n\n        return 'rgba(' + rgba.join(',') + ')';\n    }\n\n    function getArrayDim(keyframes) {\n        var lastValue = keyframes[keyframes.length - 1].value;\n        return isArrayLike(lastValue && lastValue[0]) ? 2 : 1;\n    }\n\n    function createTrackClip (animator, easing, oneTrackDone, keyframes, propName) {\n        var getter = animator._getter;\n        var setter = animator._setter;\n        var useSpline = easing === 'spline';\n\n        var trackLen = keyframes.length;\n        if (!trackLen) {\n            return;\n        }\n        // Guess data type\n        var firstVal = keyframes[0].value;\n        var isValueArray = isArrayLike(firstVal);\n        var isValueColor = false;\n        var isValueString = false;\n\n        // For vertices morphing\n        var arrDim = isValueArray ? getArrayDim(keyframes) : 0;\n\n        var trackMaxTime;\n        // Sort keyframe as ascending\n        keyframes.sort(function(a, b) {\n            return a.time - b.time;\n        });\n\n        trackMaxTime = keyframes[trackLen - 1].time;\n        // Percents of each keyframe\n        var kfPercents = [];\n        // Value of each keyframe\n        var kfValues = [];\n        var prevValue = keyframes[0].value;\n        var isAllValueEqual = true;\n        for (var i = 0; i < trackLen; i++) {\n            kfPercents.push(keyframes[i].time / trackMaxTime);\n            // Assume value is a color when it is a string\n            var value = keyframes[i].value;\n\n            // Check if value is equal, deep check if value is array\n            if (!((isValueArray && isArraySame(value, prevValue, arrDim))\n                || (!isValueArray && value === prevValue))) {\n                isAllValueEqual = false;\n            }\n            prevValue = value;\n\n            // Try converting a string to a color array\n            if (typeof value == 'string') {\n                var colorArray = color.parse(value);\n                if (colorArray) {\n                    value = colorArray;\n                    isValueColor = true;\n                }\n                else {\n                    isValueString = true;\n                }\n            }\n            kfValues.push(value);\n        }\n        if (isAllValueEqual) {\n            return;\n        }\n\n        var lastValue = kfValues[trackLen - 1];\n        // Polyfill array and NaN value\n        for (var i = 0; i < trackLen - 1; i++) {\n            if (isValueArray) {\n                fillArr(kfValues[i], lastValue, arrDim);\n            }\n            else {\n                if (isNaN(kfValues[i]) && !isNaN(lastValue) && !isValueString && !isValueColor) {\n                    kfValues[i] = lastValue;\n                }\n            }\n        }\n        isValueArray && fillArr(getter(animator._target, propName), lastValue, arrDim);\n\n        // Cache the key of last frame to speed up when\n        // animation playback is sequency\n        var lastFrame = 0;\n        var lastFramePercent = 0;\n        var start;\n        var w;\n        var p0;\n        var p1;\n        var p2;\n        var p3;\n\n        if (isValueColor) {\n            var rgba = [0, 0, 0, 0];\n        }\n\n        var onframe = function (target, percent) {\n            // Find the range keyframes\n            // kf1-----kf2---------current--------kf3\n            // find kf2 and kf3 and do interpolation\n            var frame;\n            // In the easing function like elasticOut, percent may less than 0\n            if (percent < 0) {\n                frame = 0;\n            }\n            else if (percent < lastFramePercent) {\n                // Start from next key\n                // PENDING start from lastFrame ?\n                start = Math.min(lastFrame + 1, trackLen - 1);\n                for (frame = start; frame >= 0; frame--) {\n                    if (kfPercents[frame] <= percent) {\n                        break;\n                    }\n                }\n                // PENDING really need to do this ?\n                frame = Math.min(frame, trackLen - 2);\n            }\n            else {\n                for (frame = lastFrame; frame < trackLen; frame++) {\n                    if (kfPercents[frame] > percent) {\n                        break;\n                    }\n                }\n                frame = Math.min(frame - 1, trackLen - 2);\n            }\n            lastFrame = frame;\n            lastFramePercent = percent;\n\n            var range = (kfPercents[frame + 1] - kfPercents[frame]);\n            if (range === 0) {\n                return;\n            }\n            else {\n                w = (percent - kfPercents[frame]) / range;\n            }\n            if (useSpline) {\n                p1 = kfValues[frame];\n                p0 = kfValues[frame === 0 ? frame : frame - 1];\n                p2 = kfValues[frame > trackLen - 2 ? trackLen - 1 : frame + 1];\n                p3 = kfValues[frame > trackLen - 3 ? trackLen - 1 : frame + 2];\n                if (isValueArray) {\n                    catmullRomInterpolateArray(\n                        p0, p1, p2, p3, w, w * w, w * w * w,\n                        getter(target, propName),\n                        arrDim\n                    );\n                }\n                else {\n                    var value;\n                    if (isValueColor) {\n                        value = catmullRomInterpolateArray(\n                            p0, p1, p2, p3, w, w * w, w * w * w,\n                            rgba, 1\n                        );\n                        value = rgba2String(rgba);\n                    }\n                    else if (isValueString) {\n                        // String is step(0.5)\n                        return interpolateString(p1, p2, w);\n                    }\n                    else {\n                        value = catmullRomInterpolate(\n                            p0, p1, p2, p3, w, w * w, w * w * w\n                        );\n                    }\n                    setter(\n                        target,\n                        propName,\n                        value\n                    );\n                }\n            }\n            else {\n                if (isValueArray) {\n                    interpolateArray(\n                        kfValues[frame], kfValues[frame + 1], w,\n                        getter(target, propName),\n                        arrDim\n                    );\n                }\n                else {\n                    var value;\n                    if (isValueColor) {\n                        interpolateArray(\n                            kfValues[frame], kfValues[frame + 1], w,\n                            rgba, 1\n                        );\n                        value = rgba2String(rgba);\n                    }\n                    else if (isValueString) {\n                        // String is step(0.5)\n                        return interpolateString(kfValues[frame], kfValues[frame + 1], w);\n                    }\n                    else {\n                        value = interpolateNumber(kfValues[frame], kfValues[frame + 1], w);\n                    }\n                    setter(\n                        target,\n                        propName,\n                        value\n                    );\n                }\n            }\n        };\n\n        var clip = new Clip({\n            target: animator._target,\n            life: trackMaxTime,\n            loop: animator._loop,\n            delay: animator._delay,\n            onframe: onframe,\n            ondestroy: oneTrackDone\n        });\n\n        if (easing && easing !== 'spline') {\n            clip.easing = easing;\n        }\n\n        return clip;\n    }\n\n    /**\n     * @alias module:zrender/animation/Animator\n     * @constructor\n     * @param {Object} target\n     * @param {boolean} loop\n     * @param {Function} getter\n     * @param {Function} setter\n     */\n    var Animator = function(target, loop, getter, setter) {\n        this._tracks = {};\n        this._target = target;\n\n        this._loop = loop || false;\n\n        this._getter = getter || defaultGetter;\n        this._setter = setter || defaultSetter;\n\n        this._clipCount = 0;\n\n        this._delay = 0;\n\n        this._doneList = [];\n\n        this._onframeList = [];\n\n        this._clipList = [];\n    };\n\n    Animator.prototype = {\n        /**\n         * 设置动画关键帧\n         * @param  {number} time 关键帧时间，单位是ms\n         * @param  {Object} props 关键帧的属性值，key-value表示\n         * @return {module:zrender/animation/Animator}\n         */\n        when: function(time /* ms */, props) {\n            var tracks = this._tracks;\n            for (var propName in props) {\n                if (!props.hasOwnProperty(propName)) {\n                    continue;\n                }\n\n                if (!tracks[propName]) {\n                    tracks[propName] = [];\n                    // Invalid value\n                    var value = this._getter(this._target, propName);\n                    if (value == null) {\n                        // zrLog('Invalid property ' + propName);\n                        continue;\n                    }\n                    // If time is 0\n                    //  Then props is given initialize value\n                    // Else\n                    //  Initialize value from current prop value\n                    if (time !== 0) {\n                        tracks[propName].push({\n                            time: 0,\n                            value: cloneValue(value)\n                        });\n                    }\n                }\n                tracks[propName].push({\n                    time: time,\n                    value: props[propName]\n                });\n            }\n            return this;\n        },\n        /**\n         * 添加动画每一帧的回调函数\n         * @param  {Function} callback\n         * @return {module:zrender/animation/Animator}\n         */\n        during: function (callback) {\n            this._onframeList.push(callback);\n            return this;\n        },\n\n        pause: function () {\n            for (var i = 0; i < this._clipList.length; i++) {\n                this._clipList[i].pause();\n            }\n            this._paused = true;\n        },\n\n        resume: function () {\n            for (var i = 0; i < this._clipList.length; i++) {\n                this._clipList[i].resume();\n            }\n            this._paused = false;\n        },\n\n        isPaused: function () {\n            return !!this._paused;\n        },\n\n        _doneCallback: function () {\n            // Clear all tracks\n            this._tracks = {};\n            // Clear all clips\n            this._clipList.length = 0;\n\n            var doneList = this._doneList;\n            var len = doneList.length;\n            for (var i = 0; i < len; i++) {\n                doneList[i].call(this);\n            }\n        },\n        /**\n         * 开始执行动画\n         * @param  {string|Function} easing\n         *         动画缓动函数，详见{@link module:zrender/animation/easing}\n         * @return {module:zrender/animation/Animator}\n         */\n        start: function (easing) {\n\n            var self = this;\n            var clipCount = 0;\n\n            var oneTrackDone = function() {\n                clipCount--;\n                if (!clipCount) {\n                    self._doneCallback();\n                }\n            };\n\n            var lastClip;\n            for (var propName in this._tracks) {\n                if (!this._tracks.hasOwnProperty(propName)) {\n                    continue;\n                }\n                var clip = createTrackClip(\n                    this, easing, oneTrackDone,\n                    this._tracks[propName], propName\n                );\n                if (clip) {\n                    this._clipList.push(clip);\n                    clipCount++;\n\n                    // If start after added to animation\n                    if (this.animation) {\n                        this.animation.addClip(clip);\n                    }\n\n                    lastClip = clip;\n                }\n            }\n\n            // Add during callback on the last clip\n            if (lastClip) {\n                var oldOnFrame = lastClip.onframe;\n                lastClip.onframe = function (target, percent) {\n                    oldOnFrame(target, percent);\n\n                    for (var i = 0; i < self._onframeList.length; i++) {\n                        self._onframeList[i](target, percent);\n                    }\n                };\n            }\n\n            if (!clipCount) {\n                this._doneCallback();\n            }\n            return this;\n        },\n        /**\n         * 停止动画\n         * @param {boolean} forwardToLast If move to last frame before stop\n         */\n        stop: function (forwardToLast) {\n            var clipList = this._clipList;\n            var animation = this.animation;\n            for (var i = 0; i < clipList.length; i++) {\n                var clip = clipList[i];\n                if (forwardToLast) {\n                    // Move to last frame before stop\n                    clip.onframe(this._target, 1);\n                }\n                animation && animation.removeClip(clip);\n            }\n            clipList.length = 0;\n        },\n        /**\n         * 设置动画延迟开始的时间\n         * @param  {number} time 单位ms\n         * @return {module:zrender/animation/Animator}\n         */\n        delay: function (time) {\n            this._delay = time;\n            return this;\n        },\n        /**\n         * 添加动画结束的回调\n         * @param  {Function} cb\n         * @return {module:zrender/animation/Animator}\n         */\n        done: function(cb) {\n            if (cb) {\n                this._doneList.push(cb);\n            }\n            return this;\n        },\n\n        /**\n         * @return {Array.<module:zrender/animation/Clip>}\n         */\n        getClips: function () {\n            return this._clipList;\n        }\n    };\n\n    module.exports = Animator;\n\n\n/***/ }),\n\n/***/ \"rRE/\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// FIXME Better way to pack data in graphic element\n\n\n    __webpack_require__(\"pt00\");\n\n    __webpack_require__(\"iiGm\");\n\n    __webpack_require__(\"A+Of\");\n\n\n    // Show tip action\n    /**\n     * @action\n     * @property {string} type\n     * @property {number} seriesIndex\n     * @property {number} dataIndex\n     * @property {number} [x]\n     * @property {number} [y]\n     */\n    __webpack_require__(\"Cwwa\").registerAction(\n        {\n            type: 'showTip',\n            event: 'showTip',\n            update: 'tooltip:manuallyShowTip'\n        },\n        // noop\n        function () {}\n    );\n    // Hide tip action\n    __webpack_require__(\"Cwwa\").registerAction(\n        {\n            type: 'hideTip',\n            event: 'hideTip',\n            update: 'tooltip:manuallyHideTip'\n        },\n        // noop\n        function () {}\n    );\n\n\n/***/ }),\n\n/***/ \"sEAT\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\n    var env = __webpack_require__(\"020c\");\n    var zrUtil = __webpack_require__(\"nw1Z\");\n    var get = __webpack_require__(\"LFYx\").makeGetter();\n\n    var each = zrUtil.each;\n\n    var globalListener = {};\n\n    /**\n     * @param {string} key\n     * @param {module:echarts/ExtensionAPI} api\n     * @param {Function} handler\n     *      param: {string} currTrigger\n     *      param: {Array.<number>} point\n     */\n    globalListener.register = function (key, api, handler) {\n        if (env.node) {\n            return;\n        }\n\n        var zr = api.getZr();\n        get(zr).records || (get(zr).records = {});\n\n        initGlobalListeners(zr, api);\n\n        var record = get(zr).records[key] || (get(zr).records[key] = {});\n        record.handler = handler;\n    };\n\n    function initGlobalListeners(zr, api) {\n        if (get(zr).initialized) {\n            return;\n        }\n\n        get(zr).initialized = true;\n\n        useHandler('click', zrUtil.curry(doEnter, 'click'));\n        useHandler('mousemove', zrUtil.curry(doEnter, 'mousemove'));\n        // useHandler('mouseout', onLeave);\n        useHandler('globalout', onLeave);\n\n        function useHandler(eventType, cb) {\n            zr.on(eventType, function (e) {\n                var dis = makeDispatchAction(api);\n\n                each(get(zr).records, function (record) {\n                    record && cb(record, e, dis.dispatchAction);\n                });\n\n                dispatchTooltipFinally(dis.pendings, api);\n            });\n        }\n    }\n\n    function dispatchTooltipFinally(pendings, api) {\n        var showLen = pendings.showTip.length;\n        var hideLen = pendings.hideTip.length;\n\n        var actuallyPayload;\n        if (showLen) {\n            actuallyPayload = pendings.showTip[showLen - 1];\n        }\n        else if (hideLen) {\n            actuallyPayload = pendings.hideTip[hideLen - 1];\n        }\n        if (actuallyPayload) {\n            actuallyPayload.dispatchAction = null;\n            api.dispatchAction(actuallyPayload);\n        }\n    }\n\n    function onLeave(record, e, dispatchAction) {\n        record.handler('leave', null, dispatchAction);\n    }\n\n    function doEnter(currTrigger, record, e, dispatchAction) {\n        record.handler(currTrigger, e, dispatchAction);\n    }\n\n    function makeDispatchAction(api) {\n        var pendings = {\n            showTip: [],\n            hideTip: []\n        };\n        // FIXME\n        // better approach?\n        // 'showTip' and 'hideTip' can be triggered by axisPointer and tooltip,\n        // which may be conflict, (axisPointer call showTip but tooltip call hideTip);\n        // So we have to add \"final stage\" to merge those dispatched actions.\n        var dispatchAction = function (payload) {\n            var pendingList = pendings[payload.type];\n            if (pendingList) {\n                pendingList.push(payload);\n            }\n            else {\n                payload.dispatchAction = dispatchAction;\n                api.dispatchAction(payload);\n            }\n        };\n\n        return {\n            dispatchAction: dispatchAction,\n            pendings: pendings\n        };\n    }\n\n    /**\n     * @param {string} key\n     * @param {module:echarts/ExtensionAPI} api\n     */\n    globalListener.unregister = function (key, api) {\n        if (env.node) {\n            return;\n        }\n        var zr = api.getZr();\n        var record = (get(zr).records || {})[key];\n        if (record) {\n            get(zr).records[key] = null;\n        }\n    };\n\n    module.exports = globalListener;\n\n\n/***/ }),\n\n/***/ \"svhf\":\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * For testable.\n */\n\n\n    var numberUtil = __webpack_require__(\"0+Kq\");\n\n    var roundNumber = numberUtil.round;\n\n    var helper = {};\n\n    /**\n     * @param {Array.<number>} extent Both extent[0] and extent[1] should be valid number.\n     *                                Should be extent[0] < extent[1].\n     * @param {number} splitNumber splitNumber should be >= 1.\n     * @param {number} [minInterval]\n     * @return {Object} {interval, intervalPrecision, niceTickExtent}\n     */\n    helper.intervalScaleNiceTicks = function (extent, splitNumber, minInterval) {\n        var result = {};\n        var span = extent[1] - extent[0];\n\n        var interval = result.interval = numberUtil.nice(span / splitNumber, true);\n        if (minInterval != null && interval < minInterval) {\n            interval = result.interval = minInterval;\n        }\n        // Tow more digital for tick.\n        var precision = result.intervalPrecision = numberUtil.getPrecisionSafe(interval) + 2;\n        // Niced extent inside original extent\n        var niceTickExtent = result.niceTickExtent = [\n            roundNumber(Math.ceil(extent[0] / interval) * interval, precision),\n            roundNumber(Math.floor(extent[1] / interval) * interval, precision)\n        ];\n\n        helper.fixExtent(niceTickExtent, extent);\n\n        return result;\n    };\n\n    function clamp(niceTickExtent, idx, extent) {\n        niceTickExtent[idx] = Math.max(Math.min(niceTickExtent[idx], extent[1]), extent[0]);\n    }\n\n    // In some cases (e.g., splitNumber is 1), niceTickExtent may be out of extent.\n    helper.fixExtent = function (niceTickExtent, extent) {\n        !isFinite(niceTickExtent[0]) && (niceTickExtent[0] = extent[0]);\n        !isFinite(niceTickExtent[1]) && (niceTickExtent[1] = extent[1]);\n        clamp(niceTickExtent, 0, extent);\n        clamp(niceTickExtent, 1, extent);\n        if (niceTickExtent[0] > niceTickExtent[1]) {\n            niceTickExtent[0] = niceTickExtent[1];\n        }\n    };\n\n    helper.intervalScaleGetTicks = function (interval, extent, niceTickExtent, intervalPrecision) {\n        var ticks = [];\n\n        // If interval is 0, return [];\n        if (!interval) {\n            return ticks;\n        }\n\n        // Consider this case: using dataZoom toolbox, zoom and zoom.\n        var safeLimit = 10000;\n\n        if (extent[0] < niceTickExtent[0]) {\n            ticks.push(extent[0]);\n        }\n        var tick = niceTickExtent[0];\n\n        while (tick <= niceTickExtent[1]) {\n            ticks.push(tick);\n            // Avoid rounding error\n            tick = roundNumber(tick + interval, intervalPrecision);\n            if (tick === ticks[ticks.length - 1]) {\n                // Consider out of safe float point, e.g.,\n                // -3711126.9907707 + 2e-10 === -3711126.9907707\n                break;\n            }\n            if (ticks.length > safeLimit) {\n                return [];\n            }\n        }\n        // Consider this case: the last item of ticks is smaller\n        // than niceTickExtent[1] and niceTickExtent[1] === extent[1].\n        if (extent[1] > (ticks.length ? ticks[ticks.length - 1] : niceTickExtent[1])) {\n            ticks.push(extent[1]);\n        }\n\n        return ticks;\n    };\n\n    module.exports = helper;\n\n\n/***/ }),\n\n/***/ \"t4wi\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\n    var axisPointerModelHelper = __webpack_require__(\"Rj1V\");\n\n    /**\n     * Base class of AxisView.\n     */\n    var AxisView = __webpack_require__(\"Cwwa\").extendComponentView({\n\n        type: 'axis',\n\n        /**\n         * @private\n         */\n        _axisPointer: null,\n\n        /**\n         * @protected\n         * @type {string}\n         */\n        axisPointerClass: null,\n\n        /**\n         * @override\n         */\n        render: function (axisModel, ecModel, api, payload) {\n            // FIXME\n            // This process should proformed after coordinate systems updated\n            // (axis scale updated), and should be performed each time update.\n            // So put it here temporarily, although it is not appropriate to\n            // put a model-writing procedure in `view`.\n            this.axisPointerClass && axisPointerModelHelper.fixValue(axisModel);\n\n            AxisView.superApply(this, 'render', arguments);\n\n            updateAxisPointer(this, axisModel, ecModel, api, payload, true);\n        },\n\n        /**\n         * Action handler.\n         * @public\n         * @param {module:echarts/coord/cartesian/AxisModel} axisModel\n         * @param {module:echarts/model/Global} ecModel\n         * @param {module:echarts/ExtensionAPI} api\n         * @param {Object} payload\n         */\n        updateAxisPointer: function (axisModel, ecModel, api, payload, force) {\n            updateAxisPointer(this, axisModel, ecModel, api, payload, false);\n        },\n\n        /**\n         * @override\n         */\n        remove: function (ecModel, api) {\n            var axisPointer = this._axisPointer;\n            axisPointer && axisPointer.remove(api);\n            AxisView.superApply(this, 'remove', arguments);\n        },\n\n        /**\n         * @override\n         */\n        dispose: function (ecModel, api) {\n            disposeAxisPointer(this, api);\n            AxisView.superApply(this, 'dispose', arguments);\n        }\n\n    });\n\n    function updateAxisPointer(axisView, axisModel, ecModel, api, payload, forceRender) {\n        var Clazz = AxisView.getAxisPointerClass(axisView.axisPointerClass);\n        if (!Clazz) {\n            return;\n        }\n        var axisPointerModel = axisPointerModelHelper.getAxisPointerModel(axisModel);\n        axisPointerModel\n            ? (axisView._axisPointer || (axisView._axisPointer = new Clazz()))\n                .render(axisModel, axisPointerModel, api, forceRender)\n            : disposeAxisPointer(axisView, api);\n    }\n\n    function disposeAxisPointer(axisView, ecModel, api) {\n        var axisPointer = axisView._axisPointer;\n        axisPointer && axisPointer.dispose(ecModel, api);\n        axisView._axisPointer = null;\n    }\n\n    var axisPointerClazz = [];\n\n    AxisView.registerAxisPointerClass = function (type, clazz) {\n        if (__DEV__) {\n            if (axisPointerClazz[type]) {\n                throw new Error('axisPointer ' + type + ' exists');\n            }\n        }\n        axisPointerClazz[type] = clazz;\n    };\n\n    AxisView.getAxisPointerClass = function (type) {\n        return type && axisPointerClazz[type];\n    };\n\n    module.exports = AxisView;\n\n\n/***/ }),\n\n/***/ \"t6Cc\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\n    var DataZoomView = __webpack_require__(\"uliI\");\n    var zrUtil = __webpack_require__(\"nw1Z\");\n    var sliderMove = __webpack_require__(\"biqb\");\n    var roams = __webpack_require__(\"Klcl\");\n    var bind = zrUtil.bind;\n\n    var InsideZoomView = DataZoomView.extend({\n\n        type: 'dataZoom.inside',\n\n        /**\n         * @override\n         */\n        init: function (ecModel, api) {\n            /**\n             * 'throttle' is used in this.dispatchAction, so we save range\n             * to avoid missing some 'pan' info.\n             * @private\n             * @type {Array.<number>}\n             */\n            this._range;\n        },\n\n        /**\n         * @override\n         */\n        render: function (dataZoomModel, ecModel, api, payload) {\n            InsideZoomView.superApply(this, 'render', arguments);\n\n            // Notice: origin this._range should be maintained, and should not be re-fetched\n            // from dataZoomModel when payload.type is 'dataZoom', otherwise 'pan' or 'zoom'\n            // info will be missed because of 'throttle' of this.dispatchAction.\n            if (roams.shouldRecordRange(payload, dataZoomModel.id)) {\n                this._range = dataZoomModel.getPercentRange();\n            }\n\n            // Reset controllers.\n            zrUtil.each(this.getTargetCoordInfo(), function (coordInfoList, coordSysName) {\n\n                var allCoordIds = zrUtil.map(coordInfoList, function (coordInfo) {\n                    return roams.generateCoordId(coordInfo.model);\n                });\n\n                zrUtil.each(coordInfoList, function (coordInfo) {\n                    var coordModel = coordInfo.model;\n                    var dataZoomOption = dataZoomModel.option;\n\n                    roams.register(\n                        api,\n                        {\n                            coordId: roams.generateCoordId(coordModel),\n                            allCoordIds: allCoordIds,\n                            containsPoint: function (e, x, y) {\n                                return coordModel.coordinateSystem.containPoint([x, y]);\n                            },\n                            dataZoomId: dataZoomModel.id,\n                            throttleRate: dataZoomModel.get('throttle', true),\n                            panGetRange: bind(this._onPan, this, coordInfo, coordSysName),\n                            zoomGetRange: bind(this._onZoom, this, coordInfo, coordSysName),\n                            zoomLock: dataZoomOption.zoomLock,\n                            disabled: dataZoomOption.disabled,\n                            roamControllerOpt: {\n                                zoomOnMouseWheel: dataZoomOption.zoomOnMouseWheel,\n                                moveOnMouseMove: dataZoomOption.moveOnMouseMove,\n                                preventDefaultMouseMove: dataZoomOption.preventDefaultMouseMove\n                            }\n                        }\n                    );\n                }, this);\n\n            }, this);\n        },\n\n        /**\n         * @override\n         */\n        dispose: function () {\n            roams.unregister(this.api, this.dataZoomModel.id);\n            InsideZoomView.superApply(this, 'dispose', arguments);\n            this._range = null;\n        },\n\n        /**\n         * @private\n         */\n        _onPan: function (coordInfo, coordSysName, controller, dx, dy, oldX, oldY, newX, newY) {\n            var range = this._range.slice();\n\n            // Calculate transform by the first axis.\n            var axisModel = coordInfo.axisModels[0];\n            if (!axisModel) {\n                return;\n            }\n\n            var directionInfo = getDirectionInfo[coordSysName](\n                [oldX, oldY], [newX, newY], axisModel, controller, coordInfo\n            );\n\n            var percentDelta = directionInfo.signal\n                * (range[1] - range[0])\n                * directionInfo.pixel / directionInfo.pixelLength;\n\n            sliderMove(percentDelta, range, [0, 100], 'all');\n\n            return (this._range = range);\n        },\n\n        /**\n         * @private\n         */\n        _onZoom: function (coordInfo, coordSysName, controller, scale, mouseX, mouseY) {\n            var range = this._range.slice();\n\n            // Calculate transform by the first axis.\n            var axisModel = coordInfo.axisModels[0];\n            if (!axisModel) {\n                return;\n            }\n\n            var directionInfo = getDirectionInfo[coordSysName](\n                null, [mouseX, mouseY], axisModel, controller, coordInfo\n            );\n\n            var percentPoint = (directionInfo.pixel - directionInfo.pixelStart) /\n                directionInfo.pixelLength * (range[1] - range[0]) + range[0];\n\n            scale = Math.max(1 / scale, 0);\n            range[0] = (range[0] - percentPoint) * scale + percentPoint;\n            range[1] = (range[1] - percentPoint) * scale + percentPoint;\n\n            // Restrict range.\n            var minMaxSpan = this.dataZoomModel.findRepresentativeAxisProxy().getMinMaxSpan();\n            sliderMove(0, range, [0, 100], 0, minMaxSpan.minSpan, minMaxSpan.maxSpan);\n\n            return (this._range = range);\n        }\n\n    });\n\n    var getDirectionInfo = {\n\n        grid: function (oldPoint, newPoint, axisModel, controller, coordInfo) {\n            var axis = axisModel.axis;\n            var ret = {};\n            var rect = coordInfo.model.coordinateSystem.getRect();\n            oldPoint = oldPoint || [0, 0];\n\n            if (axis.dim === 'x') {\n                ret.pixel = newPoint[0] - oldPoint[0];\n                ret.pixelLength = rect.width;\n                ret.pixelStart = rect.x;\n                ret.signal = axis.inverse ? 1 : -1;\n            }\n            else { // axis.dim === 'y'\n                ret.pixel = newPoint[1] - oldPoint[1];\n                ret.pixelLength = rect.height;\n                ret.pixelStart = rect.y;\n                ret.signal = axis.inverse ? -1 : 1;\n            }\n\n            return ret;\n        },\n\n        polar: function (oldPoint, newPoint, axisModel, controller, coordInfo) {\n            var axis = axisModel.axis;\n            var ret = {};\n            var polar = coordInfo.model.coordinateSystem;\n            var radiusExtent = polar.getRadiusAxis().getExtent();\n            var angleExtent = polar.getAngleAxis().getExtent();\n\n            oldPoint = oldPoint ? polar.pointToCoord(oldPoint) : [0, 0];\n            newPoint = polar.pointToCoord(newPoint);\n\n            if (axisModel.mainType === 'radiusAxis') {\n                ret.pixel = newPoint[0] - oldPoint[0];\n                // ret.pixelLength = Math.abs(radiusExtent[1] - radiusExtent[0]);\n                // ret.pixelStart = Math.min(radiusExtent[0], radiusExtent[1]);\n                ret.pixelLength = radiusExtent[1] - radiusExtent[0];\n                ret.pixelStart = radiusExtent[0];\n                ret.signal = axis.inverse ? 1 : -1;\n            }\n            else { // 'angleAxis'\n                ret.pixel = newPoint[1] - oldPoint[1];\n                // ret.pixelLength = Math.abs(angleExtent[1] - angleExtent[0]);\n                // ret.pixelStart = Math.min(angleExtent[0], angleExtent[1]);\n                ret.pixelLength = angleExtent[1] - angleExtent[0];\n                ret.pixelStart = angleExtent[0];\n                ret.signal = axis.inverse ? -1 : 1;\n            }\n\n            return ret;\n        },\n\n        singleAxis: function (oldPoint, newPoint, axisModel, controller, coordInfo) {\n            var axis = axisModel.axis;\n            var rect = coordInfo.model.coordinateSystem.getRect();\n            var ret = {};\n\n            oldPoint = oldPoint || [0, 0];\n\n            if (axis.orient === 'horizontal') {\n                ret.pixel = newPoint[0] - oldPoint[0];\n                ret.pixelLength = rect.width;\n                ret.pixelStart = rect.x;\n                ret.signal = axis.inverse ? 1 : -1;\n            }\n            else { // 'vertical'\n                ret.pixel = newPoint[1] - oldPoint[1];\n                ret.pixelLength = rect.height;\n                ret.pixelStart = rect.y;\n                ret.signal = axis.inverse ? -1 : 1;\n            }\n\n            return ret;\n        }\n    };\n\n    module.exports = InsideZoomView;\n\n\n/***/ }),\n\n/***/ \"tPN/\":\n/***/ (function(module, exports) {\n\n\n\n    module.exports = {\n        getBoxLayoutParams: function () {\n            return {\n                left: this.get('left'),\n                top: this.get('top'),\n                right: this.get('right'),\n                bottom: this.get('bottom'),\n                width: this.get('width'),\n                height: this.get('height')\n            };\n        }\n    };\n\n\n/***/ }),\n\n/***/ \"tR6g\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\n    var zrUtil = __webpack_require__(\"nw1Z\");\n    var modelUtil = __webpack_require__(\"LFYx\");\n\n    /**\n     * @param {Object} finder contains {seriesIndex, dataIndex, dataIndexInside}\n     * @param {module:echarts/model/Global} ecModel\n     * @return {Object} {point: [x, y], el: ...} point Will not be null.\n     */\n    module.exports = function (finder, ecModel) {\n        var point = [];\n        var seriesIndex = finder.seriesIndex;\n        var seriesModel;\n        if (seriesIndex == null || !(\n            seriesModel = ecModel.getSeriesByIndex(seriesIndex)\n        )) {\n            return {point: []};\n        }\n\n        var data = seriesModel.getData();\n        var dataIndex = modelUtil.queryDataIndex(data, finder);\n        if (dataIndex == null || zrUtil.isArray(dataIndex)) {\n            return {point: []};\n        }\n\n        var el = data.getItemGraphicEl(dataIndex);\n        var coordSys = seriesModel.coordinateSystem;\n\n        if (seriesModel.getTooltipPosition) {\n            point = seriesModel.getTooltipPosition(dataIndex) || [];\n        }\n        else if (coordSys && coordSys.dataToPoint) {\n            point = coordSys.dataToPoint(\n                data.getValues(\n                    zrUtil.map(coordSys.dimensions, function (dim) {\n                        return seriesModel.coordDimToDataDim(dim)[0];\n                    }), dataIndex, true\n                )\n            ) || [];\n        }\n        else if (el) {\n            // Use graphic bounding rect\n            var rect = el.getBoundingRect().clone();\n            rect.applyTransform(el.transform);\n            point = [\n                rect.x + rect.width / 2,\n                rect.y + rect.height / 2\n            ];\n        }\n\n        return {point: point, el: el};\n    };\n\n\n\n\n/***/ }),\n\n/***/ \"tojz\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\n    var zrUtil = __webpack_require__(\"nw1Z\");\n    var graphic = __webpack_require__(\"y2WT\");\n    var AxisBuilder = __webpack_require__(\"cH+X\");\n    var AxisView = __webpack_require__(\"t4wi\");\n    var cartesianAxisHelper = __webpack_require__(\"Wgry\");\n    var ifIgnoreOnTick = AxisBuilder.ifIgnoreOnTick;\n    var getInterval = AxisBuilder.getInterval;\n\n    var axisBuilderAttrs = [\n        'axisLine', 'axisLabel', 'axisTick', 'axisName'\n    ];\n    var selfBuilderAttrs = [\n        'splitArea', 'splitLine'\n    ];\n\n    // function getAlignWithLabel(model, axisModel) {\n    //     var alignWithLabel = model.get('alignWithLabel');\n    //     if (alignWithLabel === 'auto') {\n    //         alignWithLabel = axisModel.get('axisTick.alignWithLabel');\n    //     }\n    //     return alignWithLabel;\n    // }\n\n    var CartesianAxisView = AxisView.extend({\n\n        type: 'cartesianAxis',\n\n        axisPointerClass: 'CartesianAxisPointer',\n\n        /**\n         * @override\n         */\n        render: function (axisModel, ecModel, api, payload) {\n\n            this.group.removeAll();\n\n            var oldAxisGroup = this._axisGroup;\n            this._axisGroup = new graphic.Group();\n\n            this.group.add(this._axisGroup);\n\n            if (!axisModel.get('show')) {\n                return;\n            }\n\n            var gridModel = axisModel.getCoordSysModel();\n\n            var layout = cartesianAxisHelper.layout(gridModel, axisModel);\n\n            var axisBuilder = new AxisBuilder(axisModel, layout);\n\n            zrUtil.each(axisBuilderAttrs, axisBuilder.add, axisBuilder);\n\n            this._axisGroup.add(axisBuilder.getGroup());\n\n            zrUtil.each(selfBuilderAttrs, function (name) {\n                if (axisModel.get(name + '.show')) {\n                    this['_' + name](axisModel, gridModel, layout.labelInterval);\n                }\n            }, this);\n\n            graphic.groupTransition(oldAxisGroup, this._axisGroup, axisModel);\n\n            CartesianAxisView.superCall(this, 'render', axisModel, ecModel, api, payload);\n        },\n\n        /**\n         * @param {module:echarts/coord/cartesian/AxisModel} axisModel\n         * @param {module:echarts/coord/cartesian/GridModel} gridModel\n         * @param {number|Function} labelInterval\n         * @private\n         */\n        _splitLine: function (axisModel, gridModel, labelInterval) {\n            var axis = axisModel.axis;\n\n            if (axis.scale.isBlank()) {\n                return;\n            }\n\n            var splitLineModel = axisModel.getModel('splitLine');\n            var lineStyleModel = splitLineModel.getModel('lineStyle');\n            var lineColors = lineStyleModel.get('color');\n\n            var lineInterval = getInterval(splitLineModel, labelInterval);\n\n            lineColors = zrUtil.isArray(lineColors) ? lineColors : [lineColors];\n\n            var gridRect = gridModel.coordinateSystem.getRect();\n            var isHorizontal = axis.isHorizontal();\n\n            var lineCount = 0;\n\n            var ticksCoords = axis.getTicksCoords(\n                // splitLineModel.get('alignWithLabel')\n            );\n            var ticks = axis.scale.getTicks();\n\n            var p1 = [];\n            var p2 = [];\n            // Simple optimization\n            // Batching the lines if color are the same\n            var lineStyle = lineStyleModel.getLineStyle();\n            for (var i = 0; i < ticksCoords.length; i++) {\n                if (ifIgnoreOnTick(axis, i, lineInterval)) {\n                    continue;\n                }\n\n                var tickCoord = axis.toGlobalCoord(ticksCoords[i]);\n\n                if (isHorizontal) {\n                    p1[0] = tickCoord;\n                    p1[1] = gridRect.y;\n                    p2[0] = tickCoord;\n                    p2[1] = gridRect.y + gridRect.height;\n                }\n                else {\n                    p1[0] = gridRect.x;\n                    p1[1] = tickCoord;\n                    p2[0] = gridRect.x + gridRect.width;\n                    p2[1] = tickCoord;\n                }\n\n                var colorIndex = (lineCount++) % lineColors.length;\n                this._axisGroup.add(new graphic.Line(graphic.subPixelOptimizeLine({\n                    anid: 'line_' + ticks[i],\n\n                    shape: {\n                        x1: p1[0],\n                        y1: p1[1],\n                        x2: p2[0],\n                        y2: p2[1]\n                    },\n                    style: zrUtil.defaults({\n                        stroke: lineColors[colorIndex]\n                    }, lineStyle),\n                    silent: true\n                })));\n            }\n        },\n\n        /**\n         * @param {module:echarts/coord/cartesian/AxisModel} axisModel\n         * @param {module:echarts/coord/cartesian/GridModel} gridModel\n         * @param {number|Function} labelInterval\n         * @private\n         */\n        _splitArea: function (axisModel, gridModel, labelInterval) {\n            var axis = axisModel.axis;\n\n            if (axis.scale.isBlank()) {\n                return;\n            }\n\n            var splitAreaModel = axisModel.getModel('splitArea');\n            var areaStyleModel = splitAreaModel.getModel('areaStyle');\n            var areaColors = areaStyleModel.get('color');\n\n            var gridRect = gridModel.coordinateSystem.getRect();\n\n            var ticksCoords = axis.getTicksCoords(\n                // splitAreaModel.get('alignWithLabel')\n            );\n            var ticks = axis.scale.getTicks();\n\n            var prevX = axis.toGlobalCoord(ticksCoords[0]);\n            var prevY = axis.toGlobalCoord(ticksCoords[0]);\n\n            var count = 0;\n\n            var areaInterval = getInterval(splitAreaModel, labelInterval);\n\n            var areaStyle = areaStyleModel.getAreaStyle();\n            areaColors = zrUtil.isArray(areaColors) ? areaColors : [areaColors];\n\n            for (var i = 1; i < ticksCoords.length; i++) {\n                if (ifIgnoreOnTick(axis, i, areaInterval)) {\n                    continue;\n                }\n\n                var tickCoord = axis.toGlobalCoord(ticksCoords[i]);\n\n                var x;\n                var y;\n                var width;\n                var height;\n                if (axis.isHorizontal()) {\n                    x = prevX;\n                    y = gridRect.y;\n                    width = tickCoord - x;\n                    height = gridRect.height;\n                }\n                else {\n                    x = gridRect.x;\n                    y = prevY;\n                    width = gridRect.width;\n                    height = tickCoord - y;\n                }\n\n                var colorIndex = (count++) % areaColors.length;\n                this._axisGroup.add(new graphic.Rect({\n                    anid: 'area_' + ticks[i],\n\n                    shape: {\n                        x: x,\n                        y: y,\n                        width: width,\n                        height: height\n                    },\n                    style: zrUtil.defaults({\n                        fill: areaColors[colorIndex]\n                    }, areaStyle),\n                    silent: true\n                }));\n\n                prevX = x + width;\n                prevY = y + height;\n            }\n        }\n    });\n\n    CartesianAxisView.extend({\n        type: 'xAxis'\n    });\n    CartesianAxisView.extend({\n        type: 'yAxis'\n    });\n\n\n\n/***/ }),\n\n/***/ \"u4xi\":\n/***/ (function(module, exports) {\n\n\n\n    var PI2 = Math.PI * 2;\n    module.exports = {\n        normalizeRadian: function(angle) {\n            angle %= PI2;\n            if (angle < 0) {\n                angle += PI2;\n            }\n            return angle;\n        }\n    };\n\n\n/***/ }),\n\n/***/ \"ujyV\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\n    var numberUtil = __webpack_require__(\"0+Kq\");\n    var parsePercent = numberUtil.parsePercent;\n    var labelLayout = __webpack_require__(\"X6QE\");\n    var zrUtil = __webpack_require__(\"nw1Z\");\n\n    var PI2 = Math.PI * 2;\n    var RADIAN = Math.PI / 180;\n\n    module.exports = function (seriesType, ecModel, api, payload) {\n        ecModel.eachSeriesByType(seriesType, function (seriesModel) {\n            var center = seriesModel.get('center');\n            var radius = seriesModel.get('radius');\n\n            if (!zrUtil.isArray(radius)) {\n                radius = [0, radius];\n            }\n            if (!zrUtil.isArray(center)) {\n                center = [center, center];\n            }\n\n            var width = api.getWidth();\n            var height = api.getHeight();\n            var size = Math.min(width, height);\n            var cx = parsePercent(center[0], width);\n            var cy = parsePercent(center[1], height);\n            var r0 = parsePercent(radius[0], size / 2);\n            var r = parsePercent(radius[1], size / 2);\n\n            var data = seriesModel.getData();\n\n            var startAngle = -seriesModel.get('startAngle') * RADIAN;\n\n            var minAngle = seriesModel.get('minAngle') * RADIAN;\n\n            var validDataCount = 0;\n            data.each('value', function (value) {\n                !isNaN(value) && validDataCount++;\n            });\n\n            var sum = data.getSum('value');\n            // Sum may be 0\n            var unitRadian = Math.PI / (sum || validDataCount) * 2;\n\n            var clockwise = seriesModel.get('clockwise');\n\n            var roseType = seriesModel.get('roseType');\n            var stillShowZeroSum = seriesModel.get('stillShowZeroSum');\n\n            // [0...max]\n            var extent = data.getDataExtent('value');\n            extent[0] = 0;\n\n            // In the case some sector angle is smaller than minAngle\n            var restAngle = PI2;\n            var valueSumLargerThanMinAngle = 0;\n\n            var currentAngle = startAngle;\n            var dir = clockwise ? 1 : -1;\n\n            data.each('value', function (value, idx) {\n                var angle;\n                if (isNaN(value)) {\n                    data.setItemLayout(idx, {\n                        angle: NaN,\n                        startAngle: NaN,\n                        endAngle: NaN,\n                        clockwise: clockwise,\n                        cx: cx,\n                        cy: cy,\n                        r0: r0,\n                        r: roseType\n                            ? NaN\n                            : r\n                    });\n                    return;\n                }\n\n                // FIXME 兼容 2.0 但是 roseType 是 area 的时候才是这样？\n                if (roseType !== 'area') {\n                    angle = (sum === 0 && stillShowZeroSum)\n                        ? unitRadian : (value * unitRadian);\n                }\n                else {\n                    angle = PI2 / validDataCount;\n                }\n\n                if (angle < minAngle) {\n                    angle = minAngle;\n                    restAngle -= minAngle;\n                }\n                else {\n                    valueSumLargerThanMinAngle += value;\n                }\n\n                var endAngle = currentAngle + dir * angle;\n                data.setItemLayout(idx, {\n                    angle: angle,\n                    startAngle: currentAngle,\n                    endAngle: endAngle,\n                    clockwise: clockwise,\n                    cx: cx,\n                    cy: cy,\n                    r0: r0,\n                    r: roseType\n                        ? numberUtil.linearMap(value, extent, [r0, r])\n                        : r\n                });\n\n                currentAngle = endAngle;\n            }, true);\n\n            // Some sector is constrained by minAngle\n            // Rest sectors needs recalculate angle\n            if (restAngle < PI2 && validDataCount) {\n                // Average the angle if rest angle is not enough after all angles is\n                // Constrained by minAngle\n                if (restAngle <= 1e-3) {\n                    var angle = PI2 / validDataCount;\n                    data.each('value', function (value, idx) {\n                        if (!isNaN(value)) {\n                            var layout = data.getItemLayout(idx);\n                            layout.angle = angle;\n                            layout.startAngle = startAngle + dir * idx * angle;\n                            layout.endAngle = startAngle + dir * (idx + 1) * angle;\n                        }\n                    });\n                }\n                else {\n                    unitRadian = restAngle / valueSumLargerThanMinAngle;\n                    currentAngle = startAngle;\n                    data.each('value', function (value, idx) {\n                        if (!isNaN(value)) {\n                            var layout = data.getItemLayout(idx);\n                            var angle = layout.angle === minAngle\n                                ? minAngle : value * unitRadian;\n                            layout.startAngle = currentAngle;\n                            layout.endAngle = currentAngle + dir * angle;\n                            currentAngle += dir * angle;\n                        }\n                    });\n                }\n            }\n\n            labelLayout(seriesModel, r, width, height);\n        });\n    };\n\n\n/***/ }),\n\n/***/ \"uliI\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\n    var ComponentView = __webpack_require__(\"D9oD\");\n\n    module.exports = ComponentView.extend({\n\n        type: 'dataZoom',\n\n        render: function (dataZoomModel, ecModel, api, payload) {\n            this.dataZoomModel = dataZoomModel;\n            this.ecModel = ecModel;\n            this.api = api;\n        },\n\n        /**\n         * Find the first target coordinate system.\n         *\n         * @protected\n         * @return {Object} {\n         *                   grid: [\n         *                       {model: coord0, axisModels: [axis1, axis3], coordIndex: 1},\n         *                       {model: coord1, axisModels: [axis0, axis2], coordIndex: 0},\n         *                       ...\n         *                   ],  // cartesians must not be null/undefined.\n         *                   polar: [\n         *                       {model: coord0, axisModels: [axis4], coordIndex: 0},\n         *                       ...\n         *                   ],  // polars must not be null/undefined.\n         *                   singleAxis: [\n         *                       {model: coord0, axisModels: [], coordIndex: 0}\n         *                   ]\n         */\n        getTargetCoordInfo: function () {\n            var dataZoomModel = this.dataZoomModel;\n            var ecModel = this.ecModel;\n            var coordSysLists = {};\n\n            dataZoomModel.eachTargetAxis(function (dimNames, axisIndex) {\n                var axisModel = ecModel.getComponent(dimNames.axis, axisIndex);\n                if (axisModel) {\n                    var coordModel = axisModel.getCoordSysModel();\n                    coordModel && save(\n                        coordModel,\n                        axisModel,\n                        coordSysLists[coordModel.mainType] || (coordSysLists[coordModel.mainType] = []),\n                        coordModel.componentIndex\n                    );\n                }\n            }, this);\n\n            function save(coordModel, axisModel, store, coordIndex) {\n                var item;\n                for (var i = 0; i < store.length; i++) {\n                    if (store[i].model === coordModel) {\n                        item = store[i];\n                        break;\n                    }\n                }\n                if (!item) {\n                    store.push(item = {\n                        model: coordModel, axisModels: [], coordIndex: coordIndex\n                    });\n                }\n                item.axisModels.push(axisModel);\n            }\n\n            return coordSysLists;\n        }\n\n    });\n\n\n\n/***/ }),\n\n/***/ \"uy5n\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\n    var curve = __webpack_require__(\"cZ/t\");\n\n    module.exports = {\n        /**\n         * 三次贝塞尔曲线描边包含判断\n         * @param  {number}  x0\n         * @param  {number}  y0\n         * @param  {number}  x1\n         * @param  {number}  y1\n         * @param  {number}  x2\n         * @param  {number}  y2\n         * @param  {number}  x3\n         * @param  {number}  y3\n         * @param  {number}  lineWidth\n         * @param  {number}  x\n         * @param  {number}  y\n         * @return {boolean}\n         */\n        containStroke: function(x0, y0, x1, y1, x2, y2, x3, y3, lineWidth, x, y) {\n            if (lineWidth === 0) {\n                return false;\n            }\n            var _l = lineWidth;\n            // Quick reject\n            if (\n                (y > y0 + _l && y > y1 + _l && y > y2 + _l && y > y3 + _l)\n                || (y < y0 - _l && y < y1 - _l && y < y2 - _l && y < y3 - _l)\n                || (x > x0 + _l && x > x1 + _l && x > x2 + _l && x > x3 + _l)\n                || (x < x0 - _l && x < x1 - _l && x < x2 - _l && x < x3 - _l)\n            ) {\n                return false;\n            }\n            var d = curve.cubicProjectPoint(\n                x0, y0, x1, y1, x2, y2, x3, y3,\n                x, y, null\n            );\n            return d <= _l / 2;\n        }\n    };\n\n\n/***/ }),\n\n/***/ \"vGh9\":\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * @module echarts/chart/helper/Symbol\n */\n\n\n    var graphic = __webpack_require__(\"y2WT\");\n    var zrUtil = __webpack_require__(\"nw1Z\");\n    var modelUtil = __webpack_require__(\"LFYx\");\n\n    var helper = {};\n\n    helper.findLabelValueDim = function (data) {\n        var valueDim;\n        var labelDims = modelUtil.otherDimToDataDim(data, 'label');\n\n        if (labelDims.length) {\n            valueDim = labelDims[0];\n        }\n        else {\n            // Get last value dim\n            var dimensions = data.dimensions.slice();\n            var dataType;\n            while (dimensions.length && (\n                valueDim = dimensions.pop(),\n                dataType = data.getDimensionInfo(valueDim).type,\n                dataType === 'ordinal' || dataType === 'time'\n            )) {} // jshint ignore:line\n        }\n\n        return valueDim;\n    };\n\n    helper.setTextToStyle = function (\n        data, dataIndex, valueDim, elStyle, seriesModel, labelModel, color\n    ) {\n        if (valueDim != null && labelModel.getShallow('show')) {\n            graphic.setText(elStyle, labelModel, color);\n            elStyle.text = zrUtil.retrieve(\n                seriesModel.getFormattedLabel(dataIndex, 'normal'),\n                data.get(valueDim, dataIndex)\n            );\n        }\n        else {\n            elStyle.text = '';\n        }\n    };\n\n    module.exports = helper;\n\n\n/***/ }),\n\n/***/ \"vd24\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n\n    var zrUtil = __webpack_require__(\"nw1Z\");\n    var formatUtil = __webpack_require__(\"4oXW\");\n    var classUtil = __webpack_require__(\"fzq8\");\n    var modelUtil = __webpack_require__(\"LFYx\");\n    var ComponentModel = __webpack_require__(\"wvll\");\n    var colorPaletteMixin = __webpack_require__(\"dCDA\");\n    var env = __webpack_require__(\"020c\");\n    var layout = __webpack_require__(\"zxuD\");\n\n    var set = classUtil.set;\n    var get = classUtil.get;\n    var encodeHTML = formatUtil.encodeHTML;\n    var addCommas = formatUtil.addCommas;\n\n    var SeriesModel = ComponentModel.extend({\n\n        type: 'series.__base__',\n\n        /**\n         * @readOnly\n         */\n        seriesIndex: 0,\n\n        // coodinateSystem will be injected in the echarts/CoordinateSystem\n        coordinateSystem: null,\n\n        /**\n         * @type {Object}\n         * @protected\n         */\n        defaultOption: null,\n\n        /**\n         * Data provided for legend\n         * @type {Function}\n         */\n        // PENDING\n        legendDataProvider: null,\n\n        /**\n         * Access path of color for visual\n         */\n        visualColorAccessPath: 'itemStyle.normal.color',\n\n        /**\n         * Support merge layout params.\n         * Only support 'box' now (left/right/top/bottom/width/height).\n         * @type {string|Object} Object can be {ignoreSize: true}\n         * @readOnly\n         */\n        layoutMode: null,\n\n        init: function (option, parentModel, ecModel, extraOpt) {\n\n            /**\n             * @type {number}\n             * @readOnly\n             */\n            this.seriesIndex = this.componentIndex;\n\n            this.mergeDefaultAndTheme(option, ecModel);\n\n            var data = this.getInitialData(option, ecModel);\n            if (__DEV__) {\n                zrUtil.assert(data, 'getInitialData returned invalid data.');\n            }\n            /**\n             * @type {module:echarts/data/List|module:echarts/data/Tree|module:echarts/data/Graph}\n             * @private\n             */\n            set(this, 'dataBeforeProcessed', data);\n\n            // If we reverse the order (make data firstly, and then make\n            // dataBeforeProcessed by cloneShallow), cloneShallow will\n            // cause data.graph.data !== data when using\n            // module:echarts/data/Graph or module:echarts/data/Tree.\n            // See module:echarts/data/helper/linkList\n            this.restoreData();\n        },\n\n        /**\n         * Util for merge default and theme to option\n         * @param  {Object} option\n         * @param  {module:echarts/model/Global} ecModel\n         */\n        mergeDefaultAndTheme: function (option, ecModel) {\n            var layoutMode = this.layoutMode;\n            var inputPositionParams = layoutMode\n                ? layout.getLayoutParams(option) : {};\n\n            zrUtil.merge(\n                option,\n                ecModel.getTheme().get(this.subType)\n            );\n            zrUtil.merge(option, this.getDefaultOption());\n\n            // Default label emphasis `position` and `show`\n            // FIXME Set label in mergeOption\n            modelUtil.defaultEmphasis(option.label, modelUtil.LABEL_OPTIONS);\n\n            this.fillDataTextStyle(option.data);\n\n            if (layoutMode) {\n                layout.mergeLayoutParam(option, inputPositionParams, layoutMode);\n            }\n        },\n\n        mergeOption: function (newSeriesOption, ecModel) {\n            newSeriesOption = zrUtil.merge(this.option, newSeriesOption, true);\n            this.fillDataTextStyle(newSeriesOption.data);\n\n            var layoutMode = this.layoutMode;\n            if (layoutMode) {\n                layout.mergeLayoutParam(this.option, newSeriesOption, layoutMode);\n            }\n\n            var data = this.getInitialData(newSeriesOption, ecModel);\n            // TODO Merge data?\n            if (data) {\n                set(this, 'data', data);\n                set(this, 'dataBeforeProcessed', data.cloneShallow());\n            }\n        },\n\n        fillDataTextStyle: function (data) {\n            // Default data label emphasis `position` and `show`\n            // FIXME Tree structure data ?\n            // FIXME Performance ?\n            if (data) {\n                for (var i = 0; i < data.length; i++) {\n                    if (data[i] && data[i].label) {\n                        modelUtil.defaultEmphasis(data[i].label, modelUtil.LABEL_OPTIONS);\n                    }\n                }\n            }\n        },\n\n        /**\n         * Init a data structure from data related option in series\n         * Must be overwritten\n         */\n        getInitialData: function () {},\n\n        /**\n         * @param {string} [dataType]\n         * @return {module:echarts/data/List}\n         */\n        getData: function (dataType) {\n            var data = get(this, 'data');\n            return dataType == null ? data : data.getLinkedData(dataType);\n        },\n\n        /**\n         * @param {module:echarts/data/List} data\n         */\n        setData: function (data) {\n            set(this, 'data', data);\n        },\n\n        /**\n         * Get data before processed\n         * @return {module:echarts/data/List}\n         */\n        getRawData: function () {\n            return get(this, 'dataBeforeProcessed');\n        },\n\n        /**\n         * Coord dimension to data dimension.\n         *\n         * By default the result is the same as dimensions of series data.\n         * But in some series data dimensions are different from coord dimensions (i.e.\n         * candlestick and boxplot). Override this method to handle those cases.\n         *\n         * Coord dimension to data dimension can be one-to-many\n         *\n         * @param {string} coordDim\n         * @return {Array.<string>} dimensions on the axis.\n         */\n        coordDimToDataDim: function (coordDim) {\n            return modelUtil.coordDimToDataDim(this.getData(), coordDim);\n        },\n\n        /**\n         * Convert data dimension to coord dimension.\n         *\n         * @param {string|number} dataDim\n         * @return {string}\n         */\n        dataDimToCoordDim: function (dataDim) {\n            return modelUtil.dataDimToCoordDim(this.getData(), dataDim);\n        },\n\n        /**\n         * Get base axis if has coordinate system and has axis.\n         * By default use coordSys.getBaseAxis();\n         * Can be overrided for some chart.\n         * @return {type} description\n         */\n        getBaseAxis: function () {\n            var coordSys = this.coordinateSystem;\n            return coordSys && coordSys.getBaseAxis && coordSys.getBaseAxis();\n        },\n\n        // FIXME\n        /**\n         * Default tooltip formatter\n         *\n         * @param {number} dataIndex\n         * @param {boolean} [multipleSeries=false]\n         * @param {number} [dataType]\n         */\n        formatTooltip: function (dataIndex, multipleSeries, dataType) {\n            function formatArrayValue(value) {\n                var vertially = zrUtil.reduce(value, function (vertially, val, idx) {\n                    var dimItem = data.getDimensionInfo(idx);\n                    return vertially |= dimItem.tooltip !== false && dimItem.tooltipName != null;\n                }, 0);\n\n                var result = [];\n                var tooltipDims = modelUtil.otherDimToDataDim(data, 'tooltip');\n\n                tooltipDims.length\n                    ? zrUtil.each(tooltipDims, function (dimIdx) {\n                        setEachItem(data.get(dimIdx, dataIndex), dimIdx);\n                    })\n                    // By default, all dims is used on tooltip.\n                    : zrUtil.each(value, setEachItem);\n\n                function setEachItem(val, dimIdx) {\n                    var dimInfo = data.getDimensionInfo(dimIdx);\n                    // If `dimInfo.tooltip` is not set, show tooltip.\n                    if (!dimInfo || dimInfo.otherDims.tooltip === false) {\n                        return;\n                    }\n                    var dimType = dimInfo.type;\n                    var valStr = (vertially ? '- ' + (dimInfo.tooltipName || dimInfo.name) + ': ' : '')\n                        + (dimType === 'ordinal'\n                            ? val + ''\n                            : dimType === 'time'\n                            ? (multipleSeries ? '' : formatUtil.formatTime('yyyy/MM/dd hh:mm:ss', val))\n                            : addCommas(val)\n                        );\n                    valStr && result.push(encodeHTML(valStr));\n                }\n\n                return (vertially ? '<br/>' : '') + result.join(vertially ? '<br/>' : ', ');\n            }\n\n            var data = get(this, 'data');\n\n            var value = this.getRawValue(dataIndex);\n            var formattedValue = zrUtil.isArray(value)\n                ? formatArrayValue(value) : encodeHTML(addCommas(value));\n            var name = data.getName(dataIndex);\n\n            var color = data.getItemVisual(dataIndex, 'color');\n            if (zrUtil.isObject(color) && color.colorStops) {\n                color = (color.colorStops[0] || {}).color;\n            }\n            color = color || 'transparent';\n\n            var colorEl = formatUtil.getTooltipMarker(color);\n\n            var seriesName = this.name;\n            // FIXME\n            if (seriesName === '\\0-') {\n                // Not show '-'\n                seriesName = '';\n            }\n            seriesName = seriesName\n                ? encodeHTML(seriesName) + (!multipleSeries ? '<br/>' : ': ')\n                : '';\n            return !multipleSeries\n                ? seriesName + colorEl\n                    + (name\n                        ? encodeHTML(name) + ': ' + formattedValue\n                        : formattedValue\n                    )\n                : colorEl + seriesName + formattedValue;\n        },\n\n        /**\n         * @return {boolean}\n         */\n        isAnimationEnabled: function () {\n            if (env.node) {\n                return false;\n            }\n\n            var animationEnabled = this.getShallow('animation');\n            if (animationEnabled) {\n                if (this.getData().count() > this.getShallow('animationThreshold')) {\n                    animationEnabled = false;\n                }\n            }\n            return animationEnabled;\n        },\n\n        restoreData: function () {\n            set(this, 'data', get(this, 'dataBeforeProcessed').cloneShallow());\n        },\n\n        getColorFromPalette: function (name, scope) {\n            var ecModel = this.ecModel;\n            // PENDING\n            var color = colorPaletteMixin.getColorFromPalette.call(this, name, scope);\n            if (!color) {\n                color = ecModel.getColorFromPalette(name, scope);\n            }\n            return color;\n        },\n\n        /**\n         * Get data indices for show tooltip content. See tooltip.\n         * @abstract\n         * @param {Array.<string>|string} dim\n         * @param {Array.<number>} value\n         * @param {module:echarts/coord/single/SingleAxis} baseAxis\n         * @return {Object} {dataIndices, nestestValue}.\n         */\n        getAxisTooltipData: null,\n\n        /**\n         * See tooltip.\n         * @abstract\n         * @param {number} dataIndex\n         * @return {Array.<number>} Point of tooltip. null/undefined can be returned.\n         */\n        getTooltipPosition: null\n    });\n\n    zrUtil.mixin(SeriesModel, modelUtil.dataFormatMixin);\n    zrUtil.mixin(SeriesModel, colorPaletteMixin);\n\n    module.exports = SeriesModel;\n\n\n/***/ }),\n\n/***/ \"vfQN\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// CompoundPath to improve performance\n\n\n    var Path = __webpack_require__(\"CC7E\");\n\n    module.exports = Path.extend({\n\n        type: 'compound',\n\n        shape: {\n\n            paths: null\n        },\n\n        _updatePathDirty: function () {\n            var dirtyPath = this.__dirtyPath;\n            var paths = this.shape.paths;\n            for (var i = 0; i < paths.length; i++) {\n                // Mark as dirty if any subpath is dirty\n                dirtyPath = dirtyPath || paths[i].__dirtyPath;\n            }\n            this.__dirtyPath = dirtyPath;\n            this.__dirty = this.__dirty || dirtyPath;\n        },\n\n        beforeBrush: function () {\n            this._updatePathDirty();\n            var paths = this.shape.paths || [];\n            var scale = this.getGlobalScale();\n            // Update path scale\n            for (var i = 0; i < paths.length; i++) {\n                if (!paths[i].path) {\n                    paths[i].createPathProxy();\n                }\n                paths[i].path.setScale(scale[0], scale[1]);\n            }\n        },\n\n        buildPath: function (ctx, shape) {\n            var paths = shape.paths || [];\n            for (var i = 0; i < paths.length; i++) {\n                paths[i].buildPath(ctx, paths[i].shape, true);\n            }\n        },\n\n        afterBrush: function () {\n            var paths = this.shape.paths;\n            for (var i = 0; i < paths.length; i++) {\n                paths[i].__dirtyPath = false;\n            }\n        },\n\n        getBoundingRect: function () {\n            this._updatePathDirty();\n            return Path.prototype.getBoundingRect.call(this);\n        }\n    });\n\n\n/***/ }),\n\n/***/ \"vnaK\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\n    var getItemStyle = __webpack_require__(\"5hg5\")(\n        [\n            ['fill', 'color'],\n            ['stroke', 'borderColor'],\n            ['lineWidth', 'borderWidth'],\n            ['opacity'],\n            ['shadowBlur'],\n            ['shadowOffsetX'],\n            ['shadowOffsetY'],\n            ['shadowColor'],\n            ['textPosition'],\n            ['textAlign']\n        ]\n    );\n    module.exports = {\n        getItemStyle: function (excludes, includes) {\n            var style = getItemStyle.call(this, excludes, includes);\n            var lineDash = this.getBorderLineDash();\n            lineDash && (style.lineDash = lineDash);\n            return style;\n        },\n\n        getBorderLineDash: function () {\n            var lineType = this.get('borderType');\n            return (lineType === 'solid' || lineType == null) ? null\n                : (lineType === 'dashed' ? [5, 5] : [1, 1]);\n        }\n    };\n\n\n/***/ }),\n\n/***/ \"wLby\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n\n    var graphic = __webpack_require__(\"y2WT\");\n    var BaseAxisPointer = __webpack_require__(\"c3To\");\n    var viewHelper = __webpack_require__(\"XrCg\");\n    var cartesianAxisHelper = __webpack_require__(\"Wgry\");\n    var AxisView = __webpack_require__(\"t4wi\");\n\n    var CartesianAxisPointer = BaseAxisPointer.extend({\n\n        /**\n         * @override\n         */\n        makeElOption: function (elOption, value, axisModel, axisPointerModel, api) {\n            var axis = axisModel.axis;\n            var grid = axis.grid;\n            var axisPointerType = axisPointerModel.get('type');\n            var otherExtent = getCartesian(grid, axis).getOtherAxis(axis).getGlobalExtent();\n            var pixelValue = axis.toGlobalCoord(axis.dataToCoord(value, true));\n\n            if (axisPointerType && axisPointerType !== 'none') {\n                var elStyle = viewHelper.buildElStyle(axisPointerModel);\n                var pointerOption = pointerShapeBuilder[axisPointerType](\n                    axis, pixelValue, otherExtent, elStyle\n                );\n                pointerOption.style = elStyle;\n                elOption.graphicKey = pointerOption.type;\n                elOption.pointer = pointerOption;\n            }\n\n            var layoutInfo = cartesianAxisHelper.layout(grid.model, axisModel);\n            viewHelper.buildCartesianSingleLabelElOption(\n                value, elOption, layoutInfo, axisModel, axisPointerModel, api\n            );\n        },\n\n        /**\n         * @override\n         */\n        getHandleTransform: function (value, axisModel, axisPointerModel) {\n            var layoutInfo = cartesianAxisHelper.layout(axisModel.axis.grid.model, axisModel, {\n                labelInside: false\n            });\n            layoutInfo.labelMargin = axisPointerModel.get('handle.margin');\n            return {\n                position: viewHelper.getTransformedPosition(axisModel.axis, value, layoutInfo),\n                rotation: layoutInfo.rotation + (layoutInfo.labelDirection < 0 ? Math.PI : 0)\n            };\n        },\n\n        /**\n         * @override\n         */\n        updateHandleTransform: function (transform, delta, axisModel, axisPointerModel) {\n            var axis = axisModel.axis;\n            var grid = axis.grid;\n            var axisExtent = axis.getGlobalExtent(true);\n            var otherExtent = getCartesian(grid, axis).getOtherAxis(axis).getGlobalExtent();\n            var dimIndex = axis.dim === 'x' ? 0 : 1;\n\n            var currPosition = transform.position;\n            currPosition[dimIndex] += delta[dimIndex];\n            currPosition[dimIndex] = Math.min(axisExtent[1], currPosition[dimIndex]);\n            currPosition[dimIndex] = Math.max(axisExtent[0], currPosition[dimIndex]);\n\n            var cursorOtherValue = (otherExtent[1] + otherExtent[0]) / 2;\n            var cursorPoint = [cursorOtherValue, cursorOtherValue];\n            cursorPoint[dimIndex] = currPosition[dimIndex];\n\n            // Make tooltip do not overlap axisPointer and in the middle of the grid.\n            var tooltipOptions = [{verticalAlign: 'middle'}, {align: 'center'}];\n\n            return {\n                position: currPosition,\n                rotation: transform.rotation,\n                cursorPoint: cursorPoint,\n                tooltipOption: tooltipOptions[dimIndex]\n            };\n        }\n\n    });\n\n    function getCartesian(grid, axis) {\n        var opt = {};\n        opt[axis.dim + 'AxisIndex'] = axis.index;\n        return grid.getCartesian(opt);\n    }\n\n    var pointerShapeBuilder = {\n\n        line: function (axis, pixelValue, otherExtent, elStyle) {\n            var targetShape = viewHelper.makeLineShape(\n                [pixelValue, otherExtent[0]],\n                [pixelValue, otherExtent[1]],\n                getAxisDimIndex(axis)\n            );\n            graphic.subPixelOptimizeLine({\n                shape: targetShape,\n                style: elStyle\n            });\n            return {\n                type: 'Line',\n                shape: targetShape\n            };\n        },\n\n        shadow: function (axis, pixelValue, otherExtent, elStyle) {\n            var bandWidth = axis.getBandWidth();\n            var span = otherExtent[1] - otherExtent[0];\n            return {\n                type: 'Rect',\n                shape: viewHelper.makeRectShape(\n                    [pixelValue - bandWidth / 2, otherExtent[0]],\n                    [bandWidth, span],\n                    getAxisDimIndex(axis)\n                )\n            };\n        }\n    };\n\n    function getAxisDimIndex(axis) {\n        return axis.dim === 'x' ? 0 : 1;\n    }\n\n    AxisView.registerAxisPointerClass('CartesianAxisPointer', CartesianAxisPointer);\n\n    module.exports = CartesianAxisPointer;\n\n\n/***/ }),\n\n/***/ \"wmWp\":\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * @file Legend action\n */\n\n\n    var echarts = __webpack_require__(\"Cwwa\");\n    var zrUtil = __webpack_require__(\"nw1Z\");\n\n    function legendSelectActionHandler(methodName, payload, ecModel) {\n        var selectedMap = {};\n        var isToggleSelect = methodName === 'toggleSelected';\n        var isSelected;\n        // Update all legend components\n        ecModel.eachComponent('legend', function (legendModel) {\n            if (isToggleSelect && isSelected != null) {\n                // Force other legend has same selected status\n                // Or the first is toggled to true and other are toggled to false\n                // In the case one legend has some item unSelected in option. And if other legend\n                // doesn't has the item, they will assume it is selected.\n                legendModel[isSelected ? 'select' : 'unSelect'](payload.name);\n            }\n            else {\n                legendModel[methodName](payload.name);\n                isSelected = legendModel.isSelected(payload.name);\n            }\n            var legendData = legendModel.getData();\n            zrUtil.each(legendData, function (model) {\n                var name = model.get('name');\n                // Wrap element\n                if (name === '\\n' || name === '') {\n                    return;\n                }\n                var isItemSelected = legendModel.isSelected(name);\n                if (selectedMap.hasOwnProperty(name)) {\n                    // Unselected if any legend is unselected\n                    selectedMap[name] = selectedMap[name] && isItemSelected;\n                }\n                else {\n                    selectedMap[name] = isItemSelected;\n                }\n            });\n        });\n        // Return the event explicitly\n        return {\n            name: payload.name,\n            selected: selectedMap\n        };\n    }\n    /**\n     * @event legendToggleSelect\n     * @type {Object}\n     * @property {string} type 'legendToggleSelect'\n     * @property {string} [from]\n     * @property {string} name Series name or data item name\n     */\n    echarts.registerAction(\n        'legendToggleSelect', 'legendselectchanged',\n        zrUtil.curry(legendSelectActionHandler, 'toggleSelected')\n    );\n\n    /**\n     * @event legendSelect\n     * @type {Object}\n     * @property {string} type 'legendSelect'\n     * @property {string} name Series name or data item name\n     */\n    echarts.registerAction(\n        'legendSelect', 'legendselected',\n        zrUtil.curry(legendSelectActionHandler, 'select')\n    );\n\n    /**\n     * @event legendUnSelect\n     * @type {Object}\n     * @property {string} type 'legendUnSelect'\n     * @property {string} name Series name or data item name\n     */\n    echarts.registerAction(\n        'legendUnSelect', 'legendunselected',\n        zrUtil.curry(legendSelectActionHandler, 'unSelect')\n    );\n\n\n/***/ }),\n\n/***/ \"wvll\":\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * Component model\n *\n * @module echarts/model/Component\n */\n\n\n    var Model = __webpack_require__(\"Q4Sk\");\n    var zrUtil = __webpack_require__(\"nw1Z\");\n    var arrayPush = Array.prototype.push;\n    var componentUtil = __webpack_require__(\"e36O\");\n    var clazzUtil = __webpack_require__(\"fzq8\");\n    var layout = __webpack_require__(\"zxuD\");\n\n    /**\n     * @alias module:echarts/model/Component\n     * @constructor\n     * @param {Object} option\n     * @param {module:echarts/model/Model} parentModel\n     * @param {module:echarts/model/Model} ecModel\n     */\n    var ComponentModel = Model.extend({\n\n        type: 'component',\n\n        /**\n         * @readOnly\n         * @type {string}\n         */\n        id: '',\n\n        /**\n         * @readOnly\n         */\n        name: '',\n\n        /**\n         * @readOnly\n         * @type {string}\n         */\n        mainType: '',\n\n        /**\n         * @readOnly\n         * @type {string}\n         */\n        subType: '',\n\n        /**\n         * @readOnly\n         * @type {number}\n         */\n        componentIndex: 0,\n\n        /**\n         * @type {Object}\n         * @protected\n         */\n        defaultOption: null,\n\n        /**\n         * @type {module:echarts/model/Global}\n         * @readOnly\n         */\n        ecModel: null,\n\n        /**\n         * key: componentType\n         * value:  Component model list, can not be null.\n         * @type {Object.<string, Array.<module:echarts/model/Model>>}\n         * @readOnly\n         */\n        dependentModels: [],\n\n        /**\n         * @type {string}\n         * @readOnly\n         */\n        uid: null,\n\n        /**\n         * Support merge layout params.\n         * Only support 'box' now (left/right/top/bottom/width/height).\n         * @type {string|Object} Object can be {ignoreSize: true}\n         * @readOnly\n         */\n        layoutMode: null,\n\n        $constructor: function (option, parentModel, ecModel, extraOpt) {\n            Model.call(this, option, parentModel, ecModel, extraOpt);\n\n            this.uid = componentUtil.getUID('componentModel');\n        },\n\n\n        init: function (option, parentModel, ecModel, extraOpt) {\n            this.mergeDefaultAndTheme(option, ecModel);\n        },\n\n        mergeDefaultAndTheme: function (option, ecModel) {\n            var layoutMode = this.layoutMode;\n            var inputPositionParams = layoutMode\n                ? layout.getLayoutParams(option) : {};\n\n            var themeModel = ecModel.getTheme();\n            zrUtil.merge(option, themeModel.get(this.mainType));\n            zrUtil.merge(option, this.getDefaultOption());\n\n            if (layoutMode) {\n                layout.mergeLayoutParam(option, inputPositionParams, layoutMode);\n            }\n        },\n\n        mergeOption: function (option, extraOpt) {\n            zrUtil.merge(this.option, option, true);\n\n            var layoutMode = this.layoutMode;\n            if (layoutMode) {\n                layout.mergeLayoutParam(this.option, option, layoutMode);\n            }\n        },\n\n        // Hooker after init or mergeOption\n        optionUpdated: function (newCptOption, isInit) {},\n\n        getDefaultOption: function () {\n            if (!clazzUtil.hasOwn(this, '__defaultOption')) {\n                var optList = [];\n                var Class = this.constructor;\n                while (Class) {\n                    var opt = Class.prototype.defaultOption;\n                    opt && optList.push(opt);\n                    Class = Class.superClass;\n                }\n\n                var defaultOption = {};\n                for (var i = optList.length - 1; i >= 0; i--) {\n                    defaultOption = zrUtil.merge(defaultOption, optList[i], true);\n                }\n                clazzUtil.set(this, '__defaultOption', defaultOption);\n            }\n            return clazzUtil.get(this, '__defaultOption');\n        },\n\n        getReferringComponents: function (mainType) {\n            return this.ecModel.queryComponents({\n                mainType: mainType,\n                index: this.get(mainType + 'Index', true),\n                id: this.get(mainType + 'Id', true)\n            });\n        }\n\n    });\n\n    // Reset ComponentModel.extend, add preConstruct.\n    // clazzUtil.enableClassExtend(\n    //     ComponentModel,\n    //     function (option, parentModel, ecModel, extraOpt) {\n    //         // Set dependentModels, componentIndex, name, id, mainType, subType.\n    //         zrUtil.extend(this, extraOpt);\n\n    //         this.uid = componentUtil.getUID('componentModel');\n\n    //         // this.setReadOnly([\n    //         //     'type', 'id', 'uid', 'name', 'mainType', 'subType',\n    //         //     'dependentModels', 'componentIndex'\n    //         // ]);\n    //     }\n    // );\n\n    // Add capability of registerClass, getClass, hasClass, registerSubTypeDefaulter and so on.\n    clazzUtil.enableClassManagement(\n        ComponentModel, {registerWhenExtend: true}\n    );\n    componentUtil.enableSubTypeDefaulter(ComponentModel);\n\n    // Add capability of ComponentModel.topologicalTravel.\n    componentUtil.enableTopologicalTravel(ComponentModel, getDependencies);\n\n    function getDependencies(componentType) {\n        var deps = [];\n        zrUtil.each(ComponentModel.getClassesByMainType(componentType), function (Clazz) {\n            arrayPush.apply(deps, Clazz.prototype.dependencies || []);\n        });\n        // Ensure main type\n        return zrUtil.map(deps, function (type) {\n            return clazzUtil.parseClassType(type).main;\n        });\n    }\n\n    zrUtil.mixin(ComponentModel, __webpack_require__(\"tPN/\"));\n\n    module.exports = ComponentModel;\n\n\n/***/ }),\n\n/***/ \"xFPV\":\n/***/ (function(module, exports) {\n\n\n    var dpr = 1;\n    // If in browser environment\n    if (typeof window !== 'undefined') {\n        dpr = Math.max(window.devicePixelRatio || 1, 1);\n    }\n    /**\n     * config默认配置项\n     * @exports zrender/config\n     * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)\n     */\n    var config = {\n        /**\n         * debug日志选项：catchBrushException为true下有效\n         * 0 : 不生成debug数据，发布用\n         * 1 : 异常抛出，调试用\n         * 2 : 控制台输出，调试用\n         */\n        debugMode: 0,\n\n        // retina 屏幕优化\n        devicePixelRatio: dpr\n    };\n    module.exports = config;\n\n\n\n\n/***/ }),\n\n/***/ \"xG35\":\n/***/ (function(module, exports) {\n\n/**\n * zrender: 生成唯一id\n *\n * @author errorrik (errorrik@gmail.com)\n */\n\n\n    var idStart = 0x0907;\n\n    module.exports = function () {\n        return idStart++;\n    };\n\n\n\n/***/ }),\n\n/***/ \"xI8J\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\n    var zrUtil = __webpack_require__(\"nw1Z\");\n    var symbolCreator = __webpack_require__(\"LDr7\");\n    var graphic = __webpack_require__(\"y2WT\");\n    var listComponentHelper = __webpack_require__(\"UqER\");\n\n    var curry = zrUtil.curry;\n\n    function dispatchSelectAction(name, api) {\n        api.dispatchAction({\n            type: 'legendToggleSelect',\n            name: name\n        });\n    }\n\n    function dispatchHighlightAction(seriesModel, dataName, api) {\n        // If element hover will move to a hoverLayer.\n        var el = api.getZr().storage.getDisplayList()[0];\n        if (!(el && el.useHoverLayer)) {\n            seriesModel.get('legendHoverLink') && api.dispatchAction({\n                type: 'highlight',\n                seriesName: seriesModel.name,\n                name: dataName\n            });\n        }\n    }\n\n    function dispatchDownplayAction(seriesModel, dataName, api) {\n        // If element hover will move to a hoverLayer.\n        var el = api.getZr().storage.getDisplayList()[0];\n        if (!(el && el.useHoverLayer)) {\n            seriesModel.get('legendHoverLink') && api.dispatchAction({\n                type: 'downplay',\n                seriesName: seriesModel.name,\n                name: dataName\n            });\n        }\n    }\n\n    module.exports = __webpack_require__(\"Cwwa\").extendComponentView({\n\n        type: 'legend',\n\n        init: function () {\n            this._symbolTypeStore = {};\n        },\n\n        render: function (legendModel, ecModel, api) {\n            var group = this.group;\n            group.removeAll();\n\n            if (!legendModel.get('show')) {\n                return;\n            }\n\n            var selectMode = legendModel.get('selectedMode');\n            var itemAlign = legendModel.get('align');\n\n            if (itemAlign === 'auto') {\n                itemAlign = (legendModel.get('left') === 'right'\n                    && legendModel.get('orient') === 'vertical')\n                    ? 'right' : 'left';\n            }\n\n            var legendDrawedMap = zrUtil.createHashMap();\n\n            zrUtil.each(legendModel.getData(), function (itemModel) {\n                var name = itemModel.get('name');\n\n                // Use empty string or \\n as a newline string\n                if (name === '' || name === '\\n') {\n                    group.add(new graphic.Group({\n                        newline: true\n                    }));\n                    return;\n                }\n\n                var seriesModel = ecModel.getSeriesByName(name)[0];\n\n                if (legendDrawedMap.get(name)) {\n                    // Have been drawed\n                    return;\n                }\n\n                // Series legend\n                if (seriesModel) {\n                    var data = seriesModel.getData();\n                    var color = data.getVisual('color');\n\n                    // If color is a callback function\n                    if (typeof color === 'function') {\n                        // Use the first data\n                        color = color(seriesModel.getDataParams(0));\n                    }\n\n                    // Using rect symbol defaultly\n                    var legendSymbolType = data.getVisual('legendSymbol') || 'roundRect';\n                    var symbolType = data.getVisual('symbol');\n\n                    var itemGroup = this._createItem(\n                        name, itemModel, legendModel,\n                        legendSymbolType, symbolType,\n                        itemAlign, color,\n                        selectMode\n                    );\n\n                    itemGroup.on('click', curry(dispatchSelectAction, name, api))\n                        .on('mouseover', curry(dispatchHighlightAction, seriesModel, null, api))\n                        .on('mouseout', curry(dispatchDownplayAction, seriesModel, null, api));\n\n                    legendDrawedMap.set(name, true);\n                }\n                else {\n                    // Data legend of pie, funnel\n                    ecModel.eachRawSeries(function (seriesModel) {\n                        // In case multiple series has same data name\n                        if (legendDrawedMap.get(name)) {\n                            return;\n                        }\n                        if (seriesModel.legendDataProvider) {\n                            var data = seriesModel.legendDataProvider();\n                            var idx = data.indexOfName(name);\n                            if (idx < 0) {\n                                return;\n                            }\n\n                            var color = data.getItemVisual(idx, 'color');\n\n                            var legendSymbolType = 'roundRect';\n\n                            var itemGroup = this._createItem(\n                                name, itemModel, legendModel,\n                                legendSymbolType, null,\n                                itemAlign, color,\n                                selectMode\n                            );\n\n                            itemGroup.on('click', curry(dispatchSelectAction, name, api))\n                                // FIXME Should not specify the series name\n                                .on('mouseover', curry(dispatchHighlightAction, seriesModel, name, api))\n                                .on('mouseout', curry(dispatchDownplayAction, seriesModel, name, api));\n\n                            legendDrawedMap.set(name, true);\n                        }\n                    }, this);\n                }\n\n                if (__DEV__) {\n                    if (!legendDrawedMap.get(name)) {\n                        console.warn(name + ' series not exists. Legend data should be same with series name or data name.');\n                    }\n                }\n            }, this);\n\n            listComponentHelper.layout(group, legendModel, api);\n            // Render background after group is layout\n            // FIXME\n            listComponentHelper.addBackground(group, legendModel);\n        },\n\n        _createItem: function (\n            name, itemModel, legendModel,\n            legendSymbolType, symbolType,\n            itemAlign, color, selectMode\n        ) {\n            var itemWidth = legendModel.get('itemWidth');\n            var itemHeight = legendModel.get('itemHeight');\n            var inactiveColor = legendModel.get('inactiveColor');\n\n            var isSelected = legendModel.isSelected(name);\n            var itemGroup = new graphic.Group();\n\n            var textStyleModel = itemModel.getModel('textStyle');\n\n            var itemIcon = itemModel.get('icon');\n\n            var tooltipModel = itemModel.getModel('tooltip');\n            var legendGlobalTooltipModel = tooltipModel.parentModel;\n\n            // Use user given icon first\n            legendSymbolType = itemIcon || legendSymbolType;\n            itemGroup.add(symbolCreator.createSymbol(\n                legendSymbolType, 0, 0, itemWidth, itemHeight, isSelected ? color : inactiveColor\n            ));\n\n            // Compose symbols\n            // PENDING\n            if (!itemIcon && symbolType\n                // At least show one symbol, can't be all none\n                && ((symbolType !== legendSymbolType) || symbolType == 'none')\n            ) {\n                var size = itemHeight * 0.8;\n                if (symbolType === 'none') {\n                    symbolType = 'circle';\n                }\n                // Put symbol in the center\n                itemGroup.add(symbolCreator.createSymbol(\n                    symbolType, (itemWidth - size) / 2, (itemHeight - size) / 2, size, size,\n                    isSelected ? color : inactiveColor\n                ));\n            }\n\n            // Text\n            var textX = itemAlign === 'left' ? itemWidth + 5 : -5;\n            var textAlign = itemAlign;\n\n            var formatter = legendModel.get('formatter');\n            var content = name;\n            if (typeof formatter === 'string' && formatter) {\n                content = formatter.replace('{name}', name != null ? name : '');\n            }\n            else if (typeof formatter === 'function') {\n                content = formatter(name);\n            }\n\n            var text = new graphic.Text({\n                style: {\n                    text: content,\n                    x: textX,\n                    y: itemHeight / 2,\n                    fill: isSelected ? textStyleModel.getTextColor() : inactiveColor,\n                    textFont: textStyleModel.getFont(),\n                    textAlign: textAlign,\n                    textVerticalAlign: 'middle'\n                }\n            });\n            itemGroup.add(text);\n\n            // Add a invisible rect to increase the area of mouse hover\n            var hitRect = new graphic.Rect({\n                shape: itemGroup.getBoundingRect(),\n                invisible: true,\n                tooltip: tooltipModel.get('show') ? zrUtil.extend({\n                    content: name,\n                    // Defaul formatter\n                    formatter: legendGlobalTooltipModel.get('formatter', true) || function () {\n                        return name;\n                    },\n                    formatterParams: {\n                        componentType: 'legend',\n                        legendIndex: legendModel.componentIndex,\n                        name: name,\n                        $vars: ['name']\n                    }\n                }, tooltipModel.option) : null\n            });\n            itemGroup.add(hitRect);\n\n            itemGroup.eachChild(function (child) {\n                child.silent = true;\n            });\n\n            hitRect.silent = !selectMode;\n\n\n\n            this.group.add(itemGroup);\n\n            graphic.setHoverStyle(itemGroup);\n\n            return itemGroup;\n        }\n    });\n\n\n/***/ }),\n\n/***/ \"xLXz\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\n    var zrUtil = __webpack_require__(\"nw1Z\");\n    var modelUtil = __webpack_require__(\"LFYx\");\n    var modelHelper = __webpack_require__(\"Rj1V\");\n    var findPointFromSeries = __webpack_require__(\"tR6g\");\n\n    var each = zrUtil.each;\n    var curry = zrUtil.curry;\n    var get = modelUtil.makeGetter();\n\n    /**\n     * Basic logic: check all axis, if they do not demand show/highlight,\n     * then hide/downplay them.\n     *\n     * @param {Object} coordSysAxesInfo\n     * @param {string} [currTrigger] 'click' | 'mousemove' | 'leave'\n     * @param {Array.<number>} [point] x and y, which are mandatory, specify a point to\n     *              tigger axisPointer and tooltip.\n     * @param {Object} [finder] {\n     *                  seriesIndex, dataIndex,\n     *                  axesInfo: [{\n     *                      axisDim: 'x'|'y'|'angle'|..., axisIndex: ..., value: ...\n     *                  }, ...]\n     *              }\n     *              These properties, which are optional, restrict target axes.\n     * @param {Function} dispatchAction\n     * @param {module:echarts/ExtensionAPI} api\n     * @param {Object} [tooltipOption]\n     * @return {Object} content of event obj for echarts.connect.\n     */\n    function axisTrigger(\n        coordSysAxesInfo, currTrigger, point, finder, dispatchAction,\n        ecModel, api, tooltipOption\n    ) {\n        finder = finder || {};\n        if (illegalPoint(point)) {\n            // Used in the default behavior of `connection`: use the sample seriesIndex\n            // and dataIndex. And also used in the tooltipView trigger.\n            point = findPointFromSeries({\n                seriesIndex: finder.seriesIndex,\n                // Do not use dataIndexInside from other ec instance.\n                // FIXME: auto detect it?\n                dataIndex: finder.dataIndex\n            }, ecModel).point;\n        }\n        var isIllegalPoint = illegalPoint(point);\n\n        // Axis and value can be specified when calling dispatchAction({type: 'updateAxisPointer'}).\n        // Notice: In this case, it is difficult to get the `point` (which is necessary to show\n        // tooltip, so if point is not given, we just use the point found by sample seriesIndex\n        // and dataIndex.\n        var inputAxesInfo = finder.axesInfo;\n\n        var axesInfo = coordSysAxesInfo.axesInfo;\n        var shouldHide = currTrigger === 'leave' || illegalPoint(point);\n        var outputFinder = {};\n\n        var showValueMap = {};\n        var dataByCoordSys = {list: [], map: {}};\n        var updaters = {\n            showPointer: curry(showPointer, showValueMap),\n            showTooltip: curry(showTooltip, dataByCoordSys)\n        };\n\n        // Process for triggered axes.\n        each(coordSysAxesInfo.coordSysMap, function (coordSys, coordSysKey) {\n            // If a point given, it must be contained by the coordinate system.\n            var coordSysContainsPoint = isIllegalPoint || coordSys.containPoint(point);\n\n            each(coordSysAxesInfo.coordSysAxesInfo[coordSysKey], function (axisInfo, key) {\n                var axis = axisInfo.axis;\n                var inputAxisInfo = findInputAxisInfo(inputAxesInfo, axisInfo);\n                // If no inputAxesInfo, no axis is restricted.\n                if (!shouldHide && coordSysContainsPoint && (!inputAxesInfo || inputAxisInfo)) {\n                    var val = inputAxisInfo && inputAxisInfo.value;\n                    if (val == null && !isIllegalPoint) {\n                        val = axis.pointToData(point);\n                    }\n                    val != null && processOnAxis(axisInfo, val, updaters, false, outputFinder);\n                }\n            });\n        });\n\n        // Process for linked axes.\n        var linkTriggers = {};\n        each(axesInfo, function (tarAxisInfo, tarKey) {\n            var linkGroup = tarAxisInfo.linkGroup;\n\n            // If axis has been triggered in the previous stage, it should not be triggered by link.\n            if (linkGroup && !showValueMap[tarKey]) {\n                each(linkGroup.axesInfo, function (srcAxisInfo, srcKey) {\n                    var srcValItem = showValueMap[srcKey];\n                    // If srcValItem exist, source axis is triggered, so link to target axis.\n                    if (srcAxisInfo !== tarAxisInfo && srcValItem) {\n                        var val = srcValItem.value;\n                        linkGroup.mapper && (val = tarAxisInfo.axis.scale.parse(linkGroup.mapper(\n                            val, makeMapperParam(srcAxisInfo), makeMapperParam(tarAxisInfo)\n                        )));\n                        linkTriggers[tarAxisInfo.key] = val;\n                    }\n                });\n            }\n        });\n        each(linkTriggers, function (val, tarKey) {\n            processOnAxis(axesInfo[tarKey], val, updaters, true, outputFinder);\n        });\n\n        updateModelActually(showValueMap, axesInfo, outputFinder);\n        dispatchTooltipActually(dataByCoordSys, point, tooltipOption, dispatchAction);\n        dispatchHighDownActually(axesInfo, dispatchAction, api);\n\n        return outputFinder;\n    }\n\n    function processOnAxis(axisInfo, newValue, updaters, dontSnap, outputFinder) {\n        var axis = axisInfo.axis;\n\n        if (axis.scale.isBlank() || !axis.containData(newValue)) {\n            return;\n        }\n\n        if (!axisInfo.involveSeries) {\n            updaters.showPointer(axisInfo, newValue);\n            return;\n        }\n\n        // Heavy calculation. So put it after axis.containData checking.\n        var payloadInfo = buildPayloadsBySeries(newValue, axisInfo);\n        var payloadBatch = payloadInfo.payloadBatch;\n        var snapToValue = payloadInfo.snapToValue;\n\n        // Fill content of event obj for echarts.connect.\n        // By defualt use the first involved series data as a sample to connect.\n        if (payloadBatch[0] && outputFinder.seriesIndex == null) {\n            zrUtil.extend(outputFinder, payloadBatch[0]);\n        }\n\n        // If no linkSource input, this process is for collecting link\n        // target, where snap should not be accepted.\n        if (!dontSnap && axisInfo.snap) {\n            if (axis.containData(snapToValue) && snapToValue != null) {\n                newValue = snapToValue;\n            }\n        }\n\n        updaters.showPointer(axisInfo, newValue, payloadBatch, outputFinder);\n        // Tooltip should always be snapToValue, otherwise there will be\n        // incorrect \"axis value ~ series value\" mapping displayed in tooltip.\n        updaters.showTooltip(axisInfo, payloadInfo, snapToValue);\n    }\n\n    function buildPayloadsBySeries(value, axisInfo) {\n        var axis = axisInfo.axis;\n        var dim = axis.dim;\n        var snapToValue = value;\n        var payloadBatch = [];\n        var minDist = Number.MAX_VALUE;\n        var minDiff = -1;\n\n        each(axisInfo.seriesModels, function (series, idx) {\n            var dataDim = series.coordDimToDataDim(dim);\n            var seriesNestestValue;\n            var dataIndices;\n\n            if (series.getAxisTooltipData) {\n                var result = series.getAxisTooltipData(dataDim, value, axis);\n                dataIndices = result.dataIndices;\n                seriesNestestValue = result.nestestValue;\n            }\n            else {\n                dataIndices = series.getData().indicesOfNearest(\n                    dataDim[0],\n                    value,\n                    // Add a threshold to avoid find the wrong dataIndex\n                    // when data length is not same.\n                    false, axis.type === 'category' ? 0.5 : null\n                );\n                if (!dataIndices.length) {\n                    return;\n                }\n                seriesNestestValue = series.getData().get(dataDim[0], dataIndices[0]);\n            }\n\n            if (seriesNestestValue == null || !isFinite(seriesNestestValue)) {\n                return;\n            }\n\n            var diff = value - seriesNestestValue;\n            var dist = Math.abs(diff);\n            // Consider category case\n            if (dist <= minDist) {\n                if (dist < minDist || (diff >= 0 && minDiff < 0)) {\n                    minDist = dist;\n                    minDiff = diff;\n                    snapToValue = seriesNestestValue;\n                    payloadBatch.length = 0;\n                }\n                each(dataIndices, function (dataIndex) {\n                    payloadBatch.push({\n                        seriesIndex: series.seriesIndex,\n                        dataIndexInside: dataIndex,\n                        dataIndex: series.getData().getRawIndex(dataIndex)\n                    });\n                });\n            }\n        });\n\n        return {\n            payloadBatch: payloadBatch,\n            snapToValue: snapToValue\n        };\n    }\n\n    function showPointer(showValueMap, axisInfo, value, payloadBatch) {\n        showValueMap[axisInfo.key] = {value: value, payloadBatch: payloadBatch};\n    }\n\n    function showTooltip(dataByCoordSys, axisInfo, payloadInfo, value) {\n        var payloadBatch = payloadInfo.payloadBatch;\n        var axis = axisInfo.axis;\n        var axisModel = axis.model;\n        var axisPointerModel = axisInfo.axisPointerModel;\n\n        // If no data, do not create anything in dataByCoordSys,\n        // whose length will be used to judge whether dispatch action.\n        if (!axisInfo.triggerTooltip || !payloadBatch.length) {\n            return;\n        }\n\n        var coordSysModel = axisInfo.coordSys.model;\n        var coordSysKey = modelHelper.makeKey(coordSysModel);\n        var coordSysItem = dataByCoordSys.map[coordSysKey];\n        if (!coordSysItem) {\n            coordSysItem = dataByCoordSys.map[coordSysKey] = {\n                coordSysId: coordSysModel.id,\n                coordSysIndex: coordSysModel.componentIndex,\n                coordSysType: coordSysModel.type,\n                coordSysMainType: coordSysModel.mainType,\n                dataByAxis: []\n            };\n            dataByCoordSys.list.push(coordSysItem);\n        }\n\n        coordSysItem.dataByAxis.push({\n            axisDim: axis.dim,\n            axisIndex: axisModel.componentIndex,\n            axisType: axisModel.type,\n            axisId: axisModel.id,\n            value: value,\n            // Caustion: viewHelper.getValueLabel is actually on \"view stage\", which\n            // depends that all models have been updated. So it should not be performed\n            // here. Considering axisPointerModel used here is volatile, which is hard\n            // to be retrieve in TooltipView, we prepare parameters here.\n            valueLabelOpt: {\n                precision: axisPointerModel.get('label.precision'),\n                formatter: axisPointerModel.get('label.formatter')\n            },\n            seriesDataIndices: payloadBatch.slice()\n        });\n    }\n\n    function updateModelActually(showValueMap, axesInfo, outputFinder) {\n        var outputAxesInfo = outputFinder.axesInfo = [];\n        // Basic logic: If no 'show' required, 'hide' this axisPointer.\n        each(axesInfo, function (axisInfo, key) {\n            var option = axisInfo.axisPointerModel.option;\n            var valItem = showValueMap[key];\n\n            if (valItem) {\n                !axisInfo.useHandle && (option.status = 'show');\n                option.value = valItem.value;\n                // For label formatter param and highlight.\n                option.seriesDataIndices = (valItem.payloadBatch || []).slice();\n            }\n            // When always show (e.g., handle used), remain\n            // original value and status.\n            else {\n                // If hide, value still need to be set, consider\n                // click legend to toggle axis blank.\n                !axisInfo.useHandle && (option.status = 'hide');\n            }\n\n            // If status is 'hide', should be no info in payload.\n            option.status === 'show' && outputAxesInfo.push({\n                axisDim: axisInfo.axis.dim,\n                axisIndex: axisInfo.axis.model.componentIndex,\n                value: option.value\n            });\n        });\n    }\n\n    function dispatchTooltipActually(dataByCoordSys, point, tooltipOption, dispatchAction) {\n        // Basic logic: If no showTip required, hideTip will be dispatched.\n        if (illegalPoint(point) || !dataByCoordSys.list.length) {\n            dispatchAction({type: 'hideTip'});\n            return;\n        }\n\n        // In most case only one axis (or event one series is used). It is\n        // convinient to fetch payload.seriesIndex and payload.dataIndex\n        // dirtectly. So put the first seriesIndex and dataIndex of the first\n        // axis on the payload.\n        var sampleItem = ((dataByCoordSys.list[0].dataByAxis[0] || {}).seriesDataIndices || [])[0] || {};\n\n        dispatchAction({\n            type: 'showTip',\n            escapeConnect: true,\n            x: point[0],\n            y: point[1],\n            tooltipOption: tooltipOption,\n            dataIndexInside: sampleItem.dataIndexInside,\n            dataIndex: sampleItem.dataIndex,\n            seriesIndex: sampleItem.seriesIndex,\n            dataByCoordSys: dataByCoordSys.list\n        });\n    }\n\n    function dispatchHighDownActually(axesInfo, dispatchAction, api) {\n        // FIXME\n        // highlight status modification shoule be a stage of main process?\n        // (Consider confilct (e.g., legend and axisPointer) and setOption)\n\n        var zr = api.getZr();\n        var highDownKey = 'axisPointerLastHighlights';\n        var lastHighlights = get(zr)[highDownKey] || {};\n        var newHighlights = get(zr)[highDownKey] = {};\n\n        // Update highlight/downplay status according to axisPointer model.\n        // Build hash map and remove duplicate incidentally.\n        each(axesInfo, function (axisInfo, key) {\n            var option = axisInfo.axisPointerModel.option;\n            option.status === 'show' && each(option.seriesDataIndices, function (batchItem) {\n                var key = batchItem.seriesIndex + ' | ' + batchItem.dataIndex;\n                newHighlights[key] = batchItem;\n            });\n        });\n\n        // Diff.\n        var toHighlight = [];\n        var toDownplay = [];\n        zrUtil.each(lastHighlights, function (batchItem, key) {\n            !newHighlights[key] && toDownplay.push(batchItem);\n        });\n        zrUtil.each(newHighlights, function (batchItem, key) {\n            !lastHighlights[key] && toHighlight.push(batchItem);\n        });\n\n        toDownplay.length && api.dispatchAction({\n            type: 'downplay', escapeConnect: true, batch: toDownplay\n        });\n        toHighlight.length && api.dispatchAction({\n            type: 'highlight', escapeConnect: true, batch: toHighlight\n        });\n    }\n\n    function findInputAxisInfo(inputAxesInfo, axisInfo) {\n        for (var i = 0; i < (inputAxesInfo || []).length; i++) {\n            var inputAxisInfo = inputAxesInfo[i];\n            if (axisInfo.axis.dim === inputAxisInfo.axisDim\n                && axisInfo.axis.model.componentIndex === inputAxisInfo.axisIndex\n            ) {\n                return inputAxisInfo;\n            }\n        }\n    }\n\n    function makeMapperParam(axisInfo) {\n        var axisModel = axisInfo.axis.model;\n        var item = {};\n        var dim = item.axisDim = axisInfo.axis.dim;\n        item.axisIndex = item[dim + 'AxisIndex'] = axisModel.componentIndex;\n        item.axisName = item[dim + 'AxisName'] = axisModel.name;\n        item.axisId = item[dim + 'AxisId'] = axisModel.id;\n        return item;\n    }\n\n    function illegalPoint(point) {\n        return !point || point[0] == null || isNaN(point[0]) || point[1] == null || isNaN(point[1]);\n    }\n\n    module.exports = axisTrigger;\n\n\n/***/ }),\n\n/***/ \"y2WT\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n\n    var zrUtil = __webpack_require__(\"nw1Z\");\n\n    var pathTool = __webpack_require__(\"LdYJ\");\n    var Path = __webpack_require__(\"CC7E\");\n    var colorTool = __webpack_require__(\"cwCJ\");\n    var matrix = __webpack_require__(\"GjIh\");\n    var vector = __webpack_require__(\"Krco\");\n    var Transformable = __webpack_require__(\"V5JR\");\n    var BoundingRect = __webpack_require__(\"W4Cx\");\n\n    var round = Math.round;\n    var mathMax = Math.max;\n    var mathMin = Math.min;\n\n    var graphic = {};\n\n    graphic.Group = __webpack_require__(\"yMOk\");\n\n    graphic.Image = __webpack_require__(\"4obY\");\n\n    graphic.Text = __webpack_require__(\"46R8\");\n\n    graphic.Circle = __webpack_require__(\"gE7w\");\n\n    graphic.Sector = __webpack_require__(\"LsC0\");\n\n    graphic.Ring = __webpack_require__(\"EtPY\");\n\n    graphic.Polygon = __webpack_require__(\"aREe\");\n\n    graphic.Polyline = __webpack_require__(\"oge2\");\n\n    graphic.Rect = __webpack_require__(\"yrSL\");\n\n    graphic.Line = __webpack_require__(\"0+1J\");\n\n    graphic.BezierCurve = __webpack_require__(\"61Fv\");\n\n    graphic.Arc = __webpack_require__(\"3qaN\");\n\n    graphic.CompoundPath = __webpack_require__(\"vfQN\");\n\n    graphic.LinearGradient = __webpack_require__(\"V+37\");\n\n    graphic.RadialGradient = __webpack_require__(\"bHR6\");\n\n    graphic.BoundingRect = BoundingRect;\n\n    /**\n     * Extend shape with parameters\n     */\n    graphic.extendShape = function (opts) {\n        return Path.extend(opts);\n    };\n\n    /**\n     * Extend path\n     */\n    graphic.extendPath = function (pathData, opts) {\n        return pathTool.extendFromString(pathData, opts);\n    };\n\n    /**\n     * Create a path element from path data string\n     * @param {string} pathData\n     * @param {Object} opts\n     * @param {module:zrender/core/BoundingRect} rect\n     * @param {string} [layout=cover] 'center' or 'cover'\n     */\n    graphic.makePath = function (pathData, opts, rect, layout) {\n        var path = pathTool.createFromString(pathData, opts);\n        var boundingRect = path.getBoundingRect();\n        if (rect) {\n            var aspect = boundingRect.width / boundingRect.height;\n\n            if (layout === 'center') {\n                // Set rect to center, keep width / height ratio.\n                var width = rect.height * aspect;\n                var height;\n                if (width <= rect.width) {\n                    height = rect.height;\n                }\n                else {\n                    width = rect.width;\n                    height = width / aspect;\n                }\n                var cx = rect.x + rect.width / 2;\n                var cy = rect.y + rect.height / 2;\n\n                rect.x = cx - width / 2;\n                rect.y = cy - height / 2;\n                rect.width = width;\n                rect.height = height;\n            }\n\n            graphic.resizePath(path, rect);\n        }\n        return path;\n    };\n\n    graphic.mergePath = pathTool.mergePath,\n\n    /**\n     * Resize a path to fit the rect\n     * @param {module:zrender/graphic/Path} path\n     * @param {Object} rect\n     */\n    graphic.resizePath = function (path, rect) {\n        if (!path.applyTransform) {\n            return;\n        }\n\n        var pathRect = path.getBoundingRect();\n\n        var m = pathRect.calculateTransform(rect);\n\n        path.applyTransform(m);\n    };\n\n    /**\n     * Sub pixel optimize line for canvas\n     *\n     * @param {Object} param\n     * @param {Object} [param.shape]\n     * @param {number} [param.shape.x1]\n     * @param {number} [param.shape.y1]\n     * @param {number} [param.shape.x2]\n     * @param {number} [param.shape.y2]\n     * @param {Object} [param.style]\n     * @param {number} [param.style.lineWidth]\n     * @return {Object} Modified param\n     */\n    graphic.subPixelOptimizeLine = function (param) {\n        var subPixelOptimize = graphic.subPixelOptimize;\n        var shape = param.shape;\n        var lineWidth = param.style.lineWidth;\n\n        if (round(shape.x1 * 2) === round(shape.x2 * 2)) {\n            shape.x1 = shape.x2 = subPixelOptimize(shape.x1, lineWidth, true);\n        }\n        if (round(shape.y1 * 2) === round(shape.y2 * 2)) {\n            shape.y1 = shape.y2 = subPixelOptimize(shape.y1, lineWidth, true);\n        }\n        return param;\n    };\n\n    /**\n     * Sub pixel optimize rect for canvas\n     *\n     * @param {Object} param\n     * @param {Object} [param.shape]\n     * @param {number} [param.shape.x]\n     * @param {number} [param.shape.y]\n     * @param {number} [param.shape.width]\n     * @param {number} [param.shape.height]\n     * @param {Object} [param.style]\n     * @param {number} [param.style.lineWidth]\n     * @return {Object} Modified param\n     */\n    graphic.subPixelOptimizeRect = function (param) {\n        var subPixelOptimize = graphic.subPixelOptimize;\n        var shape = param.shape;\n        var lineWidth = param.style.lineWidth;\n        var originX = shape.x;\n        var originY = shape.y;\n        var originWidth = shape.width;\n        var originHeight = shape.height;\n        shape.x = subPixelOptimize(shape.x, lineWidth, true);\n        shape.y = subPixelOptimize(shape.y, lineWidth, true);\n        shape.width = Math.max(\n            subPixelOptimize(originX + originWidth, lineWidth, false) - shape.x,\n            originWidth === 0 ? 0 : 1\n        );\n        shape.height = Math.max(\n            subPixelOptimize(originY + originHeight, lineWidth, false) - shape.y,\n            originHeight === 0 ? 0 : 1\n        );\n        return param;\n    };\n\n    /**\n     * Sub pixel optimize for canvas\n     *\n     * @param {number} position Coordinate, such as x, y\n     * @param {number} lineWidth Should be nonnegative integer.\n     * @param {boolean=} positiveOrNegative Default false (negative).\n     * @return {number} Optimized position.\n     */\n    graphic.subPixelOptimize = function (position, lineWidth, positiveOrNegative) {\n        // Assure that (position + lineWidth / 2) is near integer edge,\n        // otherwise line will be fuzzy in canvas.\n        var doubledPosition = round(position * 2);\n        return (doubledPosition + round(lineWidth)) % 2 === 0\n            ? doubledPosition / 2\n            : (doubledPosition + (positiveOrNegative ? 1 : -1)) / 2;\n    };\n\n    function hasFillOrStroke(fillOrStroke) {\n        return fillOrStroke != null && fillOrStroke != 'none';\n    }\n\n    function liftColor(color) {\n        return typeof color === 'string' ? colorTool.lift(color, -0.1) : color;\n    }\n\n    /**\n     * @private\n     */\n    function cacheElementStl(el) {\n        if (el.__hoverStlDirty) {\n            var stroke = el.style.stroke;\n            var fill = el.style.fill;\n\n            // Create hoverStyle on mouseover\n            var hoverStyle = el.__hoverStl;\n            hoverStyle.fill = hoverStyle.fill\n                || (hasFillOrStroke(fill) ? liftColor(fill) : null);\n            hoverStyle.stroke = hoverStyle.stroke\n                || (hasFillOrStroke(stroke) ? liftColor(stroke) : null);\n\n            var normalStyle = {};\n            for (var name in hoverStyle) {\n                if (hoverStyle.hasOwnProperty(name)) {\n                    normalStyle[name] = el.style[name];\n                }\n            }\n\n            el.__normalStl = normalStyle;\n\n            el.__hoverStlDirty = false;\n        }\n    }\n\n    /**\n     * @private\n     */\n    function doSingleEnterHover(el) {\n        if (el.__isHover) {\n            return;\n        }\n\n        cacheElementStl(el);\n\n        if (el.useHoverLayer) {\n            el.__zr && el.__zr.addHover(el, el.__hoverStl);\n        }\n        else {\n            el.setStyle(el.__hoverStl);\n            el.z2 += 1;\n        }\n\n        el.__isHover = true;\n    }\n\n    /**\n     * @inner\n     */\n    function doSingleLeaveHover(el) {\n        if (!el.__isHover) {\n            return;\n        }\n\n        var normalStl = el.__normalStl;\n        if (el.useHoverLayer) {\n            el.__zr && el.__zr.removeHover(el);\n        }\n        else {\n            normalStl && el.setStyle(normalStl);\n            el.z2 -= 1;\n        }\n\n        el.__isHover = false;\n    }\n\n    /**\n     * @inner\n     */\n    function doEnterHover(el) {\n        el.type === 'group'\n            ? el.traverse(function (child) {\n                if (child.type !== 'group') {\n                    doSingleEnterHover(child);\n                }\n            })\n            : doSingleEnterHover(el);\n    }\n\n    function doLeaveHover(el) {\n        el.type === 'group'\n            ? el.traverse(function (child) {\n                if (child.type !== 'group') {\n                    doSingleLeaveHover(child);\n                }\n            })\n            : doSingleLeaveHover(el);\n    }\n\n    /**\n     * @inner\n     */\n    function setElementHoverStl(el, hoverStl) {\n        // If element has sepcified hoverStyle, then use it instead of given hoverStyle\n        // Often used when item group has a label element and it's hoverStyle is different\n        el.__hoverStl = el.hoverStyle || hoverStl || {};\n        el.__hoverStlDirty = true;\n\n        if (el.__isHover) {\n            cacheElementStl(el);\n        }\n    }\n\n    /**\n     * @inner\n     */\n    function onElementMouseOver(e) {\n        if (this.__hoverSilentOnTouch && e.zrByTouch) {\n            return;\n        }\n\n        // Only if element is not in emphasis status\n        !this.__isEmphasis && doEnterHover(this);\n    }\n\n    /**\n     * @inner\n     */\n    function onElementMouseOut(e) {\n        if (this.__hoverSilentOnTouch && e.zrByTouch) {\n            return;\n        }\n\n        // Only if element is not in emphasis status\n        !this.__isEmphasis && doLeaveHover(this);\n    }\n\n    /**\n     * @inner\n     */\n    function enterEmphasis() {\n        this.__isEmphasis = true;\n        doEnterHover(this);\n    }\n\n    /**\n     * @inner\n     */\n    function leaveEmphasis() {\n        this.__isEmphasis = false;\n        doLeaveHover(this);\n    }\n\n    /**\n     * Set hover style of element.\n     * This method can be called repeatly without side-effects.\n     * @param {module:zrender/Element} el\n     * @param {Object} [hoverStyle]\n     * @param {Object} [opt]\n     * @param {boolean} [opt.hoverSilentOnTouch=false]\n     *        In touch device, mouseover event will be trigger on touchstart event\n     *        (see module:zrender/dom/HandlerProxy). By this mechanism, we can\n     *        conviniently use hoverStyle when tap on touch screen without additional\n     *        code for compatibility.\n     *        But if the chart/component has select feature, which usually also use\n     *        hoverStyle, there might be conflict between 'select-highlight' and\n     *        'hover-highlight' especially when roam is enabled (see geo for example).\n     *        In this case, hoverSilentOnTouch should be used to disable hover-highlight\n     *        on touch device.\n     */\n    graphic.setHoverStyle = function (el, hoverStyle, opt) {\n        el.__hoverSilentOnTouch = opt && opt.hoverSilentOnTouch;\n\n        el.type === 'group'\n            ? el.traverse(function (child) {\n                if (child.type !== 'group') {\n                    setElementHoverStl(child, hoverStyle);\n                }\n            })\n            : setElementHoverStl(el, hoverStyle);\n\n        // Duplicated function will be auto-ignored, see Eventful.js.\n        el.on('mouseover', onElementMouseOver)\n          .on('mouseout', onElementMouseOut);\n\n        // Emphasis, normal can be triggered manually\n        el.on('emphasis', enterEmphasis)\n          .on('normal', leaveEmphasis);\n    };\n\n    /**\n     * Set text option in the style\n     * @param {Object} textStyle\n     * @param {module:echarts/model/Model} labelModel\n     * @param {string} color\n     */\n    graphic.setText = function (textStyle, labelModel, color) {\n        var labelPosition = labelModel.getShallow('position') || 'inside';\n        var labelOffset = labelModel.getShallow('offset');\n        var labelColor = labelPosition.indexOf('inside') >= 0 ? 'white' : color;\n        var textStyleModel = labelModel.getModel('textStyle');\n        zrUtil.extend(textStyle, {\n            textDistance: labelModel.getShallow('distance') || 5,\n            textFont: textStyleModel.getFont(),\n            textPosition: labelPosition,\n            textOffset: labelOffset,\n            textFill: textStyleModel.getTextColor() || labelColor\n        });\n    };\n\n    graphic.getFont = function (opt, ecModel) {\n        var gTextStyleModel = ecModel && ecModel.getModel('textStyle');\n        return [\n            // FIXME in node-canvas fontWeight is before fontStyle\n            opt.fontStyle || gTextStyleModel && gTextStyleModel.getShallow('fontStyle') || '',\n            opt.fontWeight || gTextStyleModel && gTextStyleModel.getShallow('fontWeight') || '',\n            (opt.fontSize || gTextStyleModel && gTextStyleModel.getShallow('fontSize') || 12) + 'px',\n            opt.fontFamily || gTextStyleModel && gTextStyleModel.getShallow('fontFamily') || 'sans-serif'\n        ].join(' ');\n    };\n\n    function animateOrSetProps(isUpdate, el, props, animatableModel, dataIndex, cb) {\n        if (typeof dataIndex === 'function') {\n            cb = dataIndex;\n            dataIndex = null;\n        }\n        // Do not check 'animation' property directly here. Consider this case:\n        // animation model is an `itemModel`, whose does not have `isAnimationEnabled`\n        // but its parent model (`seriesModel`) does.\n        var animationEnabled = animatableModel && animatableModel.isAnimationEnabled();\n\n        if (animationEnabled) {\n            var postfix = isUpdate ? 'Update' : '';\n            var duration = animatableModel.getShallow('animationDuration' + postfix);\n            var animationEasing = animatableModel.getShallow('animationEasing' + postfix);\n            var animationDelay = animatableModel.getShallow('animationDelay' + postfix);\n            if (typeof animationDelay === 'function') {\n                animationDelay = animationDelay(\n                    dataIndex,\n                    animatableModel.getAnimationDelayParams\n                        ? animatableModel.getAnimationDelayParams(el, dataIndex)\n                        : null\n                );\n            }\n            if (typeof duration === 'function') {\n                duration = duration(dataIndex);\n            }\n\n            duration > 0\n                ? el.animateTo(props, duration, animationDelay || 0, animationEasing, cb)\n                : (el.stopAnimation(), el.attr(props), cb && cb());\n        }\n        else {\n            el.stopAnimation();\n            el.attr(props);\n            cb && cb();\n        }\n    }\n\n    /**\n     * Update graphic element properties with or without animation according to the configuration in series\n     * @param {module:zrender/Element} el\n     * @param {Object} props\n     * @param {module:echarts/model/Model} [animatableModel]\n     * @param {number} [dataIndex]\n     * @param {Function} [cb]\n     * @example\n     *     graphic.updateProps(el, {\n     *         position: [100, 100]\n     *     }, seriesModel, dataIndex, function () { console.log('Animation done!'); });\n     *     // Or\n     *     graphic.updateProps(el, {\n     *         position: [100, 100]\n     *     }, seriesModel, function () { console.log('Animation done!'); });\n     */\n    graphic.updateProps = function (el, props, animatableModel, dataIndex, cb) {\n        animateOrSetProps(true, el, props, animatableModel, dataIndex, cb);\n    };\n\n    /**\n     * Init graphic element properties with or without animation according to the configuration in series\n     * @param {module:zrender/Element} el\n     * @param {Object} props\n     * @param {module:echarts/model/Model} [animatableModel]\n     * @param {number} [dataIndex]\n     * @param {Function} cb\n     */\n    graphic.initProps = function (el, props, animatableModel, dataIndex, cb) {\n        animateOrSetProps(false, el, props, animatableModel, dataIndex, cb);\n    };\n\n    /**\n     * Get transform matrix of target (param target),\n     * in coordinate of its ancestor (param ancestor)\n     *\n     * @param {module:zrender/mixin/Transformable} target\n     * @param {module:zrender/mixin/Transformable} [ancestor]\n     */\n    graphic.getTransform = function (target, ancestor) {\n        var mat = matrix.identity([]);\n\n        while (target && target !== ancestor) {\n            matrix.mul(mat, target.getLocalTransform(), mat);\n            target = target.parent;\n        }\n\n        return mat;\n    };\n\n    /**\n     * Apply transform to an vertex.\n     * @param {Array.<number>} target [x, y]\n     * @param {Array.<number>|TypedArray.<number>|Object} transform Can be:\n     *      + Transform matrix: like [1, 0, 0, 1, 0, 0]\n     *      + {position, rotation, scale}, the same as `zrender/Transformable`.\n     * @param {boolean=} invert Whether use invert matrix.\n     * @return {Array.<number>} [x, y]\n     */\n    graphic.applyTransform = function (target, transform, invert) {\n        if (transform && !zrUtil.isArrayLike(transform)) {\n            transform = Transformable.getLocalTransform(transform);\n        }\n\n        if (invert) {\n            transform = matrix.invert([], transform);\n        }\n        return vector.applyTransform([], target, transform);\n    };\n\n    /**\n     * @param {string} direction 'left' 'right' 'top' 'bottom'\n     * @param {Array.<number>} transform Transform matrix: like [1, 0, 0, 1, 0, 0]\n     * @param {boolean=} invert Whether use invert matrix.\n     * @return {string} Transformed direction. 'left' 'right' 'top' 'bottom'\n     */\n    graphic.transformDirection = function (direction, transform, invert) {\n\n        // Pick a base, ensure that transform result will not be (0, 0).\n        var hBase = (transform[4] === 0 || transform[5] === 0 || transform[0] === 0)\n            ? 1 : Math.abs(2 * transform[4] / transform[0]);\n        var vBase = (transform[4] === 0 || transform[5] === 0 || transform[2] === 0)\n            ? 1 : Math.abs(2 * transform[4] / transform[2]);\n\n        var vertex = [\n            direction === 'left' ? -hBase : direction === 'right' ? hBase : 0,\n            direction === 'top' ? -vBase : direction === 'bottom' ? vBase : 0\n        ];\n\n        vertex = graphic.applyTransform(vertex, transform, invert);\n\n        return Math.abs(vertex[0]) > Math.abs(vertex[1])\n            ? (vertex[0] > 0 ? 'right' : 'left')\n            : (vertex[1] > 0 ? 'bottom' : 'top');\n    };\n\n    /**\n     * Apply group transition animation from g1 to g2.\n     * If no animatableModel, no animation.\n     */\n    graphic.groupTransition = function (g1, g2, animatableModel, cb) {\n        if (!g1 || !g2) {\n            return;\n        }\n\n        function getElMap(g) {\n            var elMap = {};\n            g.traverse(function (el) {\n                if (!el.isGroup && el.anid) {\n                    elMap[el.anid] = el;\n                }\n            });\n            return elMap;\n        }\n        function getAnimatableProps(el) {\n            var obj = {\n                position: vector.clone(el.position),\n                rotation: el.rotation\n            };\n            if (el.shape) {\n                obj.shape = zrUtil.extend({}, el.shape);\n            }\n            return obj;\n        }\n        var elMap1 = getElMap(g1);\n\n        g2.traverse(function (el) {\n            if (!el.isGroup && el.anid) {\n                var oldEl = elMap1[el.anid];\n                if (oldEl) {\n                    var newProp = getAnimatableProps(el);\n                    el.attr(getAnimatableProps(oldEl));\n                    graphic.updateProps(el, newProp, animatableModel, el.dataIndex);\n                }\n                // else {\n                //     if (el.previousProps) {\n                //         graphic.updateProps\n                //     }\n                // }\n            }\n        });\n    };\n\n    /**\n     * @param {Array.<Array.<number>>} points Like: [[23, 44], [53, 66], ...]\n     * @param {Object} rect {x, y, width, height}\n     * @return {Array.<Array.<number>>} A new clipped points.\n     */\n    graphic.clipPointsByRect = function (points, rect) {\n        return zrUtil.map(points, function (point) {\n            var x = point[0];\n            x = mathMax(x, rect.x);\n            x = mathMin(x, rect.x + rect.width);\n            var y = point[1];\n            y = mathMax(y, rect.y);\n            y = mathMin(y, rect.y + rect.height);\n            return [x, y];\n        });\n    };\n\n    /**\n     * @param {Object} targetRect {x, y, width, height}\n     * @param {Object} rect {x, y, width, height}\n     * @return {Object} A new clipped rect. If rect size are negative, return undefined.\n     */\n    graphic.clipRectByRect = function (targetRect, rect) {\n        var x = mathMax(targetRect.x, rect.x);\n        var x2 = mathMin(targetRect.x + targetRect.width, rect.x + rect.width);\n        var y = mathMax(targetRect.y, rect.y);\n        var y2 = mathMin(targetRect.y + targetRect.height, rect.y + rect.height);\n\n        if (x2 >= x && y2 >= y) {\n            return {\n                x: x,\n                y: y,\n                width: x2 - x,\n                height: y2 - y\n            };\n        }\n    };\n\n    module.exports = graphic;\n\n\n\n/***/ }),\n\n/***/ \"y60F\":\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * DataZoom component entry\n */\n\n\n    __webpack_require__(\"ZRRT\");\n\n    __webpack_require__(\"PtLt\");\n    __webpack_require__(\"uliI\");\n\n    __webpack_require__(\"QPUO\");\n    __webpack_require__(\"XL7f\");\n\n    __webpack_require__(\"+huS\");\n    __webpack_require__(\"t6Cc\");\n\n    __webpack_require__(\"bv/E\");\n    __webpack_require__(\"HN64\");\n\n\n\n/***/ }),\n\n/***/ \"y9L0\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n/**\n * Storage内容仓库模块\n * @module zrender/Storage\n * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)\n * @author errorrik (errorrik@gmail.com)\n * @author pissang (https://github.com/pissang/)\n */\n\n\n    var util = __webpack_require__(\"nw1Z\");\n    var env = __webpack_require__(\"020c\");\n\n    var Group = __webpack_require__(\"yMOk\");\n\n    // Use timsort because in most case elements are partially sorted\n    // https://jsfiddle.net/pissang/jr4x7mdm/8/\n    var timsort = __webpack_require__(\"TQiH\");\n\n    function shapeCompareFunc(a, b) {\n        if (a.zlevel === b.zlevel) {\n            if (a.z === b.z) {\n                // if (a.z2 === b.z2) {\n                //     // FIXME Slow has renderidx compare\n                //     // http://stackoverflow.com/questions/20883421/sorting-in-javascript-should-every-compare-function-have-a-return-0-statement\n                //     // https://github.com/v8/v8/blob/47cce544a31ed5577ffe2963f67acb4144ee0232/src/js/array.js#L1012\n                //     return a.__renderidx - b.__renderidx;\n                // }\n                return a.z2 - b.z2;\n            }\n            return a.z - b.z;\n        }\n        return a.zlevel - b.zlevel;\n    }\n    /**\n     * 内容仓库 (M)\n     * @alias module:zrender/Storage\n     * @constructor\n     */\n    var Storage = function () {\n        this._roots = [];\n\n        this._displayList = [];\n\n        this._displayListLen = 0;\n    };\n\n    Storage.prototype = {\n\n        constructor: Storage,\n\n        /**\n         * @param  {Function} cb\n         *\n         */\n        traverse: function (cb, context) {\n            for (var i = 0; i < this._roots.length; i++) {\n                this._roots[i].traverse(cb, context);\n            }\n        },\n\n        /**\n         * 返回所有图形的绘制队列\n         * @param {boolean} [update=false] 是否在返回前更新该数组\n         * @param {boolean} [includeIgnore=false] 是否包含 ignore 的数组, 在 update 为 true 的时候有效\n         *\n         * 详见{@link module:zrender/graphic/Displayable.prototype.updateDisplayList}\n         * @return {Array.<module:zrender/graphic/Displayable>}\n         */\n        getDisplayList: function (update, includeIgnore) {\n            includeIgnore = includeIgnore || false;\n            if (update) {\n                this.updateDisplayList(includeIgnore);\n            }\n            return this._displayList;\n        },\n\n        /**\n         * 更新图形的绘制队列。\n         * 每次绘制前都会调用，该方法会先深度优先遍历整个树，更新所有Group和Shape的变换并且把所有可见的Shape保存到数组中，\n         * 最后根据绘制的优先级（zlevel > z > 插入顺序）排序得到绘制队列\n         * @param {boolean} [includeIgnore=false] 是否包含 ignore 的数组\n         */\n        updateDisplayList: function (includeIgnore) {\n            this._displayListLen = 0;\n            var roots = this._roots;\n            var displayList = this._displayList;\n            for (var i = 0, len = roots.length; i < len; i++) {\n                this._updateAndAddDisplayable(roots[i], null, includeIgnore);\n            }\n            displayList.length = this._displayListLen;\n\n            // for (var i = 0, len = displayList.length; i < len; i++) {\n            //     displayList[i].__renderidx = i;\n            // }\n\n            // displayList.sort(shapeCompareFunc);\n            env.canvasSupported && timsort(displayList, shapeCompareFunc);\n        },\n\n        _updateAndAddDisplayable: function (el, clipPaths, includeIgnore) {\n\n            if (el.ignore && !includeIgnore) {\n                return;\n            }\n\n            el.beforeUpdate();\n\n            if (el.__dirty) {\n\n                el.update();\n\n            }\n\n            el.afterUpdate();\n\n            var userSetClipPath = el.clipPath;\n            if (userSetClipPath) {\n\n                // FIXME 效率影响\n                if (clipPaths) {\n                    clipPaths = clipPaths.slice();\n                }\n                else {\n                    clipPaths = [];\n                }\n\n                var currentClipPath = userSetClipPath;\n                var parentClipPath = el;\n                // Recursively add clip path\n                while (currentClipPath) {\n                    // clipPath 的变换是基于使用这个 clipPath 的元素\n                    currentClipPath.parent = parentClipPath;\n                    currentClipPath.updateTransform();\n\n                    clipPaths.push(currentClipPath);\n\n                    parentClipPath = currentClipPath;\n                    currentClipPath = currentClipPath.clipPath;\n                }\n            }\n\n            if (el.isGroup) {\n                var children = el._children;\n\n                for (var i = 0; i < children.length; i++) {\n                    var child = children[i];\n\n                    // Force to mark as dirty if group is dirty\n                    // FIXME __dirtyPath ?\n                    if (el.__dirty) {\n                        child.__dirty = true;\n                    }\n\n                    this._updateAndAddDisplayable(child, clipPaths, includeIgnore);\n                }\n\n                // Mark group clean here\n                el.__dirty = false;\n\n            }\n            else {\n                el.__clipPaths = clipPaths;\n\n                this._displayList[this._displayListLen++] = el;\n            }\n        },\n\n        /**\n         * 添加图形(Shape)或者组(Group)到根节点\n         * @param {module:zrender/Element} el\n         */\n        addRoot: function (el) {\n            if (el.__storage === this) {\n                return;\n            }\n\n            if (el instanceof Group) {\n                el.addChildrenToStorage(this);\n            }\n\n            this.addToStorage(el);\n            this._roots.push(el);\n        },\n\n        /**\n         * 删除指定的图形(Shape)或者组(Group)\n         * @param {string|Array.<string>} [el] 如果为空清空整个Storage\n         */\n        delRoot: function (el) {\n            if (el == null) {\n                // 不指定el清空\n                for (var i = 0; i < this._roots.length; i++) {\n                    var root = this._roots[i];\n                    if (root instanceof Group) {\n                        root.delChildrenFromStorage(this);\n                    }\n                }\n\n                this._roots = [];\n                this._displayList = [];\n                this._displayListLen = 0;\n\n                return;\n            }\n\n            if (el instanceof Array) {\n                for (var i = 0, l = el.length; i < l; i++) {\n                    this.delRoot(el[i]);\n                }\n                return;\n            }\n\n\n            var idx = util.indexOf(this._roots, el);\n            if (idx >= 0) {\n                this.delFromStorage(el);\n                this._roots.splice(idx, 1);\n                if (el instanceof Group) {\n                    el.delChildrenFromStorage(this);\n                }\n            }\n        },\n\n        addToStorage: function (el) {\n            el.__storage = this;\n            el.dirty(false);\n\n            return this;\n        },\n\n        delFromStorage: function (el) {\n            if (el) {\n                el.__storage = null;\n            }\n\n            return this;\n        },\n\n        /**\n         * 清空并且释放Storage\n         */\n        dispose: function () {\n            this._renderList =\n            this._roots = null;\n        },\n\n        displayableSortFunc: shapeCompareFunc\n    };\n\n    module.exports = Storage;\n\n\n\n/***/ }),\n\n/***/ \"yMOk\":\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * Group是一个容器，可以插入子节点，Group的变换也会被应用到子节点上\n * @module zrender/graphic/Group\n * @example\n *     var Group = require('zrender/lib/container/Group');\n *     var Circle = require('zrender/lib/graphic/shape/Circle');\n *     var g = new Group();\n *     g.position[0] = 100;\n *     g.position[1] = 100;\n *     g.add(new Circle({\n *         style: {\n *             x: 100,\n *             y: 100,\n *             r: 20,\n *         }\n *     }));\n *     zr.add(g);\n */\n\n\n    var zrUtil = __webpack_require__(\"nw1Z\");\n    var Element = __webpack_require__(\"3z8c\");\n    var BoundingRect = __webpack_require__(\"W4Cx\");\n\n    /**\n     * @alias module:zrender/graphic/Group\n     * @constructor\n     * @extends module:zrender/mixin/Transformable\n     * @extends module:zrender/mixin/Eventful\n     */\n    var Group = function (opts) {\n\n        opts = opts || {};\n\n        Element.call(this, opts);\n\n        for (var key in opts) {\n            if (opts.hasOwnProperty(key)) {\n                this[key] = opts[key];\n            }\n        }\n\n        this._children = [];\n\n        this.__storage = null;\n\n        this.__dirty = true;\n    };\n\n    Group.prototype = {\n\n        constructor: Group,\n\n        isGroup: true,\n\n        /**\n         * @type {string}\n         */\n        type: 'group',\n\n        /**\n         * 所有子孙元素是否响应鼠标事件\n         * @name module:/zrender/container/Group#silent\n         * @type {boolean}\n         * @default false\n         */\n        silent: false,\n\n        /**\n         * @return {Array.<module:zrender/Element>}\n         */\n        children: function () {\n            return this._children.slice();\n        },\n\n        /**\n         * 获取指定 index 的儿子节点\n         * @param  {number} idx\n         * @return {module:zrender/Element}\n         */\n        childAt: function (idx) {\n            return this._children[idx];\n        },\n\n        /**\n         * 获取指定名字的儿子节点\n         * @param  {string} name\n         * @return {module:zrender/Element}\n         */\n        childOfName: function (name) {\n            var children = this._children;\n            for (var i = 0; i < children.length; i++) {\n                if (children[i].name === name) {\n                    return children[i];\n                }\n             }\n        },\n\n        /**\n         * @return {number}\n         */\n        childCount: function () {\n            return this._children.length;\n        },\n\n        /**\n         * 添加子节点到最后\n         * @param {module:zrender/Element} child\n         */\n        add: function (child) {\n            if (child && child !== this && child.parent !== this) {\n\n                this._children.push(child);\n\n                this._doAdd(child);\n            }\n\n            return this;\n        },\n\n        /**\n         * 添加子节点在 nextSibling 之前\n         * @param {module:zrender/Element} child\n         * @param {module:zrender/Element} nextSibling\n         */\n        addBefore: function (child, nextSibling) {\n            if (child && child !== this && child.parent !== this\n                && nextSibling && nextSibling.parent === this) {\n\n                var children = this._children;\n                var idx = children.indexOf(nextSibling);\n\n                if (idx >= 0) {\n                    children.splice(idx, 0, child);\n                    this._doAdd(child);\n                }\n            }\n\n            return this;\n        },\n\n        _doAdd: function (child) {\n            if (child.parent) {\n                child.parent.remove(child);\n            }\n\n            child.parent = this;\n\n            var storage = this.__storage;\n            var zr = this.__zr;\n            if (storage && storage !== child.__storage) {\n\n                storage.addToStorage(child);\n\n                if (child instanceof Group) {\n                    child.addChildrenToStorage(storage);\n                }\n            }\n\n            zr && zr.refresh();\n        },\n\n        /**\n         * 移除子节点\n         * @param {module:zrender/Element} child\n         */\n        remove: function (child) {\n            var zr = this.__zr;\n            var storage = this.__storage;\n            var children = this._children;\n\n            var idx = zrUtil.indexOf(children, child);\n            if (idx < 0) {\n                return this;\n            }\n            children.splice(idx, 1);\n\n            child.parent = null;\n\n            if (storage) {\n\n                storage.delFromStorage(child);\n\n                if (child instanceof Group) {\n                    child.delChildrenFromStorage(storage);\n                }\n            }\n\n            zr && zr.refresh();\n\n            return this;\n        },\n\n        /**\n         * 移除所有子节点\n         */\n        removeAll: function () {\n            var children = this._children;\n            var storage = this.__storage;\n            var child;\n            var i;\n            for (i = 0; i < children.length; i++) {\n                child = children[i];\n                if (storage) {\n                    storage.delFromStorage(child);\n                    if (child instanceof Group) {\n                        child.delChildrenFromStorage(storage);\n                    }\n                }\n                child.parent = null;\n            }\n            children.length = 0;\n\n            return this;\n        },\n\n        /**\n         * 遍历所有子节点\n         * @param  {Function} cb\n         * @param  {}   context\n         */\n        eachChild: function (cb, context) {\n            var children = this._children;\n            for (var i = 0; i < children.length; i++) {\n                var child = children[i];\n                cb.call(context, child, i);\n            }\n            return this;\n        },\n\n        /**\n         * 深度优先遍历所有子孙节点\n         * @param  {Function} cb\n         * @param  {}   context\n         */\n        traverse: function (cb, context) {\n            for (var i = 0; i < this._children.length; i++) {\n                var child = this._children[i];\n                cb.call(context, child);\n\n                if (child.type === 'group') {\n                    child.traverse(cb, context);\n                }\n            }\n            return this;\n        },\n\n        addChildrenToStorage: function (storage) {\n            for (var i = 0; i < this._children.length; i++) {\n                var child = this._children[i];\n                storage.addToStorage(child);\n                if (child instanceof Group) {\n                    child.addChildrenToStorage(storage);\n                }\n            }\n        },\n\n        delChildrenFromStorage: function (storage) {\n            for (var i = 0; i < this._children.length; i++) {\n                var child = this._children[i];\n                storage.delFromStorage(child);\n                if (child instanceof Group) {\n                    child.delChildrenFromStorage(storage);\n                }\n            }\n        },\n\n        dirty: function () {\n            this.__dirty = true;\n            this.__zr && this.__zr.refresh();\n            return this;\n        },\n\n        /**\n         * @return {module:zrender/core/BoundingRect}\n         */\n        getBoundingRect: function (includeChildren) {\n            // TODO Caching\n            var rect = null;\n            var tmpRect = new BoundingRect(0, 0, 0, 0);\n            var children = includeChildren || this._children;\n            var tmpMat = [];\n\n            for (var i = 0; i < children.length; i++) {\n                var child = children[i];\n                if (child.ignore || child.invisible) {\n                    continue;\n                }\n\n                var childRect = child.getBoundingRect();\n                var transform = child.getLocalTransform(tmpMat);\n                // TODO\n                // The boundingRect cacluated by transforming original\n                // rect may be bigger than the actual bundingRect when rotation\n                // is used. (Consider a circle rotated aginst its center, where\n                // the actual boundingRect should be the same as that not be\n                // rotated.) But we can not find better approach to calculate\n                // actual boundingRect yet, considering performance.\n                if (transform) {\n                    tmpRect.copy(childRect);\n                    tmpRect.applyTransform(transform);\n                    rect = rect || tmpRect.clone();\n                    rect.union(tmpRect);\n                }\n                else {\n                    rect = rect || childRect.clone();\n                    rect.union(childRect);\n                }\n            }\n            return rect || tmpRect;\n        }\n    };\n\n    zrUtil.inherits(Group, Element);\n\n    module.exports = Group;\n\n\n/***/ }),\n\n/***/ \"yToh\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\n    var formatUtil = __webpack_require__(\"4oXW\");\n    var zrUtil = __webpack_require__(\"nw1Z\");\n\n    var helper = {};\n\n    var AXIS_DIMS = ['x', 'y', 'z', 'radius', 'angle', 'single'];\n    // Supported coords.\n    var COORDS = ['cartesian2d', 'polar', 'singleAxis'];\n\n    /**\n     * @param {string} coordType\n     * @return {boolean}\n     */\n    helper.isCoordSupported = function (coordType) {\n        return zrUtil.indexOf(COORDS, coordType) >= 0;\n    };\n\n    /**\n     * Create \"each\" method to iterate names.\n     *\n     * @pubilc\n     * @param  {Array.<string>} names\n     * @param  {Array.<string>=} attrs\n     * @return {Function}\n     */\n    helper.createNameEach = function (names, attrs) {\n        names = names.slice();\n        var capitalNames = zrUtil.map(names, formatUtil.capitalFirst);\n        attrs = (attrs || []).slice();\n        var capitalAttrs = zrUtil.map(attrs, formatUtil.capitalFirst);\n\n        return function (callback, context) {\n            zrUtil.each(names, function (name, index) {\n                var nameObj = {name: name, capital: capitalNames[index]};\n\n                for (var j = 0; j < attrs.length; j++) {\n                    nameObj[attrs[j]] = name + capitalAttrs[j];\n                }\n\n                callback.call(context, nameObj);\n            });\n        };\n    };\n\n    /**\n     * Iterate each dimension name.\n     *\n     * @public\n     * @param {Function} callback The parameter is like:\n     *                            {\n     *                                name: 'angle',\n     *                                capital: 'Angle',\n     *                                axis: 'angleAxis',\n     *                                axisIndex: 'angleAixs',\n     *                                index: 'angleIndex'\n     *                            }\n     * @param {Object} context\n     */\n    helper.eachAxisDim = helper.createNameEach(AXIS_DIMS, ['axisIndex', 'axis', 'index', 'id']);\n\n    /**\n     * If tow dataZoomModels has the same axis controlled, we say that they are 'linked'.\n     * dataZoomModels and 'links' make up one or more graphics.\n     * This function finds the graphic where the source dataZoomModel is in.\n     *\n     * @public\n     * @param {Function} forEachNode Node iterator.\n     * @param {Function} forEachEdgeType edgeType iterator\n     * @param {Function} edgeIdGetter Giving node and edgeType, return an array of edge id.\n     * @return {Function} Input: sourceNode, Output: Like {nodes: [], dims: {}}\n     */\n    helper.createLinkedNodesFinder = function (forEachNode, forEachEdgeType, edgeIdGetter) {\n\n        return function (sourceNode) {\n            var result = {\n                nodes: [],\n                records: {} // key: edgeType.name, value: Object (key: edge id, value: boolean).\n            };\n\n            forEachEdgeType(function (edgeType) {\n                result.records[edgeType.name] = {};\n            });\n\n            if (!sourceNode) {\n                return result;\n            }\n\n            absorb(sourceNode, result);\n\n            var existsLink;\n            do {\n                existsLink = false;\n                forEachNode(processSingleNode);\n            }\n            while (existsLink);\n\n            function processSingleNode(node) {\n                if (!isNodeAbsorded(node, result) && isLinked(node, result)) {\n                    absorb(node, result);\n                    existsLink = true;\n                }\n            }\n\n            return result;\n        };\n\n        function isNodeAbsorded(node, result) {\n            return zrUtil.indexOf(result.nodes, node) >= 0;\n        }\n\n        function isLinked(node, result) {\n            var hasLink = false;\n            forEachEdgeType(function (edgeType) {\n                zrUtil.each(edgeIdGetter(node, edgeType) || [], function (edgeId) {\n                    result.records[edgeType.name][edgeId] && (hasLink = true);\n                });\n            });\n            return hasLink;\n        }\n\n        function absorb(node, result) {\n            result.nodes.push(node);\n            forEachEdgeType(function (edgeType) {\n                zrUtil.each(edgeIdGetter(node, edgeType) || [], function (edgeId) {\n                    result.records[edgeType.name][edgeId] = true;\n                });\n            });\n        }\n    };\n\n    module.exports = helper;\n\n\n/***/ }),\n\n/***/ \"yrSL\":\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * 矩形\n * @module zrender/graphic/shape/Rect\n */\n\n\n    var roundRectHelper = __webpack_require__(\"d/Zd\");\n\n    module.exports = __webpack_require__(\"CC7E\").extend({\n\n        type: 'rect',\n\n        shape: {\n            // 左上、右上、右下、左下角的半径依次为r1、r2、r3、r4\n            // r缩写为1         相当于 [1, 1, 1, 1]\n            // r缩写为[1]       相当于 [1, 1, 1, 1]\n            // r缩写为[1, 2]    相当于 [1, 2, 1, 2]\n            // r缩写为[1, 2, 3] 相当于 [1, 2, 3, 2]\n            r: 0,\n\n            x: 0,\n            y: 0,\n            width: 0,\n            height: 0\n        },\n\n        buildPath: function (ctx, shape) {\n            var x = shape.x;\n            var y = shape.y;\n            var width = shape.width;\n            var height = shape.height;\n            if (!shape.r) {\n                ctx.rect(x, y, width, height);\n            }\n            else {\n                roundRectHelper.buildPath(ctx, shape);\n            }\n            ctx.closePath();\n            return;\n        }\n    });\n\n\n\n/***/ }),\n\n/***/ \"ys60\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n// Grid 是在有直角坐标系的时候必须要存在的\n// 所以这里也要被 Cartesian2D 依赖\n\n\n    __webpack_require__(\"lzeG\");\n\n    var ComponentModel = __webpack_require__(\"wvll\");\n\n    module.exports = ComponentModel.extend({\n\n        type: 'grid',\n\n        dependencies: ['xAxis', 'yAxis'],\n\n        layoutMode: 'box',\n\n        /**\n         * @type {module:echarts/coord/cartesian/Grid}\n         */\n        coordinateSystem: null,\n\n        defaultOption: {\n            show: false,\n            zlevel: 0,\n            z: 0,\n            left: '10%',\n            top: 60,\n            right: '10%',\n            bottom: 60,\n            // If grid size contain label\n            containLabel: false,\n            // width: {totalWidth} - left - right,\n            // height: {totalHeight} - top - bottom,\n            backgroundColor: 'rgba(0,0,0,0)',\n            borderWidth: 1,\n            borderColor: '#ccc'\n        }\n    });\n\n\n/***/ }),\n\n/***/ \"zxuD\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n// Layout helpers for each component positioning\n\n\n    var zrUtil = __webpack_require__(\"nw1Z\");\n    var BoundingRect = __webpack_require__(\"W4Cx\");\n    var numberUtil = __webpack_require__(\"0+Kq\");\n    var formatUtil = __webpack_require__(\"4oXW\");\n    var parsePercent = numberUtil.parsePercent;\n    var each = zrUtil.each;\n\n    var layout = {};\n\n    /**\n     * @public\n     */\n    var LOCATION_PARAMS = layout.LOCATION_PARAMS = [\n        'left', 'right', 'top', 'bottom', 'width', 'height'\n    ];\n\n    /**\n     * @public\n     */\n    var HV_NAMES = layout.HV_NAMES = [\n        ['width', 'left', 'right'],\n        ['height', 'top', 'bottom']\n    ];\n\n    function boxLayout(orient, group, gap, maxWidth, maxHeight) {\n        var x = 0;\n        var y = 0;\n        if (maxWidth == null) {\n            maxWidth = Infinity;\n        }\n        if (maxHeight == null) {\n            maxHeight = Infinity;\n        }\n        var currentLineMaxSize = 0;\n        group.eachChild(function (child, idx) {\n            var position = child.position;\n            var rect = child.getBoundingRect();\n            var nextChild = group.childAt(idx + 1);\n            var nextChildRect = nextChild && nextChild.getBoundingRect();\n            var nextX;\n            var nextY;\n            if (orient === 'horizontal') {\n                var moveX = rect.width + (nextChildRect ? (-nextChildRect.x + rect.x) : 0);\n                nextX = x + moveX;\n                // Wrap when width exceeds maxWidth or meet a `newline` group\n                if (nextX > maxWidth || child.newline) {\n                    x = 0;\n                    nextX = moveX;\n                    y += currentLineMaxSize + gap;\n                    currentLineMaxSize = rect.height;\n                }\n                else {\n                    currentLineMaxSize = Math.max(currentLineMaxSize, rect.height);\n                }\n            }\n            else {\n                var moveY = rect.height + (nextChildRect ? (-nextChildRect.y + rect.y) : 0);\n                nextY = y + moveY;\n                // Wrap when width exceeds maxHeight or meet a `newline` group\n                if (nextY > maxHeight || child.newline) {\n                    x += currentLineMaxSize + gap;\n                    y = 0;\n                    nextY = moveY;\n                    currentLineMaxSize = rect.width;\n                }\n                else {\n                    currentLineMaxSize = Math.max(currentLineMaxSize, rect.width);\n                }\n            }\n\n            if (child.newline) {\n                return;\n            }\n\n            position[0] = x;\n            position[1] = y;\n\n            orient === 'horizontal'\n                ? (x = nextX + gap)\n                : (y = nextY + gap);\n        });\n    }\n\n    /**\n     * VBox or HBox layouting\n     * @param {string} orient\n     * @param {module:zrender/container/Group} group\n     * @param {number} gap\n     * @param {number} [width=Infinity]\n     * @param {number} [height=Infinity]\n     */\n    layout.box = boxLayout;\n\n    /**\n     * VBox layouting\n     * @param {module:zrender/container/Group} group\n     * @param {number} gap\n     * @param {number} [width=Infinity]\n     * @param {number} [height=Infinity]\n     */\n    layout.vbox = zrUtil.curry(boxLayout, 'vertical');\n\n    /**\n     * HBox layouting\n     * @param {module:zrender/container/Group} group\n     * @param {number} gap\n     * @param {number} [width=Infinity]\n     * @param {number} [height=Infinity]\n     */\n    layout.hbox = zrUtil.curry(boxLayout, 'horizontal');\n\n    /**\n     * If x or x2 is not specified or 'center' 'left' 'right',\n     * the width would be as long as possible.\n     * If y or y2 is not specified or 'middle' 'top' 'bottom',\n     * the height would be as long as possible.\n     *\n     * @param {Object} positionInfo\n     * @param {number|string} [positionInfo.x]\n     * @param {number|string} [positionInfo.y]\n     * @param {number|string} [positionInfo.x2]\n     * @param {number|string} [positionInfo.y2]\n     * @param {Object} containerRect\n     * @param {string|number} margin\n     * @return {Object} {width, height}\n     */\n    layout.getAvailableSize = function (positionInfo, containerRect, margin) {\n        var containerWidth = containerRect.width;\n        var containerHeight = containerRect.height;\n\n        var x = parsePercent(positionInfo.x, containerWidth);\n        var y = parsePercent(positionInfo.y, containerHeight);\n        var x2 = parsePercent(positionInfo.x2, containerWidth);\n        var y2 = parsePercent(positionInfo.y2, containerHeight);\n\n        (isNaN(x) || isNaN(parseFloat(positionInfo.x))) && (x = 0);\n        (isNaN(x2) || isNaN(parseFloat(positionInfo.x2))) && (x2 = containerWidth);\n        (isNaN(y) || isNaN(parseFloat(positionInfo.y))) && (y = 0);\n        (isNaN(y2) || isNaN(parseFloat(positionInfo.y2))) && (y2 = containerHeight);\n\n        margin = formatUtil.normalizeCssArray(margin || 0);\n\n        return {\n            width: Math.max(x2 - x - margin[1] - margin[3], 0),\n            height: Math.max(y2 - y - margin[0] - margin[2], 0)\n        };\n    };\n\n    /**\n     * Parse position info.\n     *\n     * @param {Object} positionInfo\n     * @param {number|string} [positionInfo.left]\n     * @param {number|string} [positionInfo.top]\n     * @param {number|string} [positionInfo.right]\n     * @param {number|string} [positionInfo.bottom]\n     * @param {number|string} [positionInfo.width]\n     * @param {number|string} [positionInfo.height]\n     * @param {number|string} [positionInfo.aspect] Aspect is width / height\n     * @param {Object} containerRect\n     * @param {string|number} [margin]\n     *\n     * @return {module:zrender/core/BoundingRect}\n     */\n    layout.getLayoutRect = function (\n        positionInfo, containerRect, margin\n    ) {\n        margin = formatUtil.normalizeCssArray(margin || 0);\n\n        var containerWidth = containerRect.width;\n        var containerHeight = containerRect.height;\n\n        var left = parsePercent(positionInfo.left, containerWidth);\n        var top = parsePercent(positionInfo.top, containerHeight);\n        var right = parsePercent(positionInfo.right, containerWidth);\n        var bottom = parsePercent(positionInfo.bottom, containerHeight);\n        var width = parsePercent(positionInfo.width, containerWidth);\n        var height = parsePercent(positionInfo.height, containerHeight);\n\n        var verticalMargin = margin[2] + margin[0];\n        var horizontalMargin = margin[1] + margin[3];\n        var aspect = positionInfo.aspect;\n\n        // If width is not specified, calculate width from left and right\n        if (isNaN(width)) {\n            width = containerWidth - right - horizontalMargin - left;\n        }\n        if (isNaN(height)) {\n            height = containerHeight - bottom - verticalMargin - top;\n        }\n\n        // If width and height are not given\n        // 1. Graph should not exceeds the container\n        // 2. Aspect must be keeped\n        // 3. Graph should take the space as more as possible\n        if (isNaN(width) && isNaN(height)) {\n            if (aspect > containerWidth / containerHeight) {\n                width = containerWidth * 0.8;\n            }\n            else {\n                height = containerHeight * 0.8;\n            }\n        }\n\n        if (aspect != null) {\n            // Calculate width or height with given aspect\n            if (isNaN(width)) {\n                width = aspect * height;\n            }\n            if (isNaN(height)) {\n                height = width / aspect;\n            }\n        }\n\n        // If left is not specified, calculate left from right and width\n        if (isNaN(left)) {\n            left = containerWidth - right - width - horizontalMargin;\n        }\n        if (isNaN(top)) {\n            top = containerHeight - bottom - height - verticalMargin;\n        }\n\n        // Align left and top\n        switch (positionInfo.left || positionInfo.right) {\n            case 'center':\n                left = containerWidth / 2 - width / 2 - margin[3];\n                break;\n            case 'right':\n                left = containerWidth - width - horizontalMargin;\n                break;\n        }\n        switch (positionInfo.top || positionInfo.bottom) {\n            case 'middle':\n            case 'center':\n                top = containerHeight / 2 - height / 2 - margin[0];\n                break;\n            case 'bottom':\n                top = containerHeight - height - verticalMargin;\n                break;\n        }\n        // If something is wrong and left, top, width, height are calculated as NaN\n        left = left || 0;\n        top = top || 0;\n        if (isNaN(width)) {\n            // Width may be NaN if only one value is given except width\n            width = containerWidth - left - (right || 0);\n        }\n        if (isNaN(height)) {\n            // Height may be NaN if only one value is given except height\n            height = containerHeight - top - (bottom || 0);\n        }\n\n        var rect = new BoundingRect(left + margin[3], top + margin[0], width, height);\n        rect.margin = margin;\n        return rect;\n    };\n\n\n    /**\n     * Position a zr element in viewport\n     *  Group position is specified by either\n     *  {left, top}, {right, bottom}\n     *  If all properties exists, right and bottom will be igonred.\n     *\n     * Logic:\n     *     1. Scale (against origin point in parent coord)\n     *     2. Rotate (against origin point in parent coord)\n     *     3. Traslate (with el.position by this method)\n     * So this method only fixes the last step 'Traslate', which does not affect\n     * scaling and rotating.\n     *\n     * If be called repeatly with the same input el, the same result will be gotten.\n     *\n     * @param {module:zrender/Element} el Should have `getBoundingRect` method.\n     * @param {Object} positionInfo\n     * @param {number|string} [positionInfo.left]\n     * @param {number|string} [positionInfo.top]\n     * @param {number|string} [positionInfo.right]\n     * @param {number|string} [positionInfo.bottom]\n     * @param {Object} containerRect\n     * @param {string|number} margin\n     * @param {Object} [opt]\n     * @param {Array.<number>} [opt.hv=[1,1]] Only horizontal or only vertical.\n     * @param {Array.<number>} [opt.boundingMode='all']\n     *        Specify how to calculate boundingRect when locating.\n     *        'all': Position the boundingRect that is transformed and uioned\n     *               both itself and its descendants.\n     *               This mode simplies confine the elements in the bounding\n     *               of their container (e.g., using 'right: 0').\n     *        'raw': Position the boundingRect that is not transformed and only itself.\n     *               This mode is useful when you want a element can overflow its\n     *               container. (Consider a rotated circle needs to be located in a corner.)\n     *               In this mode positionInfo.width/height can only be number.\n     */\n    layout.positionElement = function (el, positionInfo, containerRect, margin, opt) {\n        var h = !opt || !opt.hv || opt.hv[0];\n        var v = !opt || !opt.hv || opt.hv[1];\n        var boundingMode = opt && opt.boundingMode || 'all';\n\n        if (!h && !v) {\n            return;\n        }\n\n        var rect;\n        if (boundingMode === 'raw') {\n            rect = el.type === 'group'\n                ? new BoundingRect(0, 0, +positionInfo.width || 0, +positionInfo.height || 0)\n                : el.getBoundingRect();\n        }\n        else {\n            rect = el.getBoundingRect();\n            if (el.needLocalTransform()) {\n                var transform = el.getLocalTransform();\n                // Notice: raw rect may be inner object of el,\n                // which should not be modified.\n                rect = rect.clone();\n                rect.applyTransform(transform);\n            }\n        }\n\n        positionInfo = layout.getLayoutRect(\n            zrUtil.defaults(\n                {width: rect.width, height: rect.height},\n                positionInfo\n            ),\n            containerRect,\n            margin\n        );\n\n        // Because 'tranlate' is the last step in transform\n        // (see zrender/core/Transformable#getLocalTransfrom),\n        // we can just only modify el.position to get final result.\n        var elPos = el.position;\n        var dx = h ? positionInfo.x - rect.x : 0;\n        var dy = v ? positionInfo.y - rect.y : 0;\n\n        el.attr('position', boundingMode === 'raw' ? [dx, dy] : [elPos[0] + dx, elPos[1] + dy]);\n    };\n\n    /**\n     * @param {Object} option Contains some of the properties in HV_NAMES.\n     * @param {number} hvIdx 0: horizontal; 1: vertical.\n     */\n    layout.sizeCalculable = function (option, hvIdx) {\n        return option[HV_NAMES[hvIdx][0]] != null\n            || (option[HV_NAMES[hvIdx][1]] != null && option[HV_NAMES[hvIdx][2]] != null);\n    };\n\n    /**\n     * Consider Case:\n     * When defulat option has {left: 0, width: 100}, and we set {right: 0}\n     * through setOption or media query, using normal zrUtil.merge will cause\n     * {right: 0} does not take effect.\n     *\n     * @example\n     * ComponentModel.extend({\n     *     init: function () {\n     *         ...\n     *         var inputPositionParams = layout.getLayoutParams(option);\n     *         this.mergeOption(inputPositionParams);\n     *     },\n     *     mergeOption: function (newOption) {\n     *         newOption && zrUtil.merge(thisOption, newOption, true);\n     *         layout.mergeLayoutParam(thisOption, newOption);\n     *     }\n     * });\n     *\n     * @param {Object} targetOption\n     * @param {Object} newOption\n     * @param {Object|string} [opt]\n     * @param {boolean|Array.<boolean>} [opt.ignoreSize=false] Some component must has width and height.\n     */\n    layout.mergeLayoutParam = function (targetOption, newOption, opt) {\n        !zrUtil.isObject(opt) && (opt = {});\n\n        var ignoreSize = opt.ignoreSize;\n        !zrUtil.isArray(ignoreSize) && (ignoreSize = [ignoreSize, ignoreSize]);\n\n        var hResult = merge(HV_NAMES[0], 0);\n        var vResult = merge(HV_NAMES[1], 1);\n\n        copy(HV_NAMES[0], targetOption, hResult);\n        copy(HV_NAMES[1], targetOption, vResult);\n\n        function merge(names, hvIdx) {\n            var newParams = {};\n            var newValueCount = 0;\n            var merged = {};\n            var mergedValueCount = 0;\n            var enoughParamNumber = 2;\n\n            each(names, function (name) {\n                merged[name] = targetOption[name];\n            });\n            each(names, function (name) {\n                // Consider case: newOption.width is null, which is\n                // set by user for removing width setting.\n                hasProp(newOption, name) && (newParams[name] = merged[name] = newOption[name]);\n                hasValue(newParams, name) && newValueCount++;\n                hasValue(merged, name) && mergedValueCount++;\n            });\n\n            if (ignoreSize[hvIdx]) {\n                // Only one of left/right is premitted to exist.\n                if (hasValue(newOption, names[1])) {\n                    merged[names[2]] = null;\n                }\n                else if (hasValue(newOption, names[2])) {\n                    merged[names[1]] = null;\n                }\n                return merged;\n            }\n\n            // Case: newOption: {width: ..., right: ...},\n            // or targetOption: {right: ...} and newOption: {width: ...},\n            // There is no conflict when merged only has params count\n            // little than enoughParamNumber.\n            if (mergedValueCount === enoughParamNumber || !newValueCount) {\n                return merged;\n            }\n            // Case: newOption: {width: ..., right: ...},\n            // Than we can make sure user only want those two, and ignore\n            // all origin params in targetOption.\n            else if (newValueCount >= enoughParamNumber) {\n                return newParams;\n            }\n            else {\n                // Chose another param from targetOption by priority.\n                for (var i = 0; i < names.length; i++) {\n                    var name = names[i];\n                    if (!hasProp(newParams, name) && hasProp(targetOption, name)) {\n                        newParams[name] = targetOption[name];\n                        break;\n                    }\n                }\n                return newParams;\n            }\n        }\n\n        function hasProp(obj, name) {\n            return obj.hasOwnProperty(name);\n        }\n\n        function hasValue(obj, name) {\n            return obj[name] != null && obj[name] !== 'auto';\n        }\n\n        function copy(names, target, source) {\n            each(names, function (name) {\n                target[name] = source[name];\n            });\n        }\n    };\n\n    /**\n     * Retrieve 'left', 'right', 'top', 'bottom', 'width', 'height' from object.\n     * @param {Object} source\n     * @return {Object} Result contains those props.\n     */\n    layout.getLayoutParams = function (source) {\n        return layout.copyLayoutParams({}, source);\n    };\n\n    /**\n     * Retrieve 'left', 'right', 'top', 'bottom', 'width', 'height' from object.\n     * @param {Object} source\n     * @return {Object} Result contains those props.\n     */\n    layout.copyLayoutParams = function (target, source) {\n        source && target && each(LOCATION_PARAMS, function (name) {\n            source.hasOwnProperty(name) && (target[name] = source[name]);\n        });\n        return target;\n    };\n\n    module.exports = layout;\n\n\n\n/***/ })\n\n},[2]);\n\n\n// WEBPACK FOOTER //\n// static/js/echarts.fbb68525fb35cc2541ca.js","/**\n * @file Data zoom model\n */\n\n\n    module.exports = require('./DataZoomModel').extend({\n\n        type: 'dataZoom.inside',\n\n        /**\n         * @protected\n         */\n        defaultOption: {\n            disabled: false,   // Whether disable this inside zoom.\n            zoomLock: false,   // Whether disable zoom but only pan.\n            zoomOnMouseWheel: true, // Can be: true / false / 'shift' / 'ctrl' / 'alt'.\n            moveOnMouseMove: true,   // Can be: true / false / 'shift' / 'ctrl' / 'alt'.\n            preventDefaultMouseMove: true\n        }\n    });\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.6.1@echarts/lib/component/dataZoom/InsideZoomModel.js\n// module id = +huS\n// module chunks = 0 1","'use strict';\n\n\n    var zrUtil = require('zrender/lib/core/util');\n    var Cartesian = require('./Cartesian');\n\n    function Cartesian2D(name) {\n\n        Cartesian.call(this, name);\n    }\n\n    Cartesian2D.prototype = {\n\n        constructor: Cartesian2D,\n\n        type: 'cartesian2d',\n\n        /**\n         * @type {Array.<string>}\n         * @readOnly\n         */\n        dimensions: ['x', 'y'],\n\n        /**\n         * Base axis will be used on stacking.\n         *\n         * @return {module:echarts/coord/cartesian/Axis2D}\n         */\n        getBaseAxis: function () {\n            return this.getAxesByScale('ordinal')[0]\n                || this.getAxesByScale('time')[0]\n                || this.getAxis('x');\n        },\n\n        /**\n         * If contain point\n         * @param {Array.<number>} point\n         * @return {boolean}\n         */\n        containPoint: function (point) {\n            var axisX = this.getAxis('x');\n            var axisY = this.getAxis('y');\n            return axisX.contain(axisX.toLocalCoord(point[0]))\n                && axisY.contain(axisY.toLocalCoord(point[1]));\n        },\n\n        /**\n         * If contain data\n         * @param {Array.<number>} data\n         * @return {boolean}\n         */\n        containData: function (data) {\n            return this.getAxis('x').containData(data[0])\n                && this.getAxis('y').containData(data[1]);\n        },\n\n        /**\n         * Convert series data to an array of points\n         * @param {module:echarts/data/List} data\n         * @param {boolean} stack\n         * @return {Array}\n         *  Return array of points. For example:\n         *  `[[10, 10], [20, 20], [30, 30]]`\n         */\n        dataToPoints: function (data, stack) {\n            return data.mapArray(['x', 'y'], function (x, y) {\n                return this.dataToPoint([x, y]);\n            }, stack, this);\n        },\n\n        /**\n         * @param {Array.<number>} data\n         * @param {boolean} [clamp=false]\n         * @return {Array.<number>}\n         */\n        dataToPoint: function (data, clamp) {\n            var xAxis = this.getAxis('x');\n            var yAxis = this.getAxis('y');\n            return [\n                xAxis.toGlobalCoord(xAxis.dataToCoord(data[0], clamp)),\n                yAxis.toGlobalCoord(yAxis.dataToCoord(data[1], clamp))\n            ];\n        },\n\n        /**\n         * @param {Array.<number>} point\n         * @param {boolean} [clamp=false]\n         * @return {Array.<number>}\n         */\n        pointToData: function (point, clamp) {\n            var xAxis = this.getAxis('x');\n            var yAxis = this.getAxis('y');\n            return [\n                xAxis.coordToData(xAxis.toLocalCoord(point[0]), clamp),\n                yAxis.coordToData(yAxis.toLocalCoord(point[1]), clamp)\n            ];\n        },\n\n        /**\n         * Get other axis\n         * @param {module:echarts/coord/cartesian/Axis2D} axis\n         */\n        getOtherAxis: function (axis) {\n            return this.getAxis(axis.dim === 'x' ? 'y' : 'x');\n        }\n\n    };\n\n    zrUtil.inherits(Cartesian2D, Cartesian);\n\n    module.exports = Cartesian2D;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.6.1@echarts/lib/coord/cartesian/Cartesian2D.js\n// module id = +iiX\n// module chunks = 0 1","/**\n * 直线\n * @module zrender/graphic/shape/Line\n */\n\n    module.exports = require('../Path').extend({\n\n        type: 'line',\n\n        shape: {\n            // Start point\n            x1: 0,\n            y1: 0,\n            // End point\n            x2: 0,\n            y2: 0,\n\n            percent: 1\n        },\n\n        style: {\n            stroke: '#000',\n            fill: null\n        },\n\n        buildPath: function (ctx, shape) {\n            var x1 = shape.x1;\n            var y1 = shape.y1;\n            var x2 = shape.x2;\n            var y2 = shape.y2;\n            var percent = shape.percent;\n\n            if (percent === 0) {\n                return;\n            }\n\n            ctx.moveTo(x1, y1);\n\n            if (percent < 1) {\n                x2 = x1 * (1 - percent) + x2 * percent;\n                y2 = y1 * (1 - percent) + y2 * percent;\n            }\n            ctx.lineTo(x2, y2);\n        },\n\n        /**\n         * Get point at percent\n         * @param  {number} percent\n         * @return {Array.<number>}\n         */\n        pointAt: function (p) {\n            var shape = this.shape;\n            return [\n                shape.x1 * (1 - p) + shape.x2 * p,\n                shape.y1 * (1 - p) + shape.y2 * p\n            ];\n        }\n    });\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.5.1@zrender/lib/graphic/shape/Line.js\n// module id = 0+1J\n// module chunks = 0 1","/**\n * 数值处理模块\n * @module echarts/util/number\n */\n\n\n\n    var number = {};\n\n    var RADIAN_EPSILON = 1e-4;\n\n    function _trim(str) {\n        return str.replace(/^\\s+/, '').replace(/\\s+$/, '');\n    }\n\n    /**\n     * Linear mapping a value from domain to range\n     * @memberOf module:echarts/util/number\n     * @param  {(number|Array.<number>)} val\n     * @param  {Array.<number>} domain Domain extent domain[0] can be bigger than domain[1]\n     * @param  {Array.<number>} range  Range extent range[0] can be bigger than range[1]\n     * @param  {boolean} clamp\n     * @return {(number|Array.<number>}\n     */\n    number.linearMap = function (val, domain, range, clamp) {\n        var subDomain = domain[1] - domain[0];\n        var subRange = range[1] - range[0];\n\n        if (subDomain === 0) {\n            return subRange === 0\n                ? range[0]\n                : (range[0] + range[1]) / 2;\n        }\n\n        // Avoid accuracy problem in edge, such as\n        // 146.39 - 62.83 === 83.55999999999999.\n        // See echarts/test/ut/spec/util/number.js#linearMap#accuracyError\n        // It is a little verbose for efficiency considering this method\n        // is a hotspot.\n        if (clamp) {\n            if (subDomain > 0) {\n                if (val <= domain[0]) {\n                    return range[0];\n                }\n                else if (val >= domain[1]) {\n                    return range[1];\n                }\n            }\n            else {\n                if (val >= domain[0]) {\n                    return range[0];\n                }\n                else if (val <= domain[1]) {\n                    return range[1];\n                }\n            }\n        }\n        else {\n            if (val === domain[0]) {\n                return range[0];\n            }\n            if (val === domain[1]) {\n                return range[1];\n            }\n        }\n\n        return (val - domain[0]) / subDomain * subRange + range[0];\n    };\n\n    /**\n     * Convert a percent string to absolute number.\n     * Returns NaN if percent is not a valid string or number\n     * @memberOf module:echarts/util/number\n     * @param {string|number} percent\n     * @param {number} all\n     * @return {number}\n     */\n    number.parsePercent = function(percent, all) {\n        switch (percent) {\n            case 'center':\n            case 'middle':\n                percent = '50%';\n                break;\n            case 'left':\n            case 'top':\n                percent = '0%';\n                break;\n            case 'right':\n            case 'bottom':\n                percent = '100%';\n                break;\n        }\n        if (typeof percent === 'string') {\n            if (_trim(percent).match(/%$/)) {\n                return parseFloat(percent) / 100 * all;\n            }\n\n            return parseFloat(percent);\n        }\n\n        return percent == null ? NaN : +percent;\n    };\n\n    /**\n     * (1) Fix rounding error of float numbers.\n     * (2) Support return string to avoid scientific notation like '3.5e-7'.\n     *\n     * @param {number} x\n     * @param {number} [precision]\n     * @param {boolean} [returnStr]\n     * @return {number|string}\n     */\n    number.round = function (x, precision, returnStr) {\n        if (precision == null) {\n            precision = 10;\n        }\n        // Avoid range error\n        precision = Math.min(Math.max(0, precision), 20);\n        x = (+x).toFixed(precision);\n        return returnStr ? x : +x;\n    };\n\n    number.asc = function (arr) {\n        arr.sort(function (a, b) {\n            return a - b;\n        });\n        return arr;\n    };\n\n    /**\n     * Get precision\n     * @param {number} val\n     */\n    number.getPrecision = function (val) {\n        val = +val;\n        if (isNaN(val)) {\n            return 0;\n        }\n        // It is much faster than methods converting number to string as follows\n        //      var tmp = val.toString();\n        //      return tmp.length - 1 - tmp.indexOf('.');\n        // especially when precision is low\n        var e = 1;\n        var count = 0;\n        while (Math.round(val * e) / e !== val) {\n            e *= 10;\n            count++;\n        }\n        return count;\n    };\n\n    /**\n     * @param {string|number} val\n     * @return {number}\n     */\n    number.getPrecisionSafe = function (val) {\n        var str = val.toString();\n\n        // Consider scientific notation: '3.4e-12' '3.4e+12'\n        var eIndex = str.indexOf('e');\n        if (eIndex > 0) {\n            var precision = +str.slice(eIndex + 1);\n            return precision < 0 ? -precision : 0;\n        }\n        else {\n            var dotIndex = str.indexOf('.');\n            return dotIndex < 0 ? 0 : str.length - 1 - dotIndex;\n        }\n    };\n\n    /**\n     * Minimal dicernible data precisioin according to a single pixel.\n     *\n     * @param {Array.<number>} dataExtent\n     * @param {Array.<number>} pixelExtent\n     * @return {number} precision\n     */\n    number.getPixelPrecision = function (dataExtent, pixelExtent) {\n        var log = Math.log;\n        var LN10 = Math.LN10;\n        var dataQuantity = Math.floor(log(dataExtent[1] - dataExtent[0]) / LN10);\n        var sizeQuantity = Math.round(log(Math.abs(pixelExtent[1] - pixelExtent[0])) / LN10);\n        // toFixed() digits argument must be between 0 and 20.\n        var precision = Math.min(Math.max(-dataQuantity + sizeQuantity, 0), 20);\n        return !isFinite(precision) ? 20 : precision;\n    };\n\n    // Number.MAX_SAFE_INTEGER, ie do not support.\n    number.MAX_SAFE_INTEGER = 9007199254740991;\n\n    /**\n     * To 0 - 2 * PI, considering negative radian.\n     * @param {number} radian\n     * @return {number}\n     */\n    number.remRadian = function (radian) {\n        var pi2 = Math.PI * 2;\n        return (radian % pi2 + pi2) % pi2;\n    };\n\n    /**\n     * @param {type} radian\n     * @return {boolean}\n     */\n    number.isRadianAroundZero = function (val) {\n        return val > -RADIAN_EPSILON && val < RADIAN_EPSILON;\n    };\n\n    var TIME_REG = /^(?:(\\d{4})(?:[-\\/](\\d{1,2})(?:[-\\/](\\d{1,2})(?:[T ](\\d{1,2})(?::(\\d\\d)(?::(\\d\\d)(?:[.,](\\d+))?)?)?(Z|[\\+\\-]\\d\\d:?\\d\\d)?)?)?)?)?$/; // jshint ignore:line\n\n    /**\n     * @return {number} in minutes\n     */\n    number.getTimezoneOffset = function () {\n        return (new Date()).getTimezoneOffset();\n    };\n\n    /**\n     * @param {string|Date|number} value These values can be accepted:\n     *   + An instance of Date, represent a time in its own time zone.\n     *   + Or string in a subset of ISO 8601, only including:\n     *     + only year, month, date: '2012-03', '2012-03-01', '2012-03-01 05', '2012-03-01 05:06',\n     *     + separated with T or space: '2012-03-01T12:22:33.123', '2012-03-01 12:22:33.123',\n     *     + time zone: '2012-03-01T12:22:33Z', '2012-03-01T12:22:33+8000', '2012-03-01T12:22:33-05:00',\n     *     all of which will be treated as local time if time zone is not specified\n     *     (see <https://momentjs.com/>).\n     *   + Or other string format, including (all of which will be treated as loacal time):\n     *     '2012', '2012-3-1', '2012/3/1', '2012/03/01',\n     *     '2009/6/12 2:00', '2009/6/12 2:05:08', '2009/6/12 2:05:08.123'\n     *   + a timestamp, which represent a time in UTC.\n     * @return {Date} date\n     */\n    number.parseDate = function (value) {\n        if (value instanceof Date) {\n            return value;\n        }\n        else if (typeof value === 'string') {\n            // Different browsers parse date in different way, so we parse it manually.\n            // Some other issues:\n            // new Date('1970-01-01') is UTC,\n            // new Date('1970/01/01') and new Date('1970-1-01') is local.\n            // See issue #3623\n            var match = TIME_REG.exec(value);\n\n            if (!match) {\n                // return Invalid Date.\n                return new Date(NaN);\n            }\n\n            var timezoneOffset = number.getTimezoneOffset();\n            var timeOffset = !match[8]\n                ? 0\n                : match[8].toUpperCase() === 'Z'\n                ? timezoneOffset\n                : +match[8].slice(0, 3) * 60 + timezoneOffset;\n\n            // match[n] can only be string or undefined.\n            // But take care of '12' + 1 => '121'.\n            return new Date(\n                +match[1],\n                +(match[2] || 1) - 1,\n                +match[3] || 1,\n                +match[4] || 0,\n                +(match[5] || 0) - timeOffset,\n                +match[6] || 0,\n                +match[7] || 0\n            );\n        }\n        else if (value == null) {\n            return new Date(NaN);\n        }\n\n        return new Date(Math.round(value));\n    };\n\n    /**\n     * Quantity of a number. e.g. 0.1, 1, 10, 100\n     *\n     * @param  {number} val\n     * @return {number}\n     */\n    number.quantity = function (val) {\n        return Math.pow(10, quantityExponent(val));\n    };\n\n    function quantityExponent(val) {\n        return Math.floor(Math.log(val) / Math.LN10);\n    }\n\n    /**\n     * find a “nice” number approximately equal to x. Round the number if round = true,\n     * take ceiling if round = false. The primary observation is that the “nicest”\n     * numbers in decimal are 1, 2, and 5, and all power-of-ten multiples of these numbers.\n     *\n     * See \"Nice Numbers for Graph Labels\" of Graphic Gems.\n     *\n     * @param  {number} val Non-negative value.\n     * @param  {boolean} round\n     * @return {number}\n     */\n    number.nice = function (val, round) {\n        var exponent = quantityExponent(val);\n        var exp10 = Math.pow(10, exponent);\n        var f = val / exp10; // 1 <= f < 10\n        var nf;\n        if (round) {\n            if (f < 1.5) { nf = 1; }\n            else if (f < 2.5) { nf = 2; }\n            else if (f < 4) { nf = 3; }\n            else if (f < 7) { nf = 5; }\n            else { nf = 10; }\n        }\n        else {\n            if (f < 1) { nf = 1; }\n            else if (f < 2) { nf = 2; }\n            else if (f < 3) { nf = 3; }\n            else if (f < 5) { nf = 5; }\n            else { nf = 10; }\n        }\n        val = nf * exp10;\n\n        // Fix 3 * 0.1 === 0.30000000000000004 issue (see IEEE 754).\n        // 20 is the uppper bound of toFixed.\n        return exponent >= -20 ? +val.toFixed(exponent < 0 ? -exponent : 0) : val;\n    };\n\n    /**\n     * Order intervals asc, and split them when overlap.\n     * expect(numberUtil.reformIntervals([\n     *     {interval: [18, 62], close: [1, 1]},\n     *     {interval: [-Infinity, -70], close: [0, 0]},\n     *     {interval: [-70, -26], close: [1, 1]},\n     *     {interval: [-26, 18], close: [1, 1]},\n     *     {interval: [62, 150], close: [1, 1]},\n     *     {interval: [106, 150], close: [1, 1]},\n     *     {interval: [150, Infinity], close: [0, 0]}\n     * ])).toEqual([\n     *     {interval: [-Infinity, -70], close: [0, 0]},\n     *     {interval: [-70, -26], close: [1, 1]},\n     *     {interval: [-26, 18], close: [0, 1]},\n     *     {interval: [18, 62], close: [0, 1]},\n     *     {interval: [62, 150], close: [0, 1]},\n     *     {interval: [150, Infinity], close: [0, 0]}\n     * ]);\n     * @param {Array.<Object>} list, where `close` mean open or close\n     *        of the interval, and Infinity can be used.\n     * @return {Array.<Object>} The origin list, which has been reformed.\n     */\n    number.reformIntervals = function (list) {\n        list.sort(function (a, b) {\n            return littleThan(a, b, 0) ? -1 : 1;\n        });\n\n        var curr = -Infinity;\n        var currClose = 1;\n        for (var i = 0; i < list.length;) {\n            var interval = list[i].interval;\n            var close = list[i].close;\n\n            for (var lg = 0; lg < 2; lg++) {\n                if (interval[lg] <= curr) {\n                    interval[lg] = curr;\n                    close[lg] = !lg ? 1 - currClose : 1;\n                }\n                curr = interval[lg];\n                currClose = close[lg];\n            }\n\n            if (interval[0] === interval[1] && close[0] * close[1] !== 1) {\n                list.splice(i, 1);\n            }\n            else {\n                i++;\n            }\n        }\n\n        return list;\n\n        function littleThan(a, b, lg) {\n            return a.interval[lg] < b.interval[lg]\n                || (\n                    a.interval[lg] === b.interval[lg]\n                    && (\n                        (a.close[lg] - b.close[lg] === (!lg ? 1 : -1))\n                        || (!lg && littleThan(a, b, 1))\n                    )\n                );\n        }\n    };\n\n    /**\n     * parseFloat NaNs numeric-cast false positives (null|true|false|\"\")\n     * ...but misinterprets leading-number strings, particularly hex literals (\"0x...\")\n     * subtraction forces infinities to NaN\n     *\n     * @param {*} v\n     * @return {boolean}\n     */\n    number.isNumeric = function (v) {\n        return v - parseFloat(v) >= 0;\n    };\n\n    module.exports = number;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.6.1@echarts/lib/util/number.js\n// module id = 0+Kq\n// module chunks = 0 1","/**\n * echarts设备环境识别\n *\n * @desc echarts基于Canvas，纯Javascript图表库，提供直观，生动，可交互，可个性化定制的数据统计图表。\n * @author firede[firede@firede.us]\n * @desc thanks zepto.\n */\n\n    var env = {};\n    if (typeof navigator === 'undefined') {\n        // In node\n        env = {\n            browser: {},\n            os: {},\n            node: true,\n            // Assume canvas is supported\n            canvasSupported: true\n        };\n    }\n    else {\n        env = detect(navigator.userAgent);\n    }\n\n    module.exports = env;\n\n    // Zepto.js\n    // (c) 2010-2013 Thomas Fuchs\n    // Zepto.js may be freely distributed under the MIT license.\n\n    function detect(ua) {\n        var os = {};\n        var browser = {};\n        // var webkit = ua.match(/Web[kK]it[\\/]{0,1}([\\d.]+)/);\n        // var android = ua.match(/(Android);?[\\s\\/]+([\\d.]+)?/);\n        // var ipad = ua.match(/(iPad).*OS\\s([\\d_]+)/);\n        // var ipod = ua.match(/(iPod)(.*OS\\s([\\d_]+))?/);\n        // var iphone = !ipad && ua.match(/(iPhone\\sOS)\\s([\\d_]+)/);\n        // var webos = ua.match(/(webOS|hpwOS)[\\s\\/]([\\d.]+)/);\n        // var touchpad = webos && ua.match(/TouchPad/);\n        // var kindle = ua.match(/Kindle\\/([\\d.]+)/);\n        // var silk = ua.match(/Silk\\/([\\d._]+)/);\n        // var blackberry = ua.match(/(BlackBerry).*Version\\/([\\d.]+)/);\n        // var bb10 = ua.match(/(BB10).*Version\\/([\\d.]+)/);\n        // var rimtabletos = ua.match(/(RIM\\sTablet\\sOS)\\s([\\d.]+)/);\n        // var playbook = ua.match(/PlayBook/);\n        // var chrome = ua.match(/Chrome\\/([\\d.]+)/) || ua.match(/CriOS\\/([\\d.]+)/);\n        var firefox = ua.match(/Firefox\\/([\\d.]+)/);\n        // var safari = webkit && ua.match(/Mobile\\//) && !chrome;\n        // var webview = ua.match(/(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/) && !chrome;\n        var ie = ua.match(/MSIE\\s([\\d.]+)/)\n            // IE 11 Trident/7.0; rv:11.0\n            || ua.match(/Trident\\/.+?rv:(([\\d.]+))/);\n        var edge = ua.match(/Edge\\/([\\d.]+)/); // IE 12 and 12+\n\n        var weChat = (/micromessenger/i).test(ua);\n\n        // Todo: clean this up with a better OS/browser seperation:\n        // - discern (more) between multiple browsers on android\n        // - decide if kindle fire in silk mode is android or not\n        // - Firefox on Android doesn't specify the Android version\n        // - possibly devide in os, device and browser hashes\n\n        // if (browser.webkit = !!webkit) browser.version = webkit[1];\n\n        // if (android) os.android = true, os.version = android[2];\n        // if (iphone && !ipod) os.ios = os.iphone = true, os.version = iphone[2].replace(/_/g, '.');\n        // if (ipad) os.ios = os.ipad = true, os.version = ipad[2].replace(/_/g, '.');\n        // if (ipod) os.ios = os.ipod = true, os.version = ipod[3] ? ipod[3].replace(/_/g, '.') : null;\n        // if (webos) os.webos = true, os.version = webos[2];\n        // if (touchpad) os.touchpad = true;\n        // if (blackberry) os.blackberry = true, os.version = blackberry[2];\n        // if (bb10) os.bb10 = true, os.version = bb10[2];\n        // if (rimtabletos) os.rimtabletos = true, os.version = rimtabletos[2];\n        // if (playbook) browser.playbook = true;\n        // if (kindle) os.kindle = true, os.version = kindle[1];\n        // if (silk) browser.silk = true, browser.version = silk[1];\n        // if (!silk && os.android && ua.match(/Kindle Fire/)) browser.silk = true;\n        // if (chrome) browser.chrome = true, browser.version = chrome[1];\n        if (firefox) {\n            browser.firefox = true;\n            browser.version = firefox[1];\n        }\n        // if (safari && (ua.match(/Safari/) || !!os.ios)) browser.safari = true;\n        // if (webview) browser.webview = true;\n\n        if (ie) {\n            browser.ie = true;\n            browser.version = ie[1];\n        }\n\n        if (edge) {\n            browser.edge = true;\n            browser.version = edge[1];\n        }\n\n        // It is difficult to detect WeChat in Win Phone precisely, because ua can\n        // not be set on win phone. So we do not consider Win Phone.\n        if (weChat) {\n            browser.weChat = true;\n        }\n\n        // os.tablet = !!(ipad || playbook || (android && !ua.match(/Mobile/)) ||\n        //     (firefox && ua.match(/Tablet/)) || (ie && !ua.match(/Phone/) && ua.match(/Touch/)));\n        // os.phone  = !!(!os.tablet && !os.ipod && (android || iphone || webos ||\n        //     (chrome && ua.match(/Android/)) || (chrome && ua.match(/CriOS\\/([\\d.]+)/)) ||\n        //     (firefox && ua.match(/Mobile/)) || (ie && ua.match(/Touch/))));\n\n        return {\n            browser: browser,\n            os: os,\n            node: false,\n            // 原生canvas支持，改极端点了\n            // canvasSupported : !(browser.ie && parseFloat(browser.version) < 9)\n            canvasSupported : document.createElement('canvas').getContext ? true : false,\n            // @see <http://stackoverflow.com/questions/4817029/whats-the-best-way-to-detect-a-touch-screen-device-using-javascript>\n            // works on most browsers\n            // IE10/11 does not support touch event, and MS Edge supports them but not by\n            // default, so we dont check navigator.maxTouchPoints for them here.\n            touchEventsSupported: 'ontouchstart' in window && !browser.ie && !browser.edge,\n            // <http://caniuse.com/#search=pointer%20event>.\n            pointerEventsSupported: 'onpointerdown' in window\n                // Firefox supports pointer but not by default, only MS browsers are reliable on pointer\n                // events currently. So we dont use that on other browsers unless tested sufficiently.\n                // Although IE 10 supports pointer event, it use old style and is different from the\n                // standard. So we exclude that. (IE 10 is hardly used on touch device)\n                && (browser.edge || (browser.ie && browser.version >= 11))\n        };\n    }\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.5.1@zrender/lib/core/env.js\n// module id = 020c\n// module chunks = 0 1","// TODO Draggable for group\n// FIXME Draggable on element which has parent rotation or scale\n\n    function Draggable() {\n\n        this.on('mousedown', this._dragStart, this);\n        this.on('mousemove', this._drag, this);\n        this.on('mouseup', this._dragEnd, this);\n        this.on('globalout', this._dragEnd, this);\n        // this._dropTarget = null;\n        // this._draggingTarget = null;\n\n        // this._x = 0;\n        // this._y = 0;\n    }\n\n    Draggable.prototype = {\n\n        constructor: Draggable,\n\n        _dragStart: function (e) {\n            var draggingTarget = e.target;\n            if (draggingTarget && draggingTarget.draggable) {\n                this._draggingTarget = draggingTarget;\n                draggingTarget.dragging = true;\n                this._x = e.offsetX;\n                this._y = e.offsetY;\n\n                this.dispatchToElement(param(draggingTarget, e), 'dragstart', e.event);\n            }\n        },\n\n        _drag: function (e) {\n            var draggingTarget = this._draggingTarget;\n            if (draggingTarget) {\n\n                var x = e.offsetX;\n                var y = e.offsetY;\n\n                var dx = x - this._x;\n                var dy = y - this._y;\n                this._x = x;\n                this._y = y;\n\n                draggingTarget.drift(dx, dy, e);\n                this.dispatchToElement(param(draggingTarget, e), 'drag', e.event);\n\n                var dropTarget = this.findHover(x, y, draggingTarget).target;\n                var lastDropTarget = this._dropTarget;\n                this._dropTarget = dropTarget;\n\n                if (draggingTarget !== dropTarget) {\n                    if (lastDropTarget && dropTarget !== lastDropTarget) {\n                        this.dispatchToElement(param(lastDropTarget, e), 'dragleave', e.event);\n                    }\n                    if (dropTarget && dropTarget !== lastDropTarget) {\n                        this.dispatchToElement(param(dropTarget, e), 'dragenter', e.event);\n                    }\n                }\n            }\n        },\n\n        _dragEnd: function (e) {\n            var draggingTarget = this._draggingTarget;\n\n            if (draggingTarget) {\n                draggingTarget.dragging = false;\n            }\n\n            this.dispatchToElement(param(draggingTarget, e), 'dragend', e.event);\n\n            if (this._dropTarget) {\n                this.dispatchToElement(param(this._dropTarget, e), 'drop', e.event);\n            }\n\n            this._draggingTarget = null;\n            this._dropTarget = null;\n        }\n\n    };\n\n    function param(target, e) {\n        return {target: target, topTarget: e && e.topTarget};\n    }\n\n    module.exports = Draggable;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.5.1@zrender/lib/mixin/Draggable.js\n// module id = 06Ck\n// module chunks = 0 1","\n\n    var zrUtil = require('zrender/lib/core/util');\n    var graphic = require('../../util/graphic');\n    var modelUtil = require('../../util/model');\n    var brushHelper = require('./brushHelper');\n\n    var each = zrUtil.each;\n    var indexOf = zrUtil.indexOf;\n    var curry = zrUtil.curry;\n\n    var COORD_CONVERTS = ['dataToPoint', 'pointToData'];\n\n    // FIXME\n    // how to genarialize to more coordinate systems.\n    var INCLUDE_FINDER_MAIN_TYPES = [\n        'grid', 'xAxis', 'yAxis', 'geo', 'graph',\n        'polar', 'radiusAxis', 'angleAxis', 'bmap'\n    ];\n\n    /**\n     * [option in constructor]:\n     * {\n     *     Index/Id/Name of geo, xAxis, yAxis, grid: See util/model#parseFinder.\n     * }\n     *\n     *\n     * [targetInfo]:\n     *\n     * There can be multiple axes in a single targetInfo. Consider the case\n     * of `grid` component, a targetInfo represents a grid which contains one or more\n     * cartesian and one or more axes. And consider the case of parallel system,\n     * which has multiple axes in a coordinate system.\n     * Can be {\n     *     panelId: ...,\n     *     coordSys: <a representitive cartesian in grid (first cartesian by default)>,\n     *     coordSyses: all cartesians.\n     *     gridModel: <grid component>\n     *     xAxes: correspond to coordSyses on index\n     *     yAxes: correspond to coordSyses on index\n     * }\n     * or {\n     *     panelId: ...,\n     *     coordSys: <geo coord sys>\n     *     coordSyses: [<geo coord sys>]\n     *     geoModel: <geo component>\n     * }\n     *\n     *\n     * [panelOpt]:\n     *\n     * Make from targetInfo. Input to BrushController.\n     * {\n     *     panelId: ...,\n     *     rect: ...\n     * }\n     *\n     *\n     * [area]:\n     *\n     * Generated by BrushController or user input.\n     * {\n     *     panelId: Used to locate coordInfo directly. If user inpput, no panelId.\n     *     brushType: determine how to convert to/from coord('rect' or 'polygon' or 'lineX/Y').\n     *     Index/Id/Name of geo, xAxis, yAxis, grid: See util/model#parseFinder.\n     *     range: pixel range.\n     *     coordRange: representitive coord range (the first one of coordRanges).\n     *     coordRanges: <Array> coord ranges, used in multiple cartesian in one grid.\n     * }\n     */\n\n    /**\n     * @param {Object} option contains Index/Id/Name of xAxis/yAxis/geo/grid\n     *        Each can be {number|Array.<number>}. like: {xAxisIndex: [3, 4]}\n     * @param {module:echarts/model/Global} ecModel\n     * @param {Object} [opt]\n     * @param {Array.<string>} [opt.include] include coordinate system types.\n     */\n    function BrushTargetManager(option, ecModel, opt) {\n        /**\n         * @private\n         * @type {Array.<Object>}\n         */\n        var targetInfoList = this._targetInfoList = [];\n        var info = {};\n        var foundCpts = parseFinder(ecModel, option);\n\n        each(targetInfoBuilders, function (builder, type) {\n            if (!opt || !opt.include || indexOf(opt.include, type) >= 0) {\n                builder(foundCpts, targetInfoList, info);\n            }\n        });\n    }\n\n    var proto = BrushTargetManager.prototype;\n\n    proto.setOutputRanges = function (areas, ecModel) {\n        this.matchOutputRanges(areas, ecModel, function (area, coordRange, coordSys) {\n            (area.coordRanges || (area.coordRanges = [])).push(coordRange);\n            // area.coordRange is the first of area.coordRanges\n            if (!area.coordRange) {\n                area.coordRange = coordRange;\n                // In 'category' axis, coord to pixel is not reversible, so we can not\n                // rebuild range by coordRange accrately, which may bring trouble when\n                // brushing only one item. So we use __rangeOffset to rebuilding range\n                // by coordRange. And this it only used in brush component so it is no\n                // need to be adapted to coordRanges.\n                var result = coordConvert[area.brushType](0, coordSys, coordRange);\n                area.__rangeOffset = {\n                    offset: diffProcessor[area.brushType](result.values, area.range, [1, 1]),\n                    xyMinMax: result.xyMinMax\n                };\n            }\n        });\n    };\n\n    proto.matchOutputRanges = function (areas, ecModel, cb) {\n        each(areas, function (area) {\n            var targetInfo = this.findTargetInfo(area, ecModel);\n\n            if (targetInfo && targetInfo !== true) {\n                zrUtil.each(\n                    targetInfo.coordSyses,\n                    function (coordSys) {\n                        var result = coordConvert[area.brushType](1, coordSys, area.range);\n                        cb(area, result.values, coordSys, ecModel);\n                    }\n                );\n            }\n        }, this);\n    };\n\n    proto.setInputRanges = function (areas, ecModel) {\n        each(areas, function (area) {\n            var targetInfo = this.findTargetInfo(area, ecModel);\n\n            if (__DEV__) {\n                zrUtil.assert(\n                    !targetInfo || targetInfo === true || area.coordRange,\n                    'coordRange must be specified when coord index specified.'\n                );\n                zrUtil.assert(\n                    !targetInfo || targetInfo !== true || area.range,\n                    'range must be specified in global brush.'\n                );\n            }\n\n            area.range = area.range || [];\n\n            // convert coordRange to global range and set panelId.\n            if (targetInfo && targetInfo !== true) {\n                area.panelId = targetInfo.panelId;\n                // (1) area.range shoule always be calculate from coordRange but does\n                // not keep its original value, for the sake of the dataZoom scenario,\n                // where area.coordRange remains unchanged but area.range may be changed.\n                // (2) Only support converting one coordRange to pixel range in brush\n                // component. So do not consider `coordRanges`.\n                // (3) About __rangeOffset, see comment above.\n                var result = coordConvert[area.brushType](0, targetInfo.coordSys, area.coordRange);\n                var rangeOffset = area.__rangeOffset;\n                area.range = rangeOffset\n                    ? diffProcessor[area.brushType](\n                        result.values,\n                        rangeOffset.offset,\n                        getScales(result.xyMinMax, rangeOffset.xyMinMax)\n                    )\n                    : result.values;\n            }\n        }, this);\n    };\n\n    proto.makePanelOpts = function (api, getDefaultBrushType) {\n        return zrUtil.map(this._targetInfoList, function (targetInfo) {\n            var rect = targetInfo.getPanelRect();\n            return {\n                panelId: targetInfo.panelId,\n                defaultBrushType: getDefaultBrushType && getDefaultBrushType(targetInfo),\n                clipPath: brushHelper.makeRectPanelClipPath(rect),\n                isTargetByCursor: brushHelper.makeRectIsTargetByCursor(\n                    rect, api, targetInfo.coordSysModel\n                ),\n                getLinearBrushOtherExtent: brushHelper.makeLinearBrushOtherExtent(rect)\n            };\n        });\n    };\n\n    proto.controlSeries = function (area, seriesModel, ecModel) {\n        // Check whether area is bound in coord, and series do not belong to that coord.\n        // If do not do this check, some brush (like lineX) will controll all axes.\n        var targetInfo = this.findTargetInfo(area, ecModel);\n        return targetInfo === true || (\n            targetInfo && indexOf(targetInfo.coordSyses, seriesModel.coordinateSystem) >= 0\n        );\n    };\n\n    /**\n     * If return Object, a coord found.\n     * If reutrn true, global found.\n     * Otherwise nothing found.\n     *\n     * @param {Object} area\n     * @param {Array} targetInfoList\n     * @return {Obejct|boolean}\n     */\n    proto.findTargetInfo = function (area, ecModel) {\n        var targetInfoList = this._targetInfoList;\n        var foundCpts = parseFinder(ecModel, area);\n\n        for (var i = 0; i < targetInfoList.length; i++) {\n            var targetInfo = targetInfoList[i];\n            var areaPanelId = area.panelId;\n            if (areaPanelId) {\n                if (targetInfo.panelId === areaPanelId) {\n                    return targetInfo;\n                }\n            }\n            else {\n                for (var i = 0; i < targetInfoMatchers.length; i++) {\n                    if (targetInfoMatchers[i](foundCpts, targetInfo)) {\n                        return targetInfo;\n                    }\n                }\n            }\n        }\n\n        return true;\n    };\n\n    function formatMinMax(minMax) {\n        minMax[0] > minMax[1] && minMax.reverse();\n        return minMax;\n    }\n\n    function parseFinder(ecModel, option) {\n        return modelUtil.parseFinder(\n            ecModel, option, {includeMainTypes: INCLUDE_FINDER_MAIN_TYPES}\n        );\n    }\n\n    var targetInfoBuilders = {\n\n        grid: function (foundCpts, targetInfoList) {\n            var xAxisModels = foundCpts.xAxisModels;\n            var yAxisModels = foundCpts.yAxisModels;\n            var gridModels = foundCpts.gridModels;\n            // Remove duplicated.\n            var gridModelMap = zrUtil.createHashMap();\n            var xAxesHas = {};\n            var yAxesHas = {};\n\n            if (!xAxisModels && !yAxisModels && !gridModels) {\n                return;\n            }\n\n            each(xAxisModels, function (axisModel) {\n                var gridModel = axisModel.axis.grid.model;\n                gridModelMap.set(gridModel.id, gridModel);\n                xAxesHas[gridModel.id] = true;\n            });\n            each(yAxisModels, function (axisModel) {\n                var gridModel = axisModel.axis.grid.model;\n                gridModelMap.set(gridModel.id, gridModel);\n                yAxesHas[gridModel.id] = true;\n            });\n            each(gridModels, function (gridModel) {\n                gridModelMap.set(gridModel.id, gridModel);\n                xAxesHas[gridModel.id] = true;\n                yAxesHas[gridModel.id] = true;\n            });\n\n            gridModelMap.each(function (gridModel) {\n                var grid = gridModel.coordinateSystem;\n                var cartesians = [];\n\n                each(grid.getCartesians(), function (cartesian, index) {\n                    if (indexOf(xAxisModels, cartesian.getAxis('x').model) >= 0\n                        || indexOf(yAxisModels, cartesian.getAxis('y').model) >= 0\n                    ) {\n                        cartesians.push(cartesian);\n                    }\n                });\n                targetInfoList.push({\n                    panelId: 'grid--' + gridModel.id,\n                    gridModel: gridModel,\n                    coordSysModel: gridModel,\n                    // Use the first one as the representitive coordSys.\n                    coordSys: cartesians[0],\n                    coordSyses: cartesians,\n                    getPanelRect: panelRectBuilder.grid,\n                    xAxisDeclared: xAxesHas[gridModel.id],\n                    yAxisDeclared: yAxesHas[gridModel.id]\n                });\n            });\n        },\n\n        geo: function (foundCpts, targetInfoList) {\n            each(foundCpts.geoModels, function (geoModel) {\n                var coordSys = geoModel.coordinateSystem;\n                targetInfoList.push({\n                    panelId: 'geo--' + geoModel.id,\n                    geoModel: geoModel,\n                    coordSysModel: geoModel,\n                    coordSys: coordSys,\n                    coordSyses: [coordSys],\n                    getPanelRect: panelRectBuilder.geo\n                });\n            });\n        }\n    };\n\n    var targetInfoMatchers = [\n\n        // grid\n        function (foundCpts, targetInfo) {\n            var xAxisModel = foundCpts.xAxisModel;\n            var yAxisModel = foundCpts.yAxisModel;\n            var gridModel = foundCpts.gridModel;\n\n            !gridModel && xAxisModel && (gridModel = xAxisModel.axis.grid.model);\n            !gridModel && yAxisModel && (gridModel = yAxisModel.axis.grid.model);\n\n            return gridModel && gridModel === targetInfo.gridModel;\n        },\n\n        // geo\n        function (foundCpts, targetInfo) {\n            var geoModel = foundCpts.geoModel;\n            return geoModel && geoModel === targetInfo.geoModel;\n        }\n    ];\n\n    var panelRectBuilder = {\n\n        grid: function () {\n            // grid is not Transformable.\n            return this.coordSys.grid.getRect().clone();\n        },\n\n        geo: function () {\n            var coordSys = this.coordSys;\n            var rect = coordSys.getBoundingRect().clone();\n            // geo roam and zoom transform\n            rect.applyTransform(graphic.getTransform(coordSys));\n            return rect;\n        }\n    };\n\n    var coordConvert = {\n\n        lineX: curry(axisConvert, 0),\n\n        lineY: curry(axisConvert, 1),\n\n        rect: function (to, coordSys, rangeOrCoordRange) {\n            var xminymin = coordSys[COORD_CONVERTS[to]]([rangeOrCoordRange[0][0], rangeOrCoordRange[1][0]]);\n            var xmaxymax = coordSys[COORD_CONVERTS[to]]([rangeOrCoordRange[0][1], rangeOrCoordRange[1][1]]);\n            var values = [\n                formatMinMax([xminymin[0], xmaxymax[0]]),\n                formatMinMax([xminymin[1], xmaxymax[1]])\n            ];\n            return {values: values, xyMinMax: values};\n        },\n\n        polygon: function (to, coordSys, rangeOrCoordRange) {\n            var xyMinMax = [[Infinity, -Infinity], [Infinity, -Infinity]];\n            var values = zrUtil.map(rangeOrCoordRange, function (item) {\n                var p = coordSys[COORD_CONVERTS[to]](item);\n                xyMinMax[0][0] = Math.min(xyMinMax[0][0], p[0]);\n                xyMinMax[1][0] = Math.min(xyMinMax[1][0], p[1]);\n                xyMinMax[0][1] = Math.max(xyMinMax[0][1], p[0]);\n                xyMinMax[1][1] = Math.max(xyMinMax[1][1], p[1]);\n                return p;\n            });\n            return {values: values, xyMinMax: xyMinMax};\n        }\n    };\n\n    function axisConvert(axisNameIndex, to, coordSys, rangeOrCoordRange) {\n        if (__DEV__) {\n            zrUtil.assert(\n                coordSys.type === 'cartesian2d',\n                'lineX/lineY brush is available only in cartesian2d.'\n            );\n        }\n\n        var axis = coordSys.getAxis(['x', 'y'][axisNameIndex]);\n        var values = formatMinMax(zrUtil.map([0, 1], function (i) {\n            return to\n                ? axis.coordToData(axis.toLocalCoord(rangeOrCoordRange[i]))\n                : axis.toGlobalCoord(axis.dataToCoord(rangeOrCoordRange[i]));\n        }));\n        var xyMinMax = [];\n        xyMinMax[axisNameIndex] = values;\n        xyMinMax[1 - axisNameIndex] = [NaN, NaN];\n\n        return {values: values, xyMinMax: xyMinMax};\n    }\n\n    var diffProcessor = {\n        lineX: curry(axisDiffProcessor, 0),\n\n        lineY: curry(axisDiffProcessor, 1),\n\n        rect: function (values, refer, scales) {\n            return [\n                [values[0][0] - scales[0] * refer[0][0], values[0][1] - scales[0] * refer[0][1]],\n                [values[1][0] - scales[1] * refer[1][0], values[1][1] - scales[1] * refer[1][1]]\n            ];\n        },\n\n        polygon: function (values, refer, scales) {\n            return zrUtil.map(values, function (item, idx) {\n                return [item[0] - scales[0] * refer[idx][0], item[1] - scales[1] * refer[idx][1]];\n            });\n        }\n    };\n\n    function axisDiffProcessor(axisNameIndex, values, refer, scales) {\n        return [\n            values[0] - scales[axisNameIndex] * refer[0],\n            values[1] - scales[axisNameIndex] * refer[1]\n        ];\n    }\n\n    // We have to process scale caused by dataZoom manually,\n    // although it might be not accurate.\n    function getScales(xyMinMaxCurr, xyMinMaxOrigin) {\n        var sizeCurr = getSize(xyMinMaxCurr);\n        var sizeOrigin = getSize(xyMinMaxOrigin);\n        var scales = [sizeCurr[0] / sizeOrigin[0], sizeCurr[1] / sizeOrigin[1]];\n        isNaN(scales[0]) && (scales[0] = 1);\n        isNaN(scales[1]) && (scales[1] = 1);\n        return scales;\n    }\n\n    function getSize(xyMinMax) {\n        return xyMinMax\n            ? [xyMinMax[0][1] - xyMinMax[0][0], xyMinMax[1][1] - xyMinMax[1][0]]\n            : [NaN, NaN];\n    }\n\n    module.exports = BrushTargetManager;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.6.1@echarts/lib/component/helper/BrushTargetManager.js\n// module id = 0Mv9\n// module chunks = 0 1","\n\n    /**\n     * @param {Array.<Object>} colorStops\n     */\n    var Gradient = function (colorStops) {\n\n        this.colorStops = colorStops || [];\n    };\n\n    Gradient.prototype = {\n\n        constructor: Gradient,\n\n        addColorStop: function (offset, color) {\n            this.colorStops.push({\n\n                offset: offset,\n\n                color: color\n            });\n        }\n    };\n\n    module.exports = Gradient;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.5.1@zrender/lib/graphic/Gradient.js\n// module id = 0iiL\n// module chunks = 0 1","\n\n    var zrUtil = require('zrender/lib/core/util');\n    var Axis = require('../Axis');\n\n    /**\n     * Extend axis 2d\n     * @constructor module:echarts/coord/cartesian/Axis2D\n     * @extends {module:echarts/coord/cartesian/Axis}\n     * @param {string} dim\n     * @param {*} scale\n     * @param {Array.<number>} coordExtent\n     * @param {string} axisType\n     * @param {string} position\n     */\n    var Axis2D = function (dim, scale, coordExtent, axisType, position) {\n        Axis.call(this, dim, scale, coordExtent);\n        /**\n         * Axis type\n         *  - 'category'\n         *  - 'value'\n         *  - 'time'\n         *  - 'log'\n         * @type {string}\n         */\n        this.type = axisType || 'value';\n\n        /**\n         * Axis position\n         *  - 'top'\n         *  - 'bottom'\n         *  - 'left'\n         *  - 'right'\n         */\n        this.position = position || 'bottom';\n    };\n\n    Axis2D.prototype = {\n\n        constructor: Axis2D,\n\n        /**\n         * Index of axis, can be used as key\n         */\n        index: 0,\n        /**\n         * If axis is on the zero position of the other axis\n         * @type {boolean}\n         */\n        onZero: false,\n\n        /**\n         * Axis model\n         * @param {module:echarts/coord/cartesian/AxisModel}\n         */\n        model: null,\n\n        isHorizontal: function () {\n            var position = this.position;\n            return position === 'top' || position === 'bottom';\n        },\n\n        /**\n         * Each item cooresponds to this.getExtent(), which\n         * means globalExtent[0] may greater than globalExtent[1],\n         * unless `asc` is input.\n         *\n         * @param {boolean} [asc]\n         * @return {Array.<number>}\n         */\n        getGlobalExtent: function (asc) {\n            var ret = this.getExtent();\n            ret[0] = this.toGlobalCoord(ret[0]);\n            ret[1] = this.toGlobalCoord(ret[1]);\n            asc && ret[0] > ret[1] && ret.reverse();\n            return ret;\n        },\n\n        getOtherAxis: function () {\n            this.grid.getOtherAxis();\n        },\n\n        /**\n         * If label is ignored.\n         * Automatically used when axis is category and label can not be all shown\n         * @param  {number}  idx\n         * @return {boolean}\n         */\n        isLabelIgnored: function (idx) {\n            if (this.type === 'category') {\n                var labelInterval = this.getLabelInterval();\n                return ((typeof labelInterval === 'function')\n                    && !labelInterval(idx, this.scale.getLabel(idx)))\n                    || idx % (labelInterval + 1);\n            }\n        },\n\n        /**\n         * @override\n         */\n        pointToData: function (point, clamp) {\n            return this.coordToData(this.toLocalCoord(point[this.dim === 'x' ? 0 : 1]), clamp);\n        },\n\n        /**\n         * Transform global coord to local coord,\n         * i.e. var localCoord = axis.toLocalCoord(80);\n         * designate by module:echarts/coord/cartesian/Grid.\n         * @type {Function}\n         */\n        toLocalCoord: null,\n\n        /**\n         * Transform global coord to local coord,\n         * i.e. var globalCoord = axis.toLocalCoord(40);\n         * designate by module:echarts/coord/cartesian/Grid.\n         * @type {Function}\n         */\n        toGlobalCoord: null\n\n    };\n    zrUtil.inherits(Axis2D, Axis);\n\n    module.exports = Axis2D;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.6.1@echarts/lib/coord/cartesian/Axis2D.js\n// module id = 1/d/\n// module chunks = 0 1","'use strict';\n// TODO boundaryGap\n\n\n    require('../coord/cartesian/AxisModel');\n\n    require('./axis/CartesianAxisView');\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.6.1@echarts/lib/component/axis.js\n// module id = 1QxH\n// module chunks = 0 1","'use strict';\n\n\n    var zrUtil = require('zrender/lib/core/util');\n    var Model = require('../../model/Model');\n\n    var LegendModel = require('../../echarts').extendComponentModel({\n\n        type: 'legend',\n\n        dependencies: ['series'],\n\n        layoutMode: {\n            type: 'box',\n            ignoreSize: true\n        },\n\n        init: function (option, parentModel, ecModel) {\n            this.mergeDefaultAndTheme(option, ecModel);\n\n            option.selected = option.selected || {};\n        },\n\n        mergeOption: function (option) {\n            LegendModel.superCall(this, 'mergeOption', option);\n        },\n\n        optionUpdated: function () {\n            this._updateData(this.ecModel);\n\n            var legendData = this._data;\n\n            // If selectedMode is single, try to select one\n            if (legendData[0] && this.get('selectedMode') === 'single') {\n                var hasSelected = false;\n                // If has any selected in option.selected\n                for (var i = 0; i < legendData.length; i++) {\n                    var name = legendData[i].get('name');\n                    if (this.isSelected(name)) {\n                        // Force to unselect others\n                        this.select(name);\n                        hasSelected = true;\n                        break;\n                    }\n                }\n                // Try select the first if selectedMode is single\n                !hasSelected && this.select(legendData[0].get('name'));\n            }\n        },\n\n        _updateData: function (ecModel) {\n            var legendData = zrUtil.map(this.get('data') || [], function (dataItem) {\n                // Can be string or number\n                if (typeof dataItem === 'string' || typeof dataItem === 'number') {\n                    dataItem = {\n                        name: dataItem\n                    };\n                }\n                return new Model(dataItem, this, this.ecModel);\n            }, this);\n            this._data = legendData;\n\n            var availableNames = zrUtil.map(ecModel.getSeries(), function (series) {\n                return series.name;\n            });\n            ecModel.eachSeries(function (seriesModel) {\n                if (seriesModel.legendDataProvider) {\n                    var data = seriesModel.legendDataProvider();\n                    availableNames = availableNames.concat(data.mapArray(data.getName));\n                }\n            });\n            /**\n             * @type {Array.<string>}\n             * @private\n             */\n            this._availableNames = availableNames;\n        },\n\n        /**\n         * @return {Array.<module:echarts/model/Model>}\n         */\n        getData: function () {\n            return this._data;\n        },\n\n        /**\n         * @param {string} name\n         */\n        select: function (name) {\n            var selected = this.option.selected;\n            var selectedMode = this.get('selectedMode');\n            if (selectedMode === 'single') {\n                var data = this._data;\n                zrUtil.each(data, function (dataItem) {\n                    selected[dataItem.get('name')] = false;\n                });\n            }\n            selected[name] = true;\n        },\n\n        /**\n         * @param {string} name\n         */\n        unSelect: function (name) {\n            if (this.get('selectedMode') !== 'single') {\n                this.option.selected[name] = false;\n            }\n        },\n\n        /**\n         * @param {string} name\n         */\n        toggleSelected: function (name) {\n            var selected = this.option.selected;\n            // Default is true\n            if (!selected.hasOwnProperty(name)) {\n                selected[name] = true;\n            }\n            this[selected[name] ? 'unSelect' : 'select'](name);\n        },\n\n        /**\n         * @param {string} name\n         */\n        isSelected: function (name) {\n            var selected = this.option.selected;\n            return !(selected.hasOwnProperty(name) && !selected[name])\n                && zrUtil.indexOf(this._availableNames, name) >= 0;\n        },\n\n        defaultOption: {\n            // 一级层叠\n            zlevel: 0,\n            // 二级层叠\n            z: 4,\n            show: true,\n\n            // 布局方式，默认为水平布局，可选为：\n            // 'horizontal' | 'vertical'\n            orient: 'horizontal',\n\n            left: 'center',\n            // right: 'center',\n\n            top: 'top',\n            // bottom: 'top',\n\n            // 水平对齐\n            // 'auto' | 'left' | 'right'\n            // 默认为 'auto', 根据 x 的位置判断是左对齐还是右对齐\n            align: 'auto',\n\n            backgroundColor: 'rgba(0,0,0,0)',\n            // 图例边框颜色\n            borderColor: '#ccc',\n            // 图例边框线宽，单位px，默认为0（无边框）\n            borderWidth: 0,\n            // 图例内边距，单位px，默认各方向内边距为5，\n            // 接受数组分别设定上右下左边距，同css\n            padding: 5,\n            // 各个item之间的间隔，单位px，默认为10，\n            // 横向布局时为水平间隔，纵向布局时为纵向间隔\n            itemGap: 10,\n            // 图例图形宽度\n            itemWidth: 25,\n            // 图例图形高度\n            itemHeight: 14,\n\n            // 图例关闭时候的颜色\n            inactiveColor: '#ccc',\n\n            textStyle: {\n                // 图例文字颜色\n                color: '#333'\n            },\n            // formatter: '',\n            // 选择模式，默认开启图例开关\n            selectedMode: true,\n            // 配置默认选中状态，可配合LEGEND.SELECTED事件做动态数据载入\n            // selected: null,\n            // 图例内容（详见legend.data，数组中每一项代表一个item\n            // data: [],\n\n            // Tooltip 相关配置\n            tooltip: {\n                show: false\n            }\n        }\n    });\n\n    module.exports = LegendModel;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.6.1@echarts/lib/component/legend/LegendModel.js\n// module id = 29ze\n// module chunks = 0 1","\n\n    var normalizeRadian = require('./util').normalizeRadian;\n    var PI2 = Math.PI * 2;\n\n    module.exports = {\n        /**\n         * 圆弧描边包含判断\n         * @param  {number}  cx\n         * @param  {number}  cy\n         * @param  {number}  r\n         * @param  {number}  startAngle\n         * @param  {number}  endAngle\n         * @param  {boolean}  anticlockwise\n         * @param  {number} lineWidth\n         * @param  {number}  x\n         * @param  {number}  y\n         * @return {Boolean}\n         */\n        containStroke: function (\n            cx, cy, r, startAngle, endAngle, anticlockwise,\n            lineWidth, x, y\n        ) {\n\n            if (lineWidth === 0) {\n                return false;\n            }\n            var _l = lineWidth;\n\n            x -= cx;\n            y -= cy;\n            var d = Math.sqrt(x * x + y * y);\n\n            if ((d - _l > r) || (d + _l < r)) {\n                return false;\n            }\n            if (Math.abs(startAngle - endAngle) % PI2 < 1e-4) {\n                // Is a circle\n                return true;\n            }\n            if (anticlockwise) {\n                var tmp = startAngle;\n                startAngle = normalizeRadian(endAngle);\n                endAngle = normalizeRadian(tmp);\n            } else {\n                startAngle = normalizeRadian(startAngle);\n                endAngle = normalizeRadian(endAngle);\n            }\n            if (startAngle > endAngle) {\n                endAngle += PI2;\n            }\n\n            var angle = Math.atan2(y, x);\n            if (angle < 0) {\n                angle += PI2;\n            }\n            return (angle >= startAngle && angle <= endAngle)\n                || (angle + PI2 >= startAngle && angle + PI2 <= endAngle);\n        }\n    };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.5.1@zrender/lib/contain/arc.js\n// module id = 2c/z\n// module chunks = 0 1","\n    var echarts = require('../echarts');\n    var zrUtil = require('zrender/lib/core/util');\n    module.exports = function (seriesType, actionInfos) {\n        zrUtil.each(actionInfos, function (actionInfo) {\n            actionInfo.update = 'updateView';\n            /**\n             * @payload\n             * @property {string} seriesName\n             * @property {string} name\n             */\n            echarts.registerAction(actionInfo, function (payload, ecModel) {\n                var selected = {};\n                ecModel.eachComponent(\n                    {mainType: 'series', subType: seriesType, query: payload},\n                    function (seriesModel) {\n                        if (seriesModel[actionInfo.method]) {\n                            seriesModel[actionInfo.method](payload.name);\n                        }\n                        var data = seriesModel.getData();\n                        // Create selected map\n                        data.each(function (idx) {\n                            var name = data.getName(idx);\n                            selected[name] = seriesModel.isSelected(name) || false;\n                        });\n                    }\n                );\n                return {\n                    name: payload.name,\n                    selected: selected\n                };\n            });\n        });\n    };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.6.1@echarts/lib/action/createDataSelectAction.js\n// module id = 2iN9\n// module chunks = 0 1","'use strict';\n\n\n    var history = require('../../dataZoom/history');\n\n    function Restore(model) {\n        this.model = model;\n    }\n\n    Restore.defaultOption = {\n        show: true,\n        icon: 'M3.8,33.4 M47,18.9h9.8V8.7 M56.3,20.1 C52.1,9,40.5,0.6,26.8,2.1C12.6,3.7,1.6,16.2,2.1,30.6 M13,41.1H3.1v10.2 M3.7,39.9c4.2,11.1,15.8,19.5,29.5,18 c14.2-1.6,25.2-14.1,24.7-28.5',\n        title: '还原'\n    };\n\n    var proto = Restore.prototype;\n\n    proto.onclick = function (ecModel, api, type) {\n        history.clear(ecModel);\n\n        api.dispatchAction({\n            type: 'restore',\n            from: this.uid\n        });\n    };\n\n\n    require('../featureManager').register('restore', Restore);\n\n\n    require('../../../echarts').registerAction(\n        {type: 'restore', event: 'restore', update: 'prepareAndUpdate'},\n        function (payload, ecModel) {\n            ecModel.resetOption('recreate');\n        }\n    );\n\n    module.exports = Restore;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.6.1@echarts/lib/component/toolbox/feature/Restore.js\n// module id = 2p/A\n// module chunks = 0 1","\n\n    var zrUtil = require('zrender/lib/core/util');\n    var echarts = require('../echarts');\n\n    require('./pie/PieSeries');\n    require('./pie/PieView');\n\n    require('../action/createDataSelectAction')('pie', [{\n        type: 'pieToggleSelect',\n        event: 'pieselectchanged',\n        method: 'toggleSelected'\n    }, {\n        type: 'pieSelect',\n        event: 'pieselected',\n        method: 'select'\n    }, {\n        type: 'pieUnSelect',\n        event: 'pieunselected',\n        method: 'unSelect'\n    }]);\n\n    echarts.registerVisual(zrUtil.curry(require('../visual/dataColor'), 'pie'));\n\n    echarts.registerLayout(zrUtil.curry(\n        require('./pie/pieLayout'), 'pie'\n    ));\n\n    echarts.registerProcessor(zrUtil.curry(require('../processor/dataFilter'), 'pie'));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.6.1@echarts/lib/chart/pie.js\n// module id = 3N82\n// module chunks = 0 1","/**\n * 圆弧\n * @module zrender/graphic/shape/Arc\n */\n \n\n    module.exports = require('../Path').extend({\n\n        type: 'arc',\n\n        shape: {\n\n            cx: 0,\n\n            cy: 0,\n\n            r: 0,\n\n            startAngle: 0,\n\n            endAngle: Math.PI * 2,\n\n            clockwise: true\n        },\n\n        style: {\n\n            stroke: '#000',\n\n            fill: null\n        },\n\n        buildPath: function (ctx, shape) {\n\n            var x = shape.cx;\n            var y = shape.cy;\n            var r = Math.max(shape.r, 0);\n            var startAngle = shape.startAngle;\n            var endAngle = shape.endAngle;\n            var clockwise = shape.clockwise;\n\n            var unitX = Math.cos(startAngle);\n            var unitY = Math.sin(startAngle);\n\n            ctx.moveTo(unitX * r + x, unitY * r + y);\n            ctx.arc(x, y, r, startAngle, endAngle, !clockwise);\n        }\n    });\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.5.1@zrender/lib/graphic/shape/Arc.js\n// module id = 3qaN\n// module chunks = 0 1","\n\n    var textContain = require('zrender/lib/contain/text');\n    var graphicUtil = require('../../util/graphic');\n\n    module.exports = {\n        /**\n         * Get color property or get color from option.textStyle.color\n         * @return {string}\n         */\n        getTextColor: function () {\n            var ecModel = this.ecModel;\n            return this.getShallow('color')\n                || (ecModel && ecModel.get('textStyle.color'));\n        },\n\n        /**\n         * Create font string from fontStyle, fontWeight, fontSize, fontFamily\n         * @return {string}\n         */\n        getFont: function () {\n            return graphicUtil.getFont({\n                fontStyle: this.getShallow('fontStyle'),\n                fontWeight: this.getShallow('fontWeight'),\n                fontSize: this.getShallow('fontSize'),\n                fontFamily: this.getShallow('fontFamily')\n            }, this.ecModel);\n        },\n\n        getTextRect: function (text) {\n            return textContain.getBoundingRect(\n                text,\n                this.getFont(),\n                this.getShallow('align'),\n                this.getShallow('baseline')\n            );\n        },\n\n        truncateText: function (text, containerWidth, ellipsis, options) {\n            return textContain.truncateText(\n                text, containerWidth, this.getFont(), ellipsis, options\n            );\n        }\n    };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.6.1@echarts/lib/model/mixin/textStyle.js\n// module id = 3rnY\n// module chunks = 0 1","'use strict';\n/**\n * @module zrender/Element\n */\n\n\n    var guid = require('./core/guid');\n    var Eventful = require('./mixin/Eventful');\n    var Transformable = require('./mixin/Transformable');\n    var Animatable = require('./mixin/Animatable');\n    var zrUtil = require('./core/util');\n\n    /**\n     * @alias module:zrender/Element\n     * @constructor\n     * @extends {module:zrender/mixin/Animatable}\n     * @extends {module:zrender/mixin/Transformable}\n     * @extends {module:zrender/mixin/Eventful}\n     */\n    var Element = function (opts) {\n\n        Transformable.call(this, opts);\n        Eventful.call(this, opts);\n        Animatable.call(this, opts);\n\n        /**\n         * 画布元素ID\n         * @type {string}\n         */\n        this.id = opts.id || guid();\n    };\n\n    Element.prototype = {\n\n        /**\n         * 元素类型\n         * Element type\n         * @type {string}\n         */\n        type: 'element',\n\n        /**\n         * 元素名字\n         * Element name\n         * @type {string}\n         */\n        name: '',\n\n        /**\n         * ZRender 实例对象，会在 element 添加到 zrender 实例中后自动赋值\n         * ZRender instance will be assigned when element is associated with zrender\n         * @name module:/zrender/Element#__zr\n         * @type {module:zrender/ZRender}\n         */\n        __zr: null,\n\n        /**\n         * 图形是否忽略，为true时忽略图形的绘制以及事件触发\n         * If ignore drawing and events of the element object\n         * @name module:/zrender/Element#ignore\n         * @type {boolean}\n         * @default false\n         */\n        ignore: false,\n\n        /**\n         * 用于裁剪的路径(shape)，所有 Group 内的路径在绘制时都会被这个路径裁剪\n         * 该路径会继承被裁减对象的变换\n         * @type {module:zrender/graphic/Path}\n         * @see http://www.w3.org/TR/2dcontext/#clipping-region\n         * @readOnly\n         */\n        clipPath: null,\n\n        /**\n         * Drift element\n         * @param  {number} dx dx on the global space\n         * @param  {number} dy dy on the global space\n         */\n        drift: function (dx, dy) {\n            switch (this.draggable) {\n                case 'horizontal':\n                    dy = 0;\n                    break;\n                case 'vertical':\n                    dx = 0;\n                    break;\n            }\n\n            var m = this.transform;\n            if (!m) {\n                m = this.transform = [1, 0, 0, 1, 0, 0];\n            }\n            m[4] += dx;\n            m[5] += dy;\n\n            this.decomposeTransform();\n            this.dirty(false);\n        },\n\n        /**\n         * Hook before update\n         */\n        beforeUpdate: function () {},\n        /**\n         * Hook after update\n         */\n        afterUpdate: function () {},\n        /**\n         * Update each frame\n         */\n        update: function () {\n            this.updateTransform();\n        },\n\n        /**\n         * @param  {Function} cb\n         * @param  {}   context\n         */\n        traverse: function (cb, context) {},\n\n        /**\n         * @protected\n         */\n        attrKV: function (key, value) {\n            if (key === 'position' || key === 'scale' || key === 'origin') {\n                // Copy the array\n                if (value) {\n                    var target = this[key];\n                    if (!target) {\n                        target = this[key] = [];\n                    }\n                    target[0] = value[0];\n                    target[1] = value[1];\n                }\n            }\n            else {\n                this[key] = value;\n            }\n        },\n\n        /**\n         * Hide the element\n         */\n        hide: function () {\n            this.ignore = true;\n            this.__zr && this.__zr.refresh();\n        },\n\n        /**\n         * Show the element\n         */\n        show: function () {\n            this.ignore = false;\n            this.__zr && this.__zr.refresh();\n        },\n\n        /**\n         * @param {string|Object} key\n         * @param {*} value\n         */\n        attr: function (key, value) {\n            if (typeof key === 'string') {\n                this.attrKV(key, value);\n            }\n            else if (zrUtil.isObject(key)) {\n                for (var name in key) {\n                    if (key.hasOwnProperty(name)) {\n                        this.attrKV(name, key[name]);\n                    }\n                }\n            }\n\n            this.dirty(false);\n\n            return this;\n        },\n\n        /**\n         * @param {module:zrender/graphic/Path} clipPath\n         */\n        setClipPath: function (clipPath) {\n            var zr = this.__zr;\n            if (zr) {\n                clipPath.addSelfToZr(zr);\n            }\n\n            // Remove previous clip path\n            if (this.clipPath && this.clipPath !== clipPath) {\n                this.removeClipPath();\n            }\n\n            this.clipPath = clipPath;\n            clipPath.__zr = zr;\n            clipPath.__clipTarget = this;\n\n            this.dirty(false);\n        },\n\n        /**\n         */\n        removeClipPath: function () {\n            var clipPath = this.clipPath;\n            if (clipPath) {\n                if (clipPath.__zr) {\n                    clipPath.removeSelfFromZr(clipPath.__zr);\n                }\n\n                clipPath.__zr = null;\n                clipPath.__clipTarget = null;\n                this.clipPath = null;\n\n                this.dirty(false);\n            }\n        },\n\n        /**\n         * Add self from zrender instance.\n         * Not recursively because it will be invoked when element added to storage.\n         * @param {module:zrender/ZRender} zr\n         */\n        addSelfToZr: function (zr) {\n            this.__zr = zr;\n            // 添加动画\n            var animators = this.animators;\n            if (animators) {\n                for (var i = 0; i < animators.length; i++) {\n                    zr.animation.addAnimator(animators[i]);\n                }\n            }\n\n            if (this.clipPath) {\n                this.clipPath.addSelfToZr(zr);\n            }\n        },\n\n        /**\n         * Remove self from zrender instance.\n         * Not recursively because it will be invoked when element added to storage.\n         * @param {module:zrender/ZRender} zr\n         */\n        removeSelfFromZr: function (zr) {\n            this.__zr = null;\n            // 移除动画\n            var animators = this.animators;\n            if (animators) {\n                for (var i = 0; i < animators.length; i++) {\n                    zr.animation.removeAnimator(animators[i]);\n                }\n            }\n\n            if (this.clipPath) {\n                this.clipPath.removeSelfFromZr(zr);\n            }\n        }\n    };\n\n    zrUtil.mixin(Element, Animatable);\n    zrUtil.mixin(Element, Transformable);\n    zrUtil.mixin(Element, Eventful);\n\n    module.exports = Element;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.5.1@zrender/lib/Element.js\n// module id = 3z8c\n// module chunks = 0 1","\n\n    var textWidthCache = {};\n    var textWidthCacheCounter = 0;\n    var TEXT_CACHE_MAX = 5000;\n\n    var util = require('../core/util');\n    var BoundingRect = require('../core/BoundingRect');\n    var retrieve = util.retrieve;\n\n    function getTextWidth(text, textFont) {\n        var key = text + ':' + textFont;\n        if (textWidthCache[key]) {\n            return textWidthCache[key];\n        }\n\n        var textLines = (text + '').split('\\n');\n        var width = 0;\n\n        for (var i = 0, l = textLines.length; i < l; i++) {\n            // measureText 可以被覆盖以兼容不支持 Canvas 的环境\n            width = Math.max(textContain.measureText(textLines[i], textFont).width, width);\n        }\n\n        if (textWidthCacheCounter > TEXT_CACHE_MAX) {\n            textWidthCacheCounter = 0;\n            textWidthCache = {};\n        }\n        textWidthCacheCounter++;\n        textWidthCache[key] = width;\n\n        return width;\n    }\n\n    function getTextRect(text, textFont, textAlign, textBaseline) {\n        var textLineLen = ((text || '') + '').split('\\n').length;\n\n        var width = getTextWidth(text, textFont);\n        // FIXME 高度计算比较粗暴\n        var lineHeight = getTextWidth('国', textFont);\n        var height = textLineLen * lineHeight;\n\n        var rect = new BoundingRect(0, 0, width, height);\n        // Text has a special line height property\n        rect.lineHeight = lineHeight;\n\n        switch (textBaseline) {\n            case 'bottom':\n            case 'alphabetic':\n                rect.y -= lineHeight;\n                break;\n            case 'middle':\n                rect.y -= lineHeight / 2;\n                break;\n            // case 'hanging':\n            // case 'top':\n        }\n\n        // FIXME Right to left language\n        switch (textAlign) {\n            case 'end':\n            case 'right':\n                rect.x -= rect.width;\n                break;\n            case 'center':\n                rect.x -= rect.width / 2;\n                break;\n            // case 'start':\n            // case 'left':\n        }\n\n        return rect;\n    }\n\n    function adjustTextPositionOnRect(textPosition, rect, textRect, distance) {\n\n        var x = rect.x;\n        var y = rect.y;\n\n        var height = rect.height;\n        var width = rect.width;\n\n        var textHeight = textRect.height;\n\n        var lineHeight = textRect.lineHeight;\n        var halfHeight = height / 2 - textHeight / 2 + lineHeight;\n\n        var textAlign = 'left';\n\n        switch (textPosition) {\n            case 'left':\n                x -= distance;\n                y += halfHeight;\n                textAlign = 'right';\n                break;\n            case 'right':\n                x += distance + width;\n                y += halfHeight;\n                textAlign = 'left';\n                break;\n            case 'top':\n                x += width / 2;\n                y -= distance + textHeight - lineHeight;\n                textAlign = 'center';\n                break;\n            case 'bottom':\n                x += width / 2;\n                y += height + distance + lineHeight;\n                textAlign = 'center';\n                break;\n            case 'inside':\n                x += width / 2;\n                y += halfHeight;\n                textAlign = 'center';\n                break;\n            case 'insideLeft':\n                x += distance;\n                y += halfHeight;\n                textAlign = 'left';\n                break;\n            case 'insideRight':\n                x += width - distance;\n                y += halfHeight;\n                textAlign = 'right';\n                break;\n            case 'insideTop':\n                x += width / 2;\n                y += distance + lineHeight;\n                textAlign = 'center';\n                break;\n            case 'insideBottom':\n                x += width / 2;\n                y += height - textHeight - distance + lineHeight;\n                textAlign = 'center';\n                break;\n            case 'insideTopLeft':\n                x += distance;\n                y += distance + lineHeight;\n                textAlign = 'left';\n                break;\n            case 'insideTopRight':\n                x += width - distance;\n                y += distance + lineHeight;\n                textAlign = 'right';\n                break;\n            case 'insideBottomLeft':\n                x += distance;\n                y += height - textHeight - distance + lineHeight;\n                break;\n            case 'insideBottomRight':\n                x += width - distance;\n                y += height - textHeight - distance + lineHeight;\n                textAlign = 'right';\n                break;\n        }\n\n        return {\n            x: x,\n            y: y,\n            textAlign: textAlign,\n            textBaseline: 'alphabetic'\n        };\n    }\n\n    /**\n     * Show ellipsis if overflow.\n     *\n     * @param  {string} text\n     * @param  {string} containerWidth\n     * @param  {string} textFont\n     * @param  {number} [ellipsis='...']\n     * @param  {Object} [options]\n     * @param  {number} [options.maxIterations=3]\n     * @param  {number} [options.minChar=0] If truncate result are less\n     *                  then minChar, ellipsis will not show, which is\n     *                  better for user hint in some cases.\n     * @param  {number} [options.placeholder=''] When all truncated, use the placeholder.\n     * @return {string}\n     */\n    function truncateText(text, containerWidth, textFont, ellipsis, options) {\n        if (!containerWidth) {\n            return '';\n        }\n\n        options = options || {};\n\n        ellipsis = retrieve(ellipsis, '...');\n        var maxIterations = retrieve(options.maxIterations, 2);\n        var minChar = retrieve(options.minChar, 0);\n        // FIXME\n        // Other languages?\n        var cnCharWidth = getTextWidth('国', textFont);\n        // FIXME\n        // Consider proportional font?\n        var ascCharWidth = getTextWidth('a', textFont);\n        var placeholder = retrieve(options.placeholder, '');\n\n        // Example 1: minChar: 3, text: 'asdfzxcv', truncate result: 'asdf', but not: 'a...'.\n        // Example 2: minChar: 3, text: '维度', truncate result: '维', but not: '...'.\n        var contentWidth = containerWidth = Math.max(0, containerWidth - 1); // Reserve some gap.\n        for (var i = 0; i < minChar && contentWidth >= ascCharWidth; i++) {\n            contentWidth -= ascCharWidth;\n        }\n\n        var ellipsisWidth = getTextWidth(ellipsis);\n        if (ellipsisWidth > contentWidth) {\n            ellipsis = '';\n            ellipsisWidth = 0;\n        }\n\n        contentWidth = containerWidth - ellipsisWidth;\n\n        var textLines = (text + '').split('\\n');\n\n        for (var i = 0, len = textLines.length; i < len; i++) {\n            var textLine = textLines[i];\n            var lineWidth = getTextWidth(textLine, textFont);\n\n            if (lineWidth <= containerWidth) {\n                continue;\n            }\n\n            for (var j = 0;; j++) {\n                if (lineWidth <= contentWidth || j >= maxIterations) {\n                    textLine += ellipsis;\n                    break;\n                }\n\n                var subLength = j === 0\n                    ? estimateLength(textLine, contentWidth, ascCharWidth, cnCharWidth)\n                    : lineWidth > 0\n                    ? Math.floor(textLine.length * contentWidth / lineWidth)\n                    : 0;\n\n                textLine = textLine.substr(0, subLength);\n                lineWidth = getTextWidth(textLine, textFont);\n            }\n\n            if (textLine === '') {\n                textLine = placeholder;\n            }\n\n            textLines[i] = textLine;\n        }\n\n        return textLines.join('\\n');\n    }\n\n    function estimateLength(text, contentWidth, ascCharWidth, cnCharWidth) {\n        var width = 0;\n        var i = 0;\n        for (var len = text.length; i < len && width < contentWidth; i++) {\n            var charCode = text.charCodeAt(i);\n            width += (0 <= charCode && charCode <= 127) ? ascCharWidth : cnCharWidth;\n        }\n        return i;\n    }\n\n    var textContain = {\n\n        getWidth: getTextWidth,\n\n        getBoundingRect: getTextRect,\n\n        adjustTextPositionOnRect: adjustTextPositionOnRect,\n\n        truncateText: truncateText,\n\n        measureText: function (text, textFont) {\n            var ctx = util.getContext();\n            ctx.font = textFont || '12px sans-serif';\n            return ctx.measureText(text);\n        }\n    };\n\n    module.exports = textContain;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.5.1@zrender/lib/contain/text.js\n// module id = 45MQ\n// module chunks = 0 1","/**\n * Text element\n * @module zrender/graphic/Text\n *\n * TODO Wrapping\n *\n * Text not support gradient\n */\n\n\n\n    var Displayable = require('./Displayable');\n    var zrUtil = require('../core/util');\n    var textContain = require('../contain/text');\n\n    /**\n     * @alias zrender/graphic/Text\n     * @extends module:zrender/graphic/Displayable\n     * @constructor\n     * @param {Object} opts\n     */\n    var Text = function (opts) {\n        Displayable.call(this, opts);\n    };\n\n    Text.prototype = {\n\n        constructor: Text,\n\n        type: 'text',\n\n        brush: function (ctx, prevEl) {\n            var style = this.style;\n            var x = style.x || 0;\n            var y = style.y || 0;\n            // Convert to string\n            var text = style.text;\n\n            // Convert to string\n            text != null && (text += '');\n\n            // Always bind style\n            style.bind(ctx, this, prevEl);\n\n            if (text) {\n\n                this.setTransform(ctx);\n\n                var textBaseline;\n                var textAlign = style.textAlign;\n                var font = style.textFont || style.font;\n                if (style.textVerticalAlign) {\n                    var rect = textContain.getBoundingRect(\n                        text, font, style.textAlign, 'top'\n                    );\n                    // Ignore textBaseline\n                    textBaseline = 'middle';\n                    switch (style.textVerticalAlign) {\n                        case 'middle':\n                            y -= rect.height / 2 - rect.lineHeight / 2;\n                            break;\n                        case 'bottom':\n                            y -= rect.height - rect.lineHeight / 2;\n                            break;\n                        default:\n                            y += rect.lineHeight / 2;\n                    }\n                }\n                else {\n                    textBaseline = style.textBaseline;\n                }\n\n                // TODO Invalid font\n                ctx.font = font || '12px sans-serif';\n                ctx.textAlign = textAlign || 'left';\n                // Use canvas default left textAlign. Giving invalid value will cause state not change\n                if (ctx.textAlign !== textAlign) {\n                    ctx.textAlign = 'left';\n                }\n                // FIXME in text contain default is top\n                ctx.textBaseline = textBaseline || 'alphabetic';\n                // Use canvas default alphabetic baseline\n                if (ctx.textBaseline !== textBaseline) {\n                    ctx.textBaseline = 'alphabetic';\n                }\n\n                var lineHeight = textContain.measureText('国', ctx.font).width;\n\n                var textLines = text.split('\\n');\n                for (var i = 0; i < textLines.length; i++) {\n                    // Fill after stroke so the outline will not cover the main part.\n                    style.hasStroke() && ctx.strokeText(textLines[i], x, y);\n                    style.hasFill() && ctx.fillText(textLines[i], x, y);\n                    y += lineHeight;\n                }\n\n                this.restoreTransform(ctx);\n            }\n        },\n\n        getBoundingRect: function () {\n            var style = this.style;\n            if (!this._rect) {\n                var textVerticalAlign = style.textVerticalAlign;\n                var rect = textContain.getBoundingRect(\n                    style.text + '', style.textFont || style.font, style.textAlign,\n                    textVerticalAlign ? 'top' : style.textBaseline\n                );\n                switch (textVerticalAlign) {\n                    case 'middle':\n                        rect.y -= rect.height / 2;\n                        break;\n                    case 'bottom':\n                        rect.y -= rect.height;\n                        break;\n                }\n                rect.x += style.x || 0;\n                rect.y += style.y || 0;\n                if (style.hasStroke()) {\n                    var w = style.lineWidth;\n                    rect.x -= w / 2;\n                    rect.y -= w / 2;\n                    rect.width += w;\n                    rect.height += w;\n                }\n                this._rect = rect;\n            }\n\n            return this._rect;\n        }\n    };\n\n    zrUtil.inherits(Text, Displayable);\n\n    module.exports = Text;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.5.1@zrender/lib/graphic/Text.js\n// module id = 46R8\n// module chunks = 0 1","\n\n    var zrUtil = require('zrender/lib/core/util');\n    var numberUtil = require('./number');\n    var textContain = require('zrender/lib/contain/text');\n\n    var formatUtil = {};\n\n    /**\n     * 每三位默认加,格式化\n     * @param {string|number} x\n     * @return {string}\n     */\n    formatUtil.addCommas = function (x) {\n        if (isNaN(x)) {\n            return '-';\n        }\n        x = (x + '').split('.');\n        return x[0].replace(/(\\d{1,3})(?=(?:\\d{3})+(?!\\d))/g,'$1,')\n               + (x.length > 1 ? ('.' + x[1]) : '');\n    };\n\n    /**\n     * @param {string} str\n     * @param {boolean} [upperCaseFirst=false]\n     * @return {string} str\n     */\n    formatUtil.toCamelCase = function (str, upperCaseFirst) {\n        str = (str || '').toLowerCase().replace(/-(.)/g, function(match, group1) {\n            return group1.toUpperCase();\n        });\n\n        if (upperCaseFirst && str) {\n            str = str.charAt(0).toUpperCase() + str.slice(1);\n        }\n\n        return str;\n    };\n\n    /**\n     * Normalize css liked array configuration\n     * e.g.\n     *  3 => [3, 3, 3, 3]\n     *  [4, 2] => [4, 2, 4, 2]\n     *  [4, 3, 2] => [4, 3, 2, 3]\n     * @param {number|Array.<number>} val\n     */\n    formatUtil.normalizeCssArray = function (val) {\n        var len = val.length;\n        if (typeof (val) === 'number') {\n            return [val, val, val, val];\n        }\n        else if (len === 2) {\n            // vertical | horizontal\n            return [val[0], val[1], val[0], val[1]];\n        }\n        else if (len === 3) {\n            // top | horizontal | bottom\n            return [val[0], val[1], val[2], val[1]];\n        }\n        return val;\n    };\n\n    var encodeHTML = formatUtil.encodeHTML = function (source) {\n        return String(source)\n            .replace(/&/g, '&amp;')\n            .replace(/</g, '&lt;')\n            .replace(/>/g, '&gt;')\n            .replace(/\"/g, '&quot;')\n            .replace(/'/g, '&#39;');\n    };\n\n    var TPL_VAR_ALIAS = ['a', 'b', 'c', 'd', 'e', 'f', 'g'];\n\n    var wrapVar = function (varName, seriesIdx) {\n        return '{' + varName + (seriesIdx == null ? '' : seriesIdx) + '}';\n    };\n\n    /**\n     * Template formatter\n     * @param {string} tpl\n     * @param {Array.<Object>|Object} paramsList\n     * @param {boolean} [encode=false]\n     * @return {string}\n     */\n    formatUtil.formatTpl = function (tpl, paramsList, encode) {\n        if (!zrUtil.isArray(paramsList)) {\n            paramsList = [paramsList];\n        }\n        var seriesLen = paramsList.length;\n        if (!seriesLen) {\n            return '';\n        }\n\n        var $vars = paramsList[0].$vars || [];\n        for (var i = 0; i < $vars.length; i++) {\n            var alias = TPL_VAR_ALIAS[i];\n            var val = wrapVar(alias, 0);\n            tpl = tpl.replace(wrapVar(alias), encode ? encodeHTML(val) : val);\n        }\n        for (var seriesIdx = 0; seriesIdx < seriesLen; seriesIdx++) {\n            for (var k = 0; k < $vars.length; k++) {\n                var val = paramsList[seriesIdx][$vars[k]];\n                tpl = tpl.replace(\n                    wrapVar(TPL_VAR_ALIAS[k], seriesIdx),\n                    encode ? encodeHTML(val) : val\n                );\n            }\n        }\n\n        return tpl;\n    };\n\n    /**\n     * simple Template formatter\n     *\n     * @param {string} tpl\n     * @param {Object} param\n     * @param {boolean} [encode=false]\n     * @return {string}\n     */\n    formatUtil.formatTplSimple = function (tpl, param, encode) {\n        zrUtil.each(param, function (value, key) {\n            tpl = tpl.replace(\n                '{' + key + '}',\n                encode ? encodeHTML(value) : value\n            );\n        });\n        return tpl;\n    };\n\n    /**\n     * @param {string} color\n     * @param {string} [extraCssText]\n     * @return {string}\n     */\n    formatUtil.getTooltipMarker = function (color, extraCssText) {\n        return color\n            ? '<span style=\"display:inline-block;margin-right:5px;'\n                + 'border-radius:10px;width:9px;height:9px;background-color:'\n                + formatUtil.encodeHTML(color) + ';' + (extraCssText || '') + '\"></span>'\n            : '';\n    };\n\n    /**\n     * @param {string} str\n     * @return {string}\n     * @inner\n     */\n    var s2d = function (str) {\n        return str < 10 ? ('0' + str) : str;\n    };\n\n    /**\n     * ISO Date format\n     * @param {string} tpl\n     * @param {number} value\n     * @param {boolean} [isUTC=false] Default in local time.\n     *           see `module:echarts/scale/Time`\n     *           and `module:echarts/util/number#parseDate`.\n     * @inner\n     */\n    formatUtil.formatTime = function (tpl, value, isUTC) {\n        if (tpl === 'week'\n            || tpl === 'month'\n            || tpl === 'quarter'\n            || tpl === 'half-year'\n            || tpl === 'year'\n        ) {\n            tpl = 'MM-dd\\nyyyy';\n        }\n\n        var date = numberUtil.parseDate(value);\n        var utc = isUTC ? 'UTC' : '';\n        var y = date['get' + utc + 'FullYear']();\n        var M = date['get' + utc + 'Month']() + 1;\n        var d = date['get' + utc + 'Date']();\n        var h = date['get' + utc + 'Hours']();\n        var m = date['get' + utc + 'Minutes']();\n        var s = date['get' + utc + 'Seconds']();\n\n        tpl = tpl.replace('MM', s2d(M))\n            .toLowerCase()\n            .replace('yyyy', y)\n            .replace('yy', y % 100)\n            .replace('dd', s2d(d))\n            .replace('d', d)\n            .replace('hh', s2d(h))\n            .replace('h', h)\n            .replace('mm', s2d(m))\n            .replace('m', m)\n            .replace('ss', s2d(s))\n            .replace('s', s);\n\n        return tpl;\n    };\n\n    /**\n     * Capital first\n     * @param {string} str\n     * @return {string}\n     */\n    formatUtil.capitalFirst = function (str) {\n        return str ? str.charAt(0).toUpperCase() + str.substr(1) : str;\n    };\n\n    formatUtil.truncateText = textContain.truncateText;\n\n    module.exports = formatUtil;\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.6.1@echarts/lib/util/format.js\n// module id = 4oXW\n// module chunks = 0 1","/**\n * Image element\n * @module zrender/graphic/Image\n */\n\n\n\n    var Displayable = require('./Displayable');\n    var BoundingRect = require('../core/BoundingRect');\n    var zrUtil = require('../core/util');\n\n    var LRU = require('../core/LRU');\n    var globalImageCache = new LRU(50);\n    /**\n     * @alias zrender/graphic/Image\n     * @extends module:zrender/graphic/Displayable\n     * @constructor\n     * @param {Object} opts\n     */\n    function ZImage(opts) {\n        Displayable.call(this, opts);\n    }\n\n    ZImage.prototype = {\n\n        constructor: ZImage,\n\n        type: 'image',\n\n        brush: function (ctx, prevEl) {\n            var style = this.style;\n            var src = style.image;\n            var image;\n\n            // Must bind each time\n            style.bind(ctx, this, prevEl);\n            // style.image is a url string\n            if (typeof src === 'string') {\n                image = this._image;\n            }\n            // style.image is an HTMLImageElement or HTMLCanvasElement or Canvas\n            else {\n                image = src;\n            }\n            // FIXME Case create many images with src\n            if (!image && src) {\n                // Try get from global image cache\n                var cachedImgObj = globalImageCache.get(src);\n                if (!cachedImgObj) {\n                    // Create a new image\n                    image = new Image();\n                    image.onload = function () {\n                        image.onload = null;\n                        for (var i = 0; i < cachedImgObj.pending.length; i++) {\n                            cachedImgObj.pending[i].dirty();\n                        }\n                    };\n                    cachedImgObj = {\n                        image: image,\n                        pending: [this]\n                    };\n                    image.src = src;\n                    globalImageCache.put(src, cachedImgObj);\n                    this._image = image;\n                    return;\n                }\n                else {\n                    image = cachedImgObj.image;\n                    this._image = image;\n                    // Image is not complete finish, add to pending list\n                    if (!image.width || !image.height) {\n                        cachedImgObj.pending.push(this);\n                        return;\n                    }\n                }\n            }\n\n            if (image) {\n                // 图片已经加载完成\n                // if (image.nodeName.toUpperCase() == 'IMG') {\n                //     if (!image.complete) {\n                //         return;\n                //     }\n                // }\n                // Else is canvas\n\n                var x = style.x || 0;\n                var y = style.y || 0;\n                // 图片加载失败\n                if (!image.width || !image.height) {\n                    return;\n                }\n                var width = style.width;\n                var height = style.height;\n                var aspect = image.width / image.height;\n                if (width == null && height != null) {\n                    // Keep image/height ratio\n                    width = height * aspect;\n                }\n                else if (height == null && width != null) {\n                    height = width / aspect;\n                }\n                else if (width == null && height == null) {\n                    width = image.width;\n                    height = image.height;\n                }\n\n                // 设置transform\n                this.setTransform(ctx);\n\n                if (style.sWidth && style.sHeight) {\n                    var sx = style.sx || 0;\n                    var sy = style.sy || 0;\n                    ctx.drawImage(\n                        image,\n                        sx, sy, style.sWidth, style.sHeight,\n                        x, y, width, height\n                    );\n                }\n                else if (style.sx && style.sy) {\n                    var sx = style.sx;\n                    var sy = style.sy;\n                    var sWidth = width - sx;\n                    var sHeight = height - sy;\n                    ctx.drawImage(\n                        image,\n                        sx, sy, sWidth, sHeight,\n                        x, y, width, height\n                    );\n                }\n                else {\n                    ctx.drawImage(image, x, y, width, height);\n                }\n\n                this.restoreTransform(ctx);\n\n                // Draw rect text\n                if (style.text != null) {\n                    this.drawRectText(ctx, this.getBoundingRect());\n                }\n\n            }\n        },\n\n        getBoundingRect: function () {\n            var style = this.style;\n            if (! this._rect) {\n                this._rect = new BoundingRect(\n                    style.x || 0, style.y || 0, style.width || 0, style.height || 0\n                );\n            }\n            return this._rect;\n        }\n    };\n\n    zrUtil.inherits(ZImage, Displayable);\n\n    module.exports = ZImage;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.5.1@zrender/lib/graphic/Image.js\n// module id = 4obY\n// module chunks = 0 1","// TODO Parse shadow style\n// TODO Only shallow path support\n\n    var zrUtil = require('zrender/lib/core/util');\n\n    module.exports = function (properties) {\n        // Normalize\n        for (var i = 0; i < properties.length; i++) {\n            if (!properties[i][1]) {\n               properties[i][1] = properties[i][0];\n            }\n        }\n        return function (excludes, includes) {\n            var style = {};\n            for (var i = 0; i < properties.length; i++) {\n                var propName = properties[i][1];\n                if ((excludes && zrUtil.indexOf(excludes, propName) >= 0)\n                    || (includes && zrUtil.indexOf(includes, propName) < 0)\n                ) {\n                    continue;\n                }\n                var val = this.getShallow(propName);\n                if (val != null) {\n                    style[properties[i][0]] = val;\n                }\n            }\n            return style;\n        };\n    };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.6.1@echarts/lib/model/mixin/makeStyleMapper.js\n// module id = 5hg5\n// module chunks = 0 1","'use strict';\n/**\n * 贝塞尔曲线\n * @module zrender/shape/BezierCurve\n */\n\n\n    var curveTool = require('../../core/curve');\n    var vec2 = require('../../core/vector');\n    var quadraticSubdivide = curveTool.quadraticSubdivide;\n    var cubicSubdivide = curveTool.cubicSubdivide;\n    var quadraticAt = curveTool.quadraticAt;\n    var cubicAt = curveTool.cubicAt;\n    var quadraticDerivativeAt = curveTool.quadraticDerivativeAt;\n    var cubicDerivativeAt = curveTool.cubicDerivativeAt;\n\n    var out = [];\n\n    function someVectorAt(shape, t, isTangent) {\n        var cpx2 = shape.cpx2;\n        var cpy2 = shape.cpy2;\n        if (cpx2 === null || cpy2 === null) {\n            return [\n                (isTangent ? cubicDerivativeAt : cubicAt)(shape.x1, shape.cpx1, shape.cpx2, shape.x2, t),\n                (isTangent ? cubicDerivativeAt : cubicAt)(shape.y1, shape.cpy1, shape.cpy2, shape.y2, t)\n            ];\n        }\n        else {\n            return [\n                (isTangent ? quadraticDerivativeAt : quadraticAt)(shape.x1, shape.cpx1, shape.x2, t),\n                (isTangent ? quadraticDerivativeAt : quadraticAt)(shape.y1, shape.cpy1, shape.y2, t)\n            ];\n        }\n    }\n    module.exports = require('../Path').extend({\n\n        type: 'bezier-curve',\n\n        shape: {\n            x1: 0,\n            y1: 0,\n            x2: 0,\n            y2: 0,\n            cpx1: 0,\n            cpy1: 0,\n            // cpx2: 0,\n            // cpy2: 0\n\n            // Curve show percent, for animating\n            percent: 1\n        },\n\n        style: {\n            stroke: '#000',\n            fill: null\n        },\n\n        buildPath: function (ctx, shape) {\n            var x1 = shape.x1;\n            var y1 = shape.y1;\n            var x2 = shape.x2;\n            var y2 = shape.y2;\n            var cpx1 = shape.cpx1;\n            var cpy1 = shape.cpy1;\n            var cpx2 = shape.cpx2;\n            var cpy2 = shape.cpy2;\n            var percent = shape.percent;\n            if (percent === 0) {\n                return;\n            }\n\n            ctx.moveTo(x1, y1);\n\n            if (cpx2 == null || cpy2 == null) {\n                if (percent < 1) {\n                    quadraticSubdivide(\n                        x1, cpx1, x2, percent, out\n                    );\n                    cpx1 = out[1];\n                    x2 = out[2];\n                    quadraticSubdivide(\n                        y1, cpy1, y2, percent, out\n                    );\n                    cpy1 = out[1];\n                    y2 = out[2];\n                }\n\n                ctx.quadraticCurveTo(\n                    cpx1, cpy1,\n                    x2, y2\n                );\n            }\n            else {\n                if (percent < 1) {\n                    cubicSubdivide(\n                        x1, cpx1, cpx2, x2, percent, out\n                    );\n                    cpx1 = out[1];\n                    cpx2 = out[2];\n                    x2 = out[3];\n                    cubicSubdivide(\n                        y1, cpy1, cpy2, y2, percent, out\n                    );\n                    cpy1 = out[1];\n                    cpy2 = out[2];\n                    y2 = out[3];\n                }\n                ctx.bezierCurveTo(\n                    cpx1, cpy1,\n                    cpx2, cpy2,\n                    x2, y2\n                );\n            }\n        },\n\n        /**\n         * Get point at percent\n         * @param  {number} t\n         * @return {Array.<number>}\n         */\n        pointAt: function (t) {\n            return someVectorAt(this.shape, t, false);\n        },\n\n        /**\n         * Get tangent at percent\n         * @param  {number} t\n         * @return {Array.<number>}\n         */\n        tangentAt: function (t) {\n            var p = someVectorAt(this.shape, t, true);\n            return vec2.normalize(p, p);\n        }\n    });\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.5.1@zrender/lib/graphic/shape/BezierCurve.js\n// module id = 61Fv\n// module chunks = 0 1","\n\n    var zrUtil = require('zrender/lib/core/util');\n    var echarts = require('../echarts');\n    var PRIORITY = echarts.PRIORITY;\n\n    require('./line/LineSeries');\n    require('./line/LineView');\n\n    echarts.registerVisual(zrUtil.curry(\n        require('../visual/symbol'), 'line', 'circle', 'line'\n    ));\n    echarts.registerLayout(zrUtil.curry(\n        require('../layout/points'), 'line'\n    ));\n\n    // Down sample after filter\n    echarts.registerProcessor(PRIORITY.PROCESSOR.STATISTIC, zrUtil.curry(\n        require('../processor/dataSample'), 'line'\n    ));\n\n    // In case developer forget to include grid component\n    require('../component/gridSimple');\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.6.1@echarts/lib/chart/line.js\n// module id = 66V3\n// module chunks = 0 1","/**\n * 动画主控制器\n * @config target 动画对象，可以是数组，如果是数组的话会批量分发onframe等事件\n * @config life(1000) 动画时长\n * @config delay(0) 动画延迟时间\n * @config loop(true)\n * @config gap(0) 循环的间隔时间\n * @config onframe\n * @config easing(optional)\n * @config ondestroy(optional)\n * @config onrestart(optional)\n *\n * TODO pause\n */\n\n\n    var easingFuncs = require('./easing');\n\n    function Clip(options) {\n\n        this._target = options.target;\n\n        // 生命周期\n        this._life = options.life || 1000;\n        // 延时\n        this._delay = options.delay || 0;\n        // 开始时间\n        // this._startTime = new Date().getTime() + this._delay;// 单位毫秒\n        this._initialized = false;\n\n        // 是否循环\n        this.loop = options.loop == null ? false : options.loop;\n\n        this.gap = options.gap || 0;\n\n        this.easing = options.easing || 'Linear';\n\n        this.onframe = options.onframe;\n        this.ondestroy = options.ondestroy;\n        this.onrestart = options.onrestart;\n\n        this._pausedTime = 0;\n        this._paused = false;\n    }\n\n    Clip.prototype = {\n\n        constructor: Clip,\n\n        step: function (globalTime, deltaTime) {\n            // Set startTime on first step, or _startTime may has milleseconds different between clips\n            // PENDING\n            if (!this._initialized) {\n                this._startTime = globalTime + this._delay;\n                this._initialized = true;\n            }\n\n            if (this._paused) {\n                this._pausedTime += deltaTime;\n                return;\n            }\n\n            var percent = (globalTime - this._startTime - this._pausedTime) / this._life;\n\n            // 还没开始\n            if (percent < 0) {\n                return;\n            }\n\n            percent = Math.min(percent, 1);\n\n            var easing = this.easing;\n            var easingFunc = typeof easing == 'string' ? easingFuncs[easing] : easing;\n            var schedule = typeof easingFunc === 'function'\n                ? easingFunc(percent)\n                : percent;\n\n            this.fire('frame', schedule);\n\n            // 结束\n            if (percent == 1) {\n                if (this.loop) {\n                    this.restart (globalTime);\n                    // 重新开始周期\n                    // 抛出而不是直接调用事件直到 stage.update 后再统一调用这些事件\n                    return 'restart';\n                }\n\n                // 动画完成将这个控制器标识为待删除\n                // 在Animation.update中进行批量删除\n                this._needsRemove = true;\n                return 'destroy';\n            }\n\n            return null;\n        },\n\n        restart: function (globalTime) {\n            var remainder = (globalTime - this._startTime - this._pausedTime) % this._life;\n            this._startTime = globalTime - remainder + this.gap;\n            this._pausedTime = 0;\n\n            this._needsRemove = false;\n        },\n\n        fire: function (eventType, arg) {\n            eventType = 'on' + eventType;\n            if (this[eventType]) {\n                this[eventType](this._target, arg);\n            }\n        },\n\n        pause: function () {\n            this._paused = true;\n        },\n\n        resume: function () {\n            this._paused = false;\n        }\n    };\n\n    module.exports = Clip;\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.5.1@zrender/lib/animation/Clip.js\n// module id = 6UAp\n// module chunks = 0 1","\n    module.exports = function (seriesType, ecModel) {\n        var legendModels = ecModel.findComponents({\n            mainType: 'legend'\n        });\n        if (!legendModels || !legendModels.length) {\n            return;\n        }\n        ecModel.eachSeriesByType(seriesType, function (series) {\n            var data = series.getData();\n            data.filterSelf(function (idx) {\n                var name = data.getName(idx);\n                // If in any legend component the status is not selected.\n                for (var i = 0; i < legendModels.length; i++) {\n                    if (!legendModels[i].isSelected(name)) {\n                        return false;\n                    }\n                }\n                return true;\n            }, this);\n        }, this);\n    };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.6.1@echarts/lib/processor/dataFilter.js\n// module id = 7Etz\n// module chunks = 0 1","\n    module.exports = {\n        getAreaStyle: require('./makeStyleMapper')(\n            [\n                ['fill', 'color'],\n                ['shadowBlur'],\n                ['shadowOffsetX'],\n                ['shadowOffsetY'],\n                ['opacity'],\n                ['shadowColor']\n            ]\n        )\n    };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.6.1@echarts/lib/model/mixin/areaStyle.js\n// module id = 7RWD\n// module chunks = 0 1","'use strict';\n\n\n    var List = require('../../data/List');\n    var zrUtil = require('zrender/lib/core/util');\n    var modelUtil = require('../../util/model');\n    var completeDimensions = require('../../data/helper/completeDimensions');\n\n    var dataSelectableMixin = require('../../component/helper/selectableMixin');\n\n    var PieSeries = require('../../echarts').extendSeriesModel({\n\n        type: 'series.pie',\n\n        // Overwrite\n        init: function (option) {\n            PieSeries.superApply(this, 'init', arguments);\n\n            // Enable legend selection for each data item\n            // Use a function instead of direct access because data reference may changed\n            this.legendDataProvider = function () {\n                return this.getRawData();\n            };\n\n            this.updateSelectedMap(option.data);\n\n            this._defaultLabelLine(option);\n        },\n\n        // Overwrite\n        mergeOption: function (newOption) {\n            PieSeries.superCall(this, 'mergeOption', newOption);\n            this.updateSelectedMap(this.option.data);\n        },\n\n        getInitialData: function (option, ecModel) {\n            var dimensions = completeDimensions(['value'], option.data);\n            var list = new List(dimensions, this);\n            list.initData(option.data);\n            return list;\n        },\n\n        // Overwrite\n        getDataParams: function (dataIndex) {\n            var data = this.getData();\n            var params = PieSeries.superCall(this, 'getDataParams', dataIndex);\n            var sum = data.getSum('value');\n            // FIXME toFixed?\n            //\n            // Percent is 0 if sum is 0\n            params.percent = !sum ? 0 : +(data.get('value', dataIndex) / sum * 100).toFixed(2);\n\n            params.$vars.push('percent');\n            return params;\n        },\n\n        _defaultLabelLine: function (option) {\n            // Extend labelLine emphasis\n            modelUtil.defaultEmphasis(option.labelLine, ['show']);\n\n            var labelLineNormalOpt = option.labelLine.normal;\n            var labelLineEmphasisOpt = option.labelLine.emphasis;\n            // Not show label line if `label.normal.show = false`\n            labelLineNormalOpt.show = labelLineNormalOpt.show\n                && option.label.normal.show;\n            labelLineEmphasisOpt.show = labelLineEmphasisOpt.show\n                && option.label.emphasis.show;\n        },\n\n        defaultOption: {\n            zlevel: 0,\n            z: 2,\n            legendHoverLink: true,\n\n            hoverAnimation: true,\n            // 默认全局居中\n            center: ['50%', '50%'],\n            radius: [0, '75%'],\n            // 默认顺时针\n            clockwise: true,\n            startAngle: 90,\n            // 最小角度改为0\n            minAngle: 0,\n            // 选中是扇区偏移量\n            selectedOffset: 10,\n\n            // If use strategy to avoid label overlapping\n            avoidLabelOverlap: true,\n            // 选择模式，默认关闭，可选single，multiple\n            // selectedMode: false,\n            // 南丁格尔玫瑰图模式，'radius'（半径） | 'area'（面积）\n            // roseType: null,\n\n            // If still show when all data zero.\n            stillShowZeroSum: true,\n\n            label: {\n                normal: {\n                    // If rotate around circle\n                    rotate: false,\n                    show: true,\n                    // 'outer', 'inside', 'center'\n                    position: 'outer'\n                    // formatter: 标签文本格式器，同Tooltip.formatter，不支持异步回调\n                    // textStyle: null      // 默认使用全局文本样式，详见TEXTSTYLE\n                    // distance: 当position为inner时有效，为label位置到圆心的距离与圆半径(环状图为内外半径和)的比例系数\n                },\n                emphasis: {}\n            },\n            // Enabled when label.normal.position is 'outer'\n            labelLine: {\n                normal: {\n                    show: true,\n                    // 引导线两段中的第一段长度\n                    length: 15,\n                    // 引导线两段中的第二段长度\n                    length2: 15,\n                    smooth: false,\n                    lineStyle: {\n                        // color: 各异,\n                        width: 1,\n                        type: 'solid'\n                    }\n                }\n            },\n            itemStyle: {\n                normal: {\n                    borderWidth: 1\n                },\n                emphasis: {}\n            },\n\n            // Animation type canbe expansion, scale\n            animationType: 'expansion',\n\n            animationEasing: 'cubicOut',\n\n            data: []\n        }\n    });\n\n    zrUtil.mixin(PieSeries, dataSelectableMixin);\n\n    module.exports = PieSeries;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.6.1@echarts/lib/chart/pie/PieSeries.js\n// module id = 7fUZ\n// module chunks = 0 1","/**\n * DataZoom component entry\n */\n\n\n    require('./dataZoom/typeDefaulter');\n\n    require('./dataZoom/DataZoomModel');\n    require('./dataZoom/DataZoomView');\n\n    require('./dataZoom/SelectZoomModel');\n    require('./dataZoom/SelectZoomView');\n\n    require('./dataZoom/dataZoomProcessor');\n    require('./dataZoom/dataZoomAction');\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.6.1@echarts/lib/component/dataZoomSelect.js\n// module id = 7zxc\n// module chunks = 0 1","\n\n    // var arrayDiff = require('zrender/lib/core/arrayDiff');\n    // 'zrender/core/arrayDiff' has been used before, but it did\n    // not do well in performance when roam with fixed dataZoom window.\n\n    function sign(val) {\n        return val >= 0 ? 1 : -1;\n    }\n\n    function getStackedOnPoint(coordSys, data, idx) {\n        var baseAxis = coordSys.getBaseAxis();\n        var valueAxis = coordSys.getOtherAxis(baseAxis);\n        var valueStart = baseAxis.onZero\n            ? 0 : valueAxis.scale.getExtent()[0];\n\n        var valueDim = valueAxis.dim;\n        var baseDataOffset = valueDim === 'x' || valueDim === 'radius' ? 1 : 0;\n\n        var stackedOnSameSign;\n        var stackedOn = data.stackedOn;\n        var val = data.get(valueDim, idx);\n        // Find first stacked value with same sign\n        while (stackedOn &&\n            sign(stackedOn.get(valueDim, idx)) === sign(val)\n        ) {\n            stackedOnSameSign = stackedOn;\n            break;\n        }\n        var stackedData = [];\n        stackedData[baseDataOffset] = data.get(baseAxis.dim, idx);\n        stackedData[1 - baseDataOffset] = stackedOnSameSign\n            ? stackedOnSameSign.get(valueDim, idx, true) : valueStart;\n\n        return coordSys.dataToPoint(stackedData);\n    }\n\n    // function convertToIntId(newIdList, oldIdList) {\n    //     // Generate int id instead of string id.\n    //     // Compare string maybe slow in score function of arrDiff\n\n    //     // Assume id in idList are all unique\n    //     var idIndicesMap = {};\n    //     var idx = 0;\n    //     for (var i = 0; i < newIdList.length; i++) {\n    //         idIndicesMap[newIdList[i]] = idx;\n    //         newIdList[i] = idx++;\n    //     }\n    //     for (var i = 0; i < oldIdList.length; i++) {\n    //         var oldId = oldIdList[i];\n    //         // Same with newIdList\n    //         if (idIndicesMap[oldId]) {\n    //             oldIdList[i] = idIndicesMap[oldId];\n    //         }\n    //         else {\n    //             oldIdList[i] = idx++;\n    //         }\n    //     }\n    // }\n\n    function diffData(oldData, newData) {\n        var diffResult = [];\n\n        newData.diff(oldData)\n            .add(function (idx) {\n                diffResult.push({cmd: '+', idx: idx});\n            })\n            .update(function (newIdx, oldIdx) {\n                diffResult.push({cmd: '=', idx: oldIdx, idx1: newIdx});\n            })\n            .remove(function (idx) {\n                diffResult.push({cmd: '-', idx: idx});\n            })\n            .execute();\n\n        return diffResult;\n    }\n\n    module.exports = function (\n        oldData, newData,\n        oldStackedOnPoints, newStackedOnPoints,\n        oldCoordSys, newCoordSys\n    ) {\n        var diff = diffData(oldData, newData);\n\n        // var newIdList = newData.mapArray(newData.getId);\n        // var oldIdList = oldData.mapArray(oldData.getId);\n\n        // convertToIntId(newIdList, oldIdList);\n\n        // // FIXME One data ?\n        // diff = arrayDiff(oldIdList, newIdList);\n\n        var currPoints = [];\n        var nextPoints = [];\n        // Points for stacking base line\n        var currStackedPoints = [];\n        var nextStackedPoints = [];\n\n        var status = [];\n        var sortedIndices = [];\n        var rawIndices = [];\n        var dims = newCoordSys.dimensions;\n        for (var i = 0; i < diff.length; i++) {\n            var diffItem = diff[i];\n            var pointAdded = true;\n\n            // FIXME, animation is not so perfect when dataZoom window moves fast\n            // Which is in case remvoing or add more than one data in the tail or head\n            switch (diffItem.cmd) {\n                case '=':\n                    var currentPt = oldData.getItemLayout(diffItem.idx);\n                    var nextPt = newData.getItemLayout(diffItem.idx1);\n                    // If previous data is NaN, use next point directly\n                    if (isNaN(currentPt[0]) || isNaN(currentPt[1])) {\n                        currentPt = nextPt.slice();\n                    }\n                    currPoints.push(currentPt);\n                    nextPoints.push(nextPt);\n\n                    currStackedPoints.push(oldStackedOnPoints[diffItem.idx]);\n                    nextStackedPoints.push(newStackedOnPoints[diffItem.idx1]);\n\n                    rawIndices.push(newData.getRawIndex(diffItem.idx1));\n                    break;\n                case '+':\n                    var idx = diffItem.idx;\n                    currPoints.push(\n                        oldCoordSys.dataToPoint([\n                            newData.get(dims[0], idx, true), newData.get(dims[1], idx, true)\n                        ])\n                    );\n\n                    nextPoints.push(newData.getItemLayout(idx).slice());\n\n                    currStackedPoints.push(\n                        getStackedOnPoint(oldCoordSys, newData, idx)\n                    );\n                    nextStackedPoints.push(newStackedOnPoints[idx]);\n\n                    rawIndices.push(newData.getRawIndex(idx));\n                    break;\n                case '-':\n                    var idx = diffItem.idx;\n                    var rawIndex = oldData.getRawIndex(idx);\n                    // Data is replaced. In the case of dynamic data queue\n                    // FIXME FIXME FIXME\n                    if (rawIndex !== idx) {\n                        currPoints.push(oldData.getItemLayout(idx));\n                        nextPoints.push(newCoordSys.dataToPoint([\n                            oldData.get(dims[0], idx, true), oldData.get(dims[1], idx, true)\n                        ]));\n\n                        currStackedPoints.push(oldStackedOnPoints[idx]);\n                        nextStackedPoints.push(\n                            getStackedOnPoint(\n                                newCoordSys, oldData, idx\n                            )\n                        );\n\n                        rawIndices.push(rawIndex);\n                    }\n                    else {\n                        pointAdded = false;\n                    }\n            }\n\n            // Original indices\n            if (pointAdded) {\n                status.push(diffItem);\n                sortedIndices.push(sortedIndices.length);\n            }\n        }\n\n        // Diff result may be crossed if all items are changed\n        // Sort by data index\n        sortedIndices.sort(function (a, b) {\n            return rawIndices[a] - rawIndices[b];\n        });\n\n        var sortedCurrPoints = [];\n        var sortedNextPoints = [];\n\n        var sortedCurrStackedPoints = [];\n        var sortedNextStackedPoints = [];\n\n        var sortedStatus = [];\n        for (var i = 0; i < sortedIndices.length; i++) {\n            var idx = sortedIndices[i];\n            sortedCurrPoints[i] = currPoints[idx];\n            sortedNextPoints[i] = nextPoints[idx];\n\n            sortedCurrStackedPoints[i] = currStackedPoints[idx];\n            sortedNextStackedPoints[i] = nextStackedPoints[idx];\n\n            sortedStatus[i] = status[idx];\n        }\n\n        return {\n            current: sortedCurrPoints,\n            next: sortedNextPoints,\n\n            stackedOnCurrent: sortedCurrStackedPoints,\n            stackedOnNext: sortedNextStackedPoints,\n\n            status: sortedStatus\n        };\n    };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.6.1@echarts/lib/chart/line/lineAnimationDiff.js\n// module id = 89FV\n// module chunks = 0 1","\n\n    var env = require('zrender/lib/core/env');\n\n    function SaveAsImage (model) {\n        this.model = model;\n    }\n\n    SaveAsImage.defaultOption = {\n        show: true,\n        icon: 'M4.7,22.9L29.3,45.5L54.7,23.4M4.6,43.6L4.6,58L53.8,58L53.8,43.6M29.2,45.1L29.2,0',\n        title: '保存为图片',\n        type: 'png',\n        // Default use option.backgroundColor\n        // backgroundColor: '#fff',\n        name: '',\n        excludeComponents: ['toolbox'],\n        pixelRatio: 1,\n        lang: ['右键另存为图片']\n    };\n\n    SaveAsImage.prototype.unusable = !env.canvasSupported;\n\n    var proto = SaveAsImage.prototype;\n\n    proto.onclick = function (ecModel, api) {\n        var model = this.model;\n        var title = model.get('name') || ecModel.get('title.0.text') || 'echarts';\n        var $a = document.createElement('a');\n        var type = model.get('type', true) || 'png';\n        $a.download = title + '.' + type;\n        $a.target = '_blank';\n        var url = api.getConnectedDataURL({\n            type: type,\n            backgroundColor: model.get('backgroundColor', true)\n                || ecModel.get('backgroundColor') || '#fff',\n            excludeComponents: model.get('excludeComponents'),\n            pixelRatio: model.get('pixelRatio')\n        });\n        $a.href = url;\n        // Chrome and Firefox\n        if (typeof MouseEvent === 'function' && !env.browser.ie && !env.browser.edge) {\n            var evt = new MouseEvent('click', {\n                view: window,\n                bubbles: true,\n                cancelable: false\n            });\n            $a.dispatchEvent(evt);\n        }\n        // IE\n        else {\n            var lang = model.get('lang');\n            var html = ''\n                + '<body style=\"margin:0;\">'\n                + '<img src=\"' + url + '\" style=\"max-width:100%;\" title=\"' + ((lang && lang[0]) || '') + '\" />'\n                + '</body>';\n            var tab = window.open();\n            tab.document.write(html);\n        }\n    };\n\n    require('../featureManager').register(\n        'saveAsImage', SaveAsImage\n    );\n\n    module.exports = SaveAsImage;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.6.1@echarts/lib/component/toolbox/feature/SaveAsImage.js\n// module id = 8MHU\n// module chunks = 0 1","\n\n    var zrUtil = require('zrender/lib/core/util');\n\n    var defaultOption = {\n        show: true,\n        zlevel: 0,                  // 一级层叠\n        z: 0,                       // 二级层叠\n        // 反向坐标轴\n        inverse: false,\n\n        // 坐标轴名字，默认为空\n        name: '',\n        // 坐标轴名字位置，支持'start' | 'middle' | 'end'\n        nameLocation: 'end',\n        // 坐标轴名字旋转，degree。\n        nameRotate: null, // Adapt to axis rotate, when nameLocation is 'middle'.\n        nameTruncate: {\n            maxWidth: null,\n            ellipsis: '...',\n            placeholder: '.'\n        },\n        // 坐标轴文字样式，默认取全局样式\n        nameTextStyle: {},\n        // 文字与轴线距离\n        nameGap: 15,\n\n        silent: false, // Default false to support tooltip.\n        triggerEvent: false, // Default false to avoid legacy user event listener fail.\n\n        tooltip: {\n            show: false\n        },\n\n        axisPointer: {},\n\n        // 坐标轴线\n        axisLine: {\n            // 默认显示，属性show控制显示与否\n            show: true,\n            onZero: true,\n            // 属性lineStyle控制线条样式\n            lineStyle: {\n                color: '#333',\n                width: 1,\n                type: 'solid'\n            }\n        },\n        // 坐标轴小标记\n        axisTick: {\n            // 属性show控制显示与否，默认显示\n            show: true,\n            // 控制小标记是否在grid里\n            inside: false,\n            // 属性length控制线长\n            length: 5,\n            // 属性lineStyle控制线条样式\n            lineStyle: {\n                width: 1\n            }\n        },\n        // 坐标轴文本标签，详见axis.axisLabel\n        axisLabel: {\n            show: true,\n            // 控制文本标签是否在grid里\n            inside: false,\n            rotate: 0,\n            showMinLabel: null, // true | false | null (auto)\n            showMaxLabel: null, // true | false | null (auto)\n            margin: 8,\n            // formatter: null,\n            // 其余属性默认使用全局文本样式，详见TEXTSTYLE\n            textStyle: {\n                fontSize: 12\n            }\n        },\n        // 分隔线\n        splitLine: {\n            // 默认显示，属性show控制显示与否\n            show: true,\n            // 属性lineStyle（详见lineStyle）控制线条样式\n            lineStyle: {\n                color: ['#ccc'],\n                width: 1,\n                type: 'solid'\n            }\n        },\n        // 分隔区域\n        splitArea: {\n            // 默认不显示，属性show控制显示与否\n            show: false,\n            // 属性areaStyle（详见areaStyle）控制区域样式\n            areaStyle: {\n                color: ['rgba(250,250,250,0.3)','rgba(200,200,200,0.3)']\n            }\n        }\n    };\n\n    var categoryAxis = zrUtil.merge({\n        // 类目起始和结束两端空白策略\n        boundaryGap: true,\n        // splitArea: {\n            // show: false\n        // },\n        splitLine: {\n            show: false\n        },\n        // 坐标轴小标记\n        axisTick: {\n            // If tick is align with label when boundaryGap is true\n            alignWithLabel: false,\n            interval: 'auto'\n        },\n        // 坐标轴文本标签，详见axis.axisLabel\n        axisLabel: {\n            interval: 'auto'\n        }\n    }, defaultOption);\n\n    var valueAxis = zrUtil.merge({\n        // 数值起始和结束两端空白策略\n        boundaryGap: [0, 0],\n        // 最小值, 设置成 'dataMin' 则从数据中计算最小值\n        // min: null,\n        // 最大值，设置成 'dataMax' 则从数据中计算最大值\n        // max: null,\n        // Readonly prop, specifies start value of the range when using data zoom.\n        // rangeStart: null\n        // Readonly prop, specifies end value of the range when using data zoom.\n        // rangeEnd: null\n        // 脱离0值比例，放大聚焦到最终_min，_max区间\n        // scale: false,\n        // 分割段数，默认为5\n        splitNumber: 5\n        // Minimum interval\n        // minInterval: null\n    }, defaultOption);\n\n    // FIXME\n    var timeAxis = zrUtil.defaults({\n        scale: true,\n        min: 'dataMin',\n        max: 'dataMax'\n    }, valueAxis);\n\n    var logAxis = zrUtil.defaults({\n        scale: true,\n        logBase: 10\n    }, valueAxis);\n\n    module.exports = {\n        categoryAxis: categoryAxis,\n        valueAxis: valueAxis,\n        timeAxis: timeAxis,\n        logAxis: logAxis\n    };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.6.1@echarts/lib/coord/axisDefault.js\n// module id = 8ig/\n// module chunks = 0 1","\n\n    var curve = require('../core/curve');\n\n    module.exports = {\n        /**\n         * 二次贝塞尔曲线描边包含判断\n         * @param  {number}  x0\n         * @param  {number}  y0\n         * @param  {number}  x1\n         * @param  {number}  y1\n         * @param  {number}  x2\n         * @param  {number}  y2\n         * @param  {number}  lineWidth\n         * @param  {number}  x\n         * @param  {number}  y\n         * @return {boolean}\n         */\n        containStroke: function (x0, y0, x1, y1, x2, y2, lineWidth, x, y) {\n            if (lineWidth === 0) {\n                return false;\n            }\n            var _l = lineWidth;\n            // Quick reject\n            if (\n                (y > y0 + _l && y > y1 + _l && y > y2 + _l)\n                || (y < y0 - _l && y < y1 - _l && y < y2 - _l)\n                || (x > x0 + _l && x > x1 + _l && x > x2 + _l)\n                || (x < x0 - _l && x < x1 - _l && x < x2 - _l)\n            ) {\n                return false;\n            }\n            var d = curve.quadraticProjectPoint(\n                x0, y0, x1, y1, x2, y2,\n                x, y, null\n            );\n            return d <= _l / 2;\n        }\n    };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.5.1@zrender/lib/contain/quadratic.js\n// module id = 8vhn\n// module chunks = 0 1","'use strict';\n\n\n    var echarts = require('../echarts');\n    var graphic = require('../util/graphic');\n    var layout = require('../util/layout');\n\n    // Model\n    echarts.extendComponentModel({\n\n        type: 'title',\n\n        layoutMode: {type: 'box', ignoreSize: true},\n\n        defaultOption: {\n            // 一级层叠\n            zlevel: 0,\n            // 二级层叠\n            z: 6,\n            show: true,\n\n            text: '',\n            // 超链接跳转\n            // link: null,\n            // 仅支持self | blank\n            target: 'blank',\n            subtext: '',\n\n            // 超链接跳转\n            // sublink: null,\n            // 仅支持self | blank\n            subtarget: 'blank',\n\n            // 'center' ¦ 'left' ¦ 'right'\n            // ¦ {number}（x坐标，单位px）\n            left: 0,\n            // 'top' ¦ 'bottom' ¦ 'center'\n            // ¦ {number}（y坐标，单位px）\n            top: 0,\n\n            // 水平对齐\n            // 'auto' | 'left' | 'right' | 'center'\n            // 默认根据 left 的位置判断是左对齐还是右对齐\n            // textAlign: null\n            //\n            // 垂直对齐\n            // 'auto' | 'top' | 'bottom' | 'middle'\n            // 默认根据 top 位置判断是上对齐还是下对齐\n            // textBaseline: null\n\n            backgroundColor: 'rgba(0,0,0,0)',\n\n            // 标题边框颜色\n            borderColor: '#ccc',\n\n            // 标题边框线宽，单位px，默认为0（无边框）\n            borderWidth: 0,\n\n            // 标题内边距，单位px，默认各方向内边距为5，\n            // 接受数组分别设定上右下左边距，同css\n            padding: 5,\n\n            // 主副标题纵向间隔，单位px，默认为10，\n            itemGap: 10,\n            textStyle: {\n                fontSize: 18,\n                fontWeight: 'bolder',\n                color: '#333'\n            },\n            subtextStyle: {\n                color: '#aaa'\n            }\n        }\n    });\n\n    // View\n    echarts.extendComponentView({\n\n        type: 'title',\n\n        render: function (titleModel, ecModel, api) {\n            this.group.removeAll();\n\n            if (!titleModel.get('show')) {\n                return;\n            }\n\n            var group = this.group;\n\n            var textStyleModel = titleModel.getModel('textStyle');\n            var subtextStyleModel = titleModel.getModel('subtextStyle');\n\n            var textAlign = titleModel.get('textAlign');\n            var textBaseline = titleModel.get('textBaseline');\n\n            var textEl = new graphic.Text({\n                style: {\n                    text: titleModel.get('text'),\n                    textFont: textStyleModel.getFont(),\n                    fill: textStyleModel.getTextColor()\n                },\n                z2: 10\n            });\n\n            var textRect = textEl.getBoundingRect();\n\n            var subText = titleModel.get('subtext');\n            var subTextEl = new graphic.Text({\n                style: {\n                    text: subText,\n                    textFont: subtextStyleModel.getFont(),\n                    fill: subtextStyleModel.getTextColor(),\n                    y: textRect.height + titleModel.get('itemGap'),\n                    textBaseline: 'top'\n                },\n                z2: 10\n            });\n\n            var link = titleModel.get('link');\n            var sublink = titleModel.get('sublink');\n\n            textEl.silent = !link;\n            subTextEl.silent = !sublink;\n\n            if (link) {\n                textEl.on('click', function () {\n                    window.open(link, '_' + titleModel.get('target'));\n                });\n            }\n            if (sublink) {\n                subTextEl.on('click', function () {\n                    window.open(sublink, '_' + titleModel.get('subtarget'));\n                });\n            }\n\n            group.add(textEl);\n            subText && group.add(subTextEl);\n            // If no subText, but add subTextEl, there will be an empty line.\n\n            var groupRect = group.getBoundingRect();\n            var layoutOption = titleModel.getBoxLayoutParams();\n            layoutOption.width = groupRect.width;\n            layoutOption.height = groupRect.height;\n            var layoutRect = layout.getLayoutRect(\n                layoutOption, {\n                    width: api.getWidth(),\n                    height: api.getHeight()\n                }, titleModel.get('padding')\n            );\n            // Adjust text align based on position\n            if (!textAlign) {\n                // Align left if title is on the left. center and right is same\n                textAlign = titleModel.get('left') || titleModel.get('right');\n                if (textAlign === 'middle') {\n                    textAlign = 'center';\n                }\n                // Adjust layout by text align\n                if (textAlign === 'right') {\n                    layoutRect.x += layoutRect.width;\n                }\n                else if (textAlign === 'center') {\n                    layoutRect.x += layoutRect.width / 2;\n                }\n            }\n            if (!textBaseline) {\n                textBaseline = titleModel.get('top') || titleModel.get('bottom');\n                if (textBaseline === 'center') {\n                    textBaseline = 'middle';\n                }\n                if (textBaseline === 'bottom') {\n                    layoutRect.y += layoutRect.height;\n                }\n                else if (textBaseline === 'middle') {\n                    layoutRect.y += layoutRect.height / 2;\n                }\n\n                textBaseline = textBaseline || 'top';\n            }\n\n            group.attr('position', [layoutRect.x, layoutRect.y]);\n            var alignStyle = {\n                textAlign: textAlign,\n                textVerticalAlign: textBaseline\n            };\n            textEl.setStyle(alignStyle);\n            subTextEl.setStyle(alignStyle);\n\n            // Render background\n            // Get groupRect again because textAlign has been changed\n            groupRect = group.getBoundingRect();\n            var padding = layoutRect.margin;\n            var style = titleModel.getItemStyle(['color', 'opacity']);\n            style.fill = titleModel.get('backgroundColor');\n            var rect = new graphic.Rect({\n                shape: {\n                    x: groupRect.x - padding[3],\n                    y: groupRect.y - padding[0],\n                    width: groupRect.width + padding[1] + padding[3],\n                    height: groupRect.height + padding[0] + padding[2]\n                },\n                style: style,\n                silent: true\n            });\n            graphic.subPixelOptimizeRect(rect);\n\n            group.add(rect);\n        }\n    });\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.6.1@echarts/lib/component/title.js\n// module id = 9Ree\n// module chunks = 0 1","\n\n    var TooltipContent = require('./TooltipContent');\n    var zrUtil = require('zrender/lib/core/util');\n    var formatUtil = require('../../util/format');\n    var numberUtil = require('../../util/number');\n    var graphic = require('../../util/graphic');\n    var findPointFromSeries = require('../axisPointer/findPointFromSeries');\n    var layoutUtil = require('../../util/layout');\n    var env = require('zrender/lib/core/env');\n    var Model = require('../../model/Model');\n    var globalListener = require('../axisPointer/globalListener');\n    var axisHelper = require('../../coord/axisHelper');\n    var axisPointerViewHelper = require('../axisPointer/viewHelper');\n\n    var bind = zrUtil.bind;\n    var each = zrUtil.each;\n    var parsePercent = numberUtil.parsePercent;\n\n\n    var proxyRect = new graphic.Rect({\n        shape: {x: -1, y: -1, width: 2, height: 2}\n    });\n\n    require('../../echarts').extendComponentView({\n\n        type: 'tooltip',\n\n        init: function (ecModel, api) {\n            if (env.node) {\n                return;\n            }\n            var tooltipContent = new TooltipContent(api.getDom(), api);\n            this._tooltipContent = tooltipContent;\n        },\n\n        render: function (tooltipModel, ecModel, api) {\n            if (env.node) {\n                return;\n            }\n\n            // Reset\n            this.group.removeAll();\n\n            /**\n             * @private\n             * @type {module:echarts/component/tooltip/TooltipModel}\n             */\n            this._tooltipModel = tooltipModel;\n\n            /**\n             * @private\n             * @type {module:echarts/model/Global}\n             */\n            this._ecModel = ecModel;\n\n            /**\n             * @private\n             * @type {module:echarts/ExtensionAPI}\n             */\n            this._api = api;\n\n            /**\n             * Should be cleaned when render.\n             * @private\n             * @type {Array.<Array.<Object>>}\n             */\n            this._lastDataByCoordSys = null;\n\n            /**\n             * @private\n             * @type {boolean}\n             */\n            this._alwaysShowContent = tooltipModel.get('alwaysShowContent');\n\n            var tooltipContent = this._tooltipContent;\n            tooltipContent.update();\n            tooltipContent.setEnterable(tooltipModel.get('enterable'));\n\n            this._initGlobalListener();\n\n            this._keepShow();\n        },\n\n        _initGlobalListener: function () {\n            var tooltipModel = this._tooltipModel;\n            var triggerOn = tooltipModel.get('triggerOn');\n\n            globalListener.register(\n                'itemTooltip',\n                this._api,\n                bind(function (currTrigger, e, dispatchAction) {\n                    // If 'none', it is not controlled by mouse totally.\n                    if (triggerOn !== 'none') {\n                        if (triggerOn.indexOf(currTrigger) >= 0) {\n                            this._tryShow(e, dispatchAction);\n                        }\n                        else if (currTrigger === 'leave') {\n                            this._hide(dispatchAction);\n                        }\n                    }\n                }, this)\n            );\n        },\n\n        _keepShow: function () {\n            var tooltipModel = this._tooltipModel;\n            var ecModel = this._ecModel;\n            var api = this._api;\n\n            // Try to keep the tooltip show when refreshing\n            if (this._lastX != null\n                && this._lastY != null\n                // When user is willing to control tooltip totally using API,\n                // self.manuallyShowTip({x, y}) might cause tooltip hide,\n                // which is not expected.\n                && tooltipModel.get('triggerOn') !== 'none'\n            ) {\n                var self = this;\n                clearTimeout(this._refreshUpdateTimeout);\n                this._refreshUpdateTimeout = setTimeout(function () {\n                    // Show tip next tick after other charts are rendered\n                    // In case highlight action has wrong result\n                    // FIXME\n                    self.manuallyShowTip(tooltipModel, ecModel, api, {\n                        x: self._lastX,\n                        y: self._lastY\n                    });\n                });\n            }\n        },\n\n        /**\n         * Show tip manually by\n         * dispatchAction({\n         *     type: 'showTip',\n         *     x: 10,\n         *     y: 10\n         * });\n         * Or\n         * dispatchAction({\n         *      type: 'showTip',\n         *      seriesIndex: 0,\n         *      dataIndex or dataIndexInside or name\n         * });\n         *\n         *  TODO Batch\n         */\n        manuallyShowTip: function (tooltipModel, ecModel, api, payload) {\n            if (payload.from === this.uid || env.node) {\n                return;\n            }\n\n            var dispatchAction = makeDispatchAction(payload, api);\n\n            // Reset ticket\n            this._ticket = '';\n\n            // When triggered from axisPointer.\n            var dataByCoordSys = payload.dataByCoordSys;\n\n            if (payload.tooltip && payload.x != null && payload.y != null) {\n                var el = proxyRect;\n                el.position = [payload.x, payload.y];\n                el.update();\n                el.tooltip = payload.tooltip;\n                // Manually show tooltip while view is not using zrender elements.\n                this._tryShow({\n                    offsetX: payload.x,\n                    offsetY: payload.y,\n                    target: el\n                }, dispatchAction);\n            }\n            else if (dataByCoordSys) {\n                this._tryShow({\n                    offsetX: payload.x,\n                    offsetY: payload.y,\n                    position: payload.position,\n                    event: {},\n                    dataByCoordSys: payload.dataByCoordSys,\n                    tooltipOption: payload.tooltipOption\n                }, dispatchAction);\n            }\n            else if (payload.seriesIndex != null) {\n\n                if (this._manuallyAxisShowTip(tooltipModel, ecModel, api, payload)) {\n                    return;\n                }\n\n                var pointInfo = findPointFromSeries(payload, ecModel);\n                var cx = pointInfo.point[0];\n                var cy = pointInfo.point[1];\n                if (cx != null && cy != null) {\n                    this._tryShow({\n                        offsetX: cx,\n                        offsetY: cy,\n                        position: payload.position,\n                        target: pointInfo.el,\n                        event: {}\n                    }, dispatchAction);\n                }\n            }\n            else if (payload.x != null && payload.y != null) {\n                // FIXME\n                // should wrap dispatchAction like `axisPointer/globalListener` ?\n                api.dispatchAction({\n                    type: 'updateAxisPointer',\n                    x: payload.x,\n                    y: payload.y\n                });\n\n                this._tryShow({\n                    offsetX: payload.x,\n                    offsetY: payload.y,\n                    position: payload.position,\n                    target: api.getZr().findHover(payload.x, payload.y).target,\n                    event: {}\n                }, dispatchAction);\n            }\n        },\n\n        manuallyHideTip: function (tooltipModel, ecModel, api, payload) {\n            var tooltipContent = this._tooltipContent;\n\n            if (!this._alwaysShowContent) {\n                tooltipContent.hideLater(this._tooltipModel.get('hideDelay'));\n            }\n\n            this._lastX = this._lastY = null;\n\n            if (payload.from !== this.uid) {\n                this._hide(makeDispatchAction(payload, api));\n            }\n        },\n\n        // Be compatible with previous design, that is, when tooltip.type is 'axis' and\n        // dispatchAction 'showTip' with seriesIndex and dataIndex will trigger axis pointer\n        // and tooltip.\n        _manuallyAxisShowTip: function (tooltipModel, ecModel, api, payload) {\n            var seriesIndex = payload.seriesIndex;\n            var dataIndex = payload.dataIndex;\n            var coordSysAxesInfo = ecModel.getComponent('axisPointer').coordSysAxesInfo;\n\n            if (seriesIndex == null || dataIndex == null || coordSysAxesInfo == null) {\n                return;\n            }\n\n            var seriesModel = ecModel.getSeriesByIndex(seriesIndex);\n            if (!seriesModel) {\n                return;\n            }\n\n            var data = seriesModel.getData();\n            var tooltipModel = buildTooltipModel([\n                data.getItemModel(dataIndex),\n                seriesModel,\n                (seriesModel.coordinateSystem || {}).model,\n                tooltipModel\n            ]);\n\n            if (tooltipModel.get('trigger') !== 'axis') {\n                return;\n            }\n\n            api.dispatchAction({\n                type: 'updateAxisPointer',\n                seriesIndex: seriesIndex,\n                dataIndex: dataIndex\n            });\n\n            return true;\n        },\n\n        _tryShow: function (e, dispatchAction) {\n            var el = e.target;\n            var tooltipModel = this._tooltipModel;\n\n            if (!tooltipModel) {\n                return;\n            }\n\n            // Save mouse x, mouse y. So we can try to keep showing the tip if chart is refreshed\n            this._lastX = e.offsetX;\n            this._lastY = e.offsetY;\n\n            var dataByCoordSys = e.dataByCoordSys;\n            if (dataByCoordSys && dataByCoordSys.length) {\n                this._showAxisTooltip(dataByCoordSys, e);\n            }\n            // Always show item tooltip if mouse is on the element with dataIndex\n            else if (el && el.dataIndex != null) {\n                this._lastDataByCoordSys = null;\n                this._showSeriesItemTooltip(e, el, dispatchAction);\n            }\n            // Tooltip provided directly. Like legend.\n            else if (el && el.tooltip) {\n                this._lastDataByCoordSys = null;\n                this._showComponentItemTooltip(e, el, dispatchAction);\n            }\n            else {\n                this._lastDataByCoordSys = null;\n                this._hide(dispatchAction);\n            }\n        },\n\n        _showOrMove: function (tooltipModel, cb) {\n            // showDelay is used in this case: tooltip.enterable is set\n            // as true. User intent to move mouse into tooltip and click\n            // something. `showDelay` makes it easyer to enter the content\n            // but tooltip do not move immediately.\n            var delay = tooltipModel.get('showDelay');\n            cb = zrUtil.bind(cb, this);\n            clearTimeout(this._showTimout);\n            delay > 0\n                ? (this._showTimout = setTimeout(cb, delay))\n                : cb();\n        },\n\n        _showAxisTooltip: function (dataByCoordSys, e) {\n            var ecModel = this._ecModel;\n            var globalTooltipModel = this._tooltipModel;\n            var point = [e.offsetX, e.offsetY];\n            var singleDefaultHTML = [];\n            var singleParamsList = [];\n            var singleTooltipModel = buildTooltipModel([\n                e.tooltipOption,\n                globalTooltipModel\n            ]);\n\n            each(dataByCoordSys, function (itemCoordSys) {\n                // var coordParamList = [];\n                // var coordDefaultHTML = [];\n                // var coordTooltipModel = buildTooltipModel([\n                //     e.tooltipOption,\n                //     itemCoordSys.tooltipOption,\n                //     ecModel.getComponent(itemCoordSys.coordSysMainType, itemCoordSys.coordSysIndex),\n                //     globalTooltipModel\n                // ]);\n                // var displayMode = coordTooltipModel.get('displayMode');\n                // var paramsList = displayMode === 'single' ? singleParamsList : [];\n\n                each(itemCoordSys.dataByAxis, function (item) {\n                    var axisModel = ecModel.getComponent(item.axisDim + 'Axis', item.axisIndex);\n                    var axisValue = item.value;\n                    var seriesDefaultHTML = [];\n\n                    if (!axisModel || axisValue == null) {\n                        return;\n                    }\n\n                    var valueLabel = axisPointerViewHelper.getValueLabel(\n                        axisValue, axisModel.axis, ecModel,\n                        item.seriesDataIndices,\n                        item.valueLabelOpt\n                    );\n\n                    zrUtil.each(item.seriesDataIndices, function (idxItem) {\n                        var series = ecModel.getSeriesByIndex(idxItem.seriesIndex);\n                        var dataIndex = idxItem.dataIndexInside;\n                        var dataParams = series && series.getDataParams(dataIndex);\n                        dataParams.axisDim = item.axisDim;\n                        dataParams.axisIndex = item.axisIndex;\n                        dataParams.axisType = item.axisType;\n                        dataParams.axisId = item.axisId;\n                        dataParams.axisValue = axisHelper.getAxisRawValue(axisModel.axis, axisValue);\n                        dataParams.axisValueLabel = valueLabel;\n\n                        if (dataParams) {\n                            singleParamsList.push(dataParams);\n                            seriesDefaultHTML.push(series.formatTooltip(dataIndex, true));\n                        }\n                    });\n\n                    // Default tooltip content\n                    // FIXME\n                    // (1) shold be the first data which has name?\n                    // (2) themeRiver, firstDataIndex is array, and first line is unnecessary.\n                    var firstLine = valueLabel;\n                    singleDefaultHTML.push(\n                        (firstLine ? formatUtil.encodeHTML(firstLine) + '<br />' : '')\n                        + seriesDefaultHTML.join('<br />')\n                    );\n                });\n            }, this);\n\n            // In most case, the second axis is shown upper than the first one.\n            singleDefaultHTML.reverse();\n            singleDefaultHTML = singleDefaultHTML.join('<br /><br />');\n\n            var positionExpr = e.position;\n            this._showOrMove(singleTooltipModel, function () {\n                if (this._updateContentNotChangedOnAxis(dataByCoordSys)) {\n                    this._updatePosition(\n                        singleTooltipModel,\n                        positionExpr,\n                        point[0], point[1],\n                        this._tooltipContent,\n                        singleParamsList\n                    );\n                }\n                else {\n                    this._showTooltipContent(\n                        singleTooltipModel, singleDefaultHTML, singleParamsList, Math.random(),\n                        point[0], point[1], positionExpr\n                    );\n                }\n            });\n\n            // Do not trigger events here, because this branch only be entered\n            // from dispatchAction.\n        },\n\n        _showSeriesItemTooltip: function (e, el, dispatchAction) {\n            var ecModel = this._ecModel;\n            // Use dataModel in element if possible\n            // Used when mouseover on a element like markPoint or edge\n            // In which case, the data is not main data in series.\n            var seriesIndex = el.seriesIndex;\n            var seriesModel = ecModel.getSeriesByIndex(seriesIndex);\n\n            // For example, graph link.\n            var dataModel = el.dataModel || seriesModel;\n            var dataIndex = el.dataIndex;\n            var dataType = el.dataType;\n            var data = dataModel.getData();\n\n            var tooltipModel = buildTooltipModel([\n                data.getItemModel(dataIndex),\n                dataModel,\n                seriesModel && (seriesModel.coordinateSystem || {}).model,\n                this._tooltipModel\n            ]);\n\n            var tooltipTrigger = tooltipModel.get('trigger');\n            if (tooltipTrigger != null && tooltipTrigger !== 'item') {\n                return;\n            }\n\n            var params = dataModel.getDataParams(dataIndex, dataType);\n            var defaultHtml = dataModel.formatTooltip(dataIndex, false, dataType);\n            var asyncTicket = 'item_' + dataModel.name + '_' + dataIndex;\n\n            this._showOrMove(tooltipModel, function () {\n                this._showTooltipContent(\n                    tooltipModel, defaultHtml, params, asyncTicket,\n                    e.offsetX, e.offsetY, e.position, e.target\n                );\n            });\n\n            // FIXME\n            // duplicated showtip if manuallyShowTip is called from dispatchAction.\n            dispatchAction({\n                type: 'showTip',\n                dataIndexInside: dataIndex,\n                dataIndex: data.getRawIndex(dataIndex),\n                seriesIndex: seriesIndex,\n                from: this.uid\n            });\n        },\n\n        _showComponentItemTooltip: function (e, el, dispatchAction) {\n            var tooltipOpt = el.tooltip;\n            if (typeof tooltipOpt === 'string') {\n                var content = tooltipOpt;\n                tooltipOpt = {\n                    content: content,\n                    // Fixed formatter\n                    formatter: content\n                };\n            }\n            var subTooltipModel = new Model(tooltipOpt, this._tooltipModel, this._ecModel);\n            var defaultHtml = subTooltipModel.get('content');\n            var asyncTicket = Math.random();\n\n            // Do not check whether `trigger` is 'none' here, because `trigger`\n            // only works on cooridinate system. In fact, we have not found case\n            // that requires setting `trigger` nothing on component yet.\n\n            this._showOrMove(subTooltipModel, function () {\n                this._showTooltipContent(\n                    subTooltipModel, defaultHtml, subTooltipModel.get('formatterParams') || {},\n                    asyncTicket, e.offsetX, e.offsetY, e.position, el\n                );\n            });\n\n            // If not dispatch showTip, tip may be hide triggered by axis.\n            dispatchAction({\n                type: 'showTip',\n                from: this.uid\n            });\n        },\n\n        _showTooltipContent: function (\n            tooltipModel, defaultHtml, params, asyncTicket, x, y, positionExpr, el\n        ) {\n            // Reset ticket\n            this._ticket = '';\n\n            if (!tooltipModel.get('showContent') || !tooltipModel.get('show')) {\n                return;\n            }\n\n            var tooltipContent = this._tooltipContent;\n\n            var formatter = tooltipModel.get('formatter');\n            positionExpr = positionExpr || tooltipModel.get('position');\n            var html = defaultHtml;\n\n            if (formatter && typeof formatter === 'string') {\n                html = formatUtil.formatTpl(formatter, params, true);\n            }\n            else if (typeof formatter === 'function') {\n                var callback = bind(function (cbTicket, html) {\n                    if (cbTicket === this._ticket) {\n                        tooltipContent.setContent(html);\n                        this._updatePosition(\n                            tooltipModel, positionExpr, x, y, tooltipContent, params, el\n                        );\n                    }\n                }, this);\n                this._ticket = asyncTicket;\n                html = formatter(params, asyncTicket, callback);\n            }\n\n            tooltipContent.setContent(html);\n            tooltipContent.show(tooltipModel);\n\n            this._updatePosition(\n                tooltipModel, positionExpr, x, y, tooltipContent, params, el\n            );\n        },\n\n        /**\n         * @param  {string|Function|Array.<number>} positionExpr\n         * @param  {number} x Mouse x\n         * @param  {number} y Mouse y\n         * @param  {boolean} confine Whether confine tooltip content in view rect.\n         * @param  {Object|<Array.<Object>} params\n         * @param  {module:zrender/Element} el target element\n         * @param  {module:echarts/ExtensionAPI} api\n         * @return {Array.<number>}\n         */\n        _updatePosition: function (tooltipModel, positionExpr, x, y, content, params, el) {\n            var viewWidth = this._api.getWidth();\n            var viewHeight = this._api.getHeight();\n            positionExpr = positionExpr || tooltipModel.get('position');\n\n            var contentSize = content.getSize();\n            var align = tooltipModel.get('align');\n            var vAlign = tooltipModel.get('verticalAlign');\n            var rect = el && el.getBoundingRect().clone();\n            el && rect.applyTransform(el.transform);\n\n            if (typeof positionExpr === 'function') {\n                // Callback of position can be an array or a string specify the position\n                positionExpr = positionExpr([x, y], params, content.el, rect, {\n                    viewSize: [viewWidth, viewHeight],\n                    contentSize: contentSize.slice()\n                });\n            }\n\n            if (zrUtil.isArray(positionExpr)) {\n                x = parsePercent(positionExpr[0], viewWidth);\n                y = parsePercent(positionExpr[1], viewHeight);\n            }\n            else if (zrUtil.isObject(positionExpr)) {\n                positionExpr.width = contentSize[0];\n                positionExpr.height = contentSize[1];\n                var layoutRect = layoutUtil.getLayoutRect(\n                    positionExpr, {width: viewWidth, height: viewHeight}\n                );\n                x = layoutRect.x;\n                y = layoutRect.y;\n                align = null;\n                // When positionExpr is left/top/right/bottom,\n                // align and verticalAlign will not work.\n                vAlign = null;\n            }\n            // Specify tooltip position by string 'top' 'bottom' 'left' 'right' around graphic element\n            else if (typeof positionExpr === 'string' && el) {\n                var pos = calcTooltipPosition(\n                    positionExpr, rect, contentSize\n                );\n                x = pos[0];\n                y = pos[1];\n            }\n            else {\n                var pos = refixTooltipPosition(\n                    x, y, content.el, viewWidth, viewHeight, align ? null : 20, vAlign ? null : 20\n                );\n                x = pos[0];\n                y = pos[1];\n            }\n\n            align && (x -= isCenterAlign(align) ? contentSize[0] / 2 : align === 'right' ? contentSize[0] : 0);\n            vAlign && (y -= isCenterAlign(vAlign) ? contentSize[1] / 2 : vAlign === 'bottom' ? contentSize[1] : 0);\n\n            if (tooltipModel.get('confine')) {\n                var pos = confineTooltipPosition(\n                    x, y, content.el, viewWidth, viewHeight\n                );\n                x = pos[0];\n                y = pos[1];\n            }\n\n            content.moveTo(x, y);\n        },\n\n        // FIXME\n        // Should we remove this but leave this to user?\n        _updateContentNotChangedOnAxis: function (dataByCoordSys) {\n            var lastCoordSys = this._lastDataByCoordSys;\n            var contentNotChanged = !!lastCoordSys\n                && lastCoordSys.length === dataByCoordSys.length;\n\n            contentNotChanged && each(lastCoordSys, function (lastItemCoordSys, indexCoordSys) {\n                var lastDataByAxis = lastItemCoordSys.dataByAxis || {};\n                var thisItemCoordSys = dataByCoordSys[indexCoordSys] || {};\n                var thisDataByAxis = thisItemCoordSys.dataByAxis || [];\n                contentNotChanged &= lastDataByAxis.length === thisDataByAxis.length;\n\n                contentNotChanged && each(lastDataByAxis, function (lastItem, indexAxis) {\n                    var thisItem = thisDataByAxis[indexAxis] || {};\n                    var lastIndices = lastItem.seriesDataIndices || [];\n                    var newIndices = thisItem.seriesDataIndices || [];\n\n                    contentNotChanged &=\n                        lastItem.value === thisItem.value\n                        && lastItem.axisType === thisItem.axisType\n                        && lastItem.axisId === thisItem.axisId\n                        && lastIndices.length === newIndices.length;\n\n                    contentNotChanged && each(lastIndices, function (lastIdxItem, j) {\n                        var newIdxItem = newIndices[j];\n                        contentNotChanged &=\n                            lastIdxItem.seriesIndex === newIdxItem.seriesIndex\n                            && lastIdxItem.dataIndex === newIdxItem.dataIndex;\n                    });\n                });\n            });\n\n            this._lastDataByCoordSys = dataByCoordSys;\n\n            return !!contentNotChanged;\n        },\n\n        _hide: function (dispatchAction) {\n            // Do not directly hideLater here, because this behavior may be prevented\n            // in dispatchAction when showTip is dispatched.\n\n            // FIXME\n            // duplicated hideTip if manuallyHideTip is called from dispatchAction.\n            this._lastDataByCoordSys = null;\n            dispatchAction({\n                type: 'hideTip',\n                from: this.uid\n            });\n        },\n\n        dispose: function (ecModel, api) {\n            if (env.node) {\n                return;\n            }\n            this._tooltipContent.hide();\n            globalListener.unregister('itemTooltip', api);\n        }\n    });\n\n\n    /**\n     * @param {Array.<Object|module:echarts/model/Model>} modelCascade\n     * From top to bottom. (the last one should be globalTooltipModel);\n     */\n    function buildTooltipModel(modelCascade) {\n        var resultModel = modelCascade.pop();\n        while (modelCascade.length) {\n            var tooltipOpt = modelCascade.pop();\n            if (tooltipOpt) {\n                if (tooltipOpt instanceof Model) {\n                    tooltipOpt = tooltipOpt.get('tooltip', true);\n                }\n                // In each data item tooltip can be simply write:\n                // {\n                //  value: 10,\n                //  tooltip: 'Something you need to know'\n                // }\n                if (typeof tooltipOpt === 'string') {\n                    tooltipOpt = {formatter: tooltipOpt};\n                }\n                resultModel = new Model(tooltipOpt, resultModel, resultModel.ecModel);\n            }\n        }\n        return resultModel;\n    }\n\n    function makeDispatchAction(payload, api) {\n        return payload.dispatchAction || zrUtil.bind(api.dispatchAction, api);\n    }\n\n    function refixTooltipPosition(x, y, el, viewWidth, viewHeight, gapH, gapV) {\n        var width = el.clientWidth;\n        var height = el.clientHeight;\n\n        if (gapH != null) {\n            if (x + width + gapH > viewWidth) {\n                x -= width + gapH;\n            }\n            else {\n                x += gapH;\n            }\n        }\n        if (gapV != null) {\n            if (y + height + gapV > viewHeight) {\n                y -= height + gapV;\n            }\n            else {\n                y += gapV;\n            }\n        }\n        return [x, y];\n    }\n\n    function confineTooltipPosition(x, y, el, viewWidth, viewHeight) {\n        var width = el.clientWidth;\n        var height = el.clientHeight;\n\n        x = Math.min(x + width, viewWidth) - width;\n        y = Math.min(y + height, viewHeight) - height;\n        x = Math.max(x, 0);\n        y = Math.max(y, 0);\n\n        return [x, y];\n    }\n\n    function calcTooltipPosition(position, rect, contentSize) {\n        var domWidth = contentSize[0];\n        var domHeight = contentSize[1];\n        var gap = 5;\n        var x = 0;\n        var y = 0;\n        var rectWidth = rect.width;\n        var rectHeight = rect.height;\n        switch (position) {\n            case 'inside':\n                x = rect.x + rectWidth / 2 - domWidth / 2;\n                y = rect.y + rectHeight / 2 - domHeight / 2;\n                break;\n            case 'top':\n                x = rect.x + rectWidth / 2 - domWidth / 2;\n                y = rect.y - domHeight - gap;\n                break;\n            case 'bottom':\n                x = rect.x + rectWidth / 2 - domWidth / 2;\n                y = rect.y + rectHeight + gap;\n                break;\n            case 'left':\n                x = rect.x - domWidth - gap;\n                y = rect.y + rectHeight / 2 - domHeight / 2;\n                break;\n            case 'right':\n                x = rect.x + rectWidth + gap;\n                y = rect.y + rectHeight / 2 - domHeight / 2;\n        }\n        return [x, y];\n    }\n\n    function isCenterAlign(align) {\n        return align === 'center' || align === 'middle';\n    }\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.6.1@echarts/lib/component/tooltip/TooltipView.js\n// module id = A+Of\n// module chunks = 0 1","\n    var samplers = {\n        average: function (frame) {\n            var sum = 0;\n            var count = 0;\n            for (var i = 0; i < frame.length; i++) {\n                if (!isNaN(frame[i])) {\n                    sum += frame[i];\n                    count++;\n                }\n            }\n            // Return NaN if count is 0\n            return count === 0 ? NaN : sum / count;\n        },\n        sum: function (frame) {\n            var sum = 0;\n            for (var i = 0; i < frame.length; i++) {\n                // Ignore NaN\n                sum += frame[i] || 0;\n            }\n            return sum;\n        },\n        max: function (frame) {\n            var max = -Infinity;\n            for (var i = 0; i < frame.length; i++) {\n                frame[i] > max && (max = frame[i]);\n            }\n            return max;\n        },\n        min: function (frame) {\n            var min = Infinity;\n            for (var i = 0; i < frame.length; i++) {\n                frame[i] < min && (min = frame[i]);\n            }\n            return min;\n        },\n        // TODO\n        // Median\n        nearest: function (frame) {\n            return frame[0];\n        }\n    };\n\n    var indexSampler = function (frame, value) {\n        return Math.round(frame.length / 2);\n    };\n    module.exports = function (seriesType, ecModel, api) {\n        ecModel.eachSeriesByType(seriesType, function (seriesModel) {\n            var data = seriesModel.getData();\n            var sampling = seriesModel.get('sampling');\n            var coordSys = seriesModel.coordinateSystem;\n            // Only cartesian2d support down sampling\n            if (coordSys.type === 'cartesian2d' && sampling) {\n                var baseAxis = coordSys.getBaseAxis();\n                var valueAxis = coordSys.getOtherAxis(baseAxis);\n                var extent = baseAxis.getExtent();\n                // Coordinste system has been resized\n                var size = extent[1] - extent[0];\n                var rate = Math.round(data.count() / size);\n                if (rate > 1) {\n                    var sampler;\n                    if (typeof sampling === 'string') {\n                        sampler = samplers[sampling];\n                    }\n                    else if (typeof sampling === 'function') {\n                        sampler = sampling;\n                    }\n                    if (sampler) {\n                        data = data.downSample(\n                            valueAxis.dim, 1 / rate, sampler, indexSampler\n                        );\n                        seriesModel.setData(data);\n                    }\n                }\n            }\n        }, this);\n    };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.6.1@echarts/lib/processor/dataSample.js\n// module id = BBXc\n// module chunks = 0 1","\n        var config = require('../config');\n\n        /**\n         * @exports zrender/tool/log\n         * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)\n         */\n        module.exports = function() {\n            if (config.debugMode === 0) {\n                return;\n            }\n            else if (config.debugMode == 1) {\n                for (var k in arguments) {\n                    throw new Error(arguments[k]);\n                }\n            }\n            else if (config.debugMode > 1) {\n                for (var k in arguments) {\n                    console.log(arguments[k]);\n                }\n            }\n        };\n\n        /* for debug\n        return function(mes) {\n            document.getElementById('wrong-message').innerHTML =\n                mes + ' ' + (new Date() - 0)\n                + '<br/>'\n                + document.getElementById('wrong-message').innerHTML;\n        };\n        */\n    \n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.5.1@zrender/lib/core/log.js\n// module id = BIYt\n// module chunks = 0 1","\n\n    var Group = require('zrender/lib/container/Group');\n    var componentUtil = require('../util/component');\n    var clazzUtil = require('../util/clazz');\n    var modelUtil = require('../util/model');\n    var zrUtil = require('zrender/lib/core/util');\n\n    function Chart() {\n\n        /**\n         * @type {module:zrender/container/Group}\n         * @readOnly\n         */\n        this.group = new Group();\n\n        /**\n         * @type {string}\n         * @readOnly\n         */\n        this.uid = componentUtil.getUID('viewChart');\n    }\n\n    Chart.prototype = {\n\n        type: 'chart',\n\n        /**\n         * Init the chart\n         * @param  {module:echarts/model/Global} ecModel\n         * @param  {module:echarts/ExtensionAPI} api\n         */\n        init: function (ecModel, api) {},\n\n        /**\n         * Render the chart\n         * @param  {module:echarts/model/Series} seriesModel\n         * @param  {module:echarts/model/Global} ecModel\n         * @param  {module:echarts/ExtensionAPI} api\n         * @param  {Object} payload\n         */\n        render: function (seriesModel, ecModel, api, payload) {},\n\n        /**\n         * Highlight series or specified data item\n         * @param  {module:echarts/model/Series} seriesModel\n         * @param  {module:echarts/model/Global} ecModel\n         * @param  {module:echarts/ExtensionAPI} api\n         * @param  {Object} payload\n         */\n        highlight: function (seriesModel, ecModel, api, payload) {\n            toggleHighlight(seriesModel.getData(), payload, 'emphasis');\n        },\n\n        /**\n         * Downplay series or specified data item\n         * @param  {module:echarts/model/Series} seriesModel\n         * @param  {module:echarts/model/Global} ecModel\n         * @param  {module:echarts/ExtensionAPI} api\n         * @param  {Object} payload\n         */\n        downplay: function (seriesModel, ecModel, api, payload) {\n            toggleHighlight(seriesModel.getData(), payload, 'normal');\n        },\n\n        /**\n         * Remove self\n         * @param  {module:echarts/model/Global} ecModel\n         * @param  {module:echarts/ExtensionAPI} api\n         */\n        remove: function (ecModel, api) {\n            this.group.removeAll();\n        },\n\n        /**\n         * Dispose self\n         * @param  {module:echarts/model/Global} ecModel\n         * @param  {module:echarts/ExtensionAPI} api\n         */\n        dispose: function () {}\n\n        /**\n         * The view contains the given point.\n         * @interface\n         * @param {Array.<number>} point\n         * @return {boolean}\n         */\n        // containPoint: function () {}\n\n    };\n\n    var chartProto = Chart.prototype;\n    chartProto.updateView\n        = chartProto.updateLayout\n        = chartProto.updateVisual\n        = function (seriesModel, ecModel, api, payload) {\n            this.render(seriesModel, ecModel, api, payload);\n        };\n\n    /**\n     * Set state of single element\n     * @param  {module:zrender/Element} el\n     * @param  {string} state\n     */\n    function elSetState(el, state) {\n        if (el) {\n            el.trigger(state);\n            if (el.type === 'group') {\n                for (var i = 0; i < el.childCount(); i++) {\n                    elSetState(el.childAt(i), state);\n                }\n            }\n        }\n    }\n    /**\n     * @param  {module:echarts/data/List} data\n     * @param  {Object} payload\n     * @param  {string} state 'normal'|'emphasis'\n     * @inner\n     */\n    function toggleHighlight(data, payload, state) {\n        var dataIndex = modelUtil.queryDataIndex(data, payload);\n\n        if (dataIndex != null) {\n            zrUtil.each(modelUtil.normalizeToArray(dataIndex), function (dataIdx) {\n                elSetState(data.getItemGraphicEl(dataIdx), state);\n            });\n        }\n        else {\n            data.eachItemGraphicEl(function (el) {\n                elSetState(el, state);\n            });\n        }\n    }\n\n    // Enable Chart.extend.\n    clazzUtil.enableClassExtend(Chart, ['dispose']);\n\n    // Add capability of registerClass, getClass, hasClass, registerSubTypeDefaulter and so on.\n    clazzUtil.enableClassManagement(Chart, {registerWhenExtend: true});\n\n    module.exports = Chart;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.6.1@echarts/lib/view/Chart.js\n// module id = BOb8\n// module chunks = 0 1","\n\n    module.exports = (typeof window !== 'undefined' &&\n                ((window.requestAnimationFrame && window.requestAnimationFrame.bind(window))\n                // https://github.com/ecomfe/zrender/issues/189#issuecomment-224919809\n                || (window.msRequestAnimationFrame && window.msRequestAnimationFrame.bind(window))\n                || window.mozRequestAnimationFrame\n                || window.webkitRequestAnimationFrame)\n            )\n            || function (func) {\n                setTimeout(func, 16);\n            };\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.5.1@zrender/lib/animation/requestAnimationFrame.js\n// module id = BgTn\n// module chunks = 0 1","'use strict';\n\n\n    var zrUtil = require('zrender/lib/core/util');\n    var numberUtil = require('../util/number');\n    var parsePercent = numberUtil.parsePercent;\n\n    var STACK_PREFIX = '__ec_stack_';\n\n    function getSeriesStackId(seriesModel) {\n        return seriesModel.get('stack') || STACK_PREFIX + seriesModel.seriesIndex;\n    }\n\n    function getAxisKey(axis) {\n        return axis.dim + axis.index;\n    }\n\n    /**\n     * @param {Object} opt\n     * @param {module:echarts/coord/Axis} opt.axis Only support category axis currently.\n     * @param {number} opt.count Positive interger.\n     * @param {number} [opt.barWidth]\n     * @param {number} [opt.barMaxWidth]\n     * @param {number} [opt.barGap]\n     * @param {number} [opt.barCategoryGap]\n     * @return {Object} {width, offset, offsetCenter} If axis.type is not 'category', return undefined.\n     */\n    function getLayoutOnAxis(opt, api) {\n        var params = [];\n        var baseAxis = opt.axis;\n        var axisKey = 'axis0';\n\n        if (baseAxis.type !== 'category') {\n            return;\n        }\n        var bandWidth = baseAxis.getBandWidth();\n\n        for (var i = 0; i < opt.count || 0; i++) {\n            params.push(zrUtil.defaults({\n                bandWidth: bandWidth,\n                axisKey: axisKey,\n                stackId: STACK_PREFIX + i\n            }, opt));\n        }\n        var widthAndOffsets = doCalBarWidthAndOffset(params, api);\n\n        var result = [];\n        for (var i = 0; i < opt.count; i++) {\n            var item = widthAndOffsets[axisKey][STACK_PREFIX + i];\n            item.offsetCenter = item.offset + item.width / 2;\n            result.push(item);\n        }\n\n        return result;\n    }\n\n    function calBarWidthAndOffset(barSeries, api) {\n        var seriesInfoList = zrUtil.map(barSeries, function (seriesModel) {\n            var data = seriesModel.getData();\n            var cartesian = seriesModel.coordinateSystem;\n            var baseAxis = cartesian.getBaseAxis();\n            var axisExtent = baseAxis.getExtent();\n            var bandWidth = baseAxis.type === 'category'\n                ? baseAxis.getBandWidth()\n                : (Math.abs(axisExtent[1] - axisExtent[0]) / data.count());\n\n            var barWidth = parsePercent(\n                seriesModel.get('barWidth'), bandWidth\n            );\n            var barMaxWidth = parsePercent(\n                seriesModel.get('barMaxWidth'), bandWidth\n            );\n            var barGap = seriesModel.get('barGap');\n            var barCategoryGap = seriesModel.get('barCategoryGap');\n\n            return {\n                bandWidth: bandWidth,\n                barWidth: barWidth,\n                barMaxWidth: barMaxWidth,\n                barGap: barGap,\n                barCategoryGap: barCategoryGap,\n                axisKey: getAxisKey(baseAxis),\n                stackId: getSeriesStackId(seriesModel)\n            };\n        });\n\n        return doCalBarWidthAndOffset(seriesInfoList, api);\n    }\n\n    function doCalBarWidthAndOffset(seriesInfoList, api) {\n        // Columns info on each category axis. Key is cartesian name\n        var columnsMap = {};\n\n        zrUtil.each(seriesInfoList, function (seriesInfo, idx) {\n            var axisKey = seriesInfo.axisKey;\n            var bandWidth = seriesInfo.bandWidth;\n            var columnsOnAxis = columnsMap[axisKey] || {\n                bandWidth: bandWidth,\n                remainedWidth: bandWidth,\n                autoWidthCount: 0,\n                categoryGap: '20%',\n                gap: '30%',\n                stacks: {}\n            };\n            var stacks = columnsOnAxis.stacks;\n            columnsMap[axisKey] = columnsOnAxis;\n\n            var stackId = seriesInfo.stackId;\n\n            if (!stacks[stackId]) {\n                columnsOnAxis.autoWidthCount++;\n            }\n            stacks[stackId] = stacks[stackId] || {\n                width: 0,\n                maxWidth: 0\n            };\n\n            // Caution: In a single coordinate system, these barGrid attributes\n            // will be shared by series. Consider that they have default values,\n            // only the attributes set on the last series will work.\n            // Do not change this fact unless there will be a break change.\n\n            // TODO\n            var barWidth = seriesInfo.barWidth;\n            if (barWidth && !stacks[stackId].width) {\n                barWidth = Math.min(columnsOnAxis.remainedWidth, barWidth);\n                stacks[stackId].width = barWidth;\n                columnsOnAxis.remainedWidth -= barWidth;\n            }\n\n            var barMaxWidth = seriesInfo.barMaxWidth;\n            barMaxWidth && (stacks[stackId].maxWidth = barMaxWidth);\n            var barGap = seriesInfo.barGap;\n            (barGap != null) && (columnsOnAxis.gap = barGap);\n            var barCategoryGap = seriesInfo.barCategoryGap;\n            (barCategoryGap != null) && (columnsOnAxis.categoryGap = barCategoryGap);\n        });\n\n        var result = {};\n\n        zrUtil.each(columnsMap, function (columnsOnAxis, coordSysName) {\n\n            result[coordSysName] = {};\n\n            var stacks = columnsOnAxis.stacks;\n            var bandWidth = columnsOnAxis.bandWidth;\n            var categoryGap = parsePercent(columnsOnAxis.categoryGap, bandWidth);\n            var barGapPercent = parsePercent(columnsOnAxis.gap, 1);\n\n            var remainedWidth = columnsOnAxis.remainedWidth;\n            var autoWidthCount = columnsOnAxis.autoWidthCount;\n            var autoWidth = (remainedWidth - categoryGap)\n                / (autoWidthCount + (autoWidthCount - 1) * barGapPercent);\n            autoWidth = Math.max(autoWidth, 0);\n\n            // Find if any auto calculated bar exceeded maxBarWidth\n            zrUtil.each(stacks, function (column, stack) {\n                var maxWidth = column.maxWidth;\n                if (maxWidth && maxWidth < autoWidth) {\n                    maxWidth = Math.min(maxWidth, remainedWidth);\n                    if (column.width) {\n                        maxWidth = Math.min(maxWidth, column.width);\n                    }\n                    remainedWidth -= maxWidth;\n                    column.width = maxWidth;\n                    autoWidthCount--;\n                }\n            });\n\n            // Recalculate width again\n            autoWidth = (remainedWidth - categoryGap)\n                / (autoWidthCount + (autoWidthCount - 1) * barGapPercent);\n            autoWidth = Math.max(autoWidth, 0);\n\n            var widthSum = 0;\n            var lastColumn;\n            zrUtil.each(stacks, function (column, idx) {\n                if (!column.width) {\n                    column.width = autoWidth;\n                }\n                lastColumn = column;\n                widthSum += column.width * (1 + barGapPercent);\n            });\n            if (lastColumn) {\n                widthSum -= lastColumn.width * barGapPercent;\n            }\n\n            var offset = -widthSum / 2;\n            zrUtil.each(stacks, function (column, stackId) {\n                result[coordSysName][stackId] = result[coordSysName][stackId] || {\n                    offset: offset,\n                    width: column.width\n                };\n\n                offset += column.width * (1 + barGapPercent);\n            });\n        });\n\n        return result;\n    }\n\n    /**\n     * @param {string} seriesType\n     * @param {module:echarts/model/Global} ecModel\n     * @param {module:echarts/ExtensionAPI} api\n     */\n    function barLayoutGrid(seriesType, ecModel, api) {\n\n        var barWidthAndOffset = calBarWidthAndOffset(\n            zrUtil.filter(\n                ecModel.getSeriesByType(seriesType),\n                function (seriesModel) {\n                    return !ecModel.isSeriesFiltered(seriesModel)\n                        && seriesModel.coordinateSystem\n                        && seriesModel.coordinateSystem.type === 'cartesian2d';\n                }\n            )\n        );\n\n        var lastStackCoords = {};\n        var lastStackCoordsOrigin = {};\n\n        ecModel.eachSeriesByType(seriesType, function (seriesModel) {\n\n            // Check series coordinate, do layout for cartesian2d only\n            if (seriesModel.coordinateSystem.type !== 'cartesian2d') {\n                return;\n            }\n\n            var data = seriesModel.getData();\n            var cartesian = seriesModel.coordinateSystem;\n            var baseAxis = cartesian.getBaseAxis();\n\n            var stackId = getSeriesStackId(seriesModel);\n            var columnLayoutInfo = barWidthAndOffset[getAxisKey(baseAxis)][stackId];\n            var columnOffset = columnLayoutInfo.offset;\n            var columnWidth = columnLayoutInfo.width;\n            var valueAxis = cartesian.getOtherAxis(baseAxis);\n\n            var barMinHeight = seriesModel.get('barMinHeight') || 0;\n\n            var valueAxisStart = baseAxis.onZero\n                ? valueAxis.toGlobalCoord(valueAxis.dataToCoord(0))\n                : valueAxis.getGlobalExtent()[0];\n\n            var coords = cartesian.dataToPoints(data, true);\n            lastStackCoords[stackId] = lastStackCoords[stackId] || [];\n            lastStackCoordsOrigin[stackId] = lastStackCoordsOrigin[stackId] || []; // Fix #4243\n\n            data.setLayout({\n                offset: columnOffset,\n                size: columnWidth\n            });\n\n            data.each(valueAxis.dim, function (value, idx) {\n                if (isNaN(value)) {\n                    return;\n                }\n\n                if (!lastStackCoords[stackId][idx]) {\n                    lastStackCoords[stackId][idx] = {\n                        p: valueAxisStart, // Positive stack\n                        n: valueAxisStart  // Negative stack\n                    };\n                    lastStackCoordsOrigin[stackId][idx] = {\n                        p: valueAxisStart, // Positive stack\n                        n: valueAxisStart  // Negative stack\n                    };\n                }\n                var sign = value >= 0 ? 'p' : 'n';\n                var coord = coords[idx];\n                var lastCoord = lastStackCoords[stackId][idx][sign];\n                var lastCoordOrigin = lastStackCoordsOrigin[stackId][idx][sign];\n                var x;\n                var y;\n                var width;\n                var height;\n\n                if (valueAxis.isHorizontal()) {\n                    x = lastCoord;\n                    y = coord[1] + columnOffset;\n                    width = coord[0] - lastCoordOrigin;\n                    height = columnWidth;\n\n                    lastStackCoordsOrigin[stackId][idx][sign] += width;\n                    if (Math.abs(width) < barMinHeight) {\n                        width = (width < 0 ? -1 : 1) * barMinHeight;\n                    }\n                    lastStackCoords[stackId][idx][sign] += width;\n                }\n                else {\n                    x = coord[0] + columnOffset;\n                    y = lastCoord;\n                    width = columnWidth;\n                    height = coord[1] - lastCoordOrigin;\n\n                    lastStackCoordsOrigin[stackId][idx][sign] += height;\n                    if (Math.abs(height) < barMinHeight) {\n                        // Include zero to has a positive bar\n                        height = (height <= 0 ? -1 : 1) * barMinHeight;\n                    }\n                    lastStackCoords[stackId][idx][sign] += height;\n                }\n\n                data.setItemLayout(idx, {\n                    x: x,\n                    y: y,\n                    width: width,\n                    height: height\n                });\n            }, true);\n\n        }, this);\n    }\n\n    barLayoutGrid.getLayoutOnAxis = getLayoutOnAxis;\n\n    module.exports = barLayoutGrid;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.6.1@echarts/lib/layout/barGrid.js\n// module id = BzeQ\n// module chunks = 0 1","/**\n * Path element\n * @module zrender/graphic/Path\n */\n\n\n\n    var Displayable = require('./Displayable');\n    var zrUtil = require('../core/util');\n    var PathProxy = require('../core/PathProxy');\n    var pathContain = require('../contain/path');\n\n    var Pattern = require('./Pattern');\n    var getCanvasPattern = Pattern.prototype.getCanvasPattern;\n\n    var abs = Math.abs;\n\n    var pathProxyForDraw = new PathProxy(true);\n    /**\n     * @alias module:zrender/graphic/Path\n     * @extends module:zrender/graphic/Displayable\n     * @constructor\n     * @param {Object} opts\n     */\n    function Path(opts) {\n        Displayable.call(this, opts);\n\n        /**\n         * @type {module:zrender/core/PathProxy}\n         * @readOnly\n         */\n        this.path = null;\n    }\n\n    Path.prototype = {\n\n        constructor: Path,\n\n        type: 'path',\n\n        __dirtyPath: true,\n\n        strokeContainThreshold: 5,\n\n        brush: function (ctx, prevEl) {\n            var style = this.style;\n            var path = this.path || pathProxyForDraw;\n            var hasStroke = style.hasStroke();\n            var hasFill = style.hasFill();\n            var fill = style.fill;\n            var stroke = style.stroke;\n            var hasFillGradient = hasFill && !!(fill.colorStops);\n            var hasStrokeGradient = hasStroke && !!(stroke.colorStops);\n            var hasFillPattern = hasFill && !!(fill.image);\n            var hasStrokePattern = hasStroke && !!(stroke.image);\n\n            style.bind(ctx, this, prevEl);\n            this.setTransform(ctx);\n\n            if (this.__dirty) {\n                var rect;\n                // Update gradient because bounding rect may changed\n                if (hasFillGradient) {\n                    rect = rect || this.getBoundingRect();\n                    this._fillGradient = style.getGradient(ctx, fill, rect);\n                }\n                if (hasStrokeGradient) {\n                    rect = rect || this.getBoundingRect();\n                    this._strokeGradient = style.getGradient(ctx, stroke, rect);\n                }\n            }\n            // Use the gradient or pattern\n            if (hasFillGradient) {\n                // PENDING If may have affect the state\n                ctx.fillStyle = this._fillGradient;\n            }\n            else if (hasFillPattern) {\n                ctx.fillStyle = getCanvasPattern.call(fill, ctx);\n            }\n            if (hasStrokeGradient) {\n                ctx.strokeStyle = this._strokeGradient;\n            }\n            else if (hasStrokePattern) {\n                ctx.strokeStyle = getCanvasPattern.call(stroke, ctx);\n            }\n\n            var lineDash = style.lineDash;\n            var lineDashOffset = style.lineDashOffset;\n\n            var ctxLineDash = !!ctx.setLineDash;\n\n            // Update path sx, sy\n            var scale = this.getGlobalScale();\n            path.setScale(scale[0], scale[1]);\n\n            // Proxy context\n            // Rebuild path in following 2 cases\n            // 1. Path is dirty\n            // 2. Path needs javascript implemented lineDash stroking.\n            //    In this case, lineDash information will not be saved in PathProxy\n            if (this.__dirtyPath\n                || (lineDash && !ctxLineDash && hasStroke)\n            ) {\n                path.beginPath(ctx);\n\n                // Setting line dash before build path\n                if (lineDash && !ctxLineDash) {\n                    path.setLineDash(lineDash);\n                    path.setLineDashOffset(lineDashOffset);\n                }\n\n                this.buildPath(path, this.shape, false);\n\n                // Clear path dirty flag\n                if (this.path) {\n                    this.__dirtyPath = false;\n                }\n            }\n            else {\n                // Replay path building\n                ctx.beginPath();\n                this.path.rebuildPath(ctx);\n            }\n\n            hasFill && path.fill(ctx);\n\n            if (lineDash && ctxLineDash) {\n                ctx.setLineDash(lineDash);\n                ctx.lineDashOffset = lineDashOffset;\n            }\n\n            hasStroke && path.stroke(ctx);\n\n            if (lineDash && ctxLineDash) {\n                // PENDING\n                // Remove lineDash\n                ctx.setLineDash([]);\n            }\n\n\n            this.restoreTransform(ctx);\n\n            // Draw rect text\n            if (style.text != null) {\n                // var rect = this.getBoundingRect();\n                this.drawRectText(ctx, this.getBoundingRect());\n            }\n        },\n\n        // When bundling path, some shape may decide if use moveTo to begin a new subpath or closePath\n        // Like in circle\n        buildPath: function (ctx, shapeCfg, inBundle) {},\n\n        createPathProxy: function () {\n            this.path = new PathProxy();\n        },\n\n        getBoundingRect: function () {\n            var rect = this._rect;\n            var style = this.style;\n            var needsUpdateRect = !rect;\n            if (needsUpdateRect) {\n                var path = this.path;\n                if (!path) {\n                    // Create path on demand.\n                    path = this.path = new PathProxy();\n                }\n                if (this.__dirtyPath) {\n                    path.beginPath();\n                    this.buildPath(path, this.shape, false);\n                }\n                rect = path.getBoundingRect();\n            }\n            this._rect = rect;\n\n            if (style.hasStroke()) {\n                // Needs update rect with stroke lineWidth when\n                // 1. Element changes scale or lineWidth\n                // 2. Shape is changed\n                var rectWithStroke = this._rectWithStroke || (this._rectWithStroke = rect.clone());\n                if (this.__dirty || needsUpdateRect) {\n                    rectWithStroke.copy(rect);\n                    // FIXME Must after updateTransform\n                    var w = style.lineWidth;\n                    // PENDING, Min line width is needed when line is horizontal or vertical\n                    var lineScale = style.strokeNoScale ? this.getLineScale() : 1;\n\n                    // Only add extra hover lineWidth when there are no fill\n                    if (!style.hasFill()) {\n                        w = Math.max(w, this.strokeContainThreshold || 4);\n                    }\n                    // Consider line width\n                    // Line scale can't be 0;\n                    if (lineScale > 1e-10) {\n                        rectWithStroke.width += w / lineScale;\n                        rectWithStroke.height += w / lineScale;\n                        rectWithStroke.x -= w / lineScale / 2;\n                        rectWithStroke.y -= w / lineScale / 2;\n                    }\n                }\n\n                // Return rect with stroke\n                return rectWithStroke;\n            }\n\n            return rect;\n        },\n\n        contain: function (x, y) {\n            var localPos = this.transformCoordToLocal(x, y);\n            var rect = this.getBoundingRect();\n            var style = this.style;\n            x = localPos[0];\n            y = localPos[1];\n\n            if (rect.contain(x, y)) {\n                var pathData = this.path.data;\n                if (style.hasStroke()) {\n                    var lineWidth = style.lineWidth;\n                    var lineScale = style.strokeNoScale ? this.getLineScale() : 1;\n                    // Line scale can't be 0;\n                    if (lineScale > 1e-10) {\n                        // Only add extra hover lineWidth when there are no fill\n                        if (!style.hasFill()) {\n                            lineWidth = Math.max(lineWidth, this.strokeContainThreshold);\n                        }\n                        if (pathContain.containStroke(\n                            pathData, lineWidth / lineScale, x, y\n                        )) {\n                            return true;\n                        }\n                    }\n                }\n                if (style.hasFill()) {\n                    return pathContain.contain(pathData, x, y);\n                }\n            }\n            return false;\n        },\n\n        /**\n         * @param  {boolean} dirtyPath\n         */\n        dirty: function (dirtyPath) {\n            if (dirtyPath == null) {\n                dirtyPath = true;\n            }\n            // Only mark dirty, not mark clean\n            if (dirtyPath) {\n                this.__dirtyPath = dirtyPath;\n                this._rect = null;\n            }\n\n            this.__dirty = true;\n\n            this.__zr && this.__zr.refresh();\n\n            // Used as a clipping path\n            if (this.__clipTarget) {\n                this.__clipTarget.dirty();\n            }\n        },\n\n        /**\n         * Alias for animate('shape')\n         * @param {boolean} loop\n         */\n        animateShape: function (loop) {\n            return this.animate('shape', loop);\n        },\n\n        // Overwrite attrKV\n        attrKV: function (key, value) {\n            // FIXME\n            if (key === 'shape') {\n                this.setShape(value);\n                this.__dirtyPath = true;\n                this._rect = null;\n            }\n            else {\n                Displayable.prototype.attrKV.call(this, key, value);\n            }\n        },\n\n        /**\n         * @param {Object|string} key\n         * @param {*} value\n         */\n        setShape: function (key, value) {\n            var shape = this.shape;\n            // Path from string may not have shape\n            if (shape) {\n                if (zrUtil.isObject(key)) {\n                    for (var name in key) {\n                        if (key.hasOwnProperty(name)) {\n                            shape[name] = key[name];\n                        }\n                    }\n                }\n                else {\n                    shape[key] = value;\n                }\n                this.dirty(true);\n            }\n            return this;\n        },\n\n        getLineScale: function () {\n            var m = this.transform;\n            // Get the line scale.\n            // Determinant of `m` means how much the area is enlarged by the\n            // transformation. So its square root can be used as a scale factor\n            // for width.\n            return m && abs(m[0] - 1) > 1e-10 && abs(m[3] - 1) > 1e-10\n                ? Math.sqrt(abs(m[0] * m[3] - m[2] * m[1]))\n                : 1;\n        }\n    };\n\n    /**\n     * 扩展一个 Path element, 比如星形，圆等。\n     * Extend a path element\n     * @param {Object} props\n     * @param {string} props.type Path type\n     * @param {Function} props.init Initialize\n     * @param {Function} props.buildPath Overwrite buildPath method\n     * @param {Object} [props.style] Extended default style config\n     * @param {Object} [props.shape] Extended default shape config\n     */\n    Path.extend = function (defaults) {\n        var Sub = function (opts) {\n            Path.call(this, opts);\n\n            if (defaults.style) {\n                // Extend default style\n                this.style.extendFrom(defaults.style, false);\n            }\n\n            // Extend default shape\n            var defaultShape = defaults.shape;\n            if (defaultShape) {\n                this.shape = this.shape || {};\n                var thisShape = this.shape;\n                for (var name in defaultShape) {\n                    if (\n                        ! thisShape.hasOwnProperty(name)\n                        && defaultShape.hasOwnProperty(name)\n                    ) {\n                        thisShape[name] = defaultShape[name];\n                    }\n                }\n            }\n\n            defaults.init && defaults.init.call(this, opts);\n        };\n\n        zrUtil.inherits(Sub, Path);\n\n        // FIXME 不能 extend position, rotation 等引用对象\n        for (var name in defaults) {\n            // Extending prototype values and methods\n            if (name !== 'style' && name !== 'shape') {\n                Sub.prototype[name] = defaults[name];\n            }\n        }\n\n        return Sub;\n    };\n\n    zrUtil.inherits(Path, Displayable);\n\n    module.exports = Path;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.5.1@zrender/lib/graphic/Path.js\n// module id = CC7E\n// module chunks = 0 1","// Enable DEV mode when using source code without build. which has no __DEV__ variable\n// In build process 'typeof __DEV__' will be replace with 'boolean'\n// So this code will be removed or disabled anyway after built.\nif (typeof __DEV__ === 'undefined') {\n    // In browser\n    if (typeof window !== 'undefined') {\n        window.__DEV__ = true;\n    }\n    // In node\n    else if (typeof global !== 'undefined') {\n        global.__DEV__ = true;\n    }\n}\n\n/*!\n * ECharts, a javascript interactive chart library.\n *\n * Copyright (c) 2015, Baidu Inc.\n * All rights reserved.\n *\n * LICENSE\n * https://github.com/ecomfe/echarts/blob/master/LICENSE.txt\n */\n\n/**\n * @module echarts\n */\n\n\n    var env = require('zrender/lib/core/env');\n\n    var GlobalModel = require('./model/Global');\n    var ExtensionAPI = require('./ExtensionAPI');\n    var CoordinateSystemManager = require('./CoordinateSystem');\n    var OptionManager = require('./model/OptionManager');\n\n    var ComponentModel = require('./model/Component');\n    var SeriesModel = require('./model/Series');\n\n    var ComponentView = require('./view/Component');\n    var ChartView = require('./view/Chart');\n    var graphic = require('./util/graphic');\n    var modelUtil = require('./util/model');\n    var throttle = require('./util/throttle');\n\n    var zrender = require('zrender');\n    var zrUtil = require('zrender/lib/core/util');\n    var colorTool = require('zrender/lib/tool/color');\n    var Eventful = require('zrender/lib/mixin/Eventful');\n    var timsort = require('zrender/lib/core/timsort');\n\n    var each = zrUtil.each;\n    var parseClassType = ComponentModel.parseClassType;\n\n    var PRIORITY_PROCESSOR_FILTER = 1000;\n    var PRIORITY_PROCESSOR_STATISTIC = 5000;\n\n\n    var PRIORITY_VISUAL_LAYOUT = 1000;\n    var PRIORITY_VISUAL_GLOBAL = 2000;\n    var PRIORITY_VISUAL_CHART = 3000;\n    var PRIORITY_VISUAL_COMPONENT = 4000;\n    // FIXME\n    // necessary?\n    var PRIORITY_VISUAL_BRUSH = 5000;\n\n    // Main process have three entries: `setOption`, `dispatchAction` and `resize`,\n    // where they must not be invoked nestedly, except the only case: invoke\n    // dispatchAction with updateMethod \"none\" in main process.\n    // This flag is used to carry out this rule.\n    // All events will be triggered out side main process (i.e. when !this[IN_MAIN_PROCESS]).\n    var IN_MAIN_PROCESS = '__flagInMainProcess';\n    var HAS_GRADIENT_OR_PATTERN_BG = '__hasGradientOrPatternBg';\n    var OPTION_UPDATED = '__optionUpdated';\n    var ACTION_REG = /^[a-zA-Z0-9_]+$/;\n\n    function createRegisterEventWithLowercaseName(method) {\n        return function (eventName, handler, context) {\n            // Event name is all lowercase\n            eventName = eventName && eventName.toLowerCase();\n            Eventful.prototype[method].call(this, eventName, handler, context);\n        };\n    }\n\n    /**\n     * @module echarts~MessageCenter\n     */\n    function MessageCenter() {\n        Eventful.call(this);\n    }\n    MessageCenter.prototype.on = createRegisterEventWithLowercaseName('on');\n    MessageCenter.prototype.off = createRegisterEventWithLowercaseName('off');\n    MessageCenter.prototype.one = createRegisterEventWithLowercaseName('one');\n    zrUtil.mixin(MessageCenter, Eventful);\n\n    /**\n     * @module echarts~ECharts\n     */\n    function ECharts(dom, theme, opts) {\n        opts = opts || {};\n\n        // Get theme by name\n        if (typeof theme === 'string') {\n            theme = themeStorage[theme];\n        }\n\n        /**\n         * @type {string}\n         */\n        this.id;\n        /**\n         * Group id\n         * @type {string}\n         */\n        this.group;\n        /**\n         * @type {HTMLDomElement}\n         * @private\n         */\n        this._dom = dom;\n        /**\n         * @type {module:zrender/ZRender}\n         * @private\n         */\n        var zr = this._zr = zrender.init(dom, {\n            renderer: opts.renderer || 'canvas',\n            devicePixelRatio: opts.devicePixelRatio,\n            width: opts.width,\n            height: opts.height\n        });\n\n        /**\n         * Expect 60 pfs.\n         * @type {Function}\n         * @private\n         */\n        this._throttledZrFlush = throttle.throttle(zrUtil.bind(zr.flush, zr), 17);\n\n        /**\n         * @type {Object}\n         * @private\n         */\n        this._theme = zrUtil.clone(theme);\n\n        /**\n         * @type {Array.<module:echarts/view/Chart>}\n         * @private\n         */\n        this._chartsViews = [];\n\n        /**\n         * @type {Object.<string, module:echarts/view/Chart>}\n         * @private\n         */\n        this._chartsMap = {};\n\n        /**\n         * @type {Array.<module:echarts/view/Component>}\n         * @private\n         */\n        this._componentsViews = [];\n\n        /**\n         * @type {Object.<string, module:echarts/view/Component>}\n         * @private\n         */\n        this._componentsMap = {};\n\n        /**\n         * @type {module:echarts/CoordinateSystem}\n         * @private\n         */\n        this._coordSysMgr = new CoordinateSystemManager();\n\n        /**\n         * @type {module:echarts/ExtensionAPI}\n         * @private\n         */\n        this._api = createExtensionAPI(this);\n\n        Eventful.call(this);\n\n        /**\n         * @type {module:echarts~MessageCenter}\n         * @private\n         */\n        this._messageCenter = new MessageCenter();\n\n        // Init mouse events\n        this._initEvents();\n\n        // In case some people write `window.onresize = chart.resize`\n        this.resize = zrUtil.bind(this.resize, this);\n\n        // Can't dispatch action during rendering procedure\n        this._pendingActions = [];\n        // Sort on demand\n        function prioritySortFunc(a, b) {\n            return a.prio - b.prio;\n        }\n        timsort(visualFuncs, prioritySortFunc);\n        timsort(dataProcessorFuncs, prioritySortFunc);\n\n        zr.animation.on('frame', this._onframe, this);\n\n        // ECharts instance can be used as value.\n        zrUtil.setAsPrimitive(this);\n    }\n\n    var echartsProto = ECharts.prototype;\n\n    echartsProto._onframe = function () {\n        // Lazy update\n        if (this[OPTION_UPDATED]) {\n            var silent = this[OPTION_UPDATED].silent;\n\n            this[IN_MAIN_PROCESS] = true;\n\n            updateMethods.prepareAndUpdate.call(this);\n\n            this[IN_MAIN_PROCESS] = false;\n\n            this[OPTION_UPDATED] = false;\n\n            flushPendingActions.call(this, silent);\n\n            triggerUpdatedEvent.call(this, silent);\n        }\n    };\n    /**\n     * @return {HTMLDomElement}\n     */\n    echartsProto.getDom = function () {\n        return this._dom;\n    };\n\n    /**\n     * @return {module:zrender~ZRender}\n     */\n    echartsProto.getZr = function () {\n        return this._zr;\n    };\n\n    /**\n     * Usage:\n     * chart.setOption(option, notMerge, lazyUpdate);\n     * chart.setOption(option, {\n     *     notMerge: ...,\n     *     lazyUpdate: ...,\n     *     silent: ...\n     * });\n     *\n     * @param {Object} option\n     * @param {Object|boolean} [opts] opts or notMerge.\n     * @param {boolean} [opts.notMerge=false]\n     * @param {boolean} [opts.lazyUpdate=false] Useful when setOption frequently.\n     */\n    echartsProto.setOption = function (option, notMerge, lazyUpdate) {\n        if (__DEV__) {\n            zrUtil.assert(!this[IN_MAIN_PROCESS], '`setOption` should not be called during main process.');\n        }\n\n        var silent;\n        if (zrUtil.isObject(notMerge)) {\n            lazyUpdate = notMerge.lazyUpdate;\n            silent = notMerge.silent;\n            notMerge = notMerge.notMerge;\n        }\n\n        this[IN_MAIN_PROCESS] = true;\n\n        if (!this._model || notMerge) {\n            var optionManager = new OptionManager(this._api);\n            var theme = this._theme;\n            var ecModel = this._model = new GlobalModel(null, null, theme, optionManager);\n            ecModel.init(null, null, theme, optionManager);\n        }\n\n        this._model.setOption(option, optionPreprocessorFuncs);\n\n        if (lazyUpdate) {\n            this[OPTION_UPDATED] = {silent: silent};\n            this[IN_MAIN_PROCESS] = false;\n        }\n        else {\n            updateMethods.prepareAndUpdate.call(this);\n            // Ensure zr refresh sychronously, and then pixel in canvas can be\n            // fetched after `setOption`.\n            this._zr.flush();\n\n            this[OPTION_UPDATED] = false;\n            this[IN_MAIN_PROCESS] = false;\n\n            flushPendingActions.call(this, silent);\n            triggerUpdatedEvent.call(this, silent);\n        }\n    };\n\n    /**\n     * @DEPRECATED\n     */\n    echartsProto.setTheme = function () {\n        console.log('ECharts#setTheme() is DEPRECATED in ECharts 3.0');\n    };\n\n    /**\n     * @return {module:echarts/model/Global}\n     */\n    echartsProto.getModel = function () {\n        return this._model;\n    };\n\n    /**\n     * @return {Object}\n     */\n    echartsProto.getOption = function () {\n        return this._model && this._model.getOption();\n    };\n\n    /**\n     * @return {number}\n     */\n    echartsProto.getWidth = function () {\n        return this._zr.getWidth();\n    };\n\n    /**\n     * @return {number}\n     */\n    echartsProto.getHeight = function () {\n        return this._zr.getHeight();\n    };\n\n    /**\n     * @return {number}\n     */\n    echartsProto.getDevicePixelRatio = function () {\n        return this._zr.painter.dpr || window.devicePixelRatio || 1;\n    };\n\n    /**\n     * Get canvas which has all thing rendered\n     * @param {Object} opts\n     * @param {string} [opts.backgroundColor]\n     */\n    echartsProto.getRenderedCanvas = function (opts) {\n        if (!env.canvasSupported) {\n            return;\n        }\n        opts = opts || {};\n        opts.pixelRatio = opts.pixelRatio || 1;\n        opts.backgroundColor = opts.backgroundColor\n            || this._model.get('backgroundColor');\n        var zr = this._zr;\n        var list = zr.storage.getDisplayList();\n        // Stop animations\n        zrUtil.each(list, function (el) {\n            el.stopAnimation(true);\n        });\n        return zr.painter.getRenderedCanvas(opts);\n    };\n    /**\n     * @return {string}\n     * @param {Object} opts\n     * @param {string} [opts.type='png']\n     * @param {string} [opts.pixelRatio=1]\n     * @param {string} [opts.backgroundColor]\n     * @param {string} [opts.excludeComponents]\n     */\n    echartsProto.getDataURL = function (opts) {\n        opts = opts || {};\n        var excludeComponents = opts.excludeComponents;\n        var ecModel = this._model;\n        var excludesComponentViews = [];\n        var self = this;\n\n        each(excludeComponents, function (componentType) {\n            ecModel.eachComponent({\n                mainType: componentType\n            }, function (component) {\n                var view = self._componentsMap[component.__viewId];\n                if (!view.group.ignore) {\n                    excludesComponentViews.push(view);\n                    view.group.ignore = true;\n                }\n            });\n        });\n\n        var url = this.getRenderedCanvas(opts).toDataURL(\n            'image/' + (opts && opts.type || 'png')\n        );\n\n        each(excludesComponentViews, function (view) {\n            view.group.ignore = false;\n        });\n        return url;\n    };\n\n\n    /**\n     * @return {string}\n     * @param {Object} opts\n     * @param {string} [opts.type='png']\n     * @param {string} [opts.pixelRatio=1]\n     * @param {string} [opts.backgroundColor]\n     */\n    echartsProto.getConnectedDataURL = function (opts) {\n        if (!env.canvasSupported) {\n            return;\n        }\n        var groupId = this.group;\n        var mathMin = Math.min;\n        var mathMax = Math.max;\n        var MAX_NUMBER = Infinity;\n        if (connectedGroups[groupId]) {\n            var left = MAX_NUMBER;\n            var top = MAX_NUMBER;\n            var right = -MAX_NUMBER;\n            var bottom = -MAX_NUMBER;\n            var canvasList = [];\n            var dpr = (opts && opts.pixelRatio) || 1;\n\n            zrUtil.each(instances, function (chart, id) {\n                if (chart.group === groupId) {\n                    var canvas = chart.getRenderedCanvas(\n                        zrUtil.clone(opts)\n                    );\n                    var boundingRect = chart.getDom().getBoundingClientRect();\n                    left = mathMin(boundingRect.left, left);\n                    top = mathMin(boundingRect.top, top);\n                    right = mathMax(boundingRect.right, right);\n                    bottom = mathMax(boundingRect.bottom, bottom);\n                    canvasList.push({\n                        dom: canvas,\n                        left: boundingRect.left,\n                        top: boundingRect.top\n                    });\n                }\n            });\n\n            left *= dpr;\n            top *= dpr;\n            right *= dpr;\n            bottom *= dpr;\n            var width = right - left;\n            var height = bottom - top;\n            var targetCanvas = zrUtil.createCanvas();\n            targetCanvas.width = width;\n            targetCanvas.height = height;\n            var zr = zrender.init(targetCanvas);\n\n            each(canvasList, function (item) {\n                var img = new graphic.Image({\n                    style: {\n                        x: item.left * dpr - left,\n                        y: item.top * dpr - top,\n                        image: item.dom\n                    }\n                });\n                zr.add(img);\n            });\n            zr.refreshImmediately();\n\n            return targetCanvas.toDataURL('image/' + (opts && opts.type || 'png'));\n        }\n        else {\n            return this.getDataURL(opts);\n        }\n    };\n\n    /**\n     * Convert from logical coordinate system to pixel coordinate system.\n     * See CoordinateSystem#convertToPixel.\n     * @param {string|Object} finder\n     *        If string, e.g., 'geo', means {geoIndex: 0}.\n     *        If Object, could contain some of these properties below:\n     *        {\n     *            seriesIndex / seriesId / seriesName,\n     *            geoIndex / geoId, geoName,\n     *            bmapIndex / bmapId / bmapName,\n     *            xAxisIndex / xAxisId / xAxisName,\n     *            yAxisIndex / yAxisId / yAxisName,\n     *            gridIndex / gridId / gridName,\n     *            ... (can be extended)\n     *        }\n     * @param {Array|number} value\n     * @return {Array|number} result\n     */\n    echartsProto.convertToPixel = zrUtil.curry(doConvertPixel, 'convertToPixel');\n\n    /**\n     * Convert from pixel coordinate system to logical coordinate system.\n     * See CoordinateSystem#convertFromPixel.\n     * @param {string|Object} finder\n     *        If string, e.g., 'geo', means {geoIndex: 0}.\n     *        If Object, could contain some of these properties below:\n     *        {\n     *            seriesIndex / seriesId / seriesName,\n     *            geoIndex / geoId / geoName,\n     *            bmapIndex / bmapId / bmapName,\n     *            xAxisIndex / xAxisId / xAxisName,\n     *            yAxisIndex / yAxisId / yAxisName\n     *            gridIndex / gridId / gridName,\n     *            ... (can be extended)\n     *        }\n     * @param {Array|number} value\n     * @return {Array|number} result\n     */\n    echartsProto.convertFromPixel = zrUtil.curry(doConvertPixel, 'convertFromPixel');\n\n    function doConvertPixel(methodName, finder, value) {\n        var ecModel = this._model;\n        var coordSysList = this._coordSysMgr.getCoordinateSystems();\n        var result;\n\n        finder = modelUtil.parseFinder(ecModel, finder);\n\n        for (var i = 0; i < coordSysList.length; i++) {\n            var coordSys = coordSysList[i];\n            if (coordSys[methodName]\n                && (result = coordSys[methodName](ecModel, finder, value)) != null\n            ) {\n                return result;\n            }\n        }\n\n        if (__DEV__) {\n            console.warn(\n                'No coordinate system that supports ' + methodName + ' found by the given finder.'\n            );\n        }\n    }\n\n    /**\n     * Is the specified coordinate systems or components contain the given pixel point.\n     * @param {string|Object} finder\n     *        If string, e.g., 'geo', means {geoIndex: 0}.\n     *        If Object, could contain some of these properties below:\n     *        {\n     *            seriesIndex / seriesId / seriesName,\n     *            geoIndex / geoId / geoName,\n     *            bmapIndex / bmapId / bmapName,\n     *            xAxisIndex / xAxisId / xAxisName,\n     *            yAxisIndex / yAxisId / yAxisName,\n     *            gridIndex / gridId / gridName,\n     *            ... (can be extended)\n     *        }\n     * @param {Array|number} value\n     * @return {boolean} result\n     */\n    echartsProto.containPixel = function (finder, value) {\n        var ecModel = this._model;\n        var result;\n\n        finder = modelUtil.parseFinder(ecModel, finder);\n\n        zrUtil.each(finder, function (models, key) {\n            key.indexOf('Models') >= 0 && zrUtil.each(models, function (model) {\n                var coordSys = model.coordinateSystem;\n                if (coordSys && coordSys.containPoint) {\n                    result |= !!coordSys.containPoint(value);\n                }\n                else if (key === 'seriesModels') {\n                    var view = this._chartsMap[model.__viewId];\n                    if (view && view.containPoint) {\n                        result |= view.containPoint(value, model);\n                    }\n                    else {\n                        if (__DEV__) {\n                            console.warn(key + ': ' + (view\n                                ? 'The found component do not support containPoint.'\n                                : 'No view mapping to the found component.'\n                            ));\n                        }\n                    }\n                }\n                else {\n                    if (__DEV__) {\n                        console.warn(key + ': containPoint is not supported');\n                    }\n                }\n            }, this);\n        }, this);\n\n        return !!result;\n    };\n\n    /**\n     * Get visual from series or data.\n     * @param {string|Object} finder\n     *        If string, e.g., 'series', means {seriesIndex: 0}.\n     *        If Object, could contain some of these properties below:\n     *        {\n     *            seriesIndex / seriesId / seriesName,\n     *            dataIndex / dataIndexInside\n     *        }\n     *        If dataIndex is not specified, series visual will be fetched,\n     *        but not data item visual.\n     *        If all of seriesIndex, seriesId, seriesName are not specified,\n     *        visual will be fetched from first series.\n     * @param {string} visualType 'color', 'symbol', 'symbolSize'\n     */\n    echartsProto.getVisual = function (finder, visualType) {\n        var ecModel = this._model;\n\n        finder = modelUtil.parseFinder(ecModel, finder, {defaultMainType: 'series'});\n\n        var seriesModel = finder.seriesModel;\n\n        if (__DEV__) {\n            if (!seriesModel) {\n                console.warn('There is no specified seires model');\n            }\n        }\n\n        var data = seriesModel.getData();\n\n        var dataIndexInside = finder.hasOwnProperty('dataIndexInside')\n            ? finder.dataIndexInside\n            : finder.hasOwnProperty('dataIndex')\n            ? data.indexOfRawIndex(finder.dataIndex)\n            : null;\n\n        return dataIndexInside != null\n            ? data.getItemVisual(dataIndexInside, visualType)\n            : data.getVisual(visualType);\n    };\n\n    /**\n     * Get view of corresponding component model\n     * @param  {module:echarts/model/Component} componentModel\n     * @return {module:echarts/view/Component}\n     */\n    echartsProto.getViewOfComponentModel = function (componentModel) {\n        return this._componentsMap[componentModel.__viewId];\n    };\n\n    /**\n     * Get view of corresponding series model\n     * @param  {module:echarts/model/Series} seriesModel\n     * @return {module:echarts/view/Chart}\n     */\n    echartsProto.getViewOfSeriesModel = function (seriesModel) {\n        return this._chartsMap[seriesModel.__viewId];\n    };\n\n\n    var updateMethods = {\n\n        /**\n         * @param {Object} payload\n         * @private\n         */\n        update: function (payload) {\n            // console.profile && console.profile('update');\n\n            var ecModel = this._model;\n            var api = this._api;\n            var coordSysMgr = this._coordSysMgr;\n            var zr = this._zr;\n            // update before setOption\n            if (!ecModel) {\n                return;\n            }\n\n            // Fixme First time update ?\n            ecModel.restoreData();\n\n            // TODO\n            // Save total ecModel here for undo/redo (after restoring data and before processing data).\n            // Undo (restoration of total ecModel) can be carried out in 'action' or outside API call.\n\n            // Create new coordinate system each update\n            // In LineView may save the old coordinate system and use it to get the orignal point\n            coordSysMgr.create(this._model, this._api);\n\n            processData.call(this, ecModel, api);\n\n            stackSeriesData.call(this, ecModel);\n\n            coordSysMgr.update(ecModel, api);\n\n            doVisualEncoding.call(this, ecModel, payload);\n\n            doRender.call(this, ecModel, payload);\n\n            // Set background\n            var backgroundColor = ecModel.get('backgroundColor') || 'transparent';\n\n            var painter = zr.painter;\n            // TODO all use clearColor ?\n            if (painter.isSingleCanvas && painter.isSingleCanvas()) {\n                zr.configLayer(0, {\n                    clearColor: backgroundColor\n                });\n            }\n            else {\n                // In IE8\n                if (!env.canvasSupported) {\n                    var colorArr = colorTool.parse(backgroundColor);\n                    backgroundColor = colorTool.stringify(colorArr, 'rgb');\n                    if (colorArr[3] === 0) {\n                        backgroundColor = 'transparent';\n                    }\n                }\n                if (backgroundColor.colorStops || backgroundColor.image) {\n                    // Gradient background\n                    // FIXME Fixed layer？\n                    zr.configLayer(0, {\n                        clearColor: backgroundColor\n                    });\n                    this[HAS_GRADIENT_OR_PATTERN_BG] = true;\n\n                    this._dom.style.background = 'transparent';\n                }\n                else {\n                    if (this[HAS_GRADIENT_OR_PATTERN_BG]) {\n                        zr.configLayer(0, {\n                            clearColor: null\n                        });\n                    }\n                    this[HAS_GRADIENT_OR_PATTERN_BG] = false;\n\n                    this._dom.style.background = backgroundColor;\n                }\n            }\n\n            each(postUpdateFuncs, function (func) {\n                func(ecModel, api);\n            });\n\n            // console.profile && console.profileEnd('update');\n        },\n\n        /**\n         * @param {Object} payload\n         * @private\n         */\n        updateView: function (payload) {\n            var ecModel = this._model;\n\n            // update before setOption\n            if (!ecModel) {\n                return;\n            }\n\n            ecModel.eachSeries(function (seriesModel) {\n                seriesModel.getData().clearAllVisual();\n            });\n\n            doVisualEncoding.call(this, ecModel, payload);\n\n            invokeUpdateMethod.call(this, 'updateView', ecModel, payload);\n        },\n\n        /**\n         * @param {Object} payload\n         * @private\n         */\n        updateVisual: function (payload) {\n            var ecModel = this._model;\n\n            // update before setOption\n            if (!ecModel) {\n                return;\n            }\n\n            ecModel.eachSeries(function (seriesModel) {\n                seriesModel.getData().clearAllVisual();\n            });\n\n            doVisualEncoding.call(this, ecModel, payload, true);\n\n            invokeUpdateMethod.call(this, 'updateVisual', ecModel, payload);\n        },\n\n        /**\n         * @param {Object} payload\n         * @private\n         */\n        updateLayout: function (payload) {\n            var ecModel = this._model;\n\n            // update before setOption\n            if (!ecModel) {\n                return;\n            }\n\n            doLayout.call(this, ecModel, payload);\n\n            invokeUpdateMethod.call(this, 'updateLayout', ecModel, payload);\n        },\n\n        /**\n         * @param {Object} payload\n         * @private\n         */\n        prepareAndUpdate: function (payload) {\n            var ecModel = this._model;\n\n            prepareView.call(this, 'component', ecModel);\n\n            prepareView.call(this, 'chart', ecModel);\n\n            updateMethods.update.call(this, payload);\n        }\n    };\n\n    /**\n     * @private\n     */\n    function updateDirectly(ecIns, method, payload, mainType, subType) {\n        var ecModel = ecIns._model;\n\n        // broadcast\n        if (!mainType) {\n            each(ecIns._componentsViews.concat(ecIns._chartsViews), callView);\n            return;\n        }\n\n        var query = {};\n        query[mainType + 'Id'] = payload[mainType + 'Id'];\n        query[mainType + 'Index'] = payload[mainType + 'Index'];\n        query[mainType + 'Name'] = payload[mainType + 'Name'];\n\n        var condition = {mainType: mainType, query: query};\n        subType && (condition.subType = subType); // subType may be '' by parseClassType;\n\n        // If dispatchAction before setOption, do nothing.\n        ecModel && ecModel.eachComponent(condition, function (model, index) {\n            callView(ecIns[\n                mainType === 'series' ? '_chartsMap' : '_componentsMap'\n            ][model.__viewId]);\n        }, ecIns);\n\n        function callView(view) {\n            view && view.__alive && view[method] && view[method](\n                view.__model, ecModel, ecIns._api, payload\n            );\n        }\n    }\n\n    /**\n     * Resize the chart\n     * @param {Object} opts\n     * @param {number} [opts.width] Can be 'auto' (the same as null/undefined)\n     * @param {number} [opts.height] Can be 'auto' (the same as null/undefined)\n     * @param {boolean} [opts.silent=false]\n     */\n    echartsProto.resize = function (opts) {\n        if (__DEV__) {\n            zrUtil.assert(!this[IN_MAIN_PROCESS], '`resize` should not be called during main process.');\n        }\n\n        this[IN_MAIN_PROCESS] = true;\n\n        this._zr.resize(opts);\n\n        var optionChanged = this._model && this._model.resetOption('media');\n        var updateMethod = optionChanged ? 'prepareAndUpdate' : 'update';\n\n        updateMethods[updateMethod].call(this);\n\n        // Resize loading effect\n        this._loadingFX && this._loadingFX.resize();\n\n        this[IN_MAIN_PROCESS] = false;\n\n        var silent = opts && opts.silent;\n\n        flushPendingActions.call(this, silent);\n\n        triggerUpdatedEvent.call(this, silent);\n    };\n\n    /**\n     * Show loading effect\n     * @param  {string} [name='default']\n     * @param  {Object} [cfg]\n     */\n    echartsProto.showLoading = function (name, cfg) {\n        if (zrUtil.isObject(name)) {\n            cfg = name;\n            name = '';\n        }\n        name = name || 'default';\n\n        this.hideLoading();\n        if (!loadingEffects[name]) {\n            if (__DEV__) {\n                console.warn('Loading effects ' + name + ' not exists.');\n            }\n            return;\n        }\n        var el = loadingEffects[name](this._api, cfg);\n        var zr = this._zr;\n        this._loadingFX = el;\n\n        zr.add(el);\n    };\n\n    /**\n     * Hide loading effect\n     */\n    echartsProto.hideLoading = function () {\n        this._loadingFX && this._zr.remove(this._loadingFX);\n        this._loadingFX = null;\n    };\n\n    /**\n     * @param {Object} eventObj\n     * @return {Object}\n     */\n    echartsProto.makeActionFromEvent = function (eventObj) {\n        var payload = zrUtil.extend({}, eventObj);\n        payload.type = eventActionMap[eventObj.type];\n        return payload;\n    };\n\n    /**\n     * @pubilc\n     * @param {Object} payload\n     * @param {string} [payload.type] Action type\n     * @param {Object|boolean} [opt] If pass boolean, means opt.silent\n     * @param {boolean} [opt.silent=false] Whether trigger events.\n     * @param {boolean} [opt.flush=undefined]\n     *                  true: Flush immediately, and then pixel in canvas can be fetched\n     *                      immediately. Caution: it might affect performance.\n     *                  false: Not not flush.\n     *                  undefined: Auto decide whether perform flush.\n     */\n    echartsProto.dispatchAction = function (payload, opt) {\n        if (!zrUtil.isObject(opt)) {\n            opt = {silent: !!opt};\n        }\n\n        if (!actions[payload.type]) {\n            return;\n        }\n\n        // May dispatchAction in rendering procedure\n        if (this[IN_MAIN_PROCESS]) {\n            this._pendingActions.push(payload);\n            return;\n        }\n\n        doDispatchAction.call(this, payload, opt.silent);\n\n        if (opt.flush) {\n            this._zr.flush(true);\n        }\n        else if (opt.flush !== false && env.browser.weChat) {\n            // In WeChat embeded browser, `requestAnimationFrame` and `setInterval`\n            // hang when sliding page (on touch event), which cause that zr does not\n            // refresh util user interaction finished, which is not expected.\n            // But `dispatchAction` may be called too frequently when pan on touch\n            // screen, which impacts performance if do not throttle them.\n            this._throttledZrFlush();\n        }\n\n        flushPendingActions.call(this, opt.silent);\n\n        triggerUpdatedEvent.call(this, opt.silent);\n    };\n\n    function doDispatchAction(payload, silent) {\n        var payloadType = payload.type;\n        var escapeConnect = payload.escapeConnect;\n        var actionWrap = actions[payloadType];\n        var actionInfo = actionWrap.actionInfo;\n\n        var cptType = (actionInfo.update || 'update').split(':');\n        var updateMethod = cptType.pop();\n        cptType = cptType[0] != null && parseClassType(cptType[0]);\n\n        this[IN_MAIN_PROCESS] = true;\n\n        var payloads = [payload];\n        var batched = false;\n        // Batch action\n        if (payload.batch) {\n            batched = true;\n            payloads = zrUtil.map(payload.batch, function (item) {\n                item = zrUtil.defaults(zrUtil.extend({}, item), payload);\n                item.batch = null;\n                return item;\n            });\n        }\n\n        var eventObjBatch = [];\n        var eventObj;\n        var isHighDown = payloadType === 'highlight' || payloadType === 'downplay';\n\n        each(payloads, function (batchItem) {\n            // Action can specify the event by return it.\n            eventObj = actionWrap.action(batchItem, this._model, this._api);\n            // Emit event outside\n            eventObj = eventObj || zrUtil.extend({}, batchItem);\n            // Convert type to eventType\n            eventObj.type = actionInfo.event || eventObj.type;\n            eventObjBatch.push(eventObj);\n\n            // light update does not perform data process, layout and visual.\n            if (isHighDown) {\n                // method, payload, mainType, subType\n                updateDirectly(this, updateMethod, batchItem, 'series');\n            }\n            else if (cptType) {\n                updateDirectly(this, updateMethod, batchItem, cptType.main, cptType.sub);\n            }\n        }, this);\n\n        if (updateMethod !== 'none' && !isHighDown && !cptType) {\n            // Still dirty\n            if (this[OPTION_UPDATED]) {\n                // FIXME Pass payload ?\n                updateMethods.prepareAndUpdate.call(this, payload);\n                this[OPTION_UPDATED] = false;\n            }\n            else {\n                updateMethods[updateMethod].call(this, payload);\n            }\n        }\n\n        // Follow the rule of action batch\n        if (batched) {\n            eventObj = {\n                type: actionInfo.event || payloadType,\n                escapeConnect: escapeConnect,\n                batch: eventObjBatch\n            };\n        }\n        else {\n            eventObj = eventObjBatch[0];\n        }\n\n        this[IN_MAIN_PROCESS] = false;\n\n        !silent && this._messageCenter.trigger(eventObj.type, eventObj);\n    }\n\n    function flushPendingActions(silent) {\n        var pendingActions = this._pendingActions;\n        while (pendingActions.length) {\n            var payload = pendingActions.shift();\n            doDispatchAction.call(this, payload, silent);\n        }\n    }\n\n    function triggerUpdatedEvent(silent) {\n        !silent && this.trigger('updated');\n    }\n\n    /**\n     * Register event\n     * @method\n     */\n    echartsProto.on = createRegisterEventWithLowercaseName('on');\n    echartsProto.off = createRegisterEventWithLowercaseName('off');\n    echartsProto.one = createRegisterEventWithLowercaseName('one');\n\n    /**\n     * @param {string} methodName\n     * @private\n     */\n    function invokeUpdateMethod(methodName, ecModel, payload) {\n        var api = this._api;\n\n        // Update all components\n        each(this._componentsViews, function (component) {\n            var componentModel = component.__model;\n            component[methodName](componentModel, ecModel, api, payload);\n\n            updateZ(componentModel, component);\n        }, this);\n\n        // Upate all charts\n        ecModel.eachSeries(function (seriesModel, idx) {\n            var chart = this._chartsMap[seriesModel.__viewId];\n            chart[methodName](seriesModel, ecModel, api, payload);\n\n            updateZ(seriesModel, chart);\n\n            updateProgressiveAndBlend(seriesModel, chart);\n        }, this);\n\n        // If use hover layer\n        updateHoverLayerStatus(this._zr, ecModel);\n\n        // Post render\n        each(postUpdateFuncs, function (func) {\n            func(ecModel, api);\n        });\n    }\n\n    /**\n     * Prepare view instances of charts and components\n     * @param  {module:echarts/model/Global} ecModel\n     * @private\n     */\n    function prepareView(type, ecModel) {\n        var isComponent = type === 'component';\n        var viewList = isComponent ? this._componentsViews : this._chartsViews;\n        var viewMap = isComponent ? this._componentsMap : this._chartsMap;\n        var zr = this._zr;\n\n        for (var i = 0; i < viewList.length; i++) {\n            viewList[i].__alive = false;\n        }\n\n        ecModel[isComponent ? 'eachComponent' : 'eachSeries'](function (componentType, model) {\n            if (isComponent) {\n                if (componentType === 'series') {\n                    return;\n                }\n            }\n            else {\n                model = componentType;\n            }\n\n            // Consider: id same and type changed.\n            var viewId = '_ec_' + model.id + '_' + model.type;\n            var view = viewMap[viewId];\n            if (!view) {\n                var classType = parseClassType(model.type);\n                var Clazz = isComponent\n                    ? ComponentView.getClass(classType.main, classType.sub)\n                    : ChartView.getClass(classType.sub);\n                if (Clazz) {\n                    view = new Clazz();\n                    view.init(ecModel, this._api);\n                    viewMap[viewId] = view;\n                    viewList.push(view);\n                    zr.add(view.group);\n                }\n                else {\n                    // Error\n                    return;\n                }\n            }\n\n            model.__viewId = view.__id = viewId;\n            view.__alive = true;\n            view.__model = model;\n            view.group.__ecComponentInfo = {\n                mainType: model.mainType,\n                index: model.componentIndex\n            };\n        }, this);\n\n        for (var i = 0; i < viewList.length;) {\n            var view = viewList[i];\n            if (!view.__alive) {\n                zr.remove(view.group);\n                view.dispose(ecModel, this._api);\n                viewList.splice(i, 1);\n                delete viewMap[view.__id];\n                view.__id = view.group.__ecComponentInfo = null;\n            }\n            else {\n                i++;\n            }\n        }\n    }\n\n    /**\n     * Processor data in each series\n     *\n     * @param {module:echarts/model/Global} ecModel\n     * @private\n     */\n    function processData(ecModel, api) {\n        each(dataProcessorFuncs, function (process) {\n            process.func(ecModel, api);\n        });\n    }\n\n    /**\n     * @private\n     */\n    function stackSeriesData(ecModel) {\n        var stackedDataMap = {};\n        ecModel.eachSeries(function (series) {\n            var stack = series.get('stack');\n            var data = series.getData();\n            if (stack && data.type === 'list') {\n                var previousStack = stackedDataMap[stack];\n                // Avoid conflict with Object.prototype\n                if (stackedDataMap.hasOwnProperty(stack) && previousStack) {\n                    data.stackedOn = previousStack;\n                }\n                stackedDataMap[stack] = data;\n            }\n        });\n    }\n\n    /**\n     * Layout before each chart render there series, special visual encoding stage\n     *\n     * @param {module:echarts/model/Global} ecModel\n     * @private\n     */\n    function doLayout(ecModel, payload) {\n        var api = this._api;\n        each(visualFuncs, function (visual) {\n            if (visual.isLayout) {\n                visual.func(ecModel, api, payload);\n            }\n        });\n    }\n\n    /**\n     * Encode visual infomation from data after data processing\n     *\n     * @param {module:echarts/model/Global} ecModel\n     * @param {object} layout\n     * @param {boolean} [excludesLayout]\n     * @private\n     */\n    function doVisualEncoding(ecModel, payload, excludesLayout) {\n        var api = this._api;\n        ecModel.clearColorPalette();\n        ecModel.eachSeries(function (seriesModel) {\n            seriesModel.clearColorPalette();\n        });\n        each(visualFuncs, function (visual) {\n            (!excludesLayout || !visual.isLayout)\n                && visual.func(ecModel, api, payload);\n        });\n    }\n\n    /**\n     * Render each chart and component\n     * @private\n     */\n    function doRender(ecModel, payload) {\n        var api = this._api;\n        // Render all components\n        each(this._componentsViews, function (componentView) {\n            var componentModel = componentView.__model;\n            componentView.render(componentModel, ecModel, api, payload);\n\n            updateZ(componentModel, componentView);\n        }, this);\n\n        each(this._chartsViews, function (chart) {\n            chart.__alive = false;\n        }, this);\n\n        // Render all charts\n        ecModel.eachSeries(function (seriesModel, idx) {\n            var chartView = this._chartsMap[seriesModel.__viewId];\n            chartView.__alive = true;\n            chartView.render(seriesModel, ecModel, api, payload);\n\n            chartView.group.silent = !!seriesModel.get('silent');\n\n            updateZ(seriesModel, chartView);\n\n            updateProgressiveAndBlend(seriesModel, chartView);\n\n        }, this);\n\n        // If use hover layer\n        updateHoverLayerStatus(this._zr, ecModel);\n\n        // Remove groups of unrendered charts\n        each(this._chartsViews, function (chart) {\n            if (!chart.__alive) {\n                chart.remove(ecModel, api);\n            }\n        }, this);\n    }\n\n    var MOUSE_EVENT_NAMES = [\n        'click', 'dblclick', 'mouseover', 'mouseout', 'mousemove',\n        'mousedown', 'mouseup', 'globalout', 'contextmenu'\n    ];\n    /**\n     * @private\n     */\n    echartsProto._initEvents = function () {\n        each(MOUSE_EVENT_NAMES, function (eveName) {\n            this._zr.on(eveName, function (e) {\n                var ecModel = this.getModel();\n                var el = e.target;\n                var params;\n\n                // no e.target when 'globalout'.\n                if (eveName === 'globalout') {\n                    params = {};\n                }\n                else if (el && el.dataIndex != null) {\n                    var dataModel = el.dataModel || ecModel.getSeriesByIndex(el.seriesIndex);\n                    params = dataModel && dataModel.getDataParams(el.dataIndex, el.dataType) || {};\n                }\n                // If element has custom eventData of components\n                else if (el && el.eventData) {\n                    params = zrUtil.extend({}, el.eventData);\n                }\n\n                if (params) {\n                    params.event = e;\n                    params.type = eveName;\n                    this.trigger(eveName, params);\n                }\n\n            }, this);\n        }, this);\n\n        each(eventActionMap, function (actionType, eventType) {\n            this._messageCenter.on(eventType, function (event) {\n                this.trigger(eventType, event);\n            }, this);\n        }, this);\n    };\n\n    /**\n     * @return {boolean}\n     */\n    echartsProto.isDisposed = function () {\n        return this._disposed;\n    };\n\n    /**\n     * Clear\n     */\n    echartsProto.clear = function () {\n        this.setOption({ series: [] }, true);\n    };\n\n    /**\n     * Dispose instance\n     */\n    echartsProto.dispose = function () {\n        if (this._disposed) {\n            if (__DEV__) {\n                console.warn('Instance ' + this.id + ' has been disposed');\n            }\n            return;\n        }\n        this._disposed = true;\n\n        var api = this._api;\n        var ecModel = this._model;\n\n        each(this._componentsViews, function (component) {\n            component.dispose(ecModel, api);\n        });\n        each(this._chartsViews, function (chart) {\n            chart.dispose(ecModel, api);\n        });\n\n        // Dispose after all views disposed\n        this._zr.dispose();\n\n        delete instances[this.id];\n    };\n\n    zrUtil.mixin(ECharts, Eventful);\n\n    function updateHoverLayerStatus(zr, ecModel) {\n        var storage = zr.storage;\n        var elCount = 0;\n        storage.traverse(function (el) {\n            if (!el.isGroup) {\n                elCount++;\n            }\n        });\n        if (elCount > ecModel.get('hoverLayerThreshold') && !env.node) {\n            storage.traverse(function (el) {\n                if (!el.isGroup) {\n                    el.useHoverLayer = true;\n                }\n            });\n        }\n    }\n\n    /**\n     * Update chart progressive and blend.\n     * @param {module:echarts/model/Series|module:echarts/model/Component} model\n     * @param {module:echarts/view/Component|module:echarts/view/Chart} view\n     */\n    function updateProgressiveAndBlend(seriesModel, chartView) {\n        // Progressive configuration\n        var elCount = 0;\n        chartView.group.traverse(function (el) {\n            if (el.type !== 'group' && !el.ignore) {\n                elCount++;\n            }\n        });\n        var frameDrawNum = +seriesModel.get('progressive');\n        var needProgressive = elCount > seriesModel.get('progressiveThreshold') && frameDrawNum && !env.node;\n        if (needProgressive) {\n            chartView.group.traverse(function (el) {\n                // FIXME marker and other components\n                if (!el.isGroup) {\n                    el.progressive = needProgressive ?\n                        Math.floor(elCount++ / frameDrawNum) : -1;\n                    if (needProgressive) {\n                        el.stopAnimation(true);\n                    }\n                }\n            });\n        }\n\n        // Blend configration\n        var blendMode = seriesModel.get('blendMode') || null;\n        if (__DEV__) {\n            if (!env.canvasSupported && blendMode && blendMode !== 'source-over') {\n                console.warn('Only canvas support blendMode');\n            }\n        }\n        chartView.group.traverse(function (el) {\n            // FIXME marker and other components\n            if (!el.isGroup) {\n                el.setStyle('blend', blendMode);\n            }\n        });\n    }\n\n    /**\n     * @param {module:echarts/model/Series|module:echarts/model/Component} model\n     * @param {module:echarts/view/Component|module:echarts/view/Chart} view\n     */\n    function updateZ(model, view) {\n        var z = model.get('z');\n        var zlevel = model.get('zlevel');\n        // Set z and zlevel\n        view.group.traverse(function (el) {\n            if (el.type !== 'group') {\n                z != null && (el.z = z);\n                zlevel != null && (el.zlevel = zlevel);\n            }\n        });\n    }\n\n    function createExtensionAPI(ecInstance) {\n        var coordSysMgr = ecInstance._coordSysMgr;\n        return zrUtil.extend(new ExtensionAPI(ecInstance), {\n            // Inject methods\n            getCoordinateSystems: zrUtil.bind(\n                coordSysMgr.getCoordinateSystems, coordSysMgr\n            ),\n            getComponentByElement: function (el) {\n                while (el) {\n                    var modelInfo = el.__ecComponentInfo;\n                    if (modelInfo != null) {\n                        return ecInstance._model.getComponent(modelInfo.mainType, modelInfo.index);\n                    }\n                    el = el.parent;\n                }\n            }\n        });\n    }\n\n    /**\n     * @type {Object} key: actionType.\n     * @inner\n     */\n    var actions = {};\n\n    /**\n     * Map eventType to actionType\n     * @type {Object}\n     */\n    var eventActionMap = {};\n\n    /**\n     * Data processor functions of each stage\n     * @type {Array.<Object.<string, Function>>}\n     * @inner\n     */\n    var dataProcessorFuncs = [];\n\n    /**\n     * @type {Array.<Function>}\n     * @inner\n     */\n    var optionPreprocessorFuncs = [];\n\n    /**\n     * @type {Array.<Function>}\n     * @inner\n     */\n    var postUpdateFuncs = [];\n\n    /**\n     * Visual encoding functions of each stage\n     * @type {Array.<Object.<string, Function>>}\n     * @inner\n     */\n    var visualFuncs = [];\n    /**\n     * Theme storage\n     * @type {Object.<key, Object>}\n     */\n    var themeStorage = {};\n    /**\n     * Loading effects\n     */\n    var loadingEffects = {};\n\n\n    var instances = {};\n    var connectedGroups = {};\n\n    var idBase = new Date() - 0;\n    var groupIdBase = new Date() - 0;\n    var DOM_ATTRIBUTE_KEY = '_echarts_instance_';\n\n    /**\n     * @alias module:echarts\n     */\n    var echarts = {\n        /**\n         * @type {number}\n         */\n        version: '3.6.1',\n        dependencies: {\n            zrender: '3.5.1'\n        }\n    };\n\n    function enableConnect(chart) {\n        var STATUS_PENDING = 0;\n        var STATUS_UPDATING = 1;\n        var STATUS_UPDATED = 2;\n        var STATUS_KEY = '__connectUpdateStatus';\n\n        function updateConnectedChartsStatus(charts, status) {\n            for (var i = 0; i < charts.length; i++) {\n                var otherChart = charts[i];\n                otherChart[STATUS_KEY] = status;\n            }\n        }\n\n        zrUtil.each(eventActionMap, function (actionType, eventType) {\n            chart._messageCenter.on(eventType, function (event) {\n                if (connectedGroups[chart.group] && chart[STATUS_KEY] !== STATUS_PENDING) {\n                    if (event && event.escapeConnect) {\n                        return;\n                    }\n\n                    var action = chart.makeActionFromEvent(event);\n                    var otherCharts = [];\n\n                    zrUtil.each(instances, function (otherChart) {\n                        if (otherChart !== chart && otherChart.group === chart.group) {\n                            otherCharts.push(otherChart);\n                        }\n                    });\n\n                    updateConnectedChartsStatus(otherCharts, STATUS_PENDING);\n                    each(otherCharts, function (otherChart) {\n                        if (otherChart[STATUS_KEY] !== STATUS_UPDATING) {\n                            otherChart.dispatchAction(action);\n                        }\n                    });\n                    updateConnectedChartsStatus(otherCharts, STATUS_UPDATED);\n                }\n            });\n        });\n    }\n\n    /**\n     * @param {HTMLDomElement} dom\n     * @param {Object} [theme]\n     * @param {Object} opts\n     * @param {number} [opts.devicePixelRatio] Use window.devicePixelRatio by default\n     * @param {string} [opts.renderer] Currently only 'canvas' is supported.\n     * @param {number} [opts.width] Use clientWidth of the input `dom` by default.\n     *                              Can be 'auto' (the same as null/undefined)\n     * @param {number} [opts.height] Use clientHeight of the input `dom` by default.\n     *                               Can be 'auto' (the same as null/undefined)\n     */\n    echarts.init = function (dom, theme, opts) {\n        if (__DEV__) {\n            // Check version\n            if ((zrender.version.replace('.', '') - 0) < (echarts.dependencies.zrender.replace('.', '') - 0)) {\n                throw new Error(\n                    'ZRender ' + zrender.version\n                    + ' is too old for ECharts ' + echarts.version\n                    + '. Current version need ZRender '\n                    + echarts.dependencies.zrender + '+'\n                );\n            }\n\n            if (!dom) {\n                throw new Error('Initialize failed: invalid dom.');\n            }\n        }\n\n        var existInstance = echarts.getInstanceByDom(dom);\n        if (existInstance) {\n            if (__DEV__) {\n                console.warn('There is a chart instance already initialized on the dom.');\n            }\n            return existInstance;\n        }\n\n        if (__DEV__) {\n            if (zrUtil.isDom(dom)\n                && dom.nodeName.toUpperCase() !== 'CANVAS'\n                && (\n                    (!dom.clientWidth && (!opts || opts.width == null))\n                    || (!dom.clientHeight && (!opts || opts.height == null))\n                )\n            ) {\n                console.warn('Can\\'t get dom width or height');\n            }\n        }\n\n        var chart = new ECharts(dom, theme, opts);\n        chart.id = 'ec_' + idBase++;\n        instances[chart.id] = chart;\n\n        if (dom.setAttribute) {\n            dom.setAttribute(DOM_ATTRIBUTE_KEY, chart.id);\n        }\n        else {\n            dom[DOM_ATTRIBUTE_KEY] = chart.id;\n        }\n\n        enableConnect(chart);\n\n        return chart;\n    };\n\n    /**\n     * @return {string|Array.<module:echarts~ECharts>} groupId\n     */\n    echarts.connect = function (groupId) {\n        // Is array of charts\n        if (zrUtil.isArray(groupId)) {\n            var charts = groupId;\n            groupId = null;\n            // If any chart has group\n            zrUtil.each(charts, function (chart) {\n                if (chart.group != null) {\n                    groupId = chart.group;\n                }\n            });\n            groupId = groupId || ('g_' + groupIdBase++);\n            zrUtil.each(charts, function (chart) {\n                chart.group = groupId;\n            });\n        }\n        connectedGroups[groupId] = true;\n        return groupId;\n    };\n\n    /**\n     * @DEPRECATED\n     * @return {string} groupId\n     */\n    echarts.disConnect = function (groupId) {\n        connectedGroups[groupId] = false;\n    };\n\n    /**\n     * @return {string} groupId\n     */\n    echarts.disconnect = echarts.disConnect;\n\n    /**\n     * Dispose a chart instance\n     * @param  {module:echarts~ECharts|HTMLDomElement|string} chart\n     */\n    echarts.dispose = function (chart) {\n        if (typeof chart === 'string') {\n            chart = instances[chart];\n        }\n        else if (!(chart instanceof ECharts)){\n            // Try to treat as dom\n            chart = echarts.getInstanceByDom(chart);\n        }\n        if ((chart instanceof ECharts) && !chart.isDisposed()) {\n            chart.dispose();\n        }\n    };\n\n    /**\n     * @param  {HTMLDomElement} dom\n     * @return {echarts~ECharts}\n     */\n    echarts.getInstanceByDom = function (dom) {\n        var key;\n        if (dom.getAttribute) {\n            key = dom.getAttribute(DOM_ATTRIBUTE_KEY);\n        }\n        else {\n            key = dom[DOM_ATTRIBUTE_KEY];\n        }\n        return instances[key];\n    };\n\n    /**\n     * @param {string} key\n     * @return {echarts~ECharts}\n     */\n    echarts.getInstanceById = function (key) {\n        return instances[key];\n    };\n\n    /**\n     * Register theme\n     */\n    echarts.registerTheme = function (name, theme) {\n        themeStorage[name] = theme;\n    };\n\n    /**\n     * Register option preprocessor\n     * @param {Function} preprocessorFunc\n     */\n    echarts.registerPreprocessor = function (preprocessorFunc) {\n        optionPreprocessorFuncs.push(preprocessorFunc);\n    };\n\n    /**\n     * @param {number} [priority=1000]\n     * @param {Function} processorFunc\n     */\n    echarts.registerProcessor = function (priority, processorFunc) {\n        if (typeof priority === 'function') {\n            processorFunc = priority;\n            priority = PRIORITY_PROCESSOR_FILTER;\n        }\n        if (__DEV__) {\n            if (isNaN(priority)) {\n                throw new Error('Unkown processor priority');\n            }\n        }\n        dataProcessorFuncs.push({\n            prio: priority,\n            func: processorFunc\n        });\n    };\n\n    /**\n     * Register postUpdater\n     * @param {Function} postUpdateFunc\n     */\n    echarts.registerPostUpdate = function (postUpdateFunc) {\n        postUpdateFuncs.push(postUpdateFunc);\n    };\n\n    /**\n     * Usage:\n     * registerAction('someAction', 'someEvent', function () { ... });\n     * registerAction('someAction', function () { ... });\n     * registerAction(\n     *     {type: 'someAction', event: 'someEvent', update: 'updateView'},\n     *     function () { ... }\n     * );\n     *\n     * @param {(string|Object)} actionInfo\n     * @param {string} actionInfo.type\n     * @param {string} [actionInfo.event]\n     * @param {string} [actionInfo.update]\n     * @param {string} [eventName]\n     * @param {Function} action\n     */\n    echarts.registerAction = function (actionInfo, eventName, action) {\n        if (typeof eventName === 'function') {\n            action = eventName;\n            eventName = '';\n        }\n        var actionType = zrUtil.isObject(actionInfo)\n            ? actionInfo.type\n            : ([actionInfo, actionInfo = {\n                event: eventName\n            }][0]);\n\n        // Event name is all lowercase\n        actionInfo.event = (actionInfo.event || actionType).toLowerCase();\n        eventName = actionInfo.event;\n\n        // Validate action type and event name.\n        zrUtil.assert(ACTION_REG.test(actionType) && ACTION_REG.test(eventName));\n\n        if (!actions[actionType]) {\n            actions[actionType] = {action: action, actionInfo: actionInfo};\n        }\n        eventActionMap[eventName] = actionType;\n    };\n\n    /**\n     * @param {string} type\n     * @param {*} CoordinateSystem\n     */\n    echarts.registerCoordinateSystem = function (type, CoordinateSystem) {\n        CoordinateSystemManager.register(type, CoordinateSystem);\n    };\n\n    /**\n     * Layout is a special stage of visual encoding\n     * Most visual encoding like color are common for different chart\n     * But each chart has it's own layout algorithm\n     *\n     * @param {number} [priority=1000]\n     * @param {Function} layoutFunc\n     */\n    echarts.registerLayout = function (priority, layoutFunc) {\n        if (typeof priority === 'function') {\n            layoutFunc = priority;\n            priority = PRIORITY_VISUAL_LAYOUT;\n        }\n        if (__DEV__) {\n            if (isNaN(priority)) {\n                throw new Error('Unkown layout priority');\n            }\n        }\n        visualFuncs.push({\n            prio: priority,\n            func: layoutFunc,\n            isLayout: true\n        });\n    };\n\n    /**\n     * @param {number} [priority=3000]\n     * @param {Function} visualFunc\n     */\n    echarts.registerVisual = function (priority, visualFunc) {\n        if (typeof priority === 'function') {\n            visualFunc = priority;\n            priority = PRIORITY_VISUAL_CHART;\n        }\n        if (__DEV__) {\n            if (isNaN(priority)) {\n                throw new Error('Unkown visual priority');\n            }\n        }\n        visualFuncs.push({\n            prio: priority,\n            func: visualFunc\n        });\n    };\n\n    /**\n     * @param {string} name\n     */\n    echarts.registerLoading = function (name, loadingFx) {\n        loadingEffects[name] = loadingFx;\n    };\n\n    /**\n     * @param {Object} opts\n     * @param {string} [superClass]\n     */\n    echarts.extendComponentModel = function (opts/*, superClass*/) {\n        // var Clazz = ComponentModel;\n        // if (superClass) {\n        //     var classType = parseClassType(superClass);\n        //     Clazz = ComponentModel.getClass(classType.main, classType.sub, true);\n        // }\n        return ComponentModel.extend(opts);\n    };\n\n    /**\n     * @param {Object} opts\n     * @param {string} [superClass]\n     */\n    echarts.extendComponentView = function (opts/*, superClass*/) {\n        // var Clazz = ComponentView;\n        // if (superClass) {\n        //     var classType = parseClassType(superClass);\n        //     Clazz = ComponentView.getClass(classType.main, classType.sub, true);\n        // }\n        return ComponentView.extend(opts);\n    };\n\n    /**\n     * @param {Object} opts\n     * @param {string} [superClass]\n     */\n    echarts.extendSeriesModel = function (opts/*, superClass*/) {\n        // var Clazz = SeriesModel;\n        // if (superClass) {\n        //     superClass = 'series.' + superClass.replace('series.', '');\n        //     var classType = parseClassType(superClass);\n        //     Clazz = ComponentModel.getClass(classType.main, classType.sub, true);\n        // }\n        return SeriesModel.extend(opts);\n    };\n\n    /**\n     * @param {Object} opts\n     * @param {string} [superClass]\n     */\n    echarts.extendChartView = function (opts/*, superClass*/) {\n        // var Clazz = ChartView;\n        // if (superClass) {\n        //     superClass = superClass.replace('series.', '');\n        //     var classType = parseClassType(superClass);\n        //     Clazz = ChartView.getClass(classType.main, true);\n        // }\n        return ChartView.extend(opts);\n    };\n\n    /**\n     * ZRender need a canvas context to do measureText.\n     * But in node environment canvas may be created by node-canvas.\n     * So we need to specify how to create a canvas instead of using document.createElement('canvas')\n     *\n     * Be careful of using it in the browser.\n     *\n     * @param {Function} creator\n     * @example\n     *     var Canvas = require('canvas');\n     *     var echarts = require('echarts');\n     *     echarts.setCanvasCreator(function () {\n     *         // Small size is enough.\n     *         return new Canvas(32, 32);\n     *     });\n     */\n    echarts.setCanvasCreator = function (creator) {\n        zrUtil.createCanvas = creator;\n    };\n\n    echarts.registerVisual(PRIORITY_VISUAL_GLOBAL, require('./visual/seriesColor'));\n    echarts.registerPreprocessor(require('./preprocessor/backwardCompat'));\n    echarts.registerLoading('default', require('./loading/default'));\n\n    // Default action\n    echarts.registerAction({\n        type: 'highlight',\n        event: 'highlight',\n        update: 'highlight'\n    }, zrUtil.noop);\n    echarts.registerAction({\n        type: 'downplay',\n        event: 'downplay',\n        update: 'downplay'\n    }, zrUtil.noop);\n\n\n    // --------\n    // Exports\n    // --------\n    echarts.zrender = zrender;\n\n    echarts.List = require('./data/List');\n    echarts.Model = require('./model/Model');\n\n    echarts.Axis = require('./coord/Axis');\n\n    echarts.graphic = require('./util/graphic');\n    echarts.number = require('./util/number');\n    echarts.format = require('./util/format');\n    echarts.throttle = throttle.throttle;\n    echarts.matrix = require('zrender/lib/core/matrix');\n    echarts.vector = require('zrender/lib/core/vector');\n    echarts.color = require('zrender/lib/tool/color');\n\n    echarts.util = {};\n    each([\n            'map', 'each', 'filter', 'indexOf', 'inherits', 'reduce', 'filter',\n            'bind', 'curry', 'isArray', 'isString', 'isObject', 'isFunction',\n            'extend', 'defaults', 'clone', 'merge'\n        ],\n        function (name) {\n            echarts.util[name] = zrUtil[name];\n        }\n    );\n\n    echarts.helper = require('./helper');\n\n\n    // PRIORITY\n    echarts.PRIORITY = {\n        PROCESSOR: {\n            FILTER: PRIORITY_PROCESSOR_FILTER,\n            STATISTIC: PRIORITY_PROCESSOR_STATISTIC\n        },\n        VISUAL: {\n            LAYOUT: PRIORITY_VISUAL_LAYOUT,\n            GLOBAL: PRIORITY_VISUAL_GLOBAL,\n            CHART: PRIORITY_VISUAL_CHART,\n            COMPONENT: PRIORITY_VISUAL_COMPONENT,\n            BRUSH: PRIORITY_VISUAL_BRUSH\n        }\n    };\n\n    module.exports = echarts;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.6.1@echarts/lib/echarts.js\n// module id = Cwwa\n// module chunks = 0 1","\n    module.exports = {\n        /**\n         * 线段包含判断\n         * @param  {number}  x0\n         * @param  {number}  y0\n         * @param  {number}  x1\n         * @param  {number}  y1\n         * @param  {number}  lineWidth\n         * @param  {number}  x\n         * @param  {number}  y\n         * @return {boolean}\n         */\n        containStroke: function (x0, y0, x1, y1, lineWidth, x, y) {\n            if (lineWidth === 0) {\n                return false;\n            }\n            var _l = lineWidth;\n            var _a = 0;\n            var _b = x0;\n            // Quick reject\n            if (\n                (y > y0 + _l && y > y1 + _l)\n                || (y < y0 - _l && y < y1 - _l)\n                || (x > x0 + _l && x > x1 + _l)\n                || (x < x0 - _l && x < x1 - _l)\n            ) {\n                return false;\n            }\n\n            if (x0 !== x1) {\n                _a = (y0 - y1) / (x0 - x1);\n                _b = (x0 * y1 - x1 * y0) / (x0 - x1) ;\n            }\n            else {\n                return Math.abs(x - x0) <= _l / 2;\n            }\n            var tmp = _a * x - y + _b;\n            var _s = tmp * tmp / (_a * _a + 1);\n            return _s <= _l / 2 * _l / 2;\n        }\n    };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.5.1@zrender/lib/contain/line.js\n// module id = D2ou\n// module chunks = 0 1","\n\n    var Pattern = function (image, repeat) {\n        // Should do nothing more in this constructor. Because gradient can be\n        // declard by `color: {image: ...}`, where this constructor will not be called.\n\n        this.image = image;\n        this.repeat = repeat;\n\n        // Can be cloned\n        this.type = 'pattern';\n    };\n\n    Pattern.prototype.getCanvasPattern = function (ctx) {\n        return ctx.createPattern(this.image, this.repeat || 'repeat');\n    };\n\n    module.exports = Pattern;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.5.1@zrender/lib/graphic/Pattern.js\n// module id = D8ol\n// module chunks = 0 1","\n\n    var Group = require('zrender/lib/container/Group');\n    var componentUtil = require('../util/component');\n    var clazzUtil = require('../util/clazz');\n\n    var Component = function () {\n        /**\n         * @type {module:zrender/container/Group}\n         * @readOnly\n         */\n        this.group = new Group();\n\n        /**\n         * @type {string}\n         * @readOnly\n         */\n        this.uid = componentUtil.getUID('viewComponent');\n    };\n\n    Component.prototype = {\n\n        constructor: Component,\n\n        init: function (ecModel, api) {},\n\n        render: function (componentModel, ecModel, api, payload) {},\n\n        dispose: function () {}\n\n    };\n\n    var componentProto = Component.prototype;\n    componentProto.updateView\n        = componentProto.updateLayout\n        = componentProto.updateVisual\n        = function (seriesModel, ecModel, api, payload) {\n            // Do nothing;\n        };\n    // Enable Component.extend.\n    clazzUtil.enableClassExtend(Component);\n\n    // Enable capability of registerClass, getClass, hasClass, registerSubTypeDefaulter and so on.\n    clazzUtil.enableClassManagement(Component, {registerWhenExtend: true});\n\n    module.exports = Component;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.6.1@echarts/lib/view/Component.js\n// module id = D9oD\n// module chunks = 0 1","/**\n * @author Yi Shen(https://github.com/pissang)\n */\n\n\n    var vec2 = require('./vector');\n    var curve = require('./curve');\n\n    var bbox = {};\n    var mathMin = Math.min;\n    var mathMax = Math.max;\n    var mathSin = Math.sin;\n    var mathCos = Math.cos;\n\n    var start = vec2.create();\n    var end = vec2.create();\n    var extremity = vec2.create();\n\n    var PI2 = Math.PI * 2;\n    /**\n     * 从顶点数组中计算出最小包围盒，写入`min`和`max`中\n     * @module zrender/core/bbox\n     * @param {Array<Object>} points 顶点数组\n     * @param {number} min\n     * @param {number} max\n     */\n    bbox.fromPoints = function(points, min, max) {\n        if (points.length === 0) {\n            return;\n        }\n        var p = points[0];\n        var left = p[0];\n        var right = p[0];\n        var top = p[1];\n        var bottom = p[1];\n        var i;\n\n        for (i = 1; i < points.length; i++) {\n            p = points[i];\n            left = mathMin(left, p[0]);\n            right = mathMax(right, p[0]);\n            top = mathMin(top, p[1]);\n            bottom = mathMax(bottom, p[1]);\n        }\n\n        min[0] = left;\n        min[1] = top;\n        max[0] = right;\n        max[1] = bottom;\n    };\n\n    /**\n     * @memberOf module:zrender/core/bbox\n     * @param {number} x0\n     * @param {number} y0\n     * @param {number} x1\n     * @param {number} y1\n     * @param {Array.<number>} min\n     * @param {Array.<number>} max\n     */\n    bbox.fromLine = function (x0, y0, x1, y1, min, max) {\n        min[0] = mathMin(x0, x1);\n        min[1] = mathMin(y0, y1);\n        max[0] = mathMax(x0, x1);\n        max[1] = mathMax(y0, y1);\n    };\n\n    var xDim = [];\n    var yDim = [];\n    /**\n     * 从三阶贝塞尔曲线(p0, p1, p2, p3)中计算出最小包围盒，写入`min`和`max`中\n     * @memberOf module:zrender/core/bbox\n     * @param {number} x0\n     * @param {number} y0\n     * @param {number} x1\n     * @param {number} y1\n     * @param {number} x2\n     * @param {number} y2\n     * @param {number} x3\n     * @param {number} y3\n     * @param {Array.<number>} min\n     * @param {Array.<number>} max\n     */\n    bbox.fromCubic = function(\n        x0, y0, x1, y1, x2, y2, x3, y3, min, max\n    ) {\n        var cubicExtrema = curve.cubicExtrema;\n        var cubicAt = curve.cubicAt;\n        var i;\n        var n = cubicExtrema(x0, x1, x2, x3, xDim);\n        min[0] = Infinity;\n        min[1] = Infinity;\n        max[0] = -Infinity;\n        max[1] = -Infinity;\n\n        for (i = 0; i < n; i++) {\n            var x = cubicAt(x0, x1, x2, x3, xDim[i]);\n            min[0] = mathMin(x, min[0]);\n            max[0] = mathMax(x, max[0]);\n        }\n        n = cubicExtrema(y0, y1, y2, y3, yDim);\n        for (i = 0; i < n; i++) {\n            var y = cubicAt(y0, y1, y2, y3, yDim[i]);\n            min[1] = mathMin(y, min[1]);\n            max[1] = mathMax(y, max[1]);\n        }\n\n        min[0] = mathMin(x0, min[0]);\n        max[0] = mathMax(x0, max[0]);\n        min[0] = mathMin(x3, min[0]);\n        max[0] = mathMax(x3, max[0]);\n\n        min[1] = mathMin(y0, min[1]);\n        max[1] = mathMax(y0, max[1]);\n        min[1] = mathMin(y3, min[1]);\n        max[1] = mathMax(y3, max[1]);\n    };\n\n    /**\n     * 从二阶贝塞尔曲线(p0, p1, p2)中计算出最小包围盒，写入`min`和`max`中\n     * @memberOf module:zrender/core/bbox\n     * @param {number} x0\n     * @param {number} y0\n     * @param {number} x1\n     * @param {number} y1\n     * @param {number} x2\n     * @param {number} y2\n     * @param {Array.<number>} min\n     * @param {Array.<number>} max\n     */\n    bbox.fromQuadratic = function(x0, y0, x1, y1, x2, y2, min, max) {\n        var quadraticExtremum = curve.quadraticExtremum;\n        var quadraticAt = curve.quadraticAt;\n        // Find extremities, where derivative in x dim or y dim is zero\n        var tx =\n            mathMax(\n                mathMin(quadraticExtremum(x0, x1, x2), 1), 0\n            );\n        var ty =\n            mathMax(\n                mathMin(quadraticExtremum(y0, y1, y2), 1), 0\n            );\n\n        var x = quadraticAt(x0, x1, x2, tx);\n        var y = quadraticAt(y0, y1, y2, ty);\n\n        min[0] = mathMin(x0, x2, x);\n        min[1] = mathMin(y0, y2, y);\n        max[0] = mathMax(x0, x2, x);\n        max[1] = mathMax(y0, y2, y);\n    };\n\n    /**\n     * 从圆弧中计算出最小包围盒，写入`min`和`max`中\n     * @method\n     * @memberOf module:zrender/core/bbox\n     * @param {number} x\n     * @param {number} y\n     * @param {number} rx\n     * @param {number} ry\n     * @param {number} startAngle\n     * @param {number} endAngle\n     * @param {number} anticlockwise\n     * @param {Array.<number>} min\n     * @param {Array.<number>} max\n     */\n    bbox.fromArc = function (\n        x, y, rx, ry, startAngle, endAngle, anticlockwise, min, max\n    ) {\n        var vec2Min = vec2.min;\n        var vec2Max = vec2.max;\n\n        var diff = Math.abs(startAngle - endAngle);\n\n\n        if (diff % PI2 < 1e-4 && diff > 1e-4) {\n            // Is a circle\n            min[0] = x - rx;\n            min[1] = y - ry;\n            max[0] = x + rx;\n            max[1] = y + ry;\n            return;\n        }\n\n        start[0] = mathCos(startAngle) * rx + x;\n        start[1] = mathSin(startAngle) * ry + y;\n\n        end[0] = mathCos(endAngle) * rx + x;\n        end[1] = mathSin(endAngle) * ry + y;\n\n        vec2Min(min, start, end);\n        vec2Max(max, start, end);\n\n        // Thresh to [0, Math.PI * 2]\n        startAngle = startAngle % (PI2);\n        if (startAngle < 0) {\n            startAngle = startAngle + PI2;\n        }\n        endAngle = endAngle % (PI2);\n        if (endAngle < 0) {\n            endAngle = endAngle + PI2;\n        }\n\n        if (startAngle > endAngle && !anticlockwise) {\n            endAngle += PI2;\n        }\n        else if (startAngle < endAngle && anticlockwise) {\n            startAngle += PI2;\n        }\n        if (anticlockwise) {\n            var tmp = endAngle;\n            endAngle = startAngle;\n            startAngle = tmp;\n        }\n\n        // var number = 0;\n        // var step = (anticlockwise ? -Math.PI : Math.PI) / 2;\n        for (var angle = 0; angle < endAngle; angle += Math.PI / 2) {\n            if (angle > startAngle) {\n                extremity[0] = mathCos(angle) * rx + x;\n                extremity[1] = mathSin(angle) * ry + y;\n\n                vec2Min(min, extremity, min);\n                vec2Max(max, extremity, max);\n            }\n        }\n    };\n\n    module.exports = bbox;\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.5.1@zrender/lib/core/bbox.js\n// module id = DAQg\n// module chunks = 0 1","/**\n * @module echarts/component/helper/RoamController\n */\n\n\n    var Eventful = require('zrender/lib/mixin/Eventful');\n    var zrUtil = require('zrender/lib/core/util');\n    var eventTool = require('zrender/lib/core/event');\n    var interactionMutex = require('./interactionMutex');\n\n    /**\n     * @alias module:echarts/component/helper/RoamController\n     * @constructor\n     * @mixin {module:zrender/mixin/Eventful}\n     *\n     * @param {module:zrender/zrender~ZRender} zr\n     */\n    function RoamController(zr) {\n\n        /**\n         * @type {Function}\n         */\n        this.pointerChecker;\n\n        /**\n         * @type {module:zrender}\n         */\n        this._zr = zr;\n\n        /**\n         * @type {Object}\n         */\n        this._opt = {};\n\n        // Avoid two roamController bind the same handler\n        var bind = zrUtil.bind;\n        var mousedownHandler = bind(mousedown, this);\n        var mousemoveHandler = bind(mousemove, this);\n        var mouseupHandler = bind(mouseup, this);\n        var mousewheelHandler = bind(mousewheel, this);\n        var pinchHandler = bind(pinch, this);\n\n        Eventful.call(this);\n\n        /**\n         * @param {Function} pointerChecker\n         *                   input: x, y\n         *                   output: boolean\n         */\n        this.setPointerChecker = function (pointerChecker) {\n            this.pointerChecker = pointerChecker;\n        };\n\n        /**\n         * Notice: only enable needed types. For example, if 'zoom'\n         * is not needed, 'zoom' should not be enabled, otherwise\n         * default mousewheel behaviour (scroll page) will be disabled.\n         *\n         * @param  {boolean|string} [controlType=true] Specify the control type,\n         *                          which can be null/undefined or true/false\n         *                          or 'pan/move' or 'zoom'/'scale'\n         * @param {Object} [opt]\n         * @param {Object} [opt.zoomOnMouseWheel=true]\n         * @param {Object} [opt.moveOnMouseMove=true]\n         * @param {Object} [opt.preventDefaultMouseMove=true] When pan.\n         */\n        this.enable = function (controlType, opt) {\n\n            // Disable previous first\n            this.disable();\n\n            this._opt = zrUtil.defaults(zrUtil.clone(opt) || {}, {\n                zoomOnMouseWheel: true,\n                moveOnMouseMove: true,\n                preventDefaultMouseMove: true\n            });\n\n            if (controlType == null) {\n                controlType = true;\n            }\n\n            if (controlType === true || (controlType === 'move' || controlType === 'pan')) {\n                zr.on('mousedown', mousedownHandler);\n                zr.on('mousemove', mousemoveHandler);\n                zr.on('mouseup', mouseupHandler);\n            }\n            if (controlType === true || (controlType === 'scale' || controlType === 'zoom')) {\n                zr.on('mousewheel', mousewheelHandler);\n                zr.on('pinch', pinchHandler);\n            }\n        };\n\n        this.disable = function () {\n            zr.off('mousedown', mousedownHandler);\n            zr.off('mousemove', mousemoveHandler);\n            zr.off('mouseup', mouseupHandler);\n            zr.off('mousewheel', mousewheelHandler);\n            zr.off('pinch', pinchHandler);\n        };\n\n        this.dispose = this.disable;\n\n        this.isDragging = function () {\n            return this._dragging;\n        };\n\n        this.isPinching = function () {\n            return this._pinching;\n        };\n    }\n\n    zrUtil.mixin(RoamController, Eventful);\n\n\n    function mousedown(e) {\n        if (e.target && e.target.draggable) {\n            return;\n        }\n\n        var x = e.offsetX;\n        var y = e.offsetY;\n\n        // Only check on mosedown, but not mousemove.\n        // Mouse can be out of target when mouse moving.\n        if (this.pointerChecker && this.pointerChecker(e, x, y)) {\n            this._x = x;\n            this._y = y;\n            this._dragging = true;\n        }\n    }\n\n    function mousemove(e) {\n        if (!checkKeyBinding(this, 'moveOnMouseMove', e) || !this._dragging) {\n            return;\n        }\n\n        if (e.gestureEvent === 'pinch') {\n            return;\n        }\n\n        if (interactionMutex.isTaken(this._zr, 'globalPan')) {\n            return;\n        }\n\n        var x = e.offsetX;\n        var y = e.offsetY;\n\n        var oldX = this._x;\n        var oldY = this._y;\n\n        var dx = x - oldX;\n        var dy = y - oldY;\n\n        this._x = x;\n        this._y = y;\n\n        this._opt.preventDefaultMouseMove && eventTool.stop(e.event);\n\n        this.trigger('pan', dx, dy, oldX, oldY, x, y);\n    }\n\n    function mouseup(e) {\n        this._dragging = false;\n    }\n\n    function mousewheel(e) {\n        // wheelDelta maybe -0 in chrome mac.\n        if (!checkKeyBinding(this, 'zoomOnMouseWheel', e) || e.wheelDelta === 0) {\n            return;\n        }\n\n        // Convenience:\n        // Mac and VM Windows on Mac: scroll up: zoom out.\n        // Windows: scroll up: zoom in.\n        var zoomDelta = e.wheelDelta > 0 ? 1.1 : 1 / 1.1;\n        zoom.call(this, e, zoomDelta, e.offsetX, e.offsetY);\n    }\n\n    function pinch(e) {\n        if (interactionMutex.isTaken(this._zr, 'globalPan')) {\n            return;\n        }\n        var zoomDelta = e.pinchScale > 1 ? 1.1 : 1 / 1.1;\n        zoom.call(this, e, zoomDelta, e.pinchX, e.pinchY);\n    }\n\n    function zoom(e, zoomDelta, zoomX, zoomY) {\n        if (this.pointerChecker && this.pointerChecker(e, zoomX, zoomY)) {\n            // When mouse is out of roamController rect,\n            // default befavoius should not be be disabled, otherwise\n            // page sliding is disabled, contrary to expectation.\n            eventTool.stop(e.event);\n\n            this.trigger('zoom', zoomDelta, zoomX, zoomY);\n        }\n    }\n\n    function checkKeyBinding(roamController, prop, e) {\n        var setting = roamController._opt[prop];\n        return setting\n            && (!zrUtil.isString(setting) || e.event[setting + 'Key']);\n    }\n\n    module.exports = RoamController;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.6.1@echarts/lib/component/helper/RoamController.js\n// module id = DQU+\n// module chunks = 0 1","\n\n    var cursorHelper = require('./cursorHelper');\n    var BoundingRect = require('zrender/lib/core/BoundingRect');\n    var graphicUtil = require('../../util/graphic');\n\n    var helper = {};\n\n    helper.makeRectPanelClipPath = function (rect) {\n        rect = normalizeRect(rect);\n        return function (localPoints, transform) {\n            return graphicUtil.clipPointsByRect(localPoints, rect);\n        };\n    };\n\n    helper.makeLinearBrushOtherExtent = function (rect, specifiedXYIndex) {\n        rect = normalizeRect(rect);\n        return function (xyIndex) {\n            var idx = specifiedXYIndex != null ? specifiedXYIndex : xyIndex;\n            var brushWidth = idx ? rect.width : rect.height;\n            var base = idx ? rect.x : rect.y;\n            return [base, base + (brushWidth || 0)];\n        };\n    };\n\n    helper.makeRectIsTargetByCursor = function (rect, api, targetModel) {\n        rect = normalizeRect(rect);\n        return function (e, localCursorPoint, transform) {\n            return rect.contain(localCursorPoint[0], localCursorPoint[1])\n                && !cursorHelper.onIrrelevantElement(e, api, targetModel);\n        };\n    };\n\n    // Consider width/height is negative.\n    function normalizeRect(rect) {\n        return BoundingRect.create(rect);\n    }\n\n    module.exports = helper;\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.6.1@echarts/lib/component/helper/brushHelper.js\n// module id = EV4n\n// module chunks = 0 1","\n   module.exports = function (ecModel) {\n        var legendModels = ecModel.findComponents({\n            mainType: 'legend'\n        });\n        if (legendModels && legendModels.length) {\n            ecModel.filterSeries(function (series) {\n                // If in any legend component the status is not selected.\n                // Because in legend series is assumed selected when it is not in the legend data.\n                for (var i = 0; i < legendModels.length; i++) {\n                    if (!legendModels[i].isSelected(series.name)) {\n                        return false;\n                    }\n                }\n                return true;\n            });\n        }\n    };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.6.1@echarts/lib/component/legend/legendFilter.js\n// module id = EXqP\n// module chunks = 0 1","\n\n    var zrUtil = require('zrender/lib/core/util');\n\n    require('../coord/cartesian/Grid');\n\n    require('./bar/BarSeries');\n    require('./bar/BarView');\n\n    var barLayoutGrid = require('../layout/barGrid');\n    var echarts = require('../echarts');\n\n    echarts.registerLayout(zrUtil.curry(barLayoutGrid, 'bar'));\n\n    // Visual coding for legend\n    echarts.registerVisual(function (ecModel) {\n        ecModel.eachSeriesByType('bar', function (seriesModel) {\n            var data = seriesModel.getData();\n            data.setVisual('legendSymbol', 'roundRect');\n        });\n    });\n\n    // In case developer forget to include grid component\n    require('../component/gridSimple');\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.6.1@echarts/lib/chart/bar.js\n// module id = EcM6\n// module chunks = 0 1","/**\n * 圆环\n * @module zrender/graphic/shape/Ring\n */\n\n\n    module.exports = require('../Path').extend({\n\n        type: 'ring',\n\n        shape: {\n            cx: 0,\n            cy: 0,\n            r: 0,\n            r0: 0\n        },\n\n        buildPath: function (ctx, shape) {\n            var x = shape.cx;\n            var y = shape.cy;\n            var PI2 = Math.PI * 2;\n            ctx.moveTo(x + shape.r, y);\n            ctx.arc(x, y, shape.r, 0, PI2, false);\n            ctx.moveTo(x + shape.r0, y);\n            ctx.arc(x, y, shape.r0, 0, PI2, true);\n        }\n    });\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.5.1@zrender/lib/graphic/shape/Ring.js\n// module id = EtPY\n// module chunks = 0 1","/**\n * ECharts option manager\n *\n * @module {echarts/model/OptionManager}\n */\n\n\n\n    var zrUtil = require('zrender/lib/core/util');\n    var modelUtil = require('../util/model');\n    var ComponentModel = require('./Component');\n    var each = zrUtil.each;\n    var clone = zrUtil.clone;\n    var map = zrUtil.map;\n    var merge = zrUtil.merge;\n\n    var QUERY_REG = /^(min|max)?(.+)$/;\n\n    /**\n     * TERM EXPLANATIONS:\n     *\n     * [option]:\n     *\n     *     An object that contains definitions of components. For example:\n     *     var option = {\n     *         title: {...},\n     *         legend: {...},\n     *         visualMap: {...},\n     *         series: [\n     *             {data: [...]},\n     *             {data: [...]},\n     *             ...\n     *         ]\n     *     };\n     *\n     * [rawOption]:\n     *\n     *     An object input to echarts.setOption. 'rawOption' may be an\n     *     'option', or may be an object contains multi-options. For example:\n     *     var option = {\n     *         baseOption: {\n     *             title: {...},\n     *             legend: {...},\n     *             series: [\n     *                 {data: [...]},\n     *                 {data: [...]},\n     *                 ...\n     *             ]\n     *         },\n     *         timeline: {...},\n     *         options: [\n     *             {title: {...}, series: {data: [...]}},\n     *             {title: {...}, series: {data: [...]}},\n     *             ...\n     *         ],\n     *         media: [\n     *             {\n     *                 query: {maxWidth: 320},\n     *                 option: {series: {x: 20}, visualMap: {show: false}}\n     *             },\n     *             {\n     *                 query: {minWidth: 320, maxWidth: 720},\n     *                 option: {series: {x: 500}, visualMap: {show: true}}\n     *             },\n     *             {\n     *                 option: {series: {x: 1200}, visualMap: {show: true}}\n     *             }\n     *         ]\n     *     };\n     *\n     * @alias module:echarts/model/OptionManager\n     * @param {module:echarts/ExtensionAPI} api\n     */\n    function OptionManager(api) {\n\n        /**\n         * @private\n         * @type {module:echarts/ExtensionAPI}\n         */\n        this._api = api;\n\n        /**\n         * @private\n         * @type {Array.<number>}\n         */\n        this._timelineOptions = [];\n\n        /**\n         * @private\n         * @type {Array.<Object>}\n         */\n        this._mediaList = [];\n\n        /**\n         * @private\n         * @type {Object}\n         */\n        this._mediaDefault;\n\n        /**\n         * -1, means default.\n         * empty means no media.\n         * @private\n         * @type {Array.<number>}\n         */\n        this._currentMediaIndices = [];\n\n        /**\n         * @private\n         * @type {Object}\n         */\n        this._optionBackup;\n\n        /**\n         * @private\n         * @type {Object}\n         */\n        this._newBaseOption;\n    }\n\n    // timeline.notMerge is not supported in ec3. Firstly there is rearly\n    // case that notMerge is needed. Secondly supporting 'notMerge' requires\n    // rawOption cloned and backuped when timeline changed, which does no\n    // good to performance. What's more, that both timeline and setOption\n    // method supply 'notMerge' brings complex and some problems.\n    // Consider this case:\n    // (step1) chart.setOption({timeline: {notMerge: false}, ...}, false);\n    // (step2) chart.setOption({timeline: {notMerge: true}, ...}, false);\n\n    OptionManager.prototype = {\n\n        constructor: OptionManager,\n\n        /**\n         * @public\n         * @param {Object} rawOption Raw option.\n         * @param {module:echarts/model/Global} ecModel\n         * @param {Array.<Function>} optionPreprocessorFuncs\n         * @return {Object} Init option\n         */\n        setOption: function (rawOption, optionPreprocessorFuncs) {\n            rawOption = clone(rawOption, true);\n\n            // FIXME\n            // 如果 timeline options 或者 media 中设置了某个属性，而baseOption中没有设置，则进行警告。\n\n            var oldOptionBackup = this._optionBackup;\n            var newParsedOption = parseRawOption.call(\n                this, rawOption, optionPreprocessorFuncs, !oldOptionBackup\n            );\n            this._newBaseOption = newParsedOption.baseOption;\n\n            // For setOption at second time (using merge mode);\n            if (oldOptionBackup) {\n                // Only baseOption can be merged.\n                mergeOption(oldOptionBackup.baseOption, newParsedOption.baseOption);\n\n                // For simplicity, timeline options and media options do not support merge,\n                // that is, if you `setOption` twice and both has timeline options, the latter\n                // timeline opitons will not be merged to the formers, but just substitude them.\n                if (newParsedOption.timelineOptions.length) {\n                    oldOptionBackup.timelineOptions = newParsedOption.timelineOptions;\n                }\n                if (newParsedOption.mediaList.length) {\n                    oldOptionBackup.mediaList = newParsedOption.mediaList;\n                }\n                if (newParsedOption.mediaDefault) {\n                    oldOptionBackup.mediaDefault = newParsedOption.mediaDefault;\n                }\n            }\n            else {\n                this._optionBackup = newParsedOption;\n            }\n        },\n\n        /**\n         * @param {boolean} isRecreate\n         * @return {Object}\n         */\n        mountOption: function (isRecreate) {\n            var optionBackup = this._optionBackup;\n\n            // TODO\n            // 如果没有reset功能则不clone。\n\n            this._timelineOptions = map(optionBackup.timelineOptions, clone);\n            this._mediaList = map(optionBackup.mediaList, clone);\n            this._mediaDefault = clone(optionBackup.mediaDefault);\n            this._currentMediaIndices = [];\n\n            return clone(isRecreate\n                // this._optionBackup.baseOption, which is created at the first `setOption`\n                // called, and is merged into every new option by inner method `mergeOption`\n                // each time `setOption` called, can be only used in `isRecreate`, because\n                // its reliability is under suspicion. In other cases option merge is\n                // performed by `model.mergeOption`.\n                ? optionBackup.baseOption : this._newBaseOption\n            );\n        },\n\n        /**\n         * @param {module:echarts/model/Global} ecModel\n         * @return {Object}\n         */\n        getTimelineOption: function (ecModel) {\n            var option;\n            var timelineOptions = this._timelineOptions;\n\n            if (timelineOptions.length) {\n                // getTimelineOption can only be called after ecModel inited,\n                // so we can get currentIndex from timelineModel.\n                var timelineModel = ecModel.getComponent('timeline');\n                if (timelineModel) {\n                    option = clone(\n                        timelineOptions[timelineModel.getCurrentIndex()],\n                        true\n                    );\n                }\n            }\n\n            return option;\n        },\n\n        /**\n         * @param {module:echarts/model/Global} ecModel\n         * @return {Array.<Object>}\n         */\n        getMediaOption: function (ecModel) {\n            var ecWidth = this._api.getWidth();\n            var ecHeight = this._api.getHeight();\n            var mediaList = this._mediaList;\n            var mediaDefault = this._mediaDefault;\n            var indices = [];\n            var result = [];\n\n            // No media defined.\n            if (!mediaList.length && !mediaDefault) {\n                return result;\n            }\n\n            // Multi media may be applied, the latter defined media has higher priority.\n            for (var i = 0, len = mediaList.length; i < len; i++) {\n                if (applyMediaQuery(mediaList[i].query, ecWidth, ecHeight)) {\n                    indices.push(i);\n                }\n            }\n\n            // FIXME\n            // 是否mediaDefault应该强制用户设置，否则可能修改不能回归。\n            if (!indices.length && mediaDefault) {\n                indices = [-1];\n            }\n\n            if (indices.length && !indicesEquals(indices, this._currentMediaIndices)) {\n                result = map(indices, function (index) {\n                    return clone(\n                        index === -1 ? mediaDefault.option : mediaList[index].option\n                    );\n                });\n            }\n            // Otherwise return nothing.\n\n            this._currentMediaIndices = indices;\n\n            return result;\n        }\n    };\n\n    function parseRawOption(rawOption, optionPreprocessorFuncs, isNew) {\n        var timelineOptions = [];\n        var mediaList = [];\n        var mediaDefault;\n        var baseOption;\n\n        // Compatible with ec2.\n        var timelineOpt = rawOption.timeline;\n\n        if (rawOption.baseOption) {\n            baseOption = rawOption.baseOption;\n        }\n\n        // For timeline\n        if (timelineOpt || rawOption.options) {\n            baseOption = baseOption || {};\n            timelineOptions = (rawOption.options || []).slice();\n        }\n\n        // For media query\n        if (rawOption.media) {\n            baseOption = baseOption || {};\n            var media = rawOption.media;\n            each(media, function (singleMedia) {\n                if (singleMedia && singleMedia.option) {\n                    if (singleMedia.query) {\n                        mediaList.push(singleMedia);\n                    }\n                    else if (!mediaDefault) {\n                        // Use the first media default.\n                        mediaDefault = singleMedia;\n                    }\n                }\n            });\n        }\n\n        // For normal option\n        if (!baseOption) {\n            baseOption = rawOption;\n        }\n\n        // Set timelineOpt to baseOption in ec3,\n        // which is convenient for merge option.\n        if (!baseOption.timeline) {\n            baseOption.timeline = timelineOpt;\n        }\n\n        // Preprocess.\n        each([baseOption].concat(timelineOptions)\n            .concat(zrUtil.map(mediaList, function (media) {\n                return media.option;\n            })),\n            function (option) {\n                each(optionPreprocessorFuncs, function (preProcess) {\n                    preProcess(option, isNew);\n                });\n            }\n        );\n\n        return {\n            baseOption: baseOption,\n            timelineOptions: timelineOptions,\n            mediaDefault: mediaDefault,\n            mediaList: mediaList\n        };\n    }\n\n    /**\n     * @see <http://www.w3.org/TR/css3-mediaqueries/#media1>\n     * Support: width, height, aspectRatio\n     * Can use max or min as prefix.\n     */\n    function applyMediaQuery(query, ecWidth, ecHeight) {\n        var realMap = {\n            width: ecWidth,\n            height: ecHeight,\n            aspectratio: ecWidth / ecHeight // lowser case for convenientce.\n        };\n\n        var applicatable = true;\n\n        zrUtil.each(query, function (value, attr) {\n            var matched = attr.match(QUERY_REG);\n\n            if (!matched || !matched[1] || !matched[2]) {\n                return;\n            }\n\n            var operator = matched[1];\n            var realAttr = matched[2].toLowerCase();\n\n            if (!compare(realMap[realAttr], value, operator)) {\n                applicatable = false;\n            }\n        });\n\n        return applicatable;\n    }\n\n    function compare(real, expect, operator) {\n        if (operator === 'min') {\n            return real >= expect;\n        }\n        else if (operator === 'max') {\n            return real <= expect;\n        }\n        else { // Equals\n            return real === expect;\n        }\n    }\n\n    function indicesEquals(indices1, indices2) {\n        // indices is always order by asc and has only finite number.\n        return indices1.join(',') === indices2.join(',');\n    }\n\n    /**\n     * Consider case:\n     * `chart.setOption(opt1);`\n     * Then user do some interaction like dataZoom, dataView changing.\n     * `chart.setOption(opt2);`\n     * Then user press 'reset button' in toolbox.\n     *\n     * After doing that all of the interaction effects should be reset, the\n     * chart should be the same as the result of invoke\n     * `chart.setOption(opt1); chart.setOption(opt2);`.\n     *\n     * Although it is not able ensure that\n     * `chart.setOption(opt1); chart.setOption(opt2);` is equivalents to\n     * `chart.setOption(merge(opt1, opt2));` exactly,\n     * this might be the only simple way to implement that feature.\n     *\n     * MEMO: We've considered some other approaches:\n     * 1. Each model handle its self restoration but not uniform treatment.\n     *     (Too complex in logic and error-prone)\n     * 2. Use a shadow ecModel. (Performace expensive)\n     */\n    function mergeOption(oldOption, newOption) {\n        newOption = newOption || {};\n\n        each(newOption, function (newCptOpt, mainType) {\n            if (newCptOpt == null) {\n                return;\n            }\n\n            var oldCptOpt = oldOption[mainType];\n\n            if (!ComponentModel.hasClass(mainType)) {\n                oldOption[mainType] = merge(oldCptOpt, newCptOpt, true);\n            }\n            else {\n                newCptOpt = modelUtil.normalizeToArray(newCptOpt);\n                oldCptOpt = modelUtil.normalizeToArray(oldCptOpt);\n\n                var mapResult = modelUtil.mappingToExists(oldCptOpt, newCptOpt);\n\n                oldOption[mainType] = map(mapResult, function (item) {\n                    return (item.option && item.exist)\n                        ? merge(item.exist, item.option, true)\n                        : (item.exist || item.option);\n                });\n            }\n        });\n    }\n\n    module.exports = OptionManager;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.6.1@echarts/lib/model/OptionManager.js\n// module id = Fhmo\n// module chunks = 0 1","\n\n    var zrUtil = require('zrender/lib/core/util');\n\n    var POSSIBLE_STYLES = [\n        'areaStyle', 'lineStyle', 'nodeStyle', 'linkStyle',\n        'chordStyle', 'label', 'labelLine'\n    ];\n\n    function compatItemStyle(opt) {\n        var itemStyleOpt = opt && opt.itemStyle;\n        if (itemStyleOpt) {\n            zrUtil.each(POSSIBLE_STYLES, function (styleName) {\n                var normalItemStyleOpt = itemStyleOpt.normal;\n                var emphasisItemStyleOpt = itemStyleOpt.emphasis;\n                if (normalItemStyleOpt && normalItemStyleOpt[styleName]) {\n                    opt[styleName] = opt[styleName] || {};\n                    if (!opt[styleName].normal) {\n                        opt[styleName].normal = normalItemStyleOpt[styleName];\n                    }\n                    else {\n                        zrUtil.merge(opt[styleName].normal, normalItemStyleOpt[styleName]);\n                    }\n                    normalItemStyleOpt[styleName] = null;\n                }\n                if (emphasisItemStyleOpt && emphasisItemStyleOpt[styleName]) {\n                    opt[styleName] = opt[styleName] || {};\n                    if (!opt[styleName].emphasis) {\n                        opt[styleName].emphasis = emphasisItemStyleOpt[styleName];\n                    }\n                    else {\n                        zrUtil.merge(opt[styleName].emphasis, emphasisItemStyleOpt[styleName]);\n                    }\n                    emphasisItemStyleOpt[styleName] = null;\n                }\n            });\n        }\n    }\n\n    module.exports = function (seriesOpt) {\n        if (!seriesOpt) {\n            return;\n        }\n        compatItemStyle(seriesOpt);\n        compatItemStyle(seriesOpt.markPoint);\n        compatItemStyle(seriesOpt.markLine);\n        var data = seriesOpt.data;\n        if (data) {\n            for (var i = 0; i < data.length; i++) {\n                compatItemStyle(data[i]);\n            }\n            // mark point data\n            var markPoint = seriesOpt.markPoint;\n            if (markPoint && markPoint.data) {\n                var mpData = markPoint.data;\n                for (var i = 0; i < mpData.length; i++) {\n                    compatItemStyle(mpData[i]);\n                }\n            }\n            // mark line data\n            var markLine = seriesOpt.markLine;\n            if (markLine && markLine.data) {\n                var mlData = markLine.data;\n                for (var i = 0; i < mlData.length; i++) {\n                    if (zrUtil.isArray(mlData[i])) {\n                        compatItemStyle(mlData[i][0]);\n                        compatItemStyle(mlData[i][1]);\n                    }\n                    else {\n                        compatItemStyle(mlData[i]);\n                    }\n                }\n            }\n        }\n    };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.6.1@echarts/lib/preprocessor/helper/compatStyle.js\n// module id = FjKD\n// module chunks = 0 1","'use strict';\n\n\n    var zrUtil = require('zrender/lib/core/util');\n\n    function MagicType(model) {\n        this.model = model;\n    }\n\n    MagicType.defaultOption = {\n        show: true,\n        type: [],\n        // Icon group\n        icon: {\n            line: 'M4.1,28.9h7.1l9.3-22l7.4,38l9.7-19.7l3,12.8h14.9M4.1,58h51.4',\n            bar: 'M6.7,22.9h10V48h-10V22.9zM24.9,13h10v35h-10V13zM43.2,2h10v46h-10V2zM3.1,58h53.7',\n            stack: 'M8.2,38.4l-8.4,4.1l30.6,15.3L60,42.5l-8.1-4.1l-21.5,11L8.2,38.4z M51.9,30l-8.1,4.2l-13.4,6.9l-13.9-6.9L8.2,30l-8.4,4.2l8.4,4.2l22.2,11l21.5-11l8.1-4.2L51.9,30z M51.9,21.7l-8.1,4.2L35.7,30l-5.3,2.8L24.9,30l-8.4-4.1l-8.3-4.2l-8.4,4.2L8.2,30l8.3,4.2l13.9,6.9l13.4-6.9l8.1-4.2l8.1-4.1L51.9,21.7zM30.4,2.2L-0.2,17.5l8.4,4.1l8.3,4.2l8.4,4.2l5.5,2.7l5.3-2.7l8.1-4.2l8.1-4.2l8.1-4.1L30.4,2.2z', // jshint ignore:line\n            tiled: 'M2.3,2.2h22.8V25H2.3V2.2z M35,2.2h22.8V25H35V2.2zM2.3,35h22.8v22.8H2.3V35z M35,35h22.8v22.8H35V35z'\n        },\n        title: {\n            line: '切换为折线图',\n            bar: '切换为柱状图',\n            stack: '切换为堆叠',\n            tiled: '切换为平铺'\n        },\n        option: {},\n        seriesIndex: {}\n    };\n\n    var proto = MagicType.prototype;\n\n    proto.getIcons = function () {\n        var model = this.model;\n        var availableIcons = model.get('icon');\n        var icons = {};\n        zrUtil.each(model.get('type'), function (type) {\n            if (availableIcons[type]) {\n                icons[type] = availableIcons[type];\n            }\n        });\n        return icons;\n    };\n\n    var seriesOptGenreator = {\n        'line': function (seriesType, seriesId, seriesModel, model) {\n            if (seriesType === 'bar') {\n                return zrUtil.merge({\n                    id: seriesId,\n                    type: 'line',\n                    // Preserve data related option\n                    data: seriesModel.get('data'),\n                    stack: seriesModel.get('stack'),\n                    markPoint: seriesModel.get('markPoint'),\n                    markLine: seriesModel.get('markLine')\n                }, model.get('option.line') || {}, true);\n            }\n        },\n        'bar': function (seriesType, seriesId, seriesModel, model) {\n            if (seriesType === 'line') {\n                return zrUtil.merge({\n                    id: seriesId,\n                    type: 'bar',\n                    // Preserve data related option\n                    data: seriesModel.get('data'),\n                    stack: seriesModel.get('stack'),\n                    markPoint: seriesModel.get('markPoint'),\n                    markLine: seriesModel.get('markLine')\n                }, model.get('option.bar') || {}, true);\n            }\n        },\n        'stack': function (seriesType, seriesId, seriesModel, model) {\n            if (seriesType === 'line' || seriesType === 'bar') {\n                return zrUtil.merge({\n                    id: seriesId,\n                    stack: '__ec_magicType_stack__'\n                }, model.get('option.stack') || {}, true);\n            }\n        },\n        'tiled': function (seriesType, seriesId, seriesModel, model) {\n            if (seriesType === 'line' || seriesType === 'bar') {\n                return zrUtil.merge({\n                    id: seriesId,\n                    stack: ''\n                }, model.get('option.tiled') || {}, true);\n            }\n        }\n    };\n\n    var radioTypes = [\n        ['line', 'bar'],\n        ['stack', 'tiled']\n    ];\n\n    proto.onclick = function (ecModel, api, type) {\n        var model = this.model;\n        var seriesIndex = model.get('seriesIndex.' + type);\n        // Not supported magicType\n        if (!seriesOptGenreator[type]) {\n            return;\n        }\n        var newOption = {\n            series: []\n        };\n        var generateNewSeriesTypes = function (seriesModel) {\n            var seriesType = seriesModel.subType;\n            var seriesId = seriesModel.id;\n            var newSeriesOpt = seriesOptGenreator[type](\n                seriesType, seriesId, seriesModel, model\n            );\n            if (newSeriesOpt) {\n                // PENDING If merge original option?\n                zrUtil.defaults(newSeriesOpt, seriesModel.option);\n                newOption.series.push(newSeriesOpt);\n            }\n            // Modify boundaryGap\n            var coordSys = seriesModel.coordinateSystem;\n            if (coordSys && coordSys.type === 'cartesian2d' && (type === 'line' || type === 'bar')) {\n                var categoryAxis = coordSys.getAxesByScale('ordinal')[0];\n                if (categoryAxis) {\n                    var axisDim = categoryAxis.dim;\n                    var axisType = axisDim + 'Axis';\n                    var axisModel = ecModel.queryComponents({\n                        mainType: axisType,\n                        index: seriesModel.get(name + 'Index'),\n                        id: seriesModel.get(name + 'Id')\n                    })[0];\n                    var axisIndex = axisModel.componentIndex;\n\n                    newOption[axisType] = newOption[axisType] || [];\n                    for (var i = 0; i <= axisIndex; i++) {\n                        newOption[axisType][axisIndex] = newOption[axisType][axisIndex] || {};\n                    }\n                    newOption[axisType][axisIndex].boundaryGap = type === 'bar' ? true : false;\n                }\n            }\n        };\n\n        zrUtil.each(radioTypes, function (radio) {\n            if (zrUtil.indexOf(radio, type) >= 0) {\n                zrUtil.each(radio, function (item) {\n                    model.setIconStatus(item, 'normal');\n                });\n            }\n        });\n\n        model.setIconStatus(type, 'emphasis');\n\n        ecModel.eachComponent(\n            {\n                mainType: 'series',\n                query: seriesIndex == null ? null : {\n                    seriesIndex: seriesIndex\n                }\n            }, generateNewSeriesTypes\n        );\n        api.dispatchAction({\n            type: 'changeMagicType',\n            currentType: type,\n            newOption: newOption\n        });\n    };\n\n    var echarts = require('../../../echarts');\n    echarts.registerAction({\n        type: 'changeMagicType',\n        event: 'magicTypeChanged',\n        update: 'prepareAndUpdate'\n    }, function (payload, ecModel) {\n        ecModel.mergeOption(payload.newOption);\n    });\n\n    require('../featureManager').register('magicType', MagicType);\n\n    module.exports = MagicType;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.6.1@echarts/lib/component/toolbox/feature/MagicType.js\n// module id = GEOw\n// module chunks = 0 1","\n    var ArrayCtor = typeof Float32Array === 'undefined'\n        ? Array\n        : Float32Array;\n    /**\n     * 3x2矩阵操作类\n     * @exports zrender/tool/matrix\n     */\n    var matrix = {\n        /**\n         * 创建一个单位矩阵\n         * @return {Float32Array|Array.<number>}\n         */\n        create : function() {\n            var out = new ArrayCtor(6);\n            matrix.identity(out);\n\n            return out;\n        },\n        /**\n         * 设置矩阵为单位矩阵\n         * @param {Float32Array|Array.<number>} out\n         */\n        identity : function(out) {\n            out[0] = 1;\n            out[1] = 0;\n            out[2] = 0;\n            out[3] = 1;\n            out[4] = 0;\n            out[5] = 0;\n            return out;\n        },\n        /**\n         * 复制矩阵\n         * @param {Float32Array|Array.<number>} out\n         * @param {Float32Array|Array.<number>} m\n         */\n        copy: function(out, m) {\n            out[0] = m[0];\n            out[1] = m[1];\n            out[2] = m[2];\n            out[3] = m[3];\n            out[4] = m[4];\n            out[5] = m[5];\n            return out;\n        },\n        /**\n         * 矩阵相乘\n         * @param {Float32Array|Array.<number>} out\n         * @param {Float32Array|Array.<number>} m1\n         * @param {Float32Array|Array.<number>} m2\n         */\n        mul : function (out, m1, m2) {\n            // Consider matrix.mul(m, m2, m);\n            // where out is the same as m2.\n            // So use temp variable to escape error.\n            var out0 = m1[0] * m2[0] + m1[2] * m2[1];\n            var out1 = m1[1] * m2[0] + m1[3] * m2[1];\n            var out2 = m1[0] * m2[2] + m1[2] * m2[3];\n            var out3 = m1[1] * m2[2] + m1[3] * m2[3];\n            var out4 = m1[0] * m2[4] + m1[2] * m2[5] + m1[4];\n            var out5 = m1[1] * m2[4] + m1[3] * m2[5] + m1[5];\n            out[0] = out0;\n            out[1] = out1;\n            out[2] = out2;\n            out[3] = out3;\n            out[4] = out4;\n            out[5] = out5;\n            return out;\n        },\n        /**\n         * 平移变换\n         * @param {Float32Array|Array.<number>} out\n         * @param {Float32Array|Array.<number>} a\n         * @param {Float32Array|Array.<number>} v\n         */\n        translate : function(out, a, v) {\n            out[0] = a[0];\n            out[1] = a[1];\n            out[2] = a[2];\n            out[3] = a[3];\n            out[4] = a[4] + v[0];\n            out[5] = a[5] + v[1];\n            return out;\n        },\n        /**\n         * 旋转变换\n         * @param {Float32Array|Array.<number>} out\n         * @param {Float32Array|Array.<number>} a\n         * @param {number} rad\n         */\n        rotate : function(out, a, rad) {\n            var aa = a[0];\n            var ac = a[2];\n            var atx = a[4];\n            var ab = a[1];\n            var ad = a[3];\n            var aty = a[5];\n            var st = Math.sin(rad);\n            var ct = Math.cos(rad);\n\n            out[0] = aa * ct + ab * st;\n            out[1] = -aa * st + ab * ct;\n            out[2] = ac * ct + ad * st;\n            out[3] = -ac * st + ct * ad;\n            out[4] = ct * atx + st * aty;\n            out[5] = ct * aty - st * atx;\n            return out;\n        },\n        /**\n         * 缩放变换\n         * @param {Float32Array|Array.<number>} out\n         * @param {Float32Array|Array.<number>} a\n         * @param {Float32Array|Array.<number>} v\n         */\n        scale : function(out, a, v) {\n            var vx = v[0];\n            var vy = v[1];\n            out[0] = a[0] * vx;\n            out[1] = a[1] * vy;\n            out[2] = a[2] * vx;\n            out[3] = a[3] * vy;\n            out[4] = a[4] * vx;\n            out[5] = a[5] * vy;\n            return out;\n        },\n        /**\n         * 求逆矩阵\n         * @param {Float32Array|Array.<number>} out\n         * @param {Float32Array|Array.<number>} a\n         */\n        invert : function(out, a) {\n\n            var aa = a[0];\n            var ac = a[2];\n            var atx = a[4];\n            var ab = a[1];\n            var ad = a[3];\n            var aty = a[5];\n\n            var det = aa * ad - ab * ac;\n            if (!det) {\n                return null;\n            }\n            det = 1.0 / det;\n\n            out[0] = ad * det;\n            out[1] = -ab * det;\n            out[2] = -ac * det;\n            out[3] = aa * det;\n            out[4] = (ac * aty - ad * atx) * det;\n            out[5] = (ab * atx - aa * aty) * det;\n            return out;\n        }\n    };\n\n    module.exports = matrix;\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.5.1@zrender/lib/core/matrix.js\n// module id = GjIh\n// module chunks = 0 1","/**\n * Log scale\n * @module echarts/scale/Log\n */\n\n\n    var zrUtil = require('zrender/lib/core/util');\n    var Scale = require('./Scale');\n    var numberUtil = require('../util/number');\n\n    // Use some method of IntervalScale\n    var IntervalScale = require('./Interval');\n\n    var scaleProto = Scale.prototype;\n    var intervalScaleProto = IntervalScale.prototype;\n\n    var getPrecisionSafe = numberUtil.getPrecisionSafe;\n    var roundingErrorFix = numberUtil.round;\n\n    var mathFloor = Math.floor;\n    var mathCeil = Math.ceil;\n    var mathPow = Math.pow;\n\n    var mathLog = Math.log;\n\n    var LogScale = Scale.extend({\n\n        type: 'log',\n\n        base: 10,\n\n        $constructor: function () {\n            Scale.apply(this, arguments);\n            this._originalScale = new IntervalScale();\n        },\n\n        /**\n         * @return {Array.<number>}\n         */\n        getTicks: function () {\n            var originalScale = this._originalScale;\n            var extent = this._extent;\n            var originalExtent = originalScale.getExtent();\n\n            return zrUtil.map(intervalScaleProto.getTicks.call(this), function (val) {\n                var powVal = numberUtil.round(mathPow(this.base, val));\n\n                // Fix #4158\n                powVal = (val === extent[0] && originalScale.__fixMin)\n                    ? fixRoundingError(powVal, originalExtent[0])\n                    : powVal;\n                powVal = (val === extent[1] && originalScale.__fixMax)\n                    ? fixRoundingError(powVal, originalExtent[1])\n                    : powVal;\n\n                return powVal;\n            }, this);\n        },\n\n        /**\n         * @param {number} val\n         * @return {string}\n         */\n        getLabel: intervalScaleProto.getLabel,\n\n        /**\n         * @param  {number} val\n         * @return {number}\n         */\n        scale: function (val) {\n            val = scaleProto.scale.call(this, val);\n            return mathPow(this.base, val);\n        },\n\n        /**\n         * @param {number} start\n         * @param {number} end\n         */\n        setExtent: function (start, end) {\n            var base = this.base;\n            start = mathLog(start) / mathLog(base);\n            end = mathLog(end) / mathLog(base);\n            intervalScaleProto.setExtent.call(this, start, end);\n        },\n\n        /**\n         * @return {number} end\n         */\n        getExtent: function () {\n            var base = this.base;\n            var extent = scaleProto.getExtent.call(this);\n            extent[0] = mathPow(base, extent[0]);\n            extent[1] = mathPow(base, extent[1]);\n\n            // Fix #4158\n            var originalScale = this._originalScale;\n            var originalExtent = originalScale.getExtent();\n            originalScale.__fixMin && (extent[0] = fixRoundingError(extent[0], originalExtent[0]));\n            originalScale.__fixMax && (extent[1] = fixRoundingError(extent[1], originalExtent[1]));\n\n            return extent;\n        },\n\n        /**\n         * @param  {Array.<number>} extent\n         */\n        unionExtent: function (extent) {\n            this._originalScale.unionExtent(extent);\n\n            var base = this.base;\n            extent[0] = mathLog(extent[0]) / mathLog(base);\n            extent[1] = mathLog(extent[1]) / mathLog(base);\n            scaleProto.unionExtent.call(this, extent);\n        },\n\n        /**\n         * @override\n         */\n        unionExtentFromData: function (data, dim) {\n            this.unionExtent(data.getDataExtent(dim, true, function (val) {\n                return val > 0;\n            }));\n        },\n\n        /**\n         * Update interval and extent of intervals for nice ticks\n         * @param  {number} [approxTickNum = 10] Given approx tick number\n         */\n        niceTicks: function (approxTickNum) {\n            approxTickNum = approxTickNum || 10;\n            var extent = this._extent;\n            var span = extent[1] - extent[0];\n            if (span === Infinity || span <= 0) {\n                return;\n            }\n\n            var interval = numberUtil.quantity(span);\n            var err = approxTickNum / span * interval;\n\n            // Filter ticks to get closer to the desired count.\n            if (err <= 0.5) {\n                interval *= 10;\n            }\n\n            // Interval should be integer\n            while (!isNaN(interval) && Math.abs(interval) < 1 && Math.abs(interval) > 0) {\n                interval *= 10;\n            }\n\n            var niceExtent = [\n                numberUtil.round(mathCeil(extent[0] / interval) * interval),\n                numberUtil.round(mathFloor(extent[1] / interval) * interval)\n            ];\n\n            this._interval = interval;\n            this._niceExtent = niceExtent;\n        },\n\n        /**\n         * Nice extent.\n         * @override\n         */\n        niceExtent: function (opt) {\n            intervalScaleProto.niceExtent.call(this, opt);\n\n            var originalScale = this._originalScale;\n            originalScale.__fixMin = opt.fixMin;\n            originalScale.__fixMax = opt.fixMax;\n        }\n\n    });\n\n    zrUtil.each(['contain', 'normalize'], function (methodName) {\n        LogScale.prototype[methodName] = function (val) {\n            val = mathLog(val) / mathLog(this.base);\n            return scaleProto[methodName].call(this, val);\n        };\n    });\n\n    LogScale.create = function () {\n        return new LogScale();\n    };\n\n    function fixRoundingError(val, originalVal) {\n        return roundingErrorFix(val, getPrecisionSafe(originalVal));\n    }\n\n    module.exports = LogScale;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.6.1@echarts/lib/scale/Log.js\n// module id = GmGe\n// module chunks = 0 1","/**\n * @module echarts/component/tooltip/TooltipContent\n */\n\n\n    var zrUtil = require('zrender/lib/core/util');\n    var zrColor = require('zrender/lib/tool/color');\n    var eventUtil = require('zrender/lib/core/event');\n    var formatUtil = require('../../util/format');\n    var each = zrUtil.each;\n    var toCamelCase = formatUtil.toCamelCase;\n    var env = require('zrender/lib/core/env');\n\n    var vendors = ['', '-webkit-', '-moz-', '-o-'];\n\n    var gCssText = 'position:absolute;display:block;border-style:solid;white-space:nowrap;z-index:9999999;';\n\n    /**\n     * @param {number} duration\n     * @return {string}\n     * @inner\n     */\n    function assembleTransition(duration) {\n        var transitionCurve = 'cubic-bezier(0.23, 1, 0.32, 1)';\n        var transitionText = 'left ' + duration + 's ' + transitionCurve + ','\n                            + 'top ' + duration + 's ' + transitionCurve;\n        return zrUtil.map(vendors, function (vendorPrefix) {\n            return vendorPrefix + 'transition:' + transitionText;\n        }).join(';');\n    }\n\n    /**\n     * @param {Object} textStyle\n     * @return {string}\n     * @inner\n     */\n    function assembleFont(textStyleModel) {\n        var cssText = [];\n\n        var fontSize = textStyleModel.get('fontSize');\n        var color = textStyleModel.getTextColor();\n\n        color && cssText.push('color:' + color);\n\n        cssText.push('font:' + textStyleModel.getFont());\n\n        fontSize &&\n            cssText.push('line-height:' + Math.round(fontSize * 3 / 2) + 'px');\n\n        each(['decoration', 'align'], function (name) {\n            var val = textStyleModel.get(name);\n            val && cssText.push('text-' + name + ':' + val);\n        });\n\n        return cssText.join(';');\n    }\n\n    /**\n     * @param {Object} tooltipModel\n     * @return {string}\n     * @inner\n     */\n    function assembleCssText(tooltipModel) {\n\n        var cssText = [];\n\n        var transitionDuration = tooltipModel.get('transitionDuration');\n        var backgroundColor = tooltipModel.get('backgroundColor');\n        var textStyleModel = tooltipModel.getModel('textStyle');\n        var padding = tooltipModel.get('padding');\n\n        // Animation transition. Do not animate when transitionDuration is 0.\n        transitionDuration &&\n            cssText.push(assembleTransition(transitionDuration));\n\n        if (backgroundColor) {\n            if (env.canvasSupported) {\n                cssText.push('background-Color:' + backgroundColor);\n            }\n            else {\n                // for ie\n                cssText.push(\n                    'background-Color:#' + zrColor.toHex(backgroundColor)\n                );\n                cssText.push('filter:alpha(opacity=70)');\n            }\n        }\n\n        // Border style\n        each(['width', 'color', 'radius'], function (name) {\n            var borderName = 'border-' + name;\n            var camelCase = toCamelCase(borderName);\n            var val = tooltipModel.get(camelCase);\n            val != null &&\n                cssText.push(borderName + ':' + val + (name === 'color' ? '' : 'px'));\n        });\n\n        // Text style\n        cssText.push(assembleFont(textStyleModel));\n\n        // Padding\n        if (padding != null) {\n            cssText.push('padding:' + formatUtil.normalizeCssArray(padding).join('px ') + 'px');\n        }\n\n        return cssText.join(';') + ';';\n    }\n\n    /**\n     * @alias module:echarts/component/tooltip/TooltipContent\n     * @constructor\n     */\n    function TooltipContent(container, api) {\n        var el = document.createElement('div');\n        var zr = this._zr = api.getZr();\n\n        this.el = el;\n\n        this._x = api.getWidth() / 2;\n        this._y = api.getHeight() / 2;\n\n        container.appendChild(el);\n\n        this._container = container;\n\n        this._show = false;\n\n        /**\n         * @private\n         */\n        this._hideTimeout;\n\n        var self = this;\n        el.onmouseenter = function () {\n            // clear the timeout in hideLater and keep showing tooltip\n            if (self._enterable) {\n                clearTimeout(self._hideTimeout);\n                self._show = true;\n            }\n            self._inContent = true;\n        };\n        el.onmousemove = function (e) {\n            e = e || window.event;\n            if (!self._enterable) {\n                // Try trigger zrender event to avoid mouse\n                // in and out shape too frequently\n                var handler = zr.handler;\n                eventUtil.normalizeEvent(container, e, true);\n                handler.dispatch('mousemove', e);\n            }\n        };\n        el.onmouseleave = function () {\n            if (self._enterable) {\n                if (self._show) {\n                    self.hideLater(self._hideDelay);\n                }\n            }\n            self._inContent = false;\n        };\n    }\n\n    TooltipContent.prototype = {\n\n        constructor: TooltipContent,\n\n        /**\n         * @private\n         * @type {boolean}\n         */\n        _enterable: true,\n\n        /**\n         * Update when tooltip is rendered\n         */\n        update: function () {\n            // FIXME\n            // Move this logic to ec main?\n            var container = this._container;\n            var stl = container.currentStyle\n                || document.defaultView.getComputedStyle(container);\n            var domStyle = container.style;\n            if (domStyle.position !== 'absolute' && stl.position !== 'absolute') {\n                domStyle.position = 'relative';\n            }\n            // Hide the tooltip\n            // PENDING\n            // this.hide();\n        },\n\n        show: function (tooltipModel) {\n            clearTimeout(this._hideTimeout);\n            var el = this.el;\n\n            el.style.cssText = gCssText + assembleCssText(tooltipModel)\n                // http://stackoverflow.com/questions/21125587/css3-transition-not-working-in-chrome-anymore\n                + ';left:' + this._x + 'px;top:' + this._y + 'px;'\n                + (tooltipModel.get('extraCssText') || '');\n\n            el.style.display = el.innerHTML ?  'block' : 'none';\n\n            this._show = true;\n        },\n\n        setContent: function (content) {\n            this.el.innerHTML = content == null ? '' : content;\n        },\n\n        setEnterable: function (enterable) {\n            this._enterable = enterable;\n        },\n\n        getSize: function () {\n            var el = this.el;\n            return [el.clientWidth, el.clientHeight];\n        },\n\n        moveTo: function (x, y) {\n            // xy should be based on canvas root. But tooltipContent is\n            // the sibling of canvas root. So padding of ec container\n            // should be considered here.\n            var zr = this._zr;\n            var viewportRoot;\n            if (zr && zr.painter && (viewportRoot = zr.painter.getViewportRoot())) {\n                x += viewportRoot.offsetLeft || 0;\n                y += viewportRoot.offsetTop || 0;\n            }\n\n            var style = this.el.style;\n            style.left = x + 'px';\n            style.top = y + 'px';\n\n            this._x = x;\n            this._y = y;\n        },\n\n        hide: function () {\n            this.el.style.display = 'none';\n            this._show = false;\n        },\n\n        hideLater: function (time) {\n            if (this._show && !(this._inContent && this._enterable)) {\n                if (time) {\n                    this._hideDelay = time;\n                    // Set show false to avoid invoke hideLater mutiple times\n                    this._show = false;\n                    this._hideTimeout = setTimeout(zrUtil.bind(this.hide, this), time);\n                }\n                else {\n                    this.hide();\n                }\n            }\n        },\n\n        isShow: function () {\n            return this._show;\n        }\n    };\n\n    module.exports = TooltipContent;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.6.1@echarts/lib/component/tooltip/TooltipContent.js\n// module id = H0dg\n// module chunks = 0 1","'use strict';\n/**\n * Cartesian coordinate system\n * @module  echarts/coord/Cartesian\n *\n */\n\n\n    var zrUtil = require('zrender/lib/core/util');\n\n    function dimAxisMapper(dim) {\n        return this._axes[dim];\n    }\n\n    /**\n     * @alias module:echarts/coord/Cartesian\n     * @constructor\n     */\n    var Cartesian = function (name) {\n        this._axes = {};\n\n        this._dimList = [];\n\n        /**\n         * @type {string}\n         */\n        this.name = name || '';\n    };\n\n    Cartesian.prototype = {\n\n        constructor: Cartesian,\n\n        type: 'cartesian',\n\n        /**\n         * Get axis\n         * @param  {number|string} dim\n         * @return {module:echarts/coord/Cartesian~Axis}\n         */\n        getAxis: function (dim) {\n            return this._axes[dim];\n        },\n\n        /**\n         * Get axes list\n         * @return {Array.<module:echarts/coord/Cartesian~Axis>}\n         */\n        getAxes: function () {\n            return zrUtil.map(this._dimList, dimAxisMapper, this);\n        },\n\n        /**\n         * Get axes list by given scale type\n         */\n        getAxesByScale: function (scaleType) {\n            scaleType = scaleType.toLowerCase();\n            return zrUtil.filter(\n                this.getAxes(),\n                function (axis) {\n                    return axis.scale.type === scaleType;\n                }\n            );\n        },\n\n        /**\n         * Add axis\n         * @param {module:echarts/coord/Cartesian.Axis}\n         */\n        addAxis: function (axis) {\n            var dim = axis.dim;\n\n            this._axes[dim] = axis;\n\n            this._dimList.push(dim);\n        },\n\n        /**\n         * Convert data to coord in nd space\n         * @param {Array.<number>|Object.<string, number>} val\n         * @return {Array.<number>|Object.<string, number>}\n         */\n        dataToCoord: function (val) {\n            return this._dataCoordConvert(val, 'dataToCoord');\n        },\n\n        /**\n         * Convert coord in nd space to data\n         * @param  {Array.<number>|Object.<string, number>} val\n         * @return {Array.<number>|Object.<string, number>}\n         */\n        coordToData: function (val) {\n            return this._dataCoordConvert(val, 'coordToData');\n        },\n\n        _dataCoordConvert: function (input, method) {\n            var dimList = this._dimList;\n\n            var output = input instanceof Array ? [] : {};\n\n            for (var i = 0; i < dimList.length; i++) {\n                var dim = dimList[i];\n                var axis = this._axes[dim];\n\n                output[dim] = axis[method](input[dim]);\n            }\n\n            return output;\n        }\n    };\n\n    module.exports = Cartesian;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.6.1@echarts/lib/coord/cartesian/Cartesian.js\n// module id = HJZV\n// module chunks = 0 1","/**\n * @file Data zoom action\n */\n\n\n    var zrUtil = require('zrender/lib/core/util');\n    var helper = require('./helper');\n    var echarts = require('../../echarts');\n\n\n    echarts.registerAction('dataZoom', function (payload, ecModel) {\n\n        var linkedNodesFinder = helper.createLinkedNodesFinder(\n            zrUtil.bind(ecModel.eachComponent, ecModel, 'dataZoom'),\n            helper.eachAxisDim,\n            function (model, dimNames) {\n                return model.get(dimNames.axisIndex);\n            }\n        );\n\n        var effectedModels = [];\n\n        ecModel.eachComponent(\n            {mainType: 'dataZoom', query: payload},\n            function (model, index) {\n                effectedModels.push.apply(\n                    effectedModels, linkedNodesFinder(model).nodes\n                );\n            }\n        );\n\n        zrUtil.each(effectedModels, function (dataZoomModel, index) {\n            dataZoomModel.setRawRange({\n                start: payload.start,\n                end: payload.end,\n                startValue: payload.startValue,\n                endValue: payload.endValue\n            });\n        });\n\n    });\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.6.1@echarts/lib/component/dataZoom/dataZoomAction.js\n// module id = HN64\n// module chunks = 0 1","'use strict';\n\n\n    var CMD = require('../core/PathProxy').CMD;\n    var line = require('./line');\n    var cubic = require('./cubic');\n    var quadratic = require('./quadratic');\n    var arc = require('./arc');\n    var normalizeRadian = require('./util').normalizeRadian;\n    var curve = require('../core/curve');\n\n    var windingLine = require('./windingLine');\n\n    var containStroke = line.containStroke;\n\n    var PI2 = Math.PI * 2;\n\n    var EPSILON = 1e-4;\n\n    function isAroundEqual(a, b) {\n        return Math.abs(a - b) < EPSILON;\n    }\n\n    // 临时数组\n    var roots = [-1, -1, -1];\n    var extrema = [-1, -1];\n\n    function swapExtrema() {\n        var tmp = extrema[0];\n        extrema[0] = extrema[1];\n        extrema[1] = tmp;\n    }\n\n    function windingCubic(x0, y0, x1, y1, x2, y2, x3, y3, x, y) {\n        // Quick reject\n        if (\n            (y > y0 && y > y1 && y > y2 && y > y3)\n            || (y < y0 && y < y1 && y < y2 && y < y3)\n        ) {\n            return 0;\n        }\n        var nRoots = curve.cubicRootAt(y0, y1, y2, y3, y, roots);\n        if (nRoots === 0) {\n            return 0;\n        }\n        else {\n            var w = 0;\n            var nExtrema = -1;\n            var y0_, y1_;\n            for (var i = 0; i < nRoots; i++) {\n                var t = roots[i];\n\n                // Avoid winding error when intersection point is the connect point of two line of polygon\n                var unit = (t === 0 || t === 1) ? 0.5 : 1;\n\n                var x_ = curve.cubicAt(x0, x1, x2, x3, t);\n                if (x_ < x) { // Quick reject\n                    continue;\n                }\n                if (nExtrema < 0) {\n                    nExtrema = curve.cubicExtrema(y0, y1, y2, y3, extrema);\n                    if (extrema[1] < extrema[0] && nExtrema > 1) {\n                        swapExtrema();\n                    }\n                    y0_ = curve.cubicAt(y0, y1, y2, y3, extrema[0]);\n                    if (nExtrema > 1) {\n                        y1_ = curve.cubicAt(y0, y1, y2, y3, extrema[1]);\n                    }\n                }\n                if (nExtrema == 2) {\n                    // 分成三段单调函数\n                    if (t < extrema[0]) {\n                        w += y0_ < y0 ? unit : -unit;\n                    }\n                    else if (t < extrema[1]) {\n                        w += y1_ < y0_ ? unit : -unit;\n                    }\n                    else {\n                        w += y3 < y1_ ? unit : -unit;\n                    }\n                }\n                else {\n                    // 分成两段单调函数\n                    if (t < extrema[0]) {\n                        w += y0_ < y0 ? unit : -unit;\n                    }\n                    else {\n                        w += y3 < y0_ ? unit : -unit;\n                    }\n                }\n            }\n            return w;\n        }\n    }\n\n    function windingQuadratic(x0, y0, x1, y1, x2, y2, x, y) {\n        // Quick reject\n        if (\n            (y > y0 && y > y1 && y > y2)\n            || (y < y0 && y < y1 && y < y2)\n        ) {\n            return 0;\n        }\n        var nRoots = curve.quadraticRootAt(y0, y1, y2, y, roots);\n        if (nRoots === 0) {\n            return 0;\n        }\n        else {\n            var t = curve.quadraticExtremum(y0, y1, y2);\n            if (t >= 0 && t <= 1) {\n                var w = 0;\n                var y_ = curve.quadraticAt(y0, y1, y2, t);\n                for (var i = 0; i < nRoots; i++) {\n                    // Remove one endpoint.\n                    var unit = (roots[i] === 0 || roots[i] === 1) ? 0.5 : 1;\n\n                    var x_ = curve.quadraticAt(x0, x1, x2, roots[i]);\n                    if (x_ < x) {   // Quick reject\n                        continue;\n                    }\n                    if (roots[i] < t) {\n                        w += y_ < y0 ? unit : -unit;\n                    }\n                    else {\n                        w += y2 < y_ ? unit : -unit;\n                    }\n                }\n                return w;\n            }\n            else {\n                // Remove one endpoint.\n                var unit = (roots[0] === 0 || roots[0] === 1) ? 0.5 : 1;\n\n                var x_ = curve.quadraticAt(x0, x1, x2, roots[0]);\n                if (x_ < x) {   // Quick reject\n                    return 0;\n                }\n                return y2 < y0 ? unit : -unit;\n            }\n        }\n    }\n\n    // TODO\n    // Arc 旋转\n    function windingArc(\n        cx, cy, r, startAngle, endAngle, anticlockwise, x, y\n    ) {\n        y -= cy;\n        if (y > r || y < -r) {\n            return 0;\n        }\n        var tmp = Math.sqrt(r * r - y * y);\n        roots[0] = -tmp;\n        roots[1] = tmp;\n\n        var diff = Math.abs(startAngle - endAngle);\n        if (diff < 1e-4) {\n            return 0;\n        }\n        if (diff % PI2 < 1e-4) {\n            // Is a circle\n            startAngle = 0;\n            endAngle = PI2;\n            var dir = anticlockwise ? 1 : -1;\n            if (x >= roots[0] + cx && x <= roots[1] + cx) {\n                return dir;\n            } else {\n                return 0;\n            }\n        }\n\n        if (anticlockwise) {\n            var tmp = startAngle;\n            startAngle = normalizeRadian(endAngle);\n            endAngle = normalizeRadian(tmp);\n        }\n        else {\n            startAngle = normalizeRadian(startAngle);\n            endAngle = normalizeRadian(endAngle);\n        }\n        if (startAngle > endAngle) {\n            endAngle += PI2;\n        }\n\n        var w = 0;\n        for (var i = 0; i < 2; i++) {\n            var x_ = roots[i];\n            if (x_ + cx > x) {\n                var angle = Math.atan2(y, x_);\n                var dir = anticlockwise ? 1 : -1;\n                if (angle < 0) {\n                    angle = PI2 + angle;\n                }\n                if (\n                    (angle >= startAngle && angle <= endAngle)\n                    || (angle + PI2 >= startAngle && angle + PI2 <= endAngle)\n                ) {\n                    if (angle > Math.PI / 2 && angle < Math.PI * 1.5) {\n                        dir = -dir;\n                    }\n                    w += dir;\n                }\n            }\n        }\n        return w;\n    }\n\n    function containPath(data, lineWidth, isStroke, x, y) {\n        var w = 0;\n        var xi = 0;\n        var yi = 0;\n        var x0 = 0;\n        var y0 = 0;\n\n        for (var i = 0; i < data.length;) {\n            var cmd = data[i++];\n            // Begin a new subpath\n            if (cmd === CMD.M && i > 1) {\n                // Close previous subpath\n                if (!isStroke) {\n                    w += windingLine(xi, yi, x0, y0, x, y);\n                }\n                // 如果被任何一个 subpath 包含\n                // if (w !== 0) {\n                //     return true;\n                // }\n            }\n\n            if (i == 1) {\n                // 如果第一个命令是 L, C, Q\n                // 则 previous point 同绘制命令的第一个 point\n                //\n                // 第一个命令为 Arc 的情况下会在后面特殊处理\n                xi = data[i];\n                yi = data[i + 1];\n\n                x0 = xi;\n                y0 = yi;\n            }\n\n            switch (cmd) {\n                case CMD.M:\n                    // moveTo 命令重新创建一个新的 subpath, 并且更新新的起点\n                    // 在 closePath 的时候使用\n                    x0 = data[i++];\n                    y0 = data[i++];\n                    xi = x0;\n                    yi = y0;\n                    break;\n                case CMD.L:\n                    if (isStroke) {\n                        if (containStroke(xi, yi, data[i], data[i + 1], lineWidth, x, y)) {\n                            return true;\n                        }\n                    }\n                    else {\n                        // NOTE 在第一个命令为 L, C, Q 的时候会计算出 NaN\n                        w += windingLine(xi, yi, data[i], data[i + 1], x, y) || 0;\n                    }\n                    xi = data[i++];\n                    yi = data[i++];\n                    break;\n                case CMD.C:\n                    if (isStroke) {\n                        if (cubic.containStroke(xi, yi,\n                            data[i++], data[i++], data[i++], data[i++], data[i], data[i + 1],\n                            lineWidth, x, y\n                        )) {\n                            return true;\n                        }\n                    }\n                    else {\n                        w += windingCubic(\n                            xi, yi,\n                            data[i++], data[i++], data[i++], data[i++], data[i], data[i + 1],\n                            x, y\n                        ) || 0;\n                    }\n                    xi = data[i++];\n                    yi = data[i++];\n                    break;\n                case CMD.Q:\n                    if (isStroke) {\n                        if (quadratic.containStroke(xi, yi,\n                            data[i++], data[i++], data[i], data[i + 1],\n                            lineWidth, x, y\n                        )) {\n                            return true;\n                        }\n                    }\n                    else {\n                        w += windingQuadratic(\n                            xi, yi,\n                            data[i++], data[i++], data[i], data[i + 1],\n                            x, y\n                        ) || 0;\n                    }\n                    xi = data[i++];\n                    yi = data[i++];\n                    break;\n                case CMD.A:\n                    // TODO Arc 判断的开销比较大\n                    var cx = data[i++];\n                    var cy = data[i++];\n                    var rx = data[i++];\n                    var ry = data[i++];\n                    var theta = data[i++];\n                    var dTheta = data[i++];\n                    // TODO Arc 旋转\n                    var psi = data[i++];\n                    var anticlockwise = 1 - data[i++];\n                    var x1 = Math.cos(theta) * rx + cx;\n                    var y1 = Math.sin(theta) * ry + cy;\n                    // 不是直接使用 arc 命令\n                    if (i > 1) {\n                        w += windingLine(xi, yi, x1, y1, x, y);\n                    }\n                    else {\n                        // 第一个命令起点还未定义\n                        x0 = x1;\n                        y0 = y1;\n                    }\n                    // zr 使用scale来模拟椭圆, 这里也对x做一定的缩放\n                    var _x = (x - cx) * ry / rx + cx;\n                    if (isStroke) {\n                        if (arc.containStroke(\n                            cx, cy, ry, theta, theta + dTheta, anticlockwise,\n                            lineWidth, _x, y\n                        )) {\n                            return true;\n                        }\n                    }\n                    else {\n                        w += windingArc(\n                            cx, cy, ry, theta, theta + dTheta, anticlockwise,\n                            _x, y\n                        );\n                    }\n                    xi = Math.cos(theta + dTheta) * rx + cx;\n                    yi = Math.sin(theta + dTheta) * ry + cy;\n                    break;\n                case CMD.R:\n                    x0 = xi = data[i++];\n                    y0 = yi = data[i++];\n                    var width = data[i++];\n                    var height = data[i++];\n                    var x1 = x0 + width;\n                    var y1 = y0 + height;\n                    if (isStroke) {\n                        if (containStroke(x0, y0, x1, y0, lineWidth, x, y)\n                          || containStroke(x1, y0, x1, y1, lineWidth, x, y)\n                          || containStroke(x1, y1, x0, y1, lineWidth, x, y)\n                          || containStroke(x0, y1, x0, y0, lineWidth, x, y)\n                        ) {\n                            return true;\n                        }\n                    }\n                    else {\n                        // FIXME Clockwise ?\n                        w += windingLine(x1, y0, x1, y1, x, y);\n                        w += windingLine(x0, y1, x0, y0, x, y);\n                    }\n                    break;\n                case CMD.Z:\n                    if (isStroke) {\n                        if (containStroke(\n                            xi, yi, x0, y0, lineWidth, x, y\n                        )) {\n                            return true;\n                        }\n                    }\n                    else {\n                        // Close a subpath\n                        w += windingLine(xi, yi, x0, y0, x, y);\n                        // 如果被任何一个 subpath 包含\n                        // FIXME subpaths may overlap\n                        // if (w !== 0) {\n                        //     return true;\n                        // }\n                    }\n                    xi = x0;\n                    yi = y0;\n                    break;\n            }\n        }\n        if (!isStroke && !isAroundEqual(yi, y0)) {\n            w += windingLine(xi, yi, x0, y0, x, y) || 0;\n        }\n        return w !== 0;\n    }\n\n    module.exports = {\n        contain: function (pathData, x, y) {\n            return containPath(pathData, 0, false, x, y);\n        },\n\n        containStroke: function (pathData, lineWidth, x, y) {\n            return containPath(pathData, lineWidth, true, x, y);\n        }\n    };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.5.1@zrender/lib/contain/path.js\n// module id = J2oE\n// module chunks = 0 1","/**\n * @module echarts/chart/helper/Symbol\n */\n\n\n    var zrUtil = require('zrender/lib/core/util');\n    var symbolUtil = require('../../util/symbol');\n    var graphic = require('../../util/graphic');\n    var numberUtil = require('../../util/number');\n    var labelHelper = require('./labelHelper');\n\n    function getSymbolSize(data, idx) {\n        var symbolSize = data.getItemVisual(idx, 'symbolSize');\n        return symbolSize instanceof Array\n            ? symbolSize.slice()\n            : [+symbolSize, +symbolSize];\n    }\n\n    function getScale(symbolSize) {\n        return [symbolSize[0] / 2, symbolSize[1] / 2];\n    }\n\n    /**\n     * @constructor\n     * @alias {module:echarts/chart/helper/Symbol}\n     * @param {module:echarts/data/List} data\n     * @param {number} idx\n     * @extends {module:zrender/graphic/Group}\n     */\n    function Symbol(data, idx, seriesScope) {\n        graphic.Group.call(this);\n\n        this.updateData(data, idx, seriesScope);\n    }\n\n    var symbolProto = Symbol.prototype;\n\n    function driftSymbol(dx, dy) {\n        this.parent.drift(dx, dy);\n    }\n\n    symbolProto._createSymbol = function (symbolType, data, idx, symbolSize) {\n        // Remove paths created before\n        this.removeAll();\n\n        var seriesModel = data.hostModel;\n        var color = data.getItemVisual(idx, 'color');\n\n        // var symbolPath = symbolUtil.createSymbol(\n        //     symbolType, -0.5, -0.5, 1, 1, color\n        // );\n        // If width/height are set too small (e.g., set to 1) on ios10\n        // and macOS Sierra, a circle stroke become a rect, no matter what\n        // the scale is set. So we set width/height as 2. See #4150.\n        var symbolPath = symbolUtil.createSymbol(\n            symbolType, -1, -1, 2, 2, color\n        );\n\n        symbolPath.attr({\n            z2: 100,\n            culling: true,\n            scale: [0, 0]\n        });\n        // Rewrite drift method\n        symbolPath.drift = driftSymbol;\n\n        graphic.initProps(symbolPath, {\n            scale: getScale(symbolSize)\n        }, seriesModel, idx);\n        this._symbolType = symbolType;\n\n        this.add(symbolPath);\n    };\n\n    /**\n     * Stop animation\n     * @param {boolean} toLastFrame\n     */\n    symbolProto.stopSymbolAnimation = function (toLastFrame) {\n        this.childAt(0).stopAnimation(toLastFrame);\n    };\n\n    /**\n     * Get symbol path element\n     */\n    symbolProto.getSymbolPath = function () {\n        return this.childAt(0);\n    };\n\n    /**\n     * Get scale(aka, current symbol size).\n     * Including the change caused by animation\n     */\n    symbolProto.getScale = function () {\n        return this.childAt(0).scale;\n    };\n\n    /**\n     * Highlight symbol\n     */\n    symbolProto.highlight = function () {\n        this.childAt(0).trigger('emphasis');\n    };\n\n    /**\n     * Downplay symbol\n     */\n    symbolProto.downplay = function () {\n        this.childAt(0).trigger('normal');\n    };\n\n    /**\n     * @param {number} zlevel\n     * @param {number} z\n     */\n    symbolProto.setZ = function (zlevel, z) {\n        var symbolPath = this.childAt(0);\n        symbolPath.zlevel = zlevel;\n        symbolPath.z = z;\n    };\n\n    symbolProto.setDraggable = function (draggable) {\n        var symbolPath = this.childAt(0);\n        symbolPath.draggable = draggable;\n        symbolPath.cursor = draggable ? 'move' : 'pointer';\n    };\n\n    /**\n     * Update symbol properties\n     * @param  {module:echarts/data/List} data\n     * @param  {number} idx\n     */\n    symbolProto.updateData = function (data, idx, seriesScope) {\n        this.silent = false;\n\n        var symbolType = data.getItemVisual(idx, 'symbol') || 'circle';\n        var seriesModel = data.hostModel;\n        var symbolSize = getSymbolSize(data, idx);\n\n        if (symbolType !== this._symbolType) {\n            this._createSymbol(symbolType, data, idx, symbolSize);\n        }\n        else {\n            var symbolPath = this.childAt(0);\n            symbolPath.silent = false;\n            graphic.updateProps(symbolPath, {\n                scale: getScale(symbolSize)\n            }, seriesModel, idx);\n        }\n        this._updateCommon(data, idx, symbolSize, seriesScope);\n        this._seriesModel = seriesModel;\n    };\n\n    // Update common properties\n    var normalStyleAccessPath = ['itemStyle', 'normal'];\n    var emphasisStyleAccessPath = ['itemStyle', 'emphasis'];\n    var normalLabelAccessPath = ['label', 'normal'];\n    var emphasisLabelAccessPath = ['label', 'emphasis'];\n\n    symbolProto._updateCommon = function (data, idx, symbolSize, seriesScope) {\n        var symbolPath = this.childAt(0);\n        var seriesModel = data.hostModel;\n        var color = data.getItemVisual(idx, 'color');\n\n        // Reset style\n        if (symbolPath.type !== 'image') {\n            symbolPath.useStyle({\n                strokeNoScale: true\n            });\n        }\n\n        seriesScope = seriesScope || null;\n\n        var itemStyle = seriesScope && seriesScope.itemStyle;\n        var hoverItemStyle = seriesScope && seriesScope.hoverItemStyle;\n        var symbolRotate = seriesScope && seriesScope.symbolRotate;\n        var symbolOffset = seriesScope && seriesScope.symbolOffset;\n        var labelModel = seriesScope && seriesScope.labelModel;\n        var hoverLabelModel = seriesScope && seriesScope.hoverLabelModel;\n        var hoverAnimation = seriesScope && seriesScope.hoverAnimation;\n\n        if (!seriesScope || data.hasItemOption) {\n            var itemModel = data.getItemModel(idx);\n\n            // Color must be excluded.\n            // Because symbol provide setColor individually to set fill and stroke\n            itemStyle = itemModel.getModel(normalStyleAccessPath).getItemStyle(['color']);\n            hoverItemStyle = itemModel.getModel(emphasisStyleAccessPath).getItemStyle();\n\n            symbolRotate = itemModel.getShallow('symbolRotate');\n            symbolOffset = itemModel.getShallow('symbolOffset');\n\n            labelModel = itemModel.getModel(normalLabelAccessPath);\n            hoverLabelModel = itemModel.getModel(emphasisLabelAccessPath);\n            hoverAnimation = itemModel.getShallow('hoverAnimation');\n        }\n        else {\n            hoverItemStyle = zrUtil.extend({}, hoverItemStyle);\n        }\n\n        var elStyle = symbolPath.style;\n\n        symbolPath.attr('rotation', (symbolRotate || 0) * Math.PI / 180 || 0);\n\n        if (symbolOffset) {\n            symbolPath.attr('position', [\n                numberUtil.parsePercent(symbolOffset[0], symbolSize[0]),\n                numberUtil.parsePercent(symbolOffset[1], symbolSize[1])\n            ]);\n        }\n\n        // PENDING setColor before setStyle!!!\n        symbolPath.setColor(color);\n\n        symbolPath.setStyle(itemStyle);\n\n        var opacity = data.getItemVisual(idx, 'opacity');\n        if (opacity != null) {\n            elStyle.opacity = opacity;\n        }\n\n        var valueDim = labelHelper.findLabelValueDim(data);\n        labelHelper.setTextToStyle(\n            data, idx, valueDim, elStyle, seriesModel, labelModel, color\n        );\n        labelHelper.setTextToStyle(\n            data, idx, valueDim, hoverItemStyle, seriesModel, hoverLabelModel, color\n        );\n\n        symbolPath.off('mouseover')\n            .off('mouseout')\n            .off('emphasis')\n            .off('normal');\n\n        symbolPath.hoverStyle = hoverItemStyle;\n\n        graphic.setHoverStyle(symbolPath);\n\n        var scale = getScale(symbolSize);\n\n        if (hoverAnimation && seriesModel.isAnimationEnabled()) {\n            var onEmphasis = function() {\n                var ratio = scale[1] / scale[0];\n                this.animateTo({\n                    scale: [\n                        Math.max(scale[0] * 1.1, scale[0] + 3),\n                        Math.max(scale[1] * 1.1, scale[1] + 3 * ratio)\n                    ]\n                }, 400, 'elasticOut');\n            };\n            var onNormal = function() {\n                this.animateTo({\n                    scale: scale\n                }, 400, 'elasticOut');\n            };\n            symbolPath.on('mouseover', onEmphasis)\n                .on('mouseout', onNormal)\n                .on('emphasis', onEmphasis)\n                .on('normal', onNormal);\n        }\n    };\n\n    symbolProto.fadeOut = function (cb) {\n        var symbolPath = this.childAt(0);\n        // Avoid mistaken hover when fading out\n        this.silent = symbolPath.silent = true;\n        // Not show text when animating\n        symbolPath.style.text = '';\n        graphic.updateProps(symbolPath, {\n            scale: [0, 0]\n        }, this._seriesModel, this.dataIndex, cb);\n    };\n\n    zrUtil.inherits(Symbol, graphic.Group);\n\n    module.exports = Symbol;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.6.1@echarts/lib/chart/helper/Symbol.js\n// module id = JEU6\n// module chunks = 0 1","/**\n * @module zrender/graphic/Style\n */\n\n\n    var STYLE_COMMON_PROPS = [\n        ['shadowBlur', 0], ['shadowOffsetX', 0], ['shadowOffsetY', 0], ['shadowColor', '#000'],\n        ['lineCap', 'butt'], ['lineJoin', 'miter'], ['miterLimit', 10]\n    ];\n\n    // var SHADOW_PROPS = STYLE_COMMON_PROPS.slice(0, 4);\n    // var LINE_PROPS = STYLE_COMMON_PROPS.slice(4);\n\n    var Style = function (opts) {\n        this.extendFrom(opts);\n    };\n\n    function createLinearGradient(ctx, obj, rect) {\n        var x = obj.x == null ? 0 : obj.x;\n        var x2 = obj.x2 == null ? 1 : obj.x2;\n        var y = obj.y == null ? 0 : obj.y;\n        var y2 = obj.y2 == null ? 0 : obj.y2;\n\n        if (!obj.global) {\n            x = x * rect.width + rect.x;\n            x2 = x2 * rect.width + rect.x;\n            y = y * rect.height + rect.y;\n            y2 = y2 * rect.height + rect.y;\n        }\n\n        var canvasGradient = ctx.createLinearGradient(x, y, x2, y2);\n\n        return canvasGradient;\n    }\n\n    function createRadialGradient(ctx, obj, rect) {\n        var width = rect.width;\n        var height = rect.height;\n        var min = Math.min(width, height);\n\n        var x = obj.x == null ? 0.5 : obj.x;\n        var y = obj.y == null ? 0.5 : obj.y;\n        var r = obj.r == null ? 0.5 : obj.r;\n        if (!obj.global) {\n            x = x * width + rect.x;\n            y = y * height + rect.y;\n            r = r * min;\n        }\n\n        var canvasGradient = ctx.createRadialGradient(x, y, 0, x, y, r);\n\n        return canvasGradient;\n    }\n\n\n    Style.prototype = {\n\n        constructor: Style,\n\n        /**\n         * @type {string}\n         */\n        fill: '#000000',\n\n        /**\n         * @type {string}\n         */\n        stroke: null,\n\n        /**\n         * @type {number}\n         */\n        opacity: 1,\n\n        /**\n         * @type {Array.<number>}\n         */\n        lineDash: null,\n\n        /**\n         * @type {number}\n         */\n        lineDashOffset: 0,\n\n        /**\n         * @type {number}\n         */\n        shadowBlur: 0,\n\n        /**\n         * @type {number}\n         */\n        shadowOffsetX: 0,\n\n        /**\n         * @type {number}\n         */\n        shadowOffsetY: 0,\n\n        /**\n         * @type {number}\n         */\n        lineWidth: 1,\n\n        /**\n         * If stroke ignore scale\n         * @type {Boolean}\n         */\n        strokeNoScale: false,\n\n        // Bounding rect text configuration\n        // Not affected by element transform\n        /**\n         * @type {string}\n         */\n        text: null,\n\n        /**\n         * @type {string}\n         */\n        textFill: '#000',\n\n        /**\n         * @type {string}\n         */\n        textStroke: null,\n\n        /**\n         * 'inside', 'left', 'right', 'top', 'bottom'\n         * [x, y]\n         * @type {string|Array.<number>}\n         * @default 'inside'\n         */\n        textPosition: 'inside',\n\n        /**\n         * [x, y]\n         * @type {Array.<number>}\n         */\n        textOffset: null,\n\n        /**\n         * @type {string}\n         */\n        textBaseline: null,\n\n        /**\n         * @type {string}\n         */\n        textAlign: null,\n\n        /**\n         * @type {string}\n         */\n        textVerticalAlign: null,\n\n        /**\n         * Only useful in Path and Image element\n         * @type {number}\n         */\n        textDistance: 5,\n\n        /**\n         * Only useful in Path and Image element\n         * @type {number}\n         */\n        textShadowBlur: 0,\n\n        /**\n         * Only useful in Path and Image element\n         * @type {number}\n         */\n        textShadowOffsetX: 0,\n\n        /**\n         * Only useful in Path and Image element\n         * @type {number}\n         */\n        textShadowOffsetY: 0,\n\n        /**\n         * If transform text\n         * Only useful in Path and Image element\n         * @type {boolean}\n         */\n        textTransform: false,\n\n        /**\n         * Text rotate around position of Path or Image\n         * Only useful in Path and Image element and textTransform is false.\n         */\n        textRotation: 0,\n\n        /**\n         * @type {string}\n         * https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/globalCompositeOperation\n         */\n        blend: null,\n\n        /**\n         * @param {CanvasRenderingContext2D} ctx\n         */\n        bind: function (ctx, el, prevEl) {\n            var style = this;\n            var prevStyle = prevEl && prevEl.style;\n            var firstDraw = !prevStyle;\n\n            for (var i = 0; i < STYLE_COMMON_PROPS.length; i++) {\n                var prop = STYLE_COMMON_PROPS[i];\n                var styleName = prop[0];\n\n                if (firstDraw || style[styleName] !== prevStyle[styleName]) {\n                    // FIXME Invalid property value will cause style leak from previous element.\n                    ctx[styleName] = style[styleName] || prop[1];\n                }\n            }\n\n            if ((firstDraw || style.fill !== prevStyle.fill)) {\n                ctx.fillStyle = style.fill;\n            }\n            if ((firstDraw || style.stroke !== prevStyle.stroke)) {\n                ctx.strokeStyle = style.stroke;\n            }\n            if ((firstDraw || style.opacity !== prevStyle.opacity)) {\n                ctx.globalAlpha = style.opacity == null ? 1 : style.opacity;\n            }\n\n            if ((firstDraw || style.blend !== prevStyle.blend)) {\n                ctx.globalCompositeOperation = style.blend || 'source-over';\n            }\n            if (this.hasStroke()) {\n                var lineWidth = style.lineWidth;\n                ctx.lineWidth = lineWidth / (\n                    (this.strokeNoScale && el && el.getLineScale) ? el.getLineScale() : 1\n                );\n            }\n        },\n\n        hasFill: function () {\n            var fill = this.fill;\n            return fill != null && fill !== 'none';\n        },\n\n        hasStroke: function () {\n            var stroke = this.stroke;\n            return stroke != null && stroke !== 'none' && this.lineWidth > 0;\n        },\n\n        /**\n         * Extend from other style\n         * @param {zrender/graphic/Style} otherStyle\n         * @param {boolean} overwrite\n         */\n        extendFrom: function (otherStyle, overwrite) {\n            if (otherStyle) {\n                var target = this;\n                for (var name in otherStyle) {\n                    if (otherStyle.hasOwnProperty(name)\n                        && (overwrite || ! target.hasOwnProperty(name))\n                    ) {\n                        target[name] = otherStyle[name];\n                    }\n                }\n            }\n        },\n\n        /**\n         * Batch setting style with a given object\n         * @param {Object|string} obj\n         * @param {*} [obj]\n         */\n        set: function (obj, value) {\n            if (typeof obj === 'string') {\n                this[obj] = value;\n            }\n            else {\n                this.extendFrom(obj, true);\n            }\n        },\n\n        /**\n         * Clone\n         * @return {zrender/graphic/Style} [description]\n         */\n        clone: function () {\n            var newStyle = new this.constructor();\n            newStyle.extendFrom(this, true);\n            return newStyle;\n        },\n\n        getGradient: function (ctx, obj, rect) {\n            var method = obj.type === 'radial' ? createRadialGradient : createLinearGradient;\n            var canvasGradient = method(ctx, obj, rect);\n            var colorStops = obj.colorStops;\n            for (var i = 0; i < colorStops.length; i++) {\n                canvasGradient.addColorStop(\n                    colorStops[i].offset, colorStops[i].color\n                );\n            }\n            return canvasGradient;\n        }\n    };\n\n    var styleProto = Style.prototype;\n    for (var i = 0; i < STYLE_COMMON_PROPS.length; i++) {\n        var prop = STYLE_COMMON_PROPS[i];\n        if (!(prop[0] in styleProto)) {\n            styleProto[prop[0]] = prop[1];\n        }\n    }\n\n    // Provide for others\n    Style.getGradient = styleProto.getGradient;\n\n    module.exports = Style;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.5.1@zrender/lib/graphic/Style.js\n// module id = JKcJ\n// module chunks = 0 1","\n\n    var zrUtil = require('zrender/lib/core/util');\n    var graphic = require('../../util/graphic');\n\n    var helper = {};\n\n    helper.setLabel = function (\n        normalStyle, hoverStyle, itemModel, color, seriesModel, dataIndex, labelPositionOutside\n    ) {\n        var labelModel = itemModel.getModel('label.normal');\n        var hoverLabelModel = itemModel.getModel('label.emphasis');\n\n        if (labelModel.get('show')) {\n            setLabel(\n                normalStyle, labelModel, color,\n                zrUtil.retrieve(\n                    seriesModel.getFormattedLabel(dataIndex, 'normal'),\n                    seriesModel.getRawValue(dataIndex)\n                ),\n                labelPositionOutside\n            );\n        }\n        else {\n            normalStyle.text = '';\n        }\n\n        if (hoverLabelModel.get('show')) {\n            setLabel(\n                hoverStyle, hoverLabelModel, color,\n                zrUtil.retrieve(\n                    seriesModel.getFormattedLabel(dataIndex, 'emphasis'),\n                    seriesModel.getRawValue(dataIndex)\n                ),\n                labelPositionOutside\n            );\n        }\n        else {\n            hoverStyle.text = '';\n        }\n    };\n\n    function setLabel(style, model, color, labelText, labelPositionOutside) {\n        graphic.setText(style, model, color);\n        style.text = labelText;\n        if (style.textPosition === 'outside') {\n            style.textPosition = labelPositionOutside;\n        }\n    }\n\n    module.exports = helper;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.6.1@echarts/lib/chart/bar/helper.js\n// module id = Js5e\n// module chunks = 0 1","/**\n * @module echarts/chart/helper/SymbolDraw\n */\n\n\n    var graphic = require('../../util/graphic');\n    var Symbol = require('./Symbol');\n\n    /**\n     * @constructor\n     * @alias module:echarts/chart/helper/SymbolDraw\n     * @param {module:zrender/graphic/Group} [symbolCtor]\n     */\n    function SymbolDraw(symbolCtor) {\n        this.group = new graphic.Group();\n\n        this._symbolCtor = symbolCtor || Symbol;\n    }\n\n    var symbolDrawProto = SymbolDraw.prototype;\n\n    function symbolNeedsDraw(data, idx, isIgnore) {\n        var point = data.getItemLayout(idx);\n        // Is an object\n        // if (point && point.hasOwnProperty('point')) {\n        //     point = point.point;\n        // }\n        return point && !isNaN(point[0]) && !isNaN(point[1]) && !(isIgnore && isIgnore(idx))\n                    && data.getItemVisual(idx, 'symbol') !== 'none';\n    }\n    /**\n     * Update symbols draw by new data\n     * @param {module:echarts/data/List} data\n     * @param {Array.<boolean>} [isIgnore]\n     */\n    symbolDrawProto.updateData = function (data, isIgnore) {\n        var group = this.group;\n        var seriesModel = data.hostModel;\n        var oldData = this._data;\n\n        var SymbolCtor = this._symbolCtor;\n\n        var seriesScope = {\n            itemStyle: seriesModel.getModel('itemStyle.normal').getItemStyle(['color']),\n            hoverItemStyle: seriesModel.getModel('itemStyle.emphasis').getItemStyle(),\n            symbolRotate: seriesModel.get('symbolRotate'),\n            symbolOffset: seriesModel.get('symbolOffset'),\n            hoverAnimation: seriesModel.get('hoverAnimation'),\n\n            labelModel: seriesModel.getModel('label.normal'),\n            hoverLabelModel: seriesModel.getModel('label.emphasis')\n        };\n\n        data.diff(oldData)\n            .add(function (newIdx) {\n                var point = data.getItemLayout(newIdx);\n                if (symbolNeedsDraw(data, newIdx, isIgnore)) {\n                    var symbolEl = new SymbolCtor(data, newIdx, seriesScope);\n                    symbolEl.attr('position', point);\n                    data.setItemGraphicEl(newIdx, symbolEl);\n                    group.add(symbolEl);\n                }\n            })\n            .update(function (newIdx, oldIdx) {\n                var symbolEl = oldData.getItemGraphicEl(oldIdx);\n                var point = data.getItemLayout(newIdx);\n                if (!symbolNeedsDraw(data, newIdx, isIgnore)) {\n                    group.remove(symbolEl);\n                    return;\n                }\n                if (!symbolEl) {\n                    symbolEl = new SymbolCtor(data, newIdx);\n                    symbolEl.attr('position', point);\n                }\n                else {\n                    symbolEl.updateData(data, newIdx, seriesScope);\n                    graphic.updateProps(symbolEl, {\n                        position: point\n                    }, seriesModel);\n                }\n\n                // Add back\n                group.add(symbolEl);\n\n                data.setItemGraphicEl(newIdx, symbolEl);\n            })\n            .remove(function (oldIdx) {\n                var el = oldData.getItemGraphicEl(oldIdx);\n                el && el.fadeOut(function () {\n                    group.remove(el);\n                });\n            })\n            .execute();\n\n        this._data = data;\n    };\n\n    symbolDrawProto.updateLayout = function () {\n        var data = this._data;\n        if (data) {\n            // Not use animation\n            data.eachItemGraphicEl(function (el, idx) {\n                var point = data.getItemLayout(idx);\n                el.attr('position', point);\n            });\n        }\n    };\n\n    symbolDrawProto.remove = function (enableAnimation) {\n        var group = this.group;\n        var data = this._data;\n        if (data) {\n            if (enableAnimation) {\n                data.eachItemGraphicEl(function (el) {\n                    el.fadeOut(function () {\n                        group.remove(el);\n                    });\n                });\n            }\n            else {\n                group.removeAll();\n            }\n        }\n    };\n\n    module.exports = SymbolDraw;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.6.1@echarts/lib/chart/helper/SymbolDraw.js\n// module id = K/R+\n// module chunks = 0 1","\n\n    module.exports = function (seriesType, ecModel) {\n        ecModel.eachSeriesByType(seriesType, function (seriesModel) {\n            var data = seriesModel.getData();\n            var coordSys = seriesModel.coordinateSystem;\n\n            if (!coordSys) {\n                return;\n            }\n\n            var dims = [];\n            var coordDims = coordSys.dimensions;\n            for (var i = 0; i < coordDims.length; i++) {\n                dims.push(seriesModel.coordDimToDataDim(coordSys.dimensions[i])[0]);\n            }\n\n            if (dims.length === 1) {\n                data.each(dims[0], function (x, idx) {\n                    // Also {Array.<number>}, not undefined to avoid if...else... statement\n                    data.setItemLayout(idx, isNaN(x) ? [NaN, NaN] : coordSys.dataToPoint(x));\n                });\n            }\n            else if (dims.length === 2) {\n                data.each(dims, function (x, y, idx) {\n                    // Also {Array.<number>}, not undefined to avoid if...else... statement\n                    data.setItemLayout(\n                        idx, (isNaN(x) || isNaN(y)) ? [NaN, NaN] : coordSys.dataToPoint([x, y])\n                    );\n                }, true);\n            }\n        });\n    };\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.6.1@echarts/lib/layout/points.js\n// module id = K0Lg\n// module chunks = 0 1","/**\n * @file Roam controller manager.\n */\n\n\n    // Only create one roam controller for each coordinate system.\n    // one roam controller might be refered by two inside data zoom\n    // components (for example, one for x and one for y). When user\n    // pan or zoom, only dispatch one action for those data zoom\n    // components.\n\n    var zrUtil = require('zrender/lib/core/util');\n    var RoamController = require('../../component/helper/RoamController');\n    var throttle = require('../../util/throttle');\n    var curry = zrUtil.curry;\n\n    var ATTR = '\\0_ec_dataZoom_roams';\n\n    var roams = {\n\n        /**\n         * @public\n         * @param {module:echarts/ExtensionAPI} api\n         * @param {Object} dataZoomInfo\n         * @param {string} dataZoomInfo.coordId\n         * @param {Function} dataZoomInfo.containsPoint\n         * @param {Array.<string>} dataZoomInfo.allCoordIds\n         * @param {string} dataZoomInfo.dataZoomId\n         * @param {number} dataZoomInfo.throttleRate\n         * @param {Function} dataZoomInfo.panGetRange\n         * @param {Function} dataZoomInfo.zoomGetRange\n         * @param {boolean} [dataZoomInfo.zoomLock]\n         * @param {boolean} [dataZoomInfo.disabled]\n         */\n        register: function (api, dataZoomInfo) {\n            var store = giveStore(api);\n            var theDataZoomId = dataZoomInfo.dataZoomId;\n            var theCoordId = dataZoomInfo.coordId;\n\n            // Do clean when a dataZoom changes its target coordnate system.\n            // Avoid memory leak, dispose all not-used-registered.\n            zrUtil.each(store, function (record, coordId) {\n                var dataZoomInfos = record.dataZoomInfos;\n                if (dataZoomInfos[theDataZoomId]\n                    && zrUtil.indexOf(dataZoomInfo.allCoordIds, theCoordId) < 0\n                ) {\n                    delete dataZoomInfos[theDataZoomId];\n                    record.count--;\n                }\n            });\n\n            cleanStore(store);\n\n            var record = store[theCoordId];\n            // Create if needed.\n            if (!record) {\n                record = store[theCoordId] = {\n                    coordId: theCoordId,\n                    dataZoomInfos: {},\n                    count: 0\n                };\n                record.controller = createController(api, record);\n                record.dispatchAction = zrUtil.curry(dispatchAction, api);\n            }\n            record.controller.enable(\n                dataZoomInfo.disabled ? false : dataZoomInfo.zoomLock ? 'move' : true,\n                dataZoomInfo.roamControllerOpt\n            );\n\n            // Consider resize, area should be always updated.\n            record.controller.setPointerChecker(dataZoomInfo.containsPoint);\n\n            // Update throttle.\n            throttle.createOrUpdate(\n                record,\n                'dispatchAction',\n                dataZoomInfo.throttleRate,\n                'fixRate'\n            );\n\n            // Update reference of dataZoom.\n            !(record.dataZoomInfos[theDataZoomId]) && record.count++;\n            record.dataZoomInfos[theDataZoomId] = dataZoomInfo;\n        },\n\n        /**\n         * @public\n         * @param {module:echarts/ExtensionAPI} api\n         * @param {string} dataZoomId\n         */\n        unregister: function (api, dataZoomId) {\n            var store = giveStore(api);\n\n            zrUtil.each(store, function (record) {\n                record.controller.dispose();\n                var dataZoomInfos = record.dataZoomInfos;\n                if (dataZoomInfos[dataZoomId]) {\n                    delete dataZoomInfos[dataZoomId];\n                    record.count--;\n                }\n            });\n\n            cleanStore(store);\n        },\n\n        /**\n         * @public\n         */\n        shouldRecordRange: function (payload, dataZoomId) {\n            if (payload && payload.type === 'dataZoom' && payload.batch) {\n                for (var i = 0, len = payload.batch.length; i < len; i++) {\n                    if (payload.batch[i].dataZoomId === dataZoomId) {\n                        return false;\n                    }\n                }\n            }\n            return true;\n        },\n\n        /**\n         * @public\n         */\n        generateCoordId: function (coordModel) {\n            return coordModel.type + '\\0_' + coordModel.id;\n        }\n    };\n\n    /**\n     * Key: coordId, value: {dataZoomInfos: [], count, controller}\n     * @type {Array.<Object>}\n     */\n    function giveStore(api) {\n        // Mount store on zrender instance, so that we do not\n        // need to worry about dispose.\n        var zr = api.getZr();\n        return zr[ATTR] || (zr[ATTR] = {});\n    }\n\n    function createController(api, newRecord) {\n        var controller = new RoamController(api.getZr());\n        controller.on('pan', curry(onPan, newRecord));\n        controller.on('zoom', curry(onZoom, newRecord));\n\n        return controller;\n    }\n\n    function cleanStore(store) {\n        zrUtil.each(store, function (record, coordId) {\n            if (!record.count) {\n                record.controller.dispose();\n                delete store[coordId];\n            }\n        });\n    }\n\n    function onPan(record, dx, dy, oldX, oldY, newX, newY) {\n        wrapAndDispatch(record, function (info) {\n            return info.panGetRange(record.controller, dx, dy, oldX, oldY, newX, newY);\n        });\n    }\n\n    function onZoom(record, scale, mouseX, mouseY) {\n        wrapAndDispatch(record, function (info) {\n            return info.zoomGetRange(record.controller, scale, mouseX, mouseY);\n        });\n    }\n\n    function wrapAndDispatch(record, getRange) {\n        var batch = [];\n\n        zrUtil.each(record.dataZoomInfos, function (info) {\n            var range = getRange(info);\n            range && batch.push({\n                dataZoomId: info.dataZoomId,\n                start: range[0],\n                end: range[1]\n            });\n        });\n\n        record.dispatchAction(batch);\n    }\n\n    /**\n     * This action will be throttled.\n     */\n    function dispatchAction(api, batch) {\n        api.dispatchAction({\n            type: 'dataZoom',\n            batch: batch\n        });\n    }\n\n    module.exports = roams;\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.6.1@echarts/lib/component/dataZoom/roams.js\n// module id = Klcl\n// module chunks = 0 1","\n    var ArrayCtor = typeof Float32Array === 'undefined'\n        ? Array\n        : Float32Array;\n\n    /**\n     * @typedef {Float32Array|Array.<number>} Vector2\n     */\n    /**\n     * 二维向量类\n     * @exports zrender/tool/vector\n     */\n    var vector = {\n        /**\n         * 创建一个向量\n         * @param {number} [x=0]\n         * @param {number} [y=0]\n         * @return {Vector2}\n         */\n        create: function (x, y) {\n            var out = new ArrayCtor(2);\n            if (x == null) {\n                x = 0;\n            }\n            if (y == null) {\n                y = 0;\n            }\n            out[0] = x;\n            out[1] = y;\n            return out;\n        },\n\n        /**\n         * 复制向量数据\n         * @param {Vector2} out\n         * @param {Vector2} v\n         * @return {Vector2}\n         */\n        copy: function (out, v) {\n            out[0] = v[0];\n            out[1] = v[1];\n            return out;\n        },\n\n        /**\n         * 克隆一个向量\n         * @param {Vector2} v\n         * @return {Vector2}\n         */\n        clone: function (v) {\n            var out = new ArrayCtor(2);\n            out[0] = v[0];\n            out[1] = v[1];\n            return out;\n        },\n\n        /**\n         * 设置向量的两个项\n         * @param {Vector2} out\n         * @param {number} a\n         * @param {number} b\n         * @return {Vector2} 结果\n         */\n        set: function (out, a, b) {\n            out[0] = a;\n            out[1] = b;\n            return out;\n        },\n\n        /**\n         * 向量相加\n         * @param {Vector2} out\n         * @param {Vector2} v1\n         * @param {Vector2} v2\n         */\n        add: function (out, v1, v2) {\n            out[0] = v1[0] + v2[0];\n            out[1] = v1[1] + v2[1];\n            return out;\n        },\n\n        /**\n         * 向量缩放后相加\n         * @param {Vector2} out\n         * @param {Vector2} v1\n         * @param {Vector2} v2\n         * @param {number} a\n         */\n        scaleAndAdd: function (out, v1, v2, a) {\n            out[0] = v1[0] + v2[0] * a;\n            out[1] = v1[1] + v2[1] * a;\n            return out;\n        },\n\n        /**\n         * 向量相减\n         * @param {Vector2} out\n         * @param {Vector2} v1\n         * @param {Vector2} v2\n         */\n        sub: function (out, v1, v2) {\n            out[0] = v1[0] - v2[0];\n            out[1] = v1[1] - v2[1];\n            return out;\n        },\n\n        /**\n         * 向量长度\n         * @param {Vector2} v\n         * @return {number}\n         */\n        len: function (v) {\n            return Math.sqrt(this.lenSquare(v));\n        },\n\n        /**\n         * 向量长度平方\n         * @param {Vector2} v\n         * @return {number}\n         */\n        lenSquare: function (v) {\n            return v[0] * v[0] + v[1] * v[1];\n        },\n\n        /**\n         * 向量乘法\n         * @param {Vector2} out\n         * @param {Vector2} v1\n         * @param {Vector2} v2\n         */\n        mul: function (out, v1, v2) {\n            out[0] = v1[0] * v2[0];\n            out[1] = v1[1] * v2[1];\n            return out;\n        },\n\n        /**\n         * 向量除法\n         * @param {Vector2} out\n         * @param {Vector2} v1\n         * @param {Vector2} v2\n         */\n        div: function (out, v1, v2) {\n            out[0] = v1[0] / v2[0];\n            out[1] = v1[1] / v2[1];\n            return out;\n        },\n\n        /**\n         * 向量点乘\n         * @param {Vector2} v1\n         * @param {Vector2} v2\n         * @return {number}\n         */\n        dot: function (v1, v2) {\n            return v1[0] * v2[0] + v1[1] * v2[1];\n        },\n\n        /**\n         * 向量缩放\n         * @param {Vector2} out\n         * @param {Vector2} v\n         * @param {number} s\n         */\n        scale: function (out, v, s) {\n            out[0] = v[0] * s;\n            out[1] = v[1] * s;\n            return out;\n        },\n\n        /**\n         * 向量归一化\n         * @param {Vector2} out\n         * @param {Vector2} v\n         */\n        normalize: function (out, v) {\n            var d = vector.len(v);\n            if (d === 0) {\n                out[0] = 0;\n                out[1] = 0;\n            }\n            else {\n                out[0] = v[0] / d;\n                out[1] = v[1] / d;\n            }\n            return out;\n        },\n\n        /**\n         * 计算向量间距离\n         * @param {Vector2} v1\n         * @param {Vector2} v2\n         * @return {number}\n         */\n        distance: function (v1, v2) {\n            return Math.sqrt(\n                (v1[0] - v2[0]) * (v1[0] - v2[0])\n                + (v1[1] - v2[1]) * (v1[1] - v2[1])\n            );\n        },\n\n        /**\n         * 向量距离平方\n         * @param {Vector2} v1\n         * @param {Vector2} v2\n         * @return {number}\n         */\n        distanceSquare: function (v1, v2) {\n            return (v1[0] - v2[0]) * (v1[0] - v2[0])\n                + (v1[1] - v2[1]) * (v1[1] - v2[1]);\n        },\n\n        /**\n         * 求负向量\n         * @param {Vector2} out\n         * @param {Vector2} v\n         */\n        negate: function (out, v) {\n            out[0] = -v[0];\n            out[1] = -v[1];\n            return out;\n        },\n\n        /**\n         * 插值两个点\n         * @param {Vector2} out\n         * @param {Vector2} v1\n         * @param {Vector2} v2\n         * @param {number} t\n         */\n        lerp: function (out, v1, v2, t) {\n            out[0] = v1[0] + t * (v2[0] - v1[0]);\n            out[1] = v1[1] + t * (v2[1] - v1[1]);\n            return out;\n        },\n\n        /**\n         * 矩阵左乘向量\n         * @param {Vector2} out\n         * @param {Vector2} v\n         * @param {Vector2} m\n         */\n        applyTransform: function (out, v, m) {\n            var x = v[0];\n            var y = v[1];\n            out[0] = m[0] * x + m[2] * y + m[4];\n            out[1] = m[1] * x + m[3] * y + m[5];\n            return out;\n        },\n        /**\n         * 求两个向量最小值\n         * @param  {Vector2} out\n         * @param  {Vector2} v1\n         * @param  {Vector2} v2\n         */\n        min: function (out, v1, v2) {\n            out[0] = Math.min(v1[0], v2[0]);\n            out[1] = Math.min(v1[1], v2[1]);\n            return out;\n        },\n        /**\n         * 求两个向量最大值\n         * @param  {Vector2} out\n         * @param  {Vector2} v1\n         * @param  {Vector2} v2\n         */\n        max: function (out, v1, v2) {\n            out[0] = Math.max(v1[0], v2[0]);\n            out[1] = Math.max(v1[1], v2[1]);\n            return out;\n        }\n    };\n\n    vector.length = vector.len;\n    vector.lengthSquare = vector.lenSquare;\n    vector.dist = vector.distance;\n    vector.distSquare = vector.distanceSquare;\n\n    module.exports = vector;\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.5.1@zrender/lib/core/vector.js\n// module id = Krco\n// module chunks = 0 1","/**\n * Interval scale\n * @module echarts/scale/Interval\n */\n\n\n\n    var numberUtil = require('../util/number');\n    var formatUtil = require('../util/format');\n    var Scale = require('./Scale');\n    var helper = require('./helper');\n\n    var roundNumber = numberUtil.round;\n\n    /**\n     * @alias module:echarts/coord/scale/Interval\n     * @constructor\n     */\n    var IntervalScale = Scale.extend({\n\n        type: 'interval',\n\n        _interval: 0,\n\n        _intervalPrecision: 2,\n\n        setExtent: function (start, end) {\n            var thisExtent = this._extent;\n            //start,end may be a Number like '25',so...\n            if (!isNaN(start)) {\n                thisExtent[0] = parseFloat(start);\n            }\n            if (!isNaN(end)) {\n                thisExtent[1] = parseFloat(end);\n            }\n        },\n\n        unionExtent: function (other) {\n            var extent = this._extent;\n            other[0] < extent[0] && (extent[0] = other[0]);\n            other[1] > extent[1] && (extent[1] = other[1]);\n\n            // unionExtent may called by it's sub classes\n            IntervalScale.prototype.setExtent.call(this, extent[0], extent[1]);\n        },\n        /**\n         * Get interval\n         */\n        getInterval: function () {\n            return this._interval;\n        },\n\n        /**\n         * Set interval\n         */\n        setInterval: function (interval) {\n            this._interval = interval;\n            // Dropped auto calculated niceExtent and use user setted extent\n            // We assume user wan't to set both interval, min, max to get a better result\n            this._niceExtent = this._extent.slice();\n        },\n\n        /**\n         * @return {Array.<number>}\n         */\n        getTicks: function () {\n            return helper.intervalScaleGetTicks(\n                this._interval, this._extent, this._niceExtent, this._intervalPrecision\n            );\n        },\n\n        /**\n         * @return {Array.<string>}\n         */\n        getTicksLabels: function () {\n            var labels = [];\n            var ticks = this.getTicks();\n            for (var i = 0; i < ticks.length; i++) {\n                labels.push(this.getLabel(ticks[i]));\n            }\n            return labels;\n        },\n\n        /**\n         * @param {number} data\n         * @param {Object} [opt]\n         * @param {number|string} [opt.precision] If 'auto', use nice presision.\n         * @param {boolean} [opt.pad] returns 1.50 but not 1.5 if precision is 2.\n         * @return {string}\n         */\n        getLabel: function (data, opt) {\n            if (data == null) {\n                return '';\n            }\n\n            var precision = opt && opt.precision;\n\n            if (precision == null) {\n                precision = numberUtil.getPrecisionSafe(data) || 0;\n            }\n            else if (precision === 'auto') {\n                // Should be more precise then tick.\n                precision = this._intervalPrecision;\n            }\n\n            // (1) If `precision` is set, 12.005 should be display as '12.00500'.\n            // (2) Use roundNumber (toFixed) to avoid scientific notation like '3.5e-7'.\n            data = roundNumber(data, precision, true);\n\n            return formatUtil.addCommas(data);\n        },\n\n        /**\n         * Update interval and extent of intervals for nice ticks\n         *\n         * @param {number} [splitNumber = 5] Desired number of ticks\n         * @param {number} [minInterval]\n         */\n        niceTicks: function (splitNumber, minInterval) {\n            splitNumber = splitNumber || 5;\n            var extent = this._extent;\n            var span = extent[1] - extent[0];\n            if (!isFinite(span)) {\n                return;\n            }\n            // User may set axis min 0 and data are all negative\n            // FIXME If it needs to reverse ?\n            if (span < 0) {\n                span = -span;\n                extent.reverse();\n            }\n\n            var result = helper.intervalScaleNiceTicks(extent, splitNumber, minInterval);\n\n            this._intervalPrecision = result.intervalPrecision;\n            this._interval = result.interval;\n            this._niceExtent = result.niceTickExtent;\n        },\n\n        /**\n         * Nice extent.\n         * @param {Object} opt\n         * @param {number} [opt.splitNumber = 5] Given approx tick number\n         * @param {boolean} [opt.fixMin=false]\n         * @param {boolean} [opt.fixMax=false]\n         * @param {boolean} [opt.minInterval=false]\n         */\n        niceExtent: function (opt) {\n            var extent = this._extent;\n            // If extent start and end are same, expand them\n            if (extent[0] === extent[1]) {\n                if (extent[0] !== 0) {\n                    // Expand extent\n                    var expandSize = extent[0];\n                    // In the fowllowing case\n                    //      Axis has been fixed max 100\n                    //      Plus data are all 100 and axis extent are [100, 100].\n                    // Extend to the both side will cause expanded max is larger than fixed max.\n                    // So only expand to the smaller side.\n                    if (!opt.fixMax) {\n                        extent[1] += expandSize / 2;\n                        extent[0] -= expandSize / 2;\n                    }\n                    else {\n                        extent[0] -= expandSize / 2;\n                    }\n                }\n                else {\n                    extent[1] = 1;\n                }\n            }\n            var span = extent[1] - extent[0];\n            // If there are no data and extent are [Infinity, -Infinity]\n            if (!isFinite(span)) {\n                extent[0] = 0;\n                extent[1] = 1;\n            }\n\n            this.niceTicks(opt.splitNumber, opt.minInterval);\n\n            // var extent = this._extent;\n            var interval = this._interval;\n\n            if (!opt.fixMin) {\n                extent[0] = roundNumber(Math.floor(extent[0] / interval) * interval);\n            }\n            if (!opt.fixMax) {\n                extent[1] = roundNumber(Math.ceil(extent[1] / interval) * interval);\n            }\n        }\n    });\n\n    /**\n     * @return {module:echarts/scale/Time}\n     */\n    IntervalScale.create = function () {\n        return new IntervalScale();\n    };\n\n    module.exports = IntervalScale;\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.6.1@echarts/lib/scale/Interval.js\n// module id = L5YH\n// module chunks = 0 1","'use strict';\n// Symbol factory\n\n\n    var graphic = require('./graphic');\n    var BoundingRect = require('zrender/lib/core/BoundingRect');\n\n    /**\n     * Triangle shape\n     * @inner\n     */\n    var Triangle = graphic.extendShape({\n        type: 'triangle',\n        shape: {\n            cx: 0,\n            cy: 0,\n            width: 0,\n            height: 0\n        },\n        buildPath: function (path, shape) {\n            var cx = shape.cx;\n            var cy = shape.cy;\n            var width = shape.width / 2;\n            var height = shape.height / 2;\n            path.moveTo(cx, cy - height);\n            path.lineTo(cx + width, cy + height);\n            path.lineTo(cx - width, cy + height);\n            path.closePath();\n        }\n    });\n    /**\n     * Diamond shape\n     * @inner\n     */\n    var Diamond = graphic.extendShape({\n        type: 'diamond',\n        shape: {\n            cx: 0,\n            cy: 0,\n            width: 0,\n            height: 0\n        },\n        buildPath: function (path, shape) {\n            var cx = shape.cx;\n            var cy = shape.cy;\n            var width = shape.width / 2;\n            var height = shape.height / 2;\n            path.moveTo(cx, cy - height);\n            path.lineTo(cx + width, cy);\n            path.lineTo(cx, cy + height);\n            path.lineTo(cx - width, cy);\n            path.closePath();\n        }\n    });\n\n    /**\n     * Pin shape\n     * @inner\n     */\n    var Pin = graphic.extendShape({\n        type: 'pin',\n        shape: {\n            // x, y on the cusp\n            x: 0,\n            y: 0,\n            width: 0,\n            height: 0\n        },\n\n        buildPath: function (path, shape) {\n            var x = shape.x;\n            var y = shape.y;\n            var w = shape.width / 5 * 3;\n            // Height must be larger than width\n            var h = Math.max(w, shape.height);\n            var r = w / 2;\n\n            // Dist on y with tangent point and circle center\n            var dy = r * r / (h - r);\n            var cy = y - h + r + dy;\n            var angle = Math.asin(dy / r);\n            // Dist on x with tangent point and circle center\n            var dx = Math.cos(angle) * r;\n\n            var tanX = Math.sin(angle);\n            var tanY = Math.cos(angle);\n\n            path.arc(\n                x, cy, r,\n                Math.PI - angle,\n                Math.PI * 2 + angle\n            );\n\n            var cpLen = r * 0.6;\n            var cpLen2 = r * 0.7;\n            path.bezierCurveTo(\n                x + dx - tanX * cpLen, cy + dy + tanY * cpLen,\n                x, y - cpLen2,\n                x, y\n            );\n            path.bezierCurveTo(\n                x, y - cpLen2,\n                x - dx + tanX * cpLen, cy + dy + tanY * cpLen,\n                x - dx, cy + dy\n            );\n            path.closePath();\n        }\n    });\n\n    /**\n     * Arrow shape\n     * @inner\n     */\n    var Arrow = graphic.extendShape({\n\n        type: 'arrow',\n\n        shape: {\n            x: 0,\n            y: 0,\n            width: 0,\n            height: 0\n        },\n\n        buildPath: function (ctx, shape) {\n            var height = shape.height;\n            var width = shape.width;\n            var x = shape.x;\n            var y = shape.y;\n            var dx = width / 3 * 2;\n            ctx.moveTo(x, y);\n            ctx.lineTo(x + dx, y + height);\n            ctx.lineTo(x, y + height / 4 * 3);\n            ctx.lineTo(x - dx, y + height);\n            ctx.lineTo(x, y);\n            ctx.closePath();\n        }\n    });\n\n    /**\n     * Map of path contructors\n     * @type {Object.<string, module:zrender/graphic/Path>}\n     */\n    var symbolCtors = {\n        line: graphic.Line,\n\n        rect: graphic.Rect,\n\n        roundRect: graphic.Rect,\n\n        square: graphic.Rect,\n\n        circle: graphic.Circle,\n\n        diamond: Diamond,\n\n        pin: Pin,\n\n        arrow: Arrow,\n\n        triangle: Triangle\n    };\n\n    var symbolShapeMakers = {\n\n        line: function (x, y, w, h, shape) {\n            // FIXME\n            shape.x1 = x;\n            shape.y1 = y + h / 2;\n            shape.x2 = x + w;\n            shape.y2 = y + h / 2;\n        },\n\n        rect: function (x, y, w, h, shape) {\n            shape.x = x;\n            shape.y = y;\n            shape.width = w;\n            shape.height = h;\n        },\n\n        roundRect: function (x, y, w, h, shape) {\n            shape.x = x;\n            shape.y = y;\n            shape.width = w;\n            shape.height = h;\n            shape.r = Math.min(w, h) / 4;\n        },\n\n        square: function (x, y, w, h, shape) {\n            var size = Math.min(w, h);\n            shape.x = x;\n            shape.y = y;\n            shape.width = size;\n            shape.height = size;\n        },\n\n        circle: function (x, y, w, h, shape) {\n            // Put circle in the center of square\n            shape.cx = x + w / 2;\n            shape.cy = y + h / 2;\n            shape.r = Math.min(w, h) / 2;\n        },\n\n        diamond: function (x, y, w, h, shape) {\n            shape.cx = x + w / 2;\n            shape.cy = y + h / 2;\n            shape.width = w;\n            shape.height = h;\n        },\n\n        pin: function (x, y, w, h, shape) {\n            shape.x = x + w / 2;\n            shape.y = y + h / 2;\n            shape.width = w;\n            shape.height = h;\n        },\n\n        arrow: function (x, y, w, h, shape) {\n            shape.x = x + w / 2;\n            shape.y = y + h / 2;\n            shape.width = w;\n            shape.height = h;\n        },\n\n        triangle: function (x, y, w, h, shape) {\n            shape.cx = x + w / 2;\n            shape.cy = y + h / 2;\n            shape.width = w;\n            shape.height = h;\n        }\n    };\n\n    var symbolBuildProxies = {};\n    for (var name in symbolCtors) {\n        if (symbolCtors.hasOwnProperty(name)) {\n            symbolBuildProxies[name] = new symbolCtors[name]();\n        }\n    }\n\n    var Symbol = graphic.extendShape({\n\n        type: 'symbol',\n\n        shape: {\n            symbolType: '',\n            x: 0,\n            y: 0,\n            width: 0,\n            height: 0\n        },\n\n        beforeBrush: function () {\n            var style = this.style;\n            var shape = this.shape;\n            // FIXME\n            if (shape.symbolType === 'pin' && style.textPosition === 'inside') {\n                style.textPosition = ['50%', '40%'];\n                style.textAlign = 'center';\n                style.textVerticalAlign = 'middle';\n            }\n        },\n\n        buildPath: function (ctx, shape, inBundle) {\n            var symbolType = shape.symbolType;\n            var proxySymbol = symbolBuildProxies[symbolType];\n            if (shape.symbolType !== 'none') {\n                if (!proxySymbol) {\n                    // Default rect\n                    symbolType = 'rect';\n                    proxySymbol = symbolBuildProxies[symbolType];\n                }\n                symbolShapeMakers[symbolType](\n                    shape.x, shape.y, shape.width, shape.height, proxySymbol.shape\n                );\n                proxySymbol.buildPath(ctx, proxySymbol.shape, inBundle);\n            }\n        }\n    });\n\n    // Provide setColor helper method to avoid determine if set the fill or stroke outside\n    var symbolPathSetColor = function (color) {\n        if (this.type !== 'image') {\n            var symbolStyle = this.style;\n            var symbolShape = this.shape;\n            if (symbolShape && symbolShape.symbolType === 'line') {\n                symbolStyle.stroke = color;\n            }\n            else if (this.__isEmptyBrush) {\n                symbolStyle.stroke = color;\n                symbolStyle.fill = '#fff';\n            }\n            else {\n                // FIXME 判断图形默认是填充还是描边，使用 onlyStroke ?\n                symbolStyle.fill && (symbolStyle.fill = color);\n                symbolStyle.stroke && (symbolStyle.stroke = color);\n            }\n            this.dirty(false);\n        }\n    };\n\n    var symbolUtil = {\n        /**\n         * Create a symbol element with given symbol configuration: shape, x, y, width, height, color\n         * @param {string} symbolType\n         * @param {number} x\n         * @param {number} y\n         * @param {number} w\n         * @param {number} h\n         * @param {string} color\n         */\n        createSymbol: function (symbolType, x, y, w, h, color) {\n            // TODO Support image object, DynamicImage.\n\n            var isEmpty = symbolType.indexOf('empty') === 0;\n            if (isEmpty) {\n                symbolType = symbolType.substr(5, 1).toLowerCase() + symbolType.substr(6);\n            }\n            var symbolPath;\n\n            if (symbolType.indexOf('image://') === 0) {\n                symbolPath = new graphic.Image({\n                    style: {\n                        image: symbolType.slice(8),\n                        x: x,\n                        y: y,\n                        width: w,\n                        height: h\n                    }\n                });\n            }\n            else if (symbolType.indexOf('path://') === 0) {\n                symbolPath = graphic.makePath(symbolType.slice(7), {}, new BoundingRect(x, y, w, h));\n            }\n            else {\n                symbolPath = new Symbol({\n                    shape: {\n                        symbolType: symbolType,\n                        x: x,\n                        y: y,\n                        width: w,\n                        height: h\n                    }\n                });\n            }\n\n            symbolPath.__isEmptyBrush = isEmpty;\n\n            symbolPath.setColor = symbolPathSetColor;\n\n            symbolPath.setColor(color);\n\n            return symbolPath;\n        }\n    };\n\n    module.exports = symbolUtil;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.6.1@echarts/lib/util/symbol.js\n// module id = LDr7\n// module chunks = 0 1","\n\n    var featureManager = require('./featureManager');\n    var zrUtil = require('zrender/lib/core/util');\n\n    var ToolboxModel = require('../../echarts').extendComponentModel({\n\n        type: 'toolbox',\n\n        layoutMode: {\n            type: 'box',\n            ignoreSize: true\n        },\n\n        mergeDefaultAndTheme: function (option) {\n            ToolboxModel.superApply(this, 'mergeDefaultAndTheme', arguments);\n\n            zrUtil.each(this.option.feature, function (featureOpt, featureName) {\n                var Feature = featureManager.get(featureName);\n                Feature && zrUtil.merge(featureOpt, Feature.defaultOption);\n            });\n        },\n\n        defaultOption: {\n\n            show: true,\n\n            z: 6,\n\n            zlevel: 0,\n\n            orient: 'horizontal',\n\n            left: 'right',\n\n            top: 'top',\n\n            // right\n            // bottom\n\n            backgroundColor: 'transparent',\n\n            borderColor: '#ccc',\n\n            borderWidth: 0,\n\n            padding: 5,\n\n            itemSize: 15,\n\n            itemGap: 8,\n\n            showTitle: true,\n\n            iconStyle: {\n                normal: {\n                    borderColor: '#666',\n                    color: 'none'\n                },\n                emphasis: {\n                    borderColor: '#3E98C5'\n                }\n            }\n            // textStyle: {},\n\n            // feature\n        }\n    });\n\n    module.exports = ToolboxModel;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.6.1@echarts/lib/component/toolbox/ToolboxModel.js\n// module id = LE4r\n// module chunks = 0 1","\n\n    var formatUtil = require('./format');\n    var nubmerUtil = require('./number');\n    var Model = require('../model/Model');\n    var zrUtil = require('zrender/lib/core/util');\n    var each = zrUtil.each;\n    var isObject = zrUtil.isObject;\n\n    var modelUtil = {};\n\n    /**\n     * If value is not array, then translate it to array.\n     * @param  {*} value\n     * @return {Array} [value] or value\n     */\n    modelUtil.normalizeToArray = function (value) {\n        return value instanceof Array\n            ? value\n            : value == null\n            ? []\n            : [value];\n    };\n\n    /**\n     * Sync default option between normal and emphasis like `position` and `show`\n     * In case some one will write code like\n     *     label: {\n     *         normal: {\n     *             show: false,\n     *             position: 'outside',\n     *             textStyle: {\n     *                 fontSize: 18\n     *             }\n     *         },\n     *         emphasis: {\n     *             show: true\n     *         }\n     *     }\n     * @param {Object} opt\n     * @param {Array.<string>} subOpts\n     */\n     modelUtil.defaultEmphasis = function (opt, subOpts) {\n        if (opt) {\n            var emphasisOpt = opt.emphasis = opt.emphasis || {};\n            var normalOpt = opt.normal = opt.normal || {};\n\n            // Default emphasis option from normal\n            each(subOpts, function (subOptName) {\n                var val = zrUtil.retrieve(emphasisOpt[subOptName], normalOpt[subOptName]);\n                if (val != null) {\n                    emphasisOpt[subOptName] = val;\n                }\n            });\n        }\n    };\n\n    modelUtil.LABEL_OPTIONS = ['position', 'offset', 'show', 'textStyle', 'distance', 'formatter'];\n\n    /**\n     * data could be [12, 2323, {value: 223}, [1221, 23], {value: [2, 23]}]\n     * This helper method retieves value from data.\n     * @param {string|number|Date|Array|Object} dataItem\n     * @return {number|string|Date|Array.<number|string|Date>}\n     */\n    modelUtil.getDataItemValue = function (dataItem) {\n        // Performance sensitive.\n        return dataItem && (dataItem.value == null ? dataItem : dataItem.value);\n    };\n\n    /**\n     * data could be [12, 2323, {value: 223}, [1221, 23], {value: [2, 23]}]\n     * This helper method determine if dataItem has extra option besides value\n     * @param {string|number|Date|Array|Object} dataItem\n     */\n    modelUtil.isDataItemOption = function (dataItem) {\n        return isObject(dataItem)\n            && !(dataItem instanceof Array);\n            // // markLine data can be array\n            // && !(dataItem[0] && isObject(dataItem[0]) && !(dataItem[0] instanceof Array));\n    };\n\n    /**\n     * This helper method convert value in data.\n     * @param {string|number|Date} value\n     * @param {Object|string} [dimInfo] If string (like 'x'), dimType defaults 'number'.\n     */\n    modelUtil.converDataValue = function (value, dimInfo) {\n        // Performance sensitive.\n        var dimType = dimInfo && dimInfo.type;\n        if (dimType === 'ordinal') {\n            return value;\n        }\n\n        if (dimType === 'time'\n            // spead up when using timestamp\n            && typeof value !== 'number'\n            && value != null\n            && value !== '-'\n        ) {\n            value = +nubmerUtil.parseDate(value);\n        }\n\n        // dimType defaults 'number'.\n        // If dimType is not ordinal and value is null or undefined or NaN or '-',\n        // parse to NaN.\n        return (value == null || value === '')\n            ? NaN : +value; // If string (like '-'), using '+' parse to NaN\n    };\n\n    /**\n     * Create a model proxy to be used in tooltip for edge data, markLine data, markPoint data.\n     * @param {module:echarts/data/List} data\n     * @param {Object} opt\n     * @param {string} [opt.seriesIndex]\n     * @param {Object} [opt.name]\n     * @param {Object} [opt.mainType]\n     * @param {Object} [opt.subType]\n     */\n    modelUtil.createDataFormatModel = function (data, opt) {\n        var model = new Model();\n        zrUtil.mixin(model, modelUtil.dataFormatMixin);\n        model.seriesIndex = opt.seriesIndex;\n        model.name = opt.name || '';\n        model.mainType = opt.mainType;\n        model.subType = opt.subType;\n\n        model.getData = function () {\n            return data;\n        };\n        return model;\n    };\n\n    // PENDING A little ugly\n    modelUtil.dataFormatMixin = {\n        /**\n         * Get params for formatter\n         * @param {number} dataIndex\n         * @param {string} [dataType]\n         * @return {Object}\n         */\n        getDataParams: function (dataIndex, dataType) {\n            var data = this.getData(dataType);\n            var rawValue = this.getRawValue(dataIndex, dataType);\n            var rawDataIndex = data.getRawIndex(dataIndex);\n            var name = data.getName(dataIndex, true);\n            var itemOpt = data.getRawDataItem(dataIndex);\n            var color = data.getItemVisual(dataIndex, 'color');\n\n            return {\n                componentType: this.mainType,\n                componentSubType: this.subType,\n                seriesType: this.mainType === 'series' ? this.subType : null,\n                seriesIndex: this.seriesIndex,\n                seriesId: this.id,\n                seriesName: this.name,\n                name: name,\n                dataIndex: rawDataIndex,\n                data: itemOpt,\n                dataType: dataType,\n                value: rawValue,\n                color: color,\n                marker: formatUtil.getTooltipMarker(color),\n\n                // Param name list for mapping `a`, `b`, `c`, `d`, `e`\n                $vars: ['seriesName', 'name', 'value']\n            };\n        },\n\n        /**\n         * Format label\n         * @param {number} dataIndex\n         * @param {string} [status='normal'] 'normal' or 'emphasis'\n         * @param {string} [dataType]\n         * @param {number} [dimIndex]\n         * @return {string}\n         */\n        getFormattedLabel: function (dataIndex, status, dataType, dimIndex) {\n            status = status || 'normal';\n            var data = this.getData(dataType);\n            var itemModel = data.getItemModel(dataIndex);\n\n            var params = this.getDataParams(dataIndex, dataType);\n            if (dimIndex != null && (params.value instanceof Array)) {\n                params.value = params.value[dimIndex];\n            }\n\n            var formatter = itemModel.get(['label', status, 'formatter']);\n\n            if (typeof formatter === 'function') {\n                params.status = status;\n                return formatter(params);\n            }\n            else if (typeof formatter === 'string') {\n                return formatUtil.formatTpl(formatter, params);\n            }\n        },\n\n        /**\n         * Get raw value in option\n         * @param {number} idx\n         * @param {string} [dataType]\n         * @return {Object}\n         */\n        getRawValue: function (idx, dataType) {\n            var data = this.getData(dataType);\n            var dataItem = data.getRawDataItem(idx);\n            if (dataItem != null) {\n                return (isObject(dataItem) && !(dataItem instanceof Array))\n                    ? dataItem.value : dataItem;\n            }\n        },\n\n        /**\n         * Should be implemented.\n         * @param {number} dataIndex\n         * @param {boolean} [multipleSeries=false]\n         * @param {number} [dataType]\n         * @return {string} tooltip string\n         */\n        formatTooltip: zrUtil.noop\n    };\n\n    /**\n     * Mapping to exists for merge.\n     *\n     * @public\n     * @param {Array.<Object>|Array.<module:echarts/model/Component>} exists\n     * @param {Object|Array.<Object>} newCptOptions\n     * @return {Array.<Object>} Result, like [{exist: ..., option: ...}, {}],\n     *                          index of which is the same as exists.\n     */\n    modelUtil.mappingToExists = function (exists, newCptOptions) {\n        // Mapping by the order by original option (but not order of\n        // new option) in merge mode. Because we should ensure\n        // some specified index (like xAxisIndex) is consistent with\n        // original option, which is easy to understand, espatially in\n        // media query. And in most case, merge option is used to\n        // update partial option but not be expected to change order.\n        newCptOptions = (newCptOptions || []).slice();\n\n        var result = zrUtil.map(exists || [], function (obj, index) {\n            return {exist: obj};\n        });\n\n        // Mapping by id or name if specified.\n        each(newCptOptions, function (cptOption, index) {\n            if (!isObject(cptOption)) {\n                return;\n            }\n\n            // id has highest priority.\n            for (var i = 0; i < result.length; i++) {\n                if (!result[i].option // Consider name: two map to one.\n                    && cptOption.id != null\n                    && result[i].exist.id === cptOption.id + ''\n                ) {\n                    result[i].option = cptOption;\n                    newCptOptions[index] = null;\n                    return;\n                }\n            }\n\n            for (var i = 0; i < result.length; i++) {\n                var exist = result[i].exist;\n                if (!result[i].option // Consider name: two map to one.\n                    // Can not match when both ids exist but different.\n                    && (exist.id == null || cptOption.id == null)\n                    && cptOption.name != null\n                    && !modelUtil.isIdInner(cptOption)\n                    && !modelUtil.isIdInner(exist)\n                    && exist.name === cptOption.name + ''\n                ) {\n                    result[i].option = cptOption;\n                    newCptOptions[index] = null;\n                    return;\n                }\n            }\n        });\n\n        // Otherwise mapping by index.\n        each(newCptOptions, function (cptOption, index) {\n            if (!isObject(cptOption)) {\n                return;\n            }\n\n            var i = 0;\n            for (; i < result.length; i++) {\n                var exist = result[i].exist;\n                if (!result[i].option\n                    // Existing model that already has id should be able to\n                    // mapped to (because after mapping performed model may\n                    // be assigned with a id, whish should not affect next\n                    // mapping), except those has inner id.\n                    && !modelUtil.isIdInner(exist)\n                    // Caution:\n                    // Do not overwrite id. But name can be overwritten,\n                    // because axis use name as 'show label text'.\n                    // 'exist' always has id and name and we dont\n                    // need to check it.\n                    && cptOption.id == null\n                ) {\n                    result[i].option = cptOption;\n                    break;\n                }\n            }\n\n            if (i >= result.length) {\n                result.push({option: cptOption});\n            }\n        });\n\n        return result;\n    };\n\n    /**\n     * Make id and name for mapping result (result of mappingToExists)\n     * into `keyInfo` field.\n     *\n     * @public\n     * @param {Array.<Object>} Result, like [{exist: ..., option: ...}, {}],\n     *                          which order is the same as exists.\n     * @return {Array.<Object>} The input.\n     */\n    modelUtil.makeIdAndName = function (mapResult) {\n        // We use this id to hash component models and view instances\n        // in echarts. id can be specified by user, or auto generated.\n\n        // The id generation rule ensures new view instance are able\n        // to mapped to old instance when setOption are called in\n        // no-merge mode. So we generate model id by name and plus\n        // type in view id.\n\n        // name can be duplicated among components, which is convenient\n        // to specify multi components (like series) by one name.\n\n        // Ensure that each id is distinct.\n        var idMap = zrUtil.createHashMap();\n\n        each(mapResult, function (item, index) {\n            var existCpt = item.exist;\n            existCpt && idMap.set(existCpt.id, item);\n        });\n\n        each(mapResult, function (item, index) {\n            var opt = item.option;\n\n            zrUtil.assert(\n                !opt || opt.id == null || !idMap.get(opt.id) || idMap.get(opt.id) === item,\n                'id duplicates: ' + (opt && opt.id)\n            );\n\n            opt && opt.id != null && idMap.set(opt.id, item);\n            !item.keyInfo && (item.keyInfo = {});\n        });\n\n        // Make name and id.\n        each(mapResult, function (item, index) {\n            var existCpt = item.exist;\n            var opt = item.option;\n            var keyInfo = item.keyInfo;\n\n            if (!isObject(opt)) {\n                return;\n            }\n\n            // name can be overwitten. Consider case: axis.name = '20km'.\n            // But id generated by name will not be changed, which affect\n            // only in that case: setOption with 'not merge mode' and view\n            // instance will be recreated, which can be accepted.\n            keyInfo.name = opt.name != null\n                ? opt.name + ''\n                : existCpt\n                ? existCpt.name\n                : '\\0-'; // name may be displayed on screen, so use '-'.\n\n            if (existCpt) {\n                keyInfo.id = existCpt.id;\n            }\n            else if (opt.id != null) {\n                keyInfo.id = opt.id + '';\n            }\n            else {\n                // Consider this situatoin:\n                //  optionA: [{name: 'a'}, {name: 'a'}, {..}]\n                //  optionB [{..}, {name: 'a'}, {name: 'a'}]\n                // Series with the same name between optionA and optionB\n                // should be mapped.\n                var idNum = 0;\n                do {\n                    keyInfo.id = '\\0' + keyInfo.name + '\\0' + idNum++;\n                }\n                while (idMap.get(keyInfo.id));\n            }\n\n            idMap.set(keyInfo.id, item);\n        });\n    };\n\n    /**\n     * @public\n     * @param {Object} cptOption\n     * @return {boolean}\n     */\n    modelUtil.isIdInner = function (cptOption) {\n        return isObject(cptOption)\n            && cptOption.id\n            && (cptOption.id + '').indexOf('\\0_ec_\\0') === 0;\n    };\n\n    /**\n     * A helper for removing duplicate items between batchA and batchB,\n     * and in themselves, and categorize by series.\n     *\n     * @param {Array.<Object>} batchA Like: [{seriesId: 2, dataIndex: [32, 4, 5]}, ...]\n     * @param {Array.<Object>} batchB Like: [{seriesId: 2, dataIndex: [32, 4, 5]}, ...]\n     * @return {Array.<Array.<Object>, Array.<Object>>} result: [resultBatchA, resultBatchB]\n     */\n    modelUtil.compressBatches = function (batchA, batchB) {\n        var mapA = {};\n        var mapB = {};\n\n        makeMap(batchA || [], mapA);\n        makeMap(batchB || [], mapB, mapA);\n\n        return [mapToArray(mapA), mapToArray(mapB)];\n\n        function makeMap(sourceBatch, map, otherMap) {\n            for (var i = 0, len = sourceBatch.length; i < len; i++) {\n                var seriesId = sourceBatch[i].seriesId;\n                var dataIndices = modelUtil.normalizeToArray(sourceBatch[i].dataIndex);\n                var otherDataIndices = otherMap && otherMap[seriesId];\n\n                for (var j = 0, lenj = dataIndices.length; j < lenj; j++) {\n                    var dataIndex = dataIndices[j];\n\n                    if (otherDataIndices && otherDataIndices[dataIndex]) {\n                        otherDataIndices[dataIndex] = null;\n                    }\n                    else {\n                        (map[seriesId] || (map[seriesId] = {}))[dataIndex] = 1;\n                    }\n                }\n            }\n        }\n\n        function mapToArray(map, isData) {\n            var result = [];\n            for (var i in map) {\n                if (map.hasOwnProperty(i) && map[i] != null) {\n                    if (isData) {\n                        result.push(+i);\n                    }\n                    else {\n                        var dataIndices = mapToArray(map[i], true);\n                        dataIndices.length && result.push({seriesId: i, dataIndex: dataIndices});\n                    }\n                }\n            }\n            return result;\n        }\n    };\n\n    /**\n     * @param {module:echarts/data/List} data\n     * @param {Object} payload Contains dataIndex (means rawIndex) / dataIndexInside / name\n     *                         each of which can be Array or primary type.\n     * @return {number|Array.<number>} dataIndex If not found, return undefined/null.\n     */\n    modelUtil.queryDataIndex = function (data, payload) {\n        if (payload.dataIndexInside != null) {\n            return payload.dataIndexInside;\n        }\n        else if (payload.dataIndex != null) {\n            return zrUtil.isArray(payload.dataIndex)\n                ? zrUtil.map(payload.dataIndex, function (value) {\n                    return data.indexOfRawIndex(value);\n                })\n                : data.indexOfRawIndex(payload.dataIndex);\n        }\n        else if (payload.name != null) {\n            return zrUtil.isArray(payload.name)\n                ? zrUtil.map(payload.name, function (value) {\n                    return data.indexOfName(value);\n                })\n                : data.indexOfName(payload.name);\n        }\n    };\n\n    /**\n     * Enable property storage to any host object.\n     * Notice: Serialization is not supported.\n     *\n     * For example:\n     * var get = modelUitl.makeGetter();\n     *\n     * function some(hostObj) {\n     *      get(hostObj)._someProperty = 1212;\n     *      ...\n     * }\n     *\n     * @return {Function}\n     */\n    modelUtil.makeGetter = (function () {\n        var index = 0;\n        return function () {\n            var key = '\\0__ec_prop_getter_' + index++;\n            return function (hostObj) {\n                return hostObj[key] || (hostObj[key] = {});\n            };\n        };\n    })();\n\n    /**\n     * @param {module:echarts/model/Global} ecModel\n     * @param {string|Object} finder\n     *        If string, e.g., 'geo', means {geoIndex: 0}.\n     *        If Object, could contain some of these properties below:\n     *        {\n     *            seriesIndex, seriesId, seriesName,\n     *            geoIndex, geoId, geoName,\n     *            bmapIndex, bmapId, bmapName,\n     *            xAxisIndex, xAxisId, xAxisName,\n     *            yAxisIndex, yAxisId, yAxisName,\n     *            gridIndex, gridId, gridName,\n     *            ... (can be extended)\n     *        }\n     *        Each properties can be number|string|Array.<number>|Array.<string>\n     *        For example, a finder could be\n     *        {\n     *            seriesIndex: 3,\n     *            geoId: ['aa', 'cc'],\n     *            gridName: ['xx', 'rr']\n     *        }\n     *        xxxIndex can be set as 'all' (means all xxx) or 'none' (means not specify)\n     *        If nothing or null/undefined specified, return nothing.\n     * @param {Object} [opt]\n     * @param {string} [opt.defaultMainType]\n     * @param {Array.<string>} [opt.includeMainTypes]\n     * @return {Object} result like:\n     *        {\n     *            seriesModels: [seriesModel1, seriesModel2],\n     *            seriesModel: seriesModel1, // The first model\n     *            geoModels: [geoModel1, geoModel2],\n     *            geoModel: geoModel1, // The first model\n     *            ...\n     *        }\n     */\n    modelUtil.parseFinder = function (ecModel, finder, opt) {\n        if (zrUtil.isString(finder)) {\n            var obj = {};\n            obj[finder + 'Index'] = 0;\n            finder = obj;\n        }\n\n        var defaultMainType = opt && opt.defaultMainType;\n        if (defaultMainType\n            && !has(finder, defaultMainType + 'Index')\n            && !has(finder, defaultMainType + 'Id')\n            && !has(finder, defaultMainType + 'Name')\n        ) {\n            finder[defaultMainType + 'Index'] = 0;\n        }\n\n        var result = {};\n\n        each(finder, function (value, key) {\n            var value = finder[key];\n\n            // Exclude 'dataIndex' and other illgal keys.\n            if (key === 'dataIndex' || key === 'dataIndexInside') {\n                result[key] = value;\n                return;\n            }\n\n            var parsedKey = key.match(/^(\\w+)(Index|Id|Name)$/) || [];\n            var mainType = parsedKey[1];\n            var queryType = (parsedKey[2] || '').toLowerCase();\n\n            if (!mainType\n                || !queryType\n                || value == null\n                || (queryType === 'index' && value === 'none')\n                || (opt && opt.includeMainTypes && zrUtil.indexOf(opt.includeMainTypes, mainType) < 0)\n            ) {\n                return;\n            }\n\n            var queryParam = {mainType: mainType};\n            if (queryType !== 'index' || value !== 'all') {\n                queryParam[queryType] = value;\n            }\n\n            var models = ecModel.queryComponents(queryParam);\n            result[mainType + 'Models'] = models;\n            result[mainType + 'Model'] = models[0];\n        });\n\n        return result;\n    };\n\n    /**\n     * @see {module:echarts/data/helper/completeDimensions}\n     * @param {module:echarts/data/List} data\n     * @param {string|number} dataDim\n     * @return {string}\n     */\n    modelUtil.dataDimToCoordDim = function (data, dataDim) {\n        var dimensions = data.dimensions;\n        dataDim = data.getDimension(dataDim);\n        for (var i = 0; i < dimensions.length; i++) {\n            var dimItem = data.getDimensionInfo(dimensions[i]);\n            if (dimItem.name === dataDim) {\n                return dimItem.coordDim;\n            }\n        }\n    };\n\n    /**\n     * @see {module:echarts/data/helper/completeDimensions}\n     * @param {module:echarts/data/List} data\n     * @param {string} coordDim\n     * @return {Array.<string>} data dimensions on the coordDim.\n     */\n    modelUtil.coordDimToDataDim = function (data, coordDim) {\n        var dataDim = [];\n        each(data.dimensions, function (dimName) {\n            var dimItem = data.getDimensionInfo(dimName);\n            if (dimItem.coordDim === coordDim) {\n                dataDim[dimItem.coordDimIndex] = dimItem.name;\n            }\n        });\n        return dataDim;\n    };\n\n    /**\n     * @see {module:echarts/data/helper/completeDimensions}\n     * @param {module:echarts/data/List} data\n     * @param {string} otherDim Can be `otherDims`\n     *                        like 'label' or 'tooltip'.\n     * @return {Array.<string>} data dimensions on the otherDim.\n     */\n    modelUtil.otherDimToDataDim = function (data, otherDim) {\n        var dataDim = [];\n        each(data.dimensions, function (dimName) {\n            var dimItem = data.getDimensionInfo(dimName);\n            var otherDims = dimItem.otherDims;\n            var dimIndex = otherDims[otherDim];\n            if (dimIndex != null && dimIndex !== false) {\n                dataDim[dimIndex] = dimItem.name;\n            }\n        });\n        return dataDim;\n    };\n\n    function has(obj, prop) {\n        return obj && obj.hasOwnProperty(prop);\n    }\n\n    module.exports = modelUtil;\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.6.1@echarts/lib/util/model.js\n// module id = LFYx\n// module chunks = 0 1","\n\n    var zrUtil = require('zrender/lib/core/util');\n    var axisHelper = require('./axisHelper');\n\n    function getName(obj) {\n        if (zrUtil.isObject(obj) && obj.value != null) {\n            return obj.value;\n        }\n        else {\n            return obj + '';\n        }\n    }\n\n    module.exports = {\n\n        /**\n         * Format labels\n         * @return {Array.<string>}\n         */\n        getFormattedLabels: function () {\n            return axisHelper.getFormattedLabels(\n                this.axis,\n                this.get('axisLabel.formatter')\n            );\n        },\n\n        /**\n         * Get categories\n         */\n        getCategories: function () {\n            return this.get('type') === 'category'\n                && zrUtil.map(this.get('data'), getName);\n        },\n\n        /**\n         * @param {boolean} origin\n         * @return {number|string} min value or 'dataMin' or null/undefined (means auto) or NaN\n         */\n        getMin: function (origin) {\n            var option = this.option;\n            var min = (!origin && option.rangeStart != null)\n                ? option.rangeStart : option.min;\n\n            if (this.axis && min != null && min !== 'dataMin' && !zrUtil.eqNaN(min)) {\n                min = this.axis.scale.parse(min);\n            }\n            return min;\n        },\n\n        /**\n         * @param {boolean} origin\n         * @return {number|string} max value or 'dataMax' or null/undefined (means auto) or NaN\n         */\n        getMax: function (origin) {\n            var option = this.option;\n            var max = (!origin && option.rangeEnd != null)\n                ? option.rangeEnd : option.max;\n\n            if (this.axis && max != null && max !== 'dataMax' && !zrUtil.eqNaN(max)) {\n                max = this.axis.scale.parse(max);\n            }\n            return max;\n        },\n\n        /**\n         * @return {boolean}\n         */\n        getNeedCrossZero: function () {\n            var option = this.option;\n            return (option.rangeStart != null || option.rangeEnd != null)\n                ? false : !option.scale;\n        },\n\n        /**\n         * Should be implemented by each axis model if necessary.\n         * @return {module:echarts/model/Component} coordinate system model\n         */\n        getCoordSysModel: zrUtil.noop,\n\n        /**\n         * @param {number} rangeStart Can only be finite number or null/undefined or NaN.\n         * @param {number} rangeEnd Can only be finite number or null/undefined or NaN.\n         */\n        setRange: function (rangeStart, rangeEnd) {\n            this.option.rangeStart = rangeStart;\n            this.option.rangeEnd = rangeEnd;\n        },\n\n        /**\n         * Reset range\n         */\n        resetRange: function () {\n            // rangeStart and rangeEnd is readonly.\n            this.option.rangeStart = this.option.rangeEnd = null;\n        }\n    };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.6.1@echarts/lib/coord/axisModelCommonMixin.js\n// module id = LLSH\n// module chunks = 0 1","\n\n    var Path = require('../graphic/Path');\n    var PathProxy = require('../core/PathProxy');\n    var transformPath = require('./transformPath');\n\n    // command chars\n    var cc = [\n        'm', 'M', 'l', 'L', 'v', 'V', 'h', 'H', 'z', 'Z',\n        'c', 'C', 'q', 'Q', 't', 'T', 's', 'S', 'a', 'A'\n    ];\n\n    var mathSqrt = Math.sqrt;\n    var mathSin = Math.sin;\n    var mathCos = Math.cos;\n    var PI = Math.PI;\n\n    var vMag = function(v) {\n        return Math.sqrt(v[0] * v[0] + v[1] * v[1]);\n    };\n    var vRatio = function(u, v) {\n        return (u[0] * v[0] + u[1] * v[1]) / (vMag(u) * vMag(v));\n    };\n    var vAngle = function(u, v) {\n        return (u[0] * v[1] < u[1] * v[0] ? -1 : 1)\n                * Math.acos(vRatio(u, v));\n    };\n\n    function processArc(x1, y1, x2, y2, fa, fs, rx, ry, psiDeg, cmd, path) {\n        var psi = psiDeg * (PI / 180.0);\n        var xp = mathCos(psi) * (x1 - x2) / 2.0\n                 + mathSin(psi) * (y1 - y2) / 2.0;\n        var yp = -1 * mathSin(psi) * (x1 - x2) / 2.0\n                 + mathCos(psi) * (y1 - y2) / 2.0;\n\n        var lambda = (xp * xp) / (rx * rx) + (yp * yp) / (ry * ry);\n\n        if (lambda > 1) {\n            rx *= mathSqrt(lambda);\n            ry *= mathSqrt(lambda);\n        }\n\n        var f = (fa === fs ? -1 : 1)\n            * mathSqrt((((rx * rx) * (ry * ry))\n                    - ((rx * rx) * (yp * yp))\n                    - ((ry * ry) * (xp * xp))) / ((rx * rx) * (yp * yp)\n                    + (ry * ry) * (xp * xp))\n                ) || 0;\n\n        var cxp = f * rx * yp / ry;\n        var cyp = f * -ry * xp / rx;\n\n        var cx = (x1 + x2) / 2.0\n                 + mathCos(psi) * cxp\n                 - mathSin(psi) * cyp;\n        var cy = (y1 + y2) / 2.0\n                + mathSin(psi) * cxp\n                + mathCos(psi) * cyp;\n\n        var theta = vAngle([ 1, 0 ], [ (xp - cxp) / rx, (yp - cyp) / ry ]);\n        var u = [ (xp - cxp) / rx, (yp - cyp) / ry ];\n        var v = [ (-1 * xp - cxp) / rx, (-1 * yp - cyp) / ry ];\n        var dTheta = vAngle(u, v);\n\n        if (vRatio(u, v) <= -1) {\n            dTheta = PI;\n        }\n        if (vRatio(u, v) >= 1) {\n            dTheta = 0;\n        }\n        if (fs === 0 && dTheta > 0) {\n            dTheta = dTheta - 2 * PI;\n        }\n        if (fs === 1 && dTheta < 0) {\n            dTheta = dTheta + 2 * PI;\n        }\n\n        path.addData(cmd, cx, cy, rx, ry, theta, dTheta, psi, fs);\n    }\n\n    function createPathProxyFromString(data) {\n        if (!data) {\n            return [];\n        }\n\n        // command string\n        var cs = data.replace(/-/g, ' -')\n            .replace(/  /g, ' ')\n            .replace(/ /g, ',')\n            .replace(/,,/g, ',');\n\n        var n;\n        // create pipes so that we can split the data\n        for (n = 0; n < cc.length; n++) {\n            cs = cs.replace(new RegExp(cc[n], 'g'), '|' + cc[n]);\n        }\n\n        // create array\n        var arr = cs.split('|');\n        // init context point\n        var cpx = 0;\n        var cpy = 0;\n\n        var path = new PathProxy();\n        var CMD = PathProxy.CMD;\n\n        var prevCmd;\n        for (n = 1; n < arr.length; n++) {\n            var str = arr[n];\n            var c = str.charAt(0);\n            var off = 0;\n            var p = str.slice(1).replace(/e,-/g, 'e-').split(',');\n            var cmd;\n\n            if (p.length > 0 && p[0] === '') {\n                p.shift();\n            }\n\n            for (var i = 0; i < p.length; i++) {\n                p[i] = parseFloat(p[i]);\n            }\n            while (off < p.length && !isNaN(p[off])) {\n                if (isNaN(p[0])) {\n                    break;\n                }\n                var ctlPtx;\n                var ctlPty;\n\n                var rx;\n                var ry;\n                var psi;\n                var fa;\n                var fs;\n\n                var x1 = cpx;\n                var y1 = cpy;\n\n                // convert l, H, h, V, and v to L\n                switch (c) {\n                    case 'l':\n                        cpx += p[off++];\n                        cpy += p[off++];\n                        cmd = CMD.L;\n                        path.addData(cmd, cpx, cpy);\n                        break;\n                    case 'L':\n                        cpx = p[off++];\n                        cpy = p[off++];\n                        cmd = CMD.L;\n                        path.addData(cmd, cpx, cpy);\n                        break;\n                    case 'm':\n                        cpx += p[off++];\n                        cpy += p[off++];\n                        cmd = CMD.M;\n                        path.addData(cmd, cpx, cpy);\n                        c = 'l';\n                        break;\n                    case 'M':\n                        cpx = p[off++];\n                        cpy = p[off++];\n                        cmd = CMD.M;\n                        path.addData(cmd, cpx, cpy);\n                        c = 'L';\n                        break;\n                    case 'h':\n                        cpx += p[off++];\n                        cmd = CMD.L;\n                        path.addData(cmd, cpx, cpy);\n                        break;\n                    case 'H':\n                        cpx = p[off++];\n                        cmd = CMD.L;\n                        path.addData(cmd, cpx, cpy);\n                        break;\n                    case 'v':\n                        cpy += p[off++];\n                        cmd = CMD.L;\n                        path.addData(cmd, cpx, cpy);\n                        break;\n                    case 'V':\n                        cpy = p[off++];\n                        cmd = CMD.L;\n                        path.addData(cmd, cpx, cpy);\n                        break;\n                    case 'C':\n                        cmd = CMD.C;\n                        path.addData(\n                            cmd, p[off++], p[off++], p[off++], p[off++], p[off++], p[off++]\n                        );\n                        cpx = p[off - 2];\n                        cpy = p[off - 1];\n                        break;\n                    case 'c':\n                        cmd = CMD.C;\n                        path.addData(\n                            cmd,\n                            p[off++] + cpx, p[off++] + cpy,\n                            p[off++] + cpx, p[off++] + cpy,\n                            p[off++] + cpx, p[off++] + cpy\n                        );\n                        cpx += p[off - 2];\n                        cpy += p[off - 1];\n                        break;\n                    case 'S':\n                        ctlPtx = cpx;\n                        ctlPty = cpy;\n                        var len = path.len();\n                        var pathData = path.data;\n                        if (prevCmd === CMD.C) {\n                            ctlPtx += cpx - pathData[len - 4];\n                            ctlPty += cpy - pathData[len - 3];\n                        }\n                        cmd = CMD.C;\n                        x1 = p[off++];\n                        y1 = p[off++];\n                        cpx = p[off++];\n                        cpy = p[off++];\n                        path.addData(cmd, ctlPtx, ctlPty, x1, y1, cpx, cpy);\n                        break;\n                    case 's':\n                        ctlPtx = cpx;\n                        ctlPty = cpy;\n                        var len = path.len();\n                        var pathData = path.data;\n                        if (prevCmd === CMD.C) {\n                            ctlPtx += cpx - pathData[len - 4];\n                            ctlPty += cpy - pathData[len - 3];\n                        }\n                        cmd = CMD.C;\n                        x1 = cpx + p[off++];\n                        y1 = cpy + p[off++];\n                        cpx += p[off++];\n                        cpy += p[off++];\n                        path.addData(cmd, ctlPtx, ctlPty, x1, y1, cpx, cpy);\n                        break;\n                    case 'Q':\n                        x1 = p[off++];\n                        y1 = p[off++];\n                        cpx = p[off++];\n                        cpy = p[off++];\n                        cmd = CMD.Q;\n                        path.addData(cmd, x1, y1, cpx, cpy);\n                        break;\n                    case 'q':\n                        x1 = p[off++] + cpx;\n                        y1 = p[off++] + cpy;\n                        cpx += p[off++];\n                        cpy += p[off++];\n                        cmd = CMD.Q;\n                        path.addData(cmd, x1, y1, cpx, cpy);\n                        break;\n                    case 'T':\n                        ctlPtx = cpx;\n                        ctlPty = cpy;\n                        var len = path.len();\n                        var pathData = path.data;\n                        if (prevCmd === CMD.Q) {\n                            ctlPtx += cpx - pathData[len - 4];\n                            ctlPty += cpy - pathData[len - 3];\n                        }\n                        cpx = p[off++];\n                        cpy = p[off++];\n                        cmd = CMD.Q;\n                        path.addData(cmd, ctlPtx, ctlPty, cpx, cpy);\n                        break;\n                    case 't':\n                        ctlPtx = cpx;\n                        ctlPty = cpy;\n                        var len = path.len();\n                        var pathData = path.data;\n                        if (prevCmd === CMD.Q) {\n                            ctlPtx += cpx - pathData[len - 4];\n                            ctlPty += cpy - pathData[len - 3];\n                        }\n                        cpx += p[off++];\n                        cpy += p[off++];\n                        cmd = CMD.Q;\n                        path.addData(cmd, ctlPtx, ctlPty, cpx, cpy);\n                        break;\n                    case 'A':\n                        rx = p[off++];\n                        ry = p[off++];\n                        psi = p[off++];\n                        fa = p[off++];\n                        fs = p[off++];\n\n                        x1 = cpx, y1 = cpy;\n                        cpx = p[off++];\n                        cpy = p[off++];\n                        cmd = CMD.A;\n                        processArc(\n                            x1, y1, cpx, cpy, fa, fs, rx, ry, psi, cmd, path\n                        );\n                        break;\n                    case 'a':\n                        rx = p[off++];\n                        ry = p[off++];\n                        psi = p[off++];\n                        fa = p[off++];\n                        fs = p[off++];\n\n                        x1 = cpx, y1 = cpy;\n                        cpx += p[off++];\n                        cpy += p[off++];\n                        cmd = CMD.A;\n                        processArc(\n                            x1, y1, cpx, cpy, fa, fs, rx, ry, psi, cmd, path\n                        );\n                        break;\n                }\n            }\n\n            if (c === 'z' || c === 'Z') {\n                cmd = CMD.Z;\n                path.addData(cmd);\n            }\n\n            prevCmd = cmd;\n        }\n\n        path.toStatic();\n\n        return path;\n    }\n\n    // TODO Optimize double memory cost problem\n    function createPathOptions(str, opts) {\n        var pathProxy = createPathProxyFromString(str);\n        opts = opts || {};\n        opts.buildPath = function (path) {\n            if (path.setData) {\n                path.setData(pathProxy.data);\n                // Svg and vml renderer don't have context\n                var ctx = path.getContext();\n                if (ctx) {\n                    path.rebuildPath(ctx);\n                }\n            }\n            else {\n                var ctx = path;\n                pathProxy.rebuildPath(ctx);\n            }\n        };\n\n        opts.applyTransform = function (m) {\n            transformPath(pathProxy, m);\n\n            this.dirty(true);\n        };\n\n        return opts;\n    }\n\n    module.exports = {\n        /**\n         * Create a Path object from path string data\n         * http://www.w3.org/TR/SVG/paths.html#PathData\n         * @param  {Object} opts Other options\n         */\n        createFromString: function (str, opts) {\n            return new Path(createPathOptions(str, opts));\n        },\n\n        /**\n         * Create a Path class from path string data\n         * @param  {string} str\n         * @param  {Object} opts Other options\n         */\n        extendFromString: function (str, opts) {\n            return Path.extend(createPathOptions(str, opts));\n        },\n\n        /**\n         * Merge multiple paths\n         */\n        // TODO Apply transform\n        // TODO stroke dash\n        // TODO Optimize double memory cost problem\n        mergePath: function (pathEls, opts) {\n            var pathList = [];\n            var len = pathEls.length;\n            for (var i = 0; i < len; i++) {\n                var pathEl = pathEls[i];\n                if (!pathEl.path) {\n                    pathEl.createPathProxy();\n                }\n                if (pathEl.__dirtyPath) {\n                    pathEl.buildPath(pathEl.path, pathEl.shape, true);\n                }\n                pathList.push(pathEl.path);\n            }\n\n            var pathBundle = new Path(opts);\n            // Need path proxy.\n            pathBundle.createPathProxy();\n            pathBundle.buildPath = function (path) {\n                path.appendPath(pathList);\n                // Svg and vml renderer don't have context\n                var ctx = path.getContext();\n                if (ctx) {\n                    path.rebuildPath(ctx);\n                }\n            };\n\n            return pathBundle;\n        }\n    };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.5.1@zrender/lib/tool/path.js\n// module id = LdYJ\n// module chunks = 0 1","/**\n * List for data storage\n * @module echarts/data/List\n */\n\n\n    var UNDEFINED = 'undefined';\n    var globalObj = typeof window === 'undefined' ? global : window;\n    var Float64Array = typeof globalObj.Float64Array === UNDEFINED\n        ? Array : globalObj.Float64Array;\n    var Int32Array = typeof globalObj.Int32Array === UNDEFINED\n        ? Array : globalObj.Int32Array;\n\n    var dataCtors = {\n        'float': Float64Array,\n        'int': Int32Array,\n        // Ordinal data type can be string or int\n        'ordinal': Array,\n        'number': Array,\n        'time': Array\n    };\n\n    var Model = require('../model/Model');\n    var DataDiffer = require('./DataDiffer');\n\n    var zrUtil = require('zrender/lib/core/util');\n    var modelUtil = require('../util/model');\n    var isObject = zrUtil.isObject;\n\n    var TRANSFERABLE_PROPERTIES = [\n        'stackedOn', 'hasItemOption', '_nameList', '_idList', '_rawData'\n    ];\n\n    function transferProperties(a, b) {\n        zrUtil.each(TRANSFERABLE_PROPERTIES.concat(b.__wrappedMethods || []), function (propName) {\n            if (b.hasOwnProperty(propName)) {\n                a[propName] = b[propName];\n            }\n        });\n\n        a.__wrappedMethods = b.__wrappedMethods;\n    }\n\n    function DefaultDataProvider(dataArray) {\n        this._array = dataArray || [];\n    }\n\n    DefaultDataProvider.prototype.pure = false;\n\n    DefaultDataProvider.prototype.count = function () {\n        return this._array.length;\n    };\n    DefaultDataProvider.prototype.getItem = function (idx) {\n        return this._array[idx];\n    };\n\n    /**\n     * @constructor\n     * @alias module:echarts/data/List\n     *\n     * @param {Array.<string|Object>} dimensions\n     *      For example, ['someDimName', {name: 'someDimName', type: 'someDimType'}, ...].\n     *      Dimensions should be concrete names like x, y, z, lng, lat, angle, radius\n     * @param {module:echarts/model/Model} hostModel\n     */\n    var List = function (dimensions, hostModel) {\n\n        dimensions = dimensions || ['x', 'y'];\n\n        var dimensionInfos = {};\n        var dimensionNames = [];\n        for (var i = 0; i < dimensions.length; i++) {\n            var dimensionName;\n            var dimensionInfo = {};\n            if (typeof dimensions[i] === 'string') {\n                dimensionName = dimensions[i];\n                dimensionInfo = {\n                    name: dimensionName,\n                    coordDim: dimensionName,\n                    coordDimIndex: 0,\n                    stackable: false,\n                    // Type can be 'float', 'int', 'number'\n                    // Default is number, Precision of float may not enough\n                    type: 'number'\n                };\n            }\n            else {\n                dimensionInfo = dimensions[i];\n                dimensionName = dimensionInfo.name;\n                dimensionInfo.type = dimensionInfo.type || 'number';\n                if (!dimensionInfo.coordDim) {\n                    dimensionInfo.coordDim = dimensionName;\n                    dimensionInfo.coordDimIndex = 0;\n                }\n            }\n            dimensionInfo.otherDims = dimensionInfo.otherDims || {};\n            dimensionNames.push(dimensionName);\n            dimensionInfos[dimensionName] = dimensionInfo;\n        }\n\n        /**\n         * @readOnly\n         * @type {Array.<string>}\n         */\n        this.dimensions = dimensionNames;\n\n        /**\n         * Infomation of each data dimension, like data type.\n         * @type {Object}\n         */\n        this._dimensionInfos = dimensionInfos;\n\n        /**\n         * @type {module:echarts/model/Model}\n         */\n        this.hostModel = hostModel;\n\n        /**\n         * @type {module:echarts/model/Model}\n         */\n        this.dataType;\n\n        /**\n         * Indices stores the indices of data subset after filtered.\n         * This data subset will be used in chart.\n         * @type {Array.<number>}\n         * @readOnly\n         */\n        this.indices = [];\n\n        /**\n         * Data storage\n         * @type {Object.<key, TypedArray|Array>}\n         * @private\n         */\n        this._storage = {};\n\n        /**\n         * @type {Array.<string>}\n         */\n        this._nameList = [];\n        /**\n         * @type {Array.<string>}\n         */\n        this._idList = [];\n\n        /**\n         * Models of data option is stored sparse for optimizing memory cost\n         * @type {Array.<module:echarts/model/Model>}\n         * @private\n         */\n        this._optionModels = [];\n\n        /**\n         * @param {module:echarts/data/List}\n         */\n        this.stackedOn = null;\n\n        /**\n         * Global visual properties after visual coding\n         * @type {Object}\n         * @private\n         */\n        this._visual = {};\n\n        /**\n         * Globel layout properties.\n         * @type {Object}\n         * @private\n         */\n        this._layout = {};\n\n        /**\n         * Item visual properties after visual coding\n         * @type {Array.<Object>}\n         * @private\n         */\n        this._itemVisuals = [];\n\n        /**\n         * Item layout properties after layout\n         * @type {Array.<Object>}\n         * @private\n         */\n        this._itemLayouts = [];\n\n        /**\n         * Graphic elemnents\n         * @type {Array.<module:zrender/Element>}\n         * @private\n         */\n        this._graphicEls = [];\n\n        /**\n         * @type {Array.<Array|Object>}\n         * @private\n         */\n        this._rawData;\n\n        /**\n         * @type {Object}\n         * @private\n         */\n        this._extent;\n    };\n\n    var listProto = List.prototype;\n\n    listProto.type = 'list';\n\n    /**\n     * If each data item has it's own option\n     * @type {boolean}\n     */\n    listProto.hasItemOption = true;\n\n    /**\n     * Get dimension name\n     * @param {string|number} dim\n     *        Dimension can be concrete names like x, y, z, lng, lat, angle, radius\n     *        Or a ordinal number. For example getDimensionInfo(0) will return 'x' or 'lng' or 'radius'\n     * @return {string} Concrete dim name.\n     */\n    listProto.getDimension = function (dim) {\n        if (!isNaN(dim)) {\n            dim = this.dimensions[dim] || dim;\n        }\n        return dim;\n    };\n\n    /**\n     * Get type and stackable info of particular dimension\n     * @param {string|number} dim\n     *        Dimension can be concrete names like x, y, z, lng, lat, angle, radius\n     *        Or a ordinal number. For example getDimensionInfo(0) will return 'x' or 'lng' or 'radius'\n     */\n    listProto.getDimensionInfo = function (dim) {\n        return zrUtil.clone(this._dimensionInfos[this.getDimension(dim)]);\n    };\n\n    /**\n     * Initialize from data\n     * @param {Array.<Object|number|Array>} data\n     * @param {Array.<string>} [nameList]\n     * @param {Function} [dimValueGetter] (dataItem, dimName, dataIndex, dimIndex) => number\n     */\n    listProto.initData = function (data, nameList, dimValueGetter) {\n        data = data || [];\n\n        var isDataArray = zrUtil.isArray(data);\n        if (isDataArray) {\n            data = new DefaultDataProvider(data);\n        }\n        if (__DEV__) {\n            if (!isDataArray && (typeof data.getItem != 'function' || typeof data.count != 'function')) {\n                throw new Error('Inavlid data provider.');\n            }\n        }\n\n        this._rawData = data;\n\n        // Clear\n        var storage = this._storage = {};\n        var indices = this.indices = [];\n\n        var dimensions = this.dimensions;\n        var dimensionInfoMap = this._dimensionInfos;\n\n        var size = data.count();\n\n        var idList = [];\n        var nameRepeatCount = {};\n        var nameDimIdx;\n\n        nameList = nameList || [];\n\n        // Init storage\n        for (var i = 0; i < dimensions.length; i++) {\n            var dimInfo = dimensionInfoMap[dimensions[i]];\n            dimInfo.otherDims.itemName === 0 && (nameDimIdx = i);\n            var DataCtor = dataCtors[dimInfo.type];\n            storage[dimensions[i]] = new DataCtor(size);\n        }\n\n        var self = this;\n        if (!dimValueGetter) {\n            self.hasItemOption = false;\n        }\n        // Default dim value getter\n        dimValueGetter = dimValueGetter || function (dataItem, dimName, dataIndex, dimIndex) {\n            var value = modelUtil.getDataItemValue(dataItem);\n            // If any dataItem is like { value: 10 }\n            if (modelUtil.isDataItemOption(dataItem)) {\n                self.hasItemOption = true;\n            }\n            return modelUtil.converDataValue(\n                (value instanceof Array)\n                    ? value[dimIndex]\n                    // If value is a single number or something else not array.\n                    : value,\n                dimensionInfoMap[dimName]\n            );\n        };\n\n        for (var i = 0; i < size; i++) {\n            // NOTICE: Try not to write things into dataItem\n            var dataItem = data.getItem(i);\n            // Each data item is value\n            // [1, 2]\n            // 2\n            // Bar chart, line chart which uses category axis\n            // only gives the 'y' value. 'x' value is the indices of cateogry\n            // Use a tempValue to normalize the value to be a (x, y) value\n\n            // Store the data by dimensions\n            for (var k = 0; k < dimensions.length; k++) {\n                var dim = dimensions[k];\n                var dimStorage = storage[dim];\n                // PENDING NULL is empty or zero\n                dimStorage[i] = dimValueGetter(dataItem, dim, i, k);\n            }\n\n            indices.push(i);\n        }\n\n        // Use the name in option and create id\n        for (var i = 0; i < size; i++) {\n            var dataItem = data.getItem(i);\n            if (!nameList[i] && dataItem) {\n                if (dataItem.name != null) {\n                    nameList[i] = dataItem.name;\n                }\n                else if (nameDimIdx != null) {\n                    nameList[i] = storage[dimensions[nameDimIdx]][i];\n                }\n            }\n            var name = nameList[i] || '';\n            // Try using the id in option\n            var id = dataItem && dataItem.id;\n\n            if (!id && name) {\n                // Use name as id and add counter to avoid same name\n                nameRepeatCount[name] = nameRepeatCount[name] || 0;\n                id = name;\n                if (nameRepeatCount[name] > 0) {\n                    id += '__ec__' + nameRepeatCount[name];\n                }\n                nameRepeatCount[name]++;\n            }\n            id && (idList[i] = id);\n        }\n\n        this._nameList = nameList;\n        this._idList = idList;\n    };\n\n    /**\n     * @return {number}\n     */\n    listProto.count = function () {\n        return this.indices.length;\n    };\n\n    /**\n     * Get value. Return NaN if idx is out of range.\n     * @param {string} dim Dim must be concrete name.\n     * @param {number} idx\n     * @param {boolean} stack\n     * @return {number}\n     */\n    listProto.get = function (dim, idx, stack) {\n        var storage = this._storage;\n        var dataIndex = this.indices[idx];\n\n        // If value not exists\n        if (dataIndex == null || !storage[dim]) {\n            return NaN;\n        }\n\n        var value = storage[dim][dataIndex];\n        // FIXME ordinal data type is not stackable\n        if (stack) {\n            var dimensionInfo = this._dimensionInfos[dim];\n            if (dimensionInfo && dimensionInfo.stackable) {\n                var stackedOn = this.stackedOn;\n                while (stackedOn) {\n                    // Get no stacked data of stacked on\n                    var stackedValue = stackedOn.get(dim, idx);\n                    // Considering positive stack, negative stack and empty data\n                    if ((value >= 0 && stackedValue > 0)  // Positive stack\n                        || (value <= 0 && stackedValue < 0) // Negative stack\n                    ) {\n                        value += stackedValue;\n                    }\n                    stackedOn = stackedOn.stackedOn;\n                }\n            }\n        }\n        return value;\n    };\n\n    /**\n     * Get value for multi dimensions.\n     * @param {Array.<string>} [dimensions] If ignored, using all dimensions.\n     * @param {number} idx\n     * @param {boolean} stack\n     * @return {number}\n     */\n    listProto.getValues = function (dimensions, idx, stack) {\n        var values = [];\n\n        if (!zrUtil.isArray(dimensions)) {\n            stack = idx;\n            idx = dimensions;\n            dimensions = this.dimensions;\n        }\n\n        for (var i = 0, len = dimensions.length; i < len; i++) {\n            values.push(this.get(dimensions[i], idx, stack));\n        }\n\n        return values;\n    };\n\n    /**\n     * If value is NaN. Inlcuding '-'\n     * @param {string} dim\n     * @param {number} idx\n     * @return {number}\n     */\n    listProto.hasValue = function (idx) {\n        var dimensions = this.dimensions;\n        var dimensionInfos = this._dimensionInfos;\n        for (var i = 0, len = dimensions.length; i < len; i++) {\n            if (\n                // Ordinal type can be string or number\n                dimensionInfos[dimensions[i]].type !== 'ordinal'\n                && isNaN(this.get(dimensions[i], idx))\n            ) {\n                return false;\n            }\n        }\n        return true;\n    };\n\n    /**\n     * Get extent of data in one dimension\n     * @param {string} dim\n     * @param {boolean} stack\n     * @param {Function} filter\n     */\n    listProto.getDataExtent = function (dim, stack, filter) {\n        dim = this.getDimension(dim);\n        var dimData = this._storage[dim];\n        var dimInfo = this.getDimensionInfo(dim);\n        stack = (dimInfo && dimInfo.stackable) && stack;\n        var dimExtent = (this._extent || (this._extent = {}))[dim + (!!stack)];\n        var value;\n        if (dimExtent) {\n            return dimExtent;\n        }\n        // var dimInfo = this._dimensionInfos[dim];\n        if (dimData) {\n            var min = Infinity;\n            var max = -Infinity;\n            // var isOrdinal = dimInfo.type === 'ordinal';\n            for (var i = 0, len = this.count(); i < len; i++) {\n                value = this.get(dim, i, stack);\n                // FIXME\n                // if (isOrdinal && typeof value === 'string') {\n                //     value = zrUtil.indexOf(dimData, value);\n                // }\n                if (!filter || filter(value, dim, i)) {\n                    value < min && (min = value);\n                    value > max && (max = value);\n                }\n            }\n            return (this._extent[dim + !!stack] = [min, max]);\n        }\n        else {\n            return [Infinity, -Infinity];\n        }\n    };\n\n    /**\n     * Get sum of data in one dimension\n     * @param {string} dim\n     * @param {boolean} stack\n     */\n    listProto.getSum = function (dim, stack) {\n        var dimData = this._storage[dim];\n        var sum = 0;\n        if (dimData) {\n            for (var i = 0, len = this.count(); i < len; i++) {\n                var value = this.get(dim, i, stack);\n                if (!isNaN(value)) {\n                    sum += value;\n                }\n            }\n        }\n        return sum;\n    };\n\n    /**\n     * Retreive the index with given value\n     * @param {number} idx\n     * @param {number} value\n     * @return {number}\n     */\n    // FIXME Precision of float value\n    listProto.indexOf = function (dim, value) {\n        var storage = this._storage;\n        var dimData = storage[dim];\n        var indices = this.indices;\n\n        if (dimData) {\n            for (var i = 0, len = indices.length; i < len; i++) {\n                var rawIndex = indices[i];\n                if (dimData[rawIndex] === value) {\n                    return i;\n                }\n            }\n        }\n        return -1;\n    };\n\n    /**\n     * Retreive the index with given name\n     * @param {number} idx\n     * @param {number} name\n     * @return {number}\n     */\n    listProto.indexOfName = function (name) {\n        var indices = this.indices;\n        var nameList = this._nameList;\n\n        for (var i = 0, len = indices.length; i < len; i++) {\n            var rawIndex = indices[i];\n            if (nameList[rawIndex] === name) {\n                return i;\n            }\n        }\n\n        return -1;\n    };\n\n    /**\n     * Retreive the index with given raw data index\n     * @param {number} idx\n     * @param {number} name\n     * @return {number}\n     */\n    listProto.indexOfRawIndex = function (rawIndex) {\n        // Indices are ascending\n        var indices = this.indices;\n\n        // If rawIndex === dataIndex\n        var rawDataIndex = indices[rawIndex];\n        if (rawDataIndex != null && rawDataIndex === rawIndex) {\n            return rawIndex;\n        }\n\n        var left = 0;\n        var right = indices.length - 1;\n        while (left <= right) {\n            var mid = (left + right) / 2 | 0;\n            if (indices[mid] < rawIndex) {\n                left = mid + 1;\n            }\n            else if (indices[mid] > rawIndex) {\n                right = mid - 1;\n            }\n            else {\n                return mid;\n            }\n        }\n        return -1;\n    };\n\n    /**\n     * Retreive the index of nearest value\n     * @param {string} dim\n     * @param {number} value\n     * @param {boolean} stack If given value is after stacked\n     * @param {number} [maxDistance=Infinity]\n     * @return {Array.<number>} Considere multiple points has the same value.\n     */\n    listProto.indicesOfNearest = function (dim, value, stack, maxDistance) {\n        var storage = this._storage;\n        var dimData = storage[dim];\n        var nearestIndices = [];\n\n        if (!dimData) {\n            return nearestIndices;\n        }\n\n        if (maxDistance == null) {\n            maxDistance = Infinity;\n        }\n\n        var minDist = Number.MAX_VALUE;\n        var minDiff = -1;\n        for (var i = 0, len = this.count(); i < len; i++) {\n            var diff = value - this.get(dim, i, stack);\n            var dist = Math.abs(diff);\n            if (diff <= maxDistance && dist <= minDist) {\n                // For the case of two data are same on xAxis, which has sequence data.\n                // Show the nearest index\n                // https://github.com/ecomfe/echarts/issues/2869\n                if (dist < minDist || (diff >= 0 && minDiff < 0)) {\n                    minDist = dist;\n                    minDiff = diff;\n                    nearestIndices.length = 0;\n                }\n                nearestIndices.push(i);\n            }\n        }\n        return nearestIndices;\n    };\n\n    /**\n     * Get raw data index\n     * @param {number} idx\n     * @return {number}\n     */\n    listProto.getRawIndex = function (idx) {\n        var rawIdx = this.indices[idx];\n        return rawIdx == null ? -1 : rawIdx;\n    };\n\n    /**\n     * Get raw data item\n     * @param {number} idx\n     * @return {number}\n     */\n    listProto.getRawDataItem = function (idx) {\n        return this._rawData.getItem(this.getRawIndex(idx));\n    };\n\n    /**\n     * @param {number} idx\n     * @param {boolean} [notDefaultIdx=false]\n     * @return {string}\n     */\n    listProto.getName = function (idx) {\n        return this._nameList[this.indices[idx]] || '';\n    };\n\n    /**\n     * @param {number} idx\n     * @param {boolean} [notDefaultIdx=false]\n     * @return {string}\n     */\n    listProto.getId = function (idx) {\n        return this._idList[this.indices[idx]] || (this.getRawIndex(idx) + '');\n    };\n\n\n    function normalizeDimensions(dimensions) {\n        if (!zrUtil.isArray(dimensions)) {\n            dimensions = [dimensions];\n        }\n        return dimensions;\n    }\n\n    /**\n     * Data iteration\n     * @param {string|Array.<string>}\n     * @param {Function} cb\n     * @param {boolean} [stack=false]\n     * @param {*} [context=this]\n     *\n     * @example\n     *  list.each('x', function (x, idx) {});\n     *  list.each(['x', 'y'], function (x, y, idx) {});\n     *  list.each(function (idx) {})\n     */\n    listProto.each = function (dims, cb, stack, context) {\n        if (typeof dims === 'function') {\n            context = stack;\n            stack = cb;\n            cb = dims;\n            dims = [];\n        }\n\n        dims = zrUtil.map(normalizeDimensions(dims), this.getDimension, this);\n\n        var value = [];\n        var dimSize = dims.length;\n        var indices = this.indices;\n\n        context = context || this;\n\n        for (var i = 0; i < indices.length; i++) {\n            // Simple optimization\n            switch (dimSize) {\n                case 0:\n                    cb.call(context, i);\n                    break;\n                case 1:\n                    cb.call(context, this.get(dims[0], i, stack), i);\n                    break;\n                case 2:\n                    cb.call(context, this.get(dims[0], i, stack), this.get(dims[1], i, stack), i);\n                    break;\n                default:\n                    for (var k = 0; k < dimSize; k++) {\n                        value[k] = this.get(dims[k], i, stack);\n                    }\n                    // Index\n                    value[k] = i;\n                    cb.apply(context, value);\n            }\n        }\n    };\n\n    /**\n     * Data filter\n     * @param {string|Array.<string>}\n     * @param {Function} cb\n     * @param {boolean} [stack=false]\n     * @param {*} [context=this]\n     */\n    listProto.filterSelf = function (dimensions, cb, stack, context) {\n        if (typeof dimensions === 'function') {\n            context = stack;\n            stack = cb;\n            cb = dimensions;\n            dimensions = [];\n        }\n\n        dimensions = zrUtil.map(\n            normalizeDimensions(dimensions), this.getDimension, this\n        );\n\n        var newIndices = [];\n        var value = [];\n        var dimSize = dimensions.length;\n        var indices = this.indices;\n\n        context = context || this;\n\n        for (var i = 0; i < indices.length; i++) {\n            var keep;\n            // Simple optimization\n            if (!dimSize) {\n                keep = cb.call(context, i);\n            }\n            else if (dimSize === 1) {\n                keep = cb.call(\n                    context, this.get(dimensions[0], i, stack), i\n                );\n            }\n            else {\n                for (var k = 0; k < dimSize; k++) {\n                    value[k] = this.get(dimensions[k], i, stack);\n                }\n                value[k] = i;\n                keep = cb.apply(context, value);\n            }\n            if (keep) {\n                newIndices.push(indices[i]);\n            }\n        }\n\n        this.indices = newIndices;\n\n        // Reset data extent\n        this._extent = {};\n\n        return this;\n    };\n\n    /**\n     * Data mapping to a plain array\n     * @param {string|Array.<string>} [dimensions]\n     * @param {Function} cb\n     * @param {boolean} [stack=false]\n     * @param {*} [context=this]\n     * @return {Array}\n     */\n    listProto.mapArray = function (dimensions, cb, stack, context) {\n        if (typeof dimensions === 'function') {\n            context = stack;\n            stack = cb;\n            cb = dimensions;\n            dimensions = [];\n        }\n\n        var result = [];\n        this.each(dimensions, function () {\n            result.push(cb && cb.apply(this, arguments));\n        }, stack, context);\n        return result;\n    };\n\n    function cloneListForMapAndSample(original, excludeDimensions) {\n        var allDimensions = original.dimensions;\n        var list = new List(\n            zrUtil.map(allDimensions, original.getDimensionInfo, original),\n            original.hostModel\n        );\n        // FIXME If needs stackedOn, value may already been stacked\n        transferProperties(list, original);\n\n        var storage = list._storage = {};\n        var originalStorage = original._storage;\n        // Init storage\n        for (var i = 0; i < allDimensions.length; i++) {\n            var dim = allDimensions[i];\n            var dimStore = originalStorage[dim];\n            if (zrUtil.indexOf(excludeDimensions, dim) >= 0) {\n                storage[dim] = new dimStore.constructor(\n                    originalStorage[dim].length\n                );\n            }\n            else {\n                // Direct reference for other dimensions\n                storage[dim] = originalStorage[dim];\n            }\n        }\n        return list;\n    }\n\n    /**\n     * Data mapping to a new List with given dimensions\n     * @param {string|Array.<string>} dimensions\n     * @param {Function} cb\n     * @param {boolean} [stack=false]\n     * @param {*} [context=this]\n     * @return {Array}\n     */\n    listProto.map = function (dimensions, cb, stack, context) {\n        dimensions = zrUtil.map(\n            normalizeDimensions(dimensions), this.getDimension, this\n        );\n\n        var list = cloneListForMapAndSample(this, dimensions);\n        // Following properties are all immutable.\n        // So we can reference to the same value\n        var indices = list.indices = this.indices;\n\n        var storage = list._storage;\n\n        var tmpRetValue = [];\n        this.each(dimensions, function () {\n            var idx = arguments[arguments.length - 1];\n            var retValue = cb && cb.apply(this, arguments);\n            if (retValue != null) {\n                // a number\n                if (typeof retValue === 'number') {\n                    tmpRetValue[0] = retValue;\n                    retValue = tmpRetValue;\n                }\n                for (var i = 0; i < retValue.length; i++) {\n                    var dim = dimensions[i];\n                    var dimStore = storage[dim];\n                    var rawIdx = indices[idx];\n                    if (dimStore) {\n                        dimStore[rawIdx] = retValue[i];\n                    }\n                }\n            }\n        }, stack, context);\n\n        return list;\n    };\n\n    /**\n     * Large data down sampling on given dimension\n     * @param {string} dimension\n     * @param {number} rate\n     * @param {Function} sampleValue\n     * @param {Function} sampleIndex Sample index for name and id\n     */\n    listProto.downSample = function (dimension, rate, sampleValue, sampleIndex) {\n        var list = cloneListForMapAndSample(this, [dimension]);\n        var storage = this._storage;\n        var targetStorage = list._storage;\n\n        var originalIndices = this.indices;\n        var indices = list.indices = [];\n\n        var frameValues = [];\n        var frameIndices = [];\n        var frameSize = Math.floor(1 / rate);\n\n        var dimStore = targetStorage[dimension];\n        var len = this.count();\n        // Copy data from original data\n        for (var i = 0; i < storage[dimension].length; i++) {\n            targetStorage[dimension][i] = storage[dimension][i];\n        }\n        for (var i = 0; i < len; i += frameSize) {\n            // Last frame\n            if (frameSize > len - i) {\n                frameSize = len - i;\n                frameValues.length = frameSize;\n            }\n            for (var k = 0; k < frameSize; k++) {\n                var idx = originalIndices[i + k];\n                frameValues[k] = dimStore[idx];\n                frameIndices[k] = idx;\n            }\n            var value = sampleValue(frameValues);\n            var idx = frameIndices[sampleIndex(frameValues, value) || 0];\n            // Only write value on the filtered data\n            dimStore[idx] = value;\n            indices.push(idx);\n        }\n\n        return list;\n    };\n\n    /**\n     * Get model of one data item.\n     *\n     * @param {number} idx\n     */\n    // FIXME Model proxy ?\n    listProto.getItemModel = function (idx) {\n        var hostModel = this.hostModel;\n        idx = this.indices[idx];\n        return new Model(this._rawData.getItem(idx), hostModel, hostModel && hostModel.ecModel);\n    };\n\n    /**\n     * Create a data differ\n     * @param {module:echarts/data/List} otherList\n     * @return {module:echarts/data/DataDiffer}\n     */\n    listProto.diff = function (otherList) {\n        var idList = this._idList;\n        var otherIdList = otherList && otherList._idList;\n        var val;\n        // Use prefix to avoid index to be the same as otherIdList[idx],\n        // which will cause weird udpate animation.\n        var prefix = 'e\\0\\0';\n\n        return new DataDiffer(\n            otherList ? otherList.indices : [],\n            this.indices,\n            function (idx) {\n                return (val = otherIdList[idx]) != null ? val : prefix + idx;\n            },\n            function (idx) {\n                return (val = idList[idx]) != null ? val : prefix + idx;\n            }\n        );\n    };\n    /**\n     * Get visual property.\n     * @param {string} key\n     */\n    listProto.getVisual = function (key) {\n        var visual = this._visual;\n        return visual && visual[key];\n    };\n\n    /**\n     * Set visual property\n     * @param {string|Object} key\n     * @param {*} [value]\n     *\n     * @example\n     *  setVisual('color', color);\n     *  setVisual({\n     *      'color': color\n     *  });\n     */\n    listProto.setVisual = function (key, val) {\n        if (isObject(key)) {\n            for (var name in key) {\n                if (key.hasOwnProperty(name)) {\n                    this.setVisual(name, key[name]);\n                }\n            }\n            return;\n        }\n        this._visual = this._visual || {};\n        this._visual[key] = val;\n    };\n\n    /**\n     * Set layout property.\n     * @param {string} key\n     * @param {*} [val]\n     */\n    listProto.setLayout = function (key, val) {\n        if (isObject(key)) {\n            for (var name in key) {\n                if (key.hasOwnProperty(name)) {\n                    this.setLayout(name, key[name]);\n                }\n            }\n            return;\n        }\n        this._layout[key] = val;\n    };\n\n    /**\n     * Get layout property.\n     * @param  {string} key.\n     * @return {*}\n     */\n    listProto.getLayout = function (key) {\n        return this._layout[key];\n    };\n\n    /**\n     * Get layout of single data item\n     * @param {number} idx\n     */\n    listProto.getItemLayout = function (idx) {\n        return this._itemLayouts[idx];\n    };\n\n    /**\n     * Set layout of single data item\n     * @param {number} idx\n     * @param {Object} layout\n     * @param {boolean=} [merge=false]\n     */\n    listProto.setItemLayout = function (idx, layout, merge) {\n        this._itemLayouts[idx] = merge\n            ? zrUtil.extend(this._itemLayouts[idx] || {}, layout)\n            : layout;\n    };\n\n    /**\n     * Clear all layout of single data item\n     */\n    listProto.clearItemLayouts = function () {\n        this._itemLayouts.length = 0;\n    };\n\n    /**\n     * Get visual property of single data item\n     * @param {number} idx\n     * @param {string} key\n     * @param {boolean} [ignoreParent=false]\n     */\n    listProto.getItemVisual = function (idx, key, ignoreParent) {\n        var itemVisual = this._itemVisuals[idx];\n        var val = itemVisual && itemVisual[key];\n        if (val == null && !ignoreParent) {\n            // Use global visual property\n            return this.getVisual(key);\n        }\n        return val;\n    };\n\n    /**\n     * Set visual property of single data item\n     *\n     * @param {number} idx\n     * @param {string|Object} key\n     * @param {*} [value]\n     *\n     * @example\n     *  setItemVisual(0, 'color', color);\n     *  setItemVisual(0, {\n     *      'color': color\n     *  });\n     */\n    listProto.setItemVisual = function (idx, key, value) {\n        var itemVisual = this._itemVisuals[idx] || {};\n        this._itemVisuals[idx] = itemVisual;\n\n        if (isObject(key)) {\n            for (var name in key) {\n                if (key.hasOwnProperty(name)) {\n                    itemVisual[name] = key[name];\n                }\n            }\n            return;\n        }\n        itemVisual[key] = value;\n    };\n\n    /**\n     * Clear itemVisuals and list visual.\n     */\n    listProto.clearAllVisual = function () {\n        this._visual = {};\n        this._itemVisuals = [];\n    };\n\n    var setItemDataAndSeriesIndex = function (child) {\n        child.seriesIndex = this.seriesIndex;\n        child.dataIndex = this.dataIndex;\n        child.dataType = this.dataType;\n    };\n    /**\n     * Set graphic element relative to data. It can be set as null\n     * @param {number} idx\n     * @param {module:zrender/Element} [el]\n     */\n    listProto.setItemGraphicEl = function (idx, el) {\n        var hostModel = this.hostModel;\n\n        if (el) {\n            // Add data index and series index for indexing the data by element\n            // Useful in tooltip\n            el.dataIndex = idx;\n            el.dataType = this.dataType;\n            el.seriesIndex = hostModel && hostModel.seriesIndex;\n            if (el.type === 'group') {\n                el.traverse(setItemDataAndSeriesIndex, el);\n            }\n        }\n\n        this._graphicEls[idx] = el;\n    };\n\n    /**\n     * @param {number} idx\n     * @return {module:zrender/Element}\n     */\n    listProto.getItemGraphicEl = function (idx) {\n        return this._graphicEls[idx];\n    };\n\n    /**\n     * @param {Function} cb\n     * @param {*} context\n     */\n    listProto.eachItemGraphicEl = function (cb, context) {\n        zrUtil.each(this._graphicEls, function (el, idx) {\n            if (el) {\n                cb && cb.call(context, el, idx);\n            }\n        });\n    };\n\n    /**\n     * Shallow clone a new list except visual and layout properties, and graph elements.\n     * New list only change the indices.\n     */\n    listProto.cloneShallow = function () {\n        var dimensionInfoList = zrUtil.map(this.dimensions, this.getDimensionInfo, this);\n        var list = new List(dimensionInfoList, this.hostModel);\n\n        // FIXME\n        list._storage = this._storage;\n\n        transferProperties(list, this);\n\n\n        // Clone will not change the data extent and indices\n        list.indices = this.indices.slice();\n\n        if (this._extent) {\n            list._extent = zrUtil.extend({}, this._extent);\n        }\n\n        return list;\n    };\n\n    /**\n     * Wrap some method to add more feature\n     * @param {string} methodName\n     * @param {Function} injectFunction\n     */\n    listProto.wrapMethod = function (methodName, injectFunction) {\n        var originalMethod = this[methodName];\n        if (typeof originalMethod !== 'function') {\n            return;\n        }\n        this.__wrappedMethods = this.__wrappedMethods || [];\n        this.__wrappedMethods.push(methodName);\n        this[methodName] = function () {\n            var res = originalMethod.apply(this, arguments);\n            return injectFunction.apply(this, [res].concat(zrUtil.slice(arguments)));\n        };\n    };\n\n    // Methods that create a new list based on this list should be listed here.\n    // Notice that those method should `RETURN` the new list.\n    listProto.TRANSFERABLE_METHODS = ['cloneShallow', 'downSample', 'map'];\n    // Methods that change indices of this list should be listed here.\n    listProto.CHANGABLE_METHODS = ['filterSelf'];\n\n    module.exports = List;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.6.1@echarts/lib/data/List.js\n// module id = LgKv\n// module chunks = 0 1","// Poly path support NaN point\n\n\n    var Path = require('zrender/lib/graphic/Path');\n    var vec2 = require('zrender/lib/core/vector');\n\n    var vec2Min = vec2.min;\n    var vec2Max = vec2.max;\n\n    var scaleAndAdd = vec2.scaleAndAdd;\n    var v2Copy = vec2.copy;\n\n    // Temporary variable\n    var v = [];\n    var cp0 = [];\n    var cp1 = [];\n\n    function isPointNull(p) {\n        return isNaN(p[0]) || isNaN(p[1]);\n    }\n\n    function drawSegment(\n        ctx, points, start, segLen, allLen,\n        dir, smoothMin, smoothMax, smooth, smoothMonotone, connectNulls\n    ) {\n        var prevIdx = 0;\n        var idx = start;\n        for (var k = 0; k < segLen; k++) {\n            var p = points[idx];\n            if (idx >= allLen || idx < 0) {\n                break;\n            }\n            if (isPointNull(p)) {\n                if (connectNulls) {\n                    idx += dir;\n                    continue;\n                }\n                break;\n            }\n\n            if (idx === start) {\n                ctx[dir > 0 ? 'moveTo' : 'lineTo'](p[0], p[1]);\n                v2Copy(cp0, p);\n            }\n            else {\n                if (smooth > 0) {\n                    var nextIdx = idx + dir;\n                    var nextP = points[nextIdx];\n                    if (connectNulls) {\n                        // Find next point not null\n                        while (nextP && isPointNull(points[nextIdx])) {\n                            nextIdx += dir;\n                            nextP = points[nextIdx];\n                        }\n                    }\n\n                    var ratioNextSeg = 0.5;\n                    var prevP = points[prevIdx];\n                    var nextP = points[nextIdx];\n                    // Last point\n                    if (!nextP || isPointNull(nextP)) {\n                        v2Copy(cp1, p);\n                    }\n                    else {\n                        // If next data is null in not connect case\n                        if (isPointNull(nextP) && !connectNulls) {\n                            nextP = p;\n                        }\n\n                        vec2.sub(v, nextP, prevP);\n\n                        var lenPrevSeg;\n                        var lenNextSeg;\n                        if (smoothMonotone === 'x' || smoothMonotone === 'y') {\n                            var dim = smoothMonotone === 'x' ? 0 : 1;\n                            lenPrevSeg = Math.abs(p[dim] - prevP[dim]);\n                            lenNextSeg = Math.abs(p[dim] - nextP[dim]);\n                        }\n                        else {\n                            lenPrevSeg = vec2.dist(p, prevP);\n                            lenNextSeg = vec2.dist(p, nextP);\n                        }\n\n                        // Use ratio of seg length\n                        ratioNextSeg = lenNextSeg / (lenNextSeg + lenPrevSeg);\n\n                        scaleAndAdd(cp1, p, v, -smooth * (1 - ratioNextSeg));\n                    }\n                    // Smooth constraint\n                    vec2Min(cp0, cp0, smoothMax);\n                    vec2Max(cp0, cp0, smoothMin);\n                    vec2Min(cp1, cp1, smoothMax);\n                    vec2Max(cp1, cp1, smoothMin);\n\n                    ctx.bezierCurveTo(\n                        cp0[0], cp0[1],\n                        cp1[0], cp1[1],\n                        p[0], p[1]\n                    );\n                    // cp0 of next segment\n                    scaleAndAdd(cp0, p, v, smooth * ratioNextSeg);\n                }\n                else {\n                    ctx.lineTo(p[0], p[1]);\n                }\n            }\n\n            prevIdx = idx;\n            idx += dir;\n        }\n\n        return k;\n    }\n\n    function getBoundingBox(points, smoothConstraint) {\n        var ptMin = [Infinity, Infinity];\n        var ptMax = [-Infinity, -Infinity];\n        if (smoothConstraint) {\n            for (var i = 0; i < points.length; i++) {\n                var pt = points[i];\n                if (pt[0] < ptMin[0]) { ptMin[0] = pt[0]; }\n                if (pt[1] < ptMin[1]) { ptMin[1] = pt[1]; }\n                if (pt[0] > ptMax[0]) { ptMax[0] = pt[0]; }\n                if (pt[1] > ptMax[1]) { ptMax[1] = pt[1]; }\n            }\n        }\n        return {\n            min: smoothConstraint ? ptMin : ptMax,\n            max: smoothConstraint ? ptMax : ptMin\n        };\n    }\n\n    module.exports = {\n\n        Polyline: Path.extend({\n\n            type: 'ec-polyline',\n\n            shape: {\n                points: [],\n\n                smooth: 0,\n\n                smoothConstraint: true,\n\n                smoothMonotone: null,\n\n                connectNulls: false\n            },\n\n            style: {\n                fill: null,\n\n                stroke: '#000'\n            },\n\n            buildPath: function (ctx, shape) {\n                var points = shape.points;\n\n                var i = 0;\n                var len = points.length;\n\n                var result = getBoundingBox(points, shape.smoothConstraint);\n\n                if (shape.connectNulls) {\n                    // Must remove first and last null values avoid draw error in polygon\n                    for (; len > 0; len--) {\n                        if (!isPointNull(points[len - 1])) {\n                            break;\n                        }\n                    }\n                    for (; i < len; i++) {\n                        if (!isPointNull(points[i])) {\n                            break;\n                        }\n                    }\n                }\n                while (i < len) {\n                    i += drawSegment(\n                        ctx, points, i, len, len,\n                        1, result.min, result.max, shape.smooth,\n                        shape.smoothMonotone, shape.connectNulls\n                    ) + 1;\n                }\n            }\n        }),\n\n        Polygon: Path.extend({\n\n            type: 'ec-polygon',\n\n            shape: {\n                points: [],\n\n                // Offset between stacked base points and points\n                stackedOnPoints: [],\n\n                smooth: 0,\n\n                stackedOnSmooth: 0,\n\n                smoothConstraint: true,\n\n                smoothMonotone: null,\n\n                connectNulls: false\n            },\n\n            buildPath: function (ctx, shape) {\n                var points = shape.points;\n                var stackedOnPoints = shape.stackedOnPoints;\n\n                var i = 0;\n                var len = points.length;\n                var smoothMonotone = shape.smoothMonotone;\n                var bbox = getBoundingBox(points, shape.smoothConstraint);\n                var stackedOnBBox = getBoundingBox(stackedOnPoints, shape.smoothConstraint);\n\n                if (shape.connectNulls) {\n                    // Must remove first and last null values avoid draw error in polygon\n                    for (; len > 0; len--) {\n                        if (!isPointNull(points[len - 1])) {\n                            break;\n                        }\n                    }\n                    for (; i < len; i++) {\n                        if (!isPointNull(points[i])) {\n                            break;\n                        }\n                    }\n                }\n                while (i < len) {\n                    var k = drawSegment(\n                        ctx, points, i, len, len,\n                        1, bbox.min, bbox.max, shape.smooth,\n                        smoothMonotone, shape.connectNulls\n                    );\n                    drawSegment(\n                        ctx, stackedOnPoints, i + k - 1, k, len,\n                        -1, stackedOnBBox.min, stackedOnBBox.max, shape.stackedOnSmooth,\n                        smoothMonotone, shape.connectNulls\n                    );\n                    i += k + 1;\n\n                    ctx.closePath();\n                }\n            }\n        })\n    };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.6.1@echarts/lib/chart/line/poly.js\n// module id = LhwB\n// module chunks = 0 1","/**\n * 扇形\n * @module zrender/graphic/shape/Sector\n */\n\n\n\n    var env = require('../../core/env');\n    var Path = require('../Path');\n\n    var shadowTemp = [\n        ['shadowBlur', 0],\n        ['shadowColor', '#000'],\n        ['shadowOffsetX', 0],\n        ['shadowOffsetY', 0]\n    ];\n\n    module.exports = Path.extend({\n\n        type: 'sector',\n\n        shape: {\n\n            cx: 0,\n\n            cy: 0,\n\n            r0: 0,\n\n            r: 0,\n\n            startAngle: 0,\n\n            endAngle: Math.PI * 2,\n\n            clockwise: true\n        },\n\n        brush: (env.browser.ie && env.browser.version >= 11) // version: '11.0'\n            // Fix weird bug in some version of IE11 (like 11.0.9600.17801),\n            // where exception \"unexpected call to method or property access\"\n            // might be thrown when calling ctx.fill after a path whose area size\n            // is zero is drawn and ctx.clip() is called and shadowBlur is set.\n            // (e.g.,\n            //  ctx.moveTo(10, 10);\n            //  ctx.lineTo(20, 10);\n            //  ctx.closePath();\n            //  ctx.clip();\n            //  ctx.shadowBlur = 10;\n            //  ...\n            //  ctx.fill();\n            // )\n            ? function () {\n                var clipPaths = this.__clipPaths;\n                var style = this.style;\n                var modified;\n\n                if (clipPaths) {\n                    for (var i = 0; i < clipPaths.length; i++) {\n                        var shape = clipPaths[i] && clipPaths[i].shape;\n                        if (shape && shape.startAngle === shape.endAngle) {\n                            for (var j = 0; j < shadowTemp.length; j++) {\n                                shadowTemp[j][2] = style[shadowTemp[j][0]];\n                                style[shadowTemp[j][0]] = shadowTemp[j][1];\n                            }\n                            modified = true;\n                            break;\n                        }\n                    }\n                }\n\n                Path.prototype.brush.apply(this, arguments);\n\n                if (modified) {\n                    for (var j = 0; j < shadowTemp.length; j++) {\n                        style[shadowTemp[j][0]] = shadowTemp[j][2];\n                    }\n                }\n            }\n            : Path.prototype.brush,\n\n        buildPath: function (ctx, shape) {\n\n            var x = shape.cx;\n            var y = shape.cy;\n            var r0 = Math.max(shape.r0 || 0, 0);\n            var r = Math.max(shape.r, 0);\n            var startAngle = shape.startAngle;\n            var endAngle = shape.endAngle;\n            var clockwise = shape.clockwise;\n\n            var unitX = Math.cos(startAngle);\n            var unitY = Math.sin(startAngle);\n\n            ctx.moveTo(unitX * r0 + x, unitY * r0 + y);\n\n            ctx.lineTo(unitX * r + x, unitY * r + y);\n\n            ctx.arc(x, y, r, startAngle, endAngle, !clockwise);\n\n            ctx.lineTo(\n                Math.cos(endAngle) * r0 + x,\n                Math.sin(endAngle) * r0 + y\n            );\n\n            if (r0 !== 0) {\n                ctx.arc(x, y, r0, endAngle, startAngle, clockwise);\n            }\n\n            ctx.closePath();\n        }\n    });\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.5.1@zrender/lib/graphic/shape/Sector.js\n// module id = LsC0\n// module chunks = 0 1","'use strict';\n\n\n    var features = {};\n\n    module.exports = {\n        register: function (name, ctor) {\n            features[name] = ctor;\n        },\n\n        get: function (name) {\n            return features[name];\n        }\n    };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.6.1@echarts/lib/component/toolbox/featureManager.js\n// module id = M5+E\n// module chunks = 0 1","/**\n * ECharts global model\n *\n * @module {echarts/model/Global}\n */\n\n\n\n    /**\n     * Caution: If the mechanism should be changed some day, these cases\n     * should be considered:\n     *\n     * (1) In `merge option` mode, if using the same option to call `setOption`\n     * many times, the result should be the same (try our best to ensure that).\n     * (2) In `merge option` mode, if a component has no id/name specified, it\n     * will be merged by index, and the result sequence of the components is\n     * consistent to the original sequence.\n     * (3) `reset` feature (in toolbox). Find detailed info in comments about\n     * `mergeOption` in module:echarts/model/OptionManager.\n     */\n\n    var zrUtil = require('zrender/lib/core/util');\n    var modelUtil = require('../util/model');\n    var Model = require('./Model');\n    var each = zrUtil.each;\n    var filter = zrUtil.filter;\n    var map = zrUtil.map;\n    var isArray = zrUtil.isArray;\n    var indexOf = zrUtil.indexOf;\n    var isObject = zrUtil.isObject;\n\n    var ComponentModel = require('./Component');\n\n    var globalDefault = require('./globalDefault');\n\n    var OPTION_INNER_KEY = '\\0_ec_inner';\n\n    /**\n     * @alias module:echarts/model/Global\n     *\n     * @param {Object} option\n     * @param {module:echarts/model/Model} parentModel\n     * @param {Object} theme\n     */\n    var GlobalModel = Model.extend({\n\n        constructor: GlobalModel,\n\n        init: function (option, parentModel, theme, optionManager) {\n            theme = theme || {};\n\n            this.option = null; // Mark as not initialized.\n\n            /**\n             * @type {module:echarts/model/Model}\n             * @private\n             */\n            this._theme = new Model(theme);\n\n            /**\n             * @type {module:echarts/model/OptionManager}\n             */\n            this._optionManager = optionManager;\n        },\n\n        setOption: function (option, optionPreprocessorFuncs) {\n            zrUtil.assert(\n                !(OPTION_INNER_KEY in option),\n                'please use chart.getOption()'\n            );\n\n            this._optionManager.setOption(option, optionPreprocessorFuncs);\n\n            this.resetOption(null);\n        },\n\n        /**\n         * @param {string} type null/undefined: reset all.\n         *                      'recreate': force recreate all.\n         *                      'timeline': only reset timeline option\n         *                      'media': only reset media query option\n         * @return {boolean} Whether option changed.\n         */\n        resetOption: function (type) {\n            var optionChanged = false;\n            var optionManager = this._optionManager;\n\n            if (!type || type === 'recreate') {\n                var baseOption = optionManager.mountOption(type === 'recreate');\n\n                if (!this.option || type === 'recreate') {\n                    initBase.call(this, baseOption);\n                }\n                else {\n                    this.restoreData();\n                    this.mergeOption(baseOption);\n                }\n                optionChanged = true;\n            }\n\n            if (type === 'timeline' || type === 'media') {\n                this.restoreData();\n            }\n\n            if (!type || type === 'recreate' || type === 'timeline') {\n                var timelineOption = optionManager.getTimelineOption(this);\n                timelineOption && (this.mergeOption(timelineOption), optionChanged = true);\n            }\n\n            if (!type || type === 'recreate' || type === 'media') {\n                var mediaOptions = optionManager.getMediaOption(this, this._api);\n                if (mediaOptions.length) {\n                    each(mediaOptions, function (mediaOption) {\n                        this.mergeOption(mediaOption, optionChanged = true);\n                    }, this);\n                }\n            }\n\n            return optionChanged;\n        },\n\n        /**\n         * @protected\n         */\n        mergeOption: function (newOption) {\n            var option = this.option;\n            var componentsMap = this._componentsMap;\n            var newCptTypes = [];\n\n            // 如果不存在对应的 component model 则直接 merge\n            each(newOption, function (componentOption, mainType) {\n                if (componentOption == null) {\n                    return;\n                }\n\n                if (!ComponentModel.hasClass(mainType)) {\n                    option[mainType] = option[mainType] == null\n                        ? zrUtil.clone(componentOption)\n                        : zrUtil.merge(option[mainType], componentOption, true);\n                }\n                else {\n                    newCptTypes.push(mainType);\n                }\n            });\n\n            // FIXME OPTION 同步是否要改回原来的\n            ComponentModel.topologicalTravel(\n                newCptTypes, ComponentModel.getAllClassMainTypes(), visitComponent, this\n            );\n\n            this._seriesIndices = this._seriesIndices || [];\n\n            function visitComponent(mainType, dependencies) {\n                var newCptOptionList = modelUtil.normalizeToArray(newOption[mainType]);\n\n                var mapResult = modelUtil.mappingToExists(\n                    componentsMap.get(mainType), newCptOptionList\n                );\n\n                modelUtil.makeIdAndName(mapResult);\n\n                // Set mainType and complete subType.\n                each(mapResult, function (item, index) {\n                    var opt = item.option;\n                    if (isObject(opt)) {\n                        item.keyInfo.mainType = mainType;\n                        item.keyInfo.subType = determineSubType(mainType, opt, item.exist);\n                    }\n                });\n\n                var dependentModels = getComponentsByTypes(\n                    componentsMap, dependencies\n                );\n\n                option[mainType] = [];\n                componentsMap.set(mainType, []);\n\n                each(mapResult, function (resultItem, index) {\n                    var componentModel = resultItem.exist;\n                    var newCptOption = resultItem.option;\n\n                    zrUtil.assert(\n                        isObject(newCptOption) || componentModel,\n                        'Empty component definition'\n                    );\n\n                    // Consider where is no new option and should be merged using {},\n                    // see removeEdgeAndAdd in topologicalTravel and\n                    // ComponentModel.getAllClassMainTypes.\n                    if (!newCptOption) {\n                        componentModel.mergeOption({}, this);\n                        componentModel.optionUpdated({}, false);\n                    }\n                    else {\n                        var ComponentModelClass = ComponentModel.getClass(\n                            mainType, resultItem.keyInfo.subType, true\n                        );\n\n                        if (componentModel && componentModel instanceof ComponentModelClass) {\n                            componentModel.name = resultItem.keyInfo.name;\n                            componentModel.mergeOption(newCptOption, this);\n                            componentModel.optionUpdated(newCptOption, false);\n                        }\n                        else {\n                            // PENDING Global as parent ?\n                            var extraOpt = zrUtil.extend(\n                                {\n                                    dependentModels: dependentModels,\n                                    componentIndex: index\n                                },\n                                resultItem.keyInfo\n                            );\n                            componentModel = new ComponentModelClass(\n                                newCptOption, this, this, extraOpt\n                            );\n                            zrUtil.extend(componentModel, extraOpt);\n                            componentModel.init(newCptOption, this, this, extraOpt);\n                            // Call optionUpdated after init.\n                            // newCptOption has been used as componentModel.option\n                            // and may be merged with theme and default, so pass null\n                            // to avoid confusion.\n                            componentModel.optionUpdated(null, true);\n                        }\n                    }\n\n                    componentsMap.get(mainType)[index] = componentModel;\n                    option[mainType][index] = componentModel.option;\n                }, this);\n\n                // Backup series for filtering.\n                if (mainType === 'series') {\n                    this._seriesIndices = createSeriesIndices(componentsMap.get('series'));\n                }\n            }\n        },\n\n        /**\n         * Get option for output (cloned option and inner info removed)\n         * @public\n         * @return {Object}\n         */\n        getOption: function () {\n            var option = zrUtil.clone(this.option);\n\n            each(option, function (opts, mainType) {\n                if (ComponentModel.hasClass(mainType)) {\n                    var opts = modelUtil.normalizeToArray(opts);\n                    for (var i = opts.length - 1; i >= 0; i--) {\n                        // Remove options with inner id.\n                        if (modelUtil.isIdInner(opts[i])) {\n                            opts.splice(i, 1);\n                        }\n                    }\n                    option[mainType] = opts;\n                }\n            });\n\n            delete option[OPTION_INNER_KEY];\n\n            return option;\n        },\n\n        /**\n         * @return {module:echarts/model/Model}\n         */\n        getTheme: function () {\n            return this._theme;\n        },\n\n        /**\n         * @param {string} mainType\n         * @param {number} [idx=0]\n         * @return {module:echarts/model/Component}\n         */\n        getComponent: function (mainType, idx) {\n            var list = this._componentsMap.get(mainType);\n            if (list) {\n                return list[idx || 0];\n            }\n        },\n\n        /**\n         * If none of index and id and name used, return all components with mainType.\n         * @param {Object} condition\n         * @param {string} condition.mainType\n         * @param {string} [condition.subType] If ignore, only query by mainType\n         * @param {number|Array.<number>} [condition.index] Either input index or id or name.\n         * @param {string|Array.<string>} [condition.id] Either input index or id or name.\n         * @param {string|Array.<string>} [condition.name] Either input index or id or name.\n         * @return {Array.<module:echarts/model/Component>}\n         */\n        queryComponents: function (condition) {\n            var mainType = condition.mainType;\n            if (!mainType) {\n                return [];\n            }\n\n            var index = condition.index;\n            var id = condition.id;\n            var name = condition.name;\n\n            var cpts = this._componentsMap.get(mainType);\n\n            if (!cpts || !cpts.length) {\n                return [];\n            }\n\n            var result;\n\n            if (index != null) {\n                if (!isArray(index)) {\n                    index = [index];\n                }\n                result = filter(map(index, function (idx) {\n                    return cpts[idx];\n                }), function (val) {\n                    return !!val;\n                });\n            }\n            else if (id != null) {\n                var isIdArray = isArray(id);\n                result = filter(cpts, function (cpt) {\n                    return (isIdArray && indexOf(id, cpt.id) >= 0)\n                        || (!isIdArray && cpt.id === id);\n                });\n            }\n            else if (name != null) {\n                var isNameArray = isArray(name);\n                result = filter(cpts, function (cpt) {\n                    return (isNameArray && indexOf(name, cpt.name) >= 0)\n                        || (!isNameArray && cpt.name === name);\n                });\n            }\n            else {\n                // Return all components with mainType\n                result = cpts.slice();\n            }\n\n            return filterBySubType(result, condition);\n        },\n\n        /**\n         * The interface is different from queryComponents,\n         * which is convenient for inner usage.\n         *\n         * @usage\n         * var result = findComponents(\n         *     {mainType: 'dataZoom', query: {dataZoomId: 'abc'}}\n         * );\n         * var result = findComponents(\n         *     {mainType: 'series', subType: 'pie', query: {seriesName: 'uio'}}\n         * );\n         * var result = findComponents(\n         *     {mainType: 'series'},\n         *     function (model, index) {...}\n         * );\n         * // result like [component0, componnet1, ...]\n         *\n         * @param {Object} condition\n         * @param {string} condition.mainType Mandatory.\n         * @param {string} [condition.subType] Optional.\n         * @param {Object} [condition.query] like {xxxIndex, xxxId, xxxName},\n         *        where xxx is mainType.\n         *        If query attribute is null/undefined or has no index/id/name,\n         *        do not filtering by query conditions, which is convenient for\n         *        no-payload situations or when target of action is global.\n         * @param {Function} [condition.filter] parameter: component, return boolean.\n         * @return {Array.<module:echarts/model/Component>}\n         */\n        findComponents: function (condition) {\n            var query = condition.query;\n            var mainType = condition.mainType;\n\n            var queryCond = getQueryCond(query);\n            var result = queryCond\n                ? this.queryComponents(queryCond)\n                : this._componentsMap.get(mainType);\n\n            return doFilter(filterBySubType(result, condition));\n\n            function getQueryCond(q) {\n                var indexAttr = mainType + 'Index';\n                var idAttr = mainType + 'Id';\n                var nameAttr = mainType + 'Name';\n                return q && (\n                        q[indexAttr] != null\n                        || q[idAttr] != null\n                        || q[nameAttr] != null\n                    )\n                    ? {\n                        mainType: mainType,\n                        // subType will be filtered finally.\n                        index: q[indexAttr],\n                        id: q[idAttr],\n                        name: q[nameAttr]\n                    }\n                    : null;\n            }\n\n            function doFilter(res) {\n                return condition.filter\n                     ? filter(res, condition.filter)\n                     : res;\n            }\n        },\n\n        /**\n         * @usage\n         * eachComponent('legend', function (legendModel, index) {\n         *     ...\n         * });\n         * eachComponent(function (componentType, model, index) {\n         *     // componentType does not include subType\n         *     // (componentType is 'xxx' but not 'xxx.aa')\n         * });\n         * eachComponent(\n         *     {mainType: 'dataZoom', query: {dataZoomId: 'abc'}},\n         *     function (model, index) {...}\n         * );\n         * eachComponent(\n         *     {mainType: 'series', subType: 'pie', query: {seriesName: 'uio'}},\n         *     function (model, index) {...}\n         * );\n         *\n         * @param {string|Object=} mainType When mainType is object, the definition\n         *                                  is the same as the method 'findComponents'.\n         * @param {Function} cb\n         * @param {*} context\n         */\n        eachComponent: function (mainType, cb, context) {\n            var componentsMap = this._componentsMap;\n\n            if (typeof mainType === 'function') {\n                context = cb;\n                cb = mainType;\n                componentsMap.each(function (components, componentType) {\n                    each(components, function (component, index) {\n                        cb.call(context, componentType, component, index);\n                    });\n                });\n            }\n            else if (zrUtil.isString(mainType)) {\n                each(componentsMap.get(mainType), cb, context);\n            }\n            else if (isObject(mainType)) {\n                var queryResult = this.findComponents(mainType);\n                each(queryResult, cb, context);\n            }\n        },\n\n        /**\n         * @param {string} name\n         * @return {Array.<module:echarts/model/Series>}\n         */\n        getSeriesByName: function (name) {\n            var series = this._componentsMap.get('series');\n            return filter(series, function (oneSeries) {\n                return oneSeries.name === name;\n            });\n        },\n\n        /**\n         * @param {number} seriesIndex\n         * @return {module:echarts/model/Series}\n         */\n        getSeriesByIndex: function (seriesIndex) {\n            return this._componentsMap.get('series')[seriesIndex];\n        },\n\n        /**\n         * @param {string} subType\n         * @return {Array.<module:echarts/model/Series>}\n         */\n        getSeriesByType: function (subType) {\n            var series = this._componentsMap.get('series');\n            return filter(series, function (oneSeries) {\n                return oneSeries.subType === subType;\n            });\n        },\n\n        /**\n         * @return {Array.<module:echarts/model/Series>}\n         */\n        getSeries: function () {\n            return this._componentsMap.get('series').slice();\n        },\n\n        /**\n         * After filtering, series may be different\n         * frome raw series.\n         *\n         * @param {Function} cb\n         * @param {*} context\n         */\n        eachSeries: function (cb, context) {\n            assertSeriesInitialized(this);\n            each(this._seriesIndices, function (rawSeriesIndex) {\n                var series = this._componentsMap.get('series')[rawSeriesIndex];\n                cb.call(context, series, rawSeriesIndex);\n            }, this);\n        },\n\n        /**\n         * Iterate raw series before filtered.\n         *\n         * @param {Function} cb\n         * @param {*} context\n         */\n        eachRawSeries: function (cb, context) {\n            each(this._componentsMap.get('series'), cb, context);\n        },\n\n        /**\n         * After filtering, series may be different.\n         * frome raw series.\n         *\n         * @parma {string} subType\n         * @param {Function} cb\n         * @param {*} context\n         */\n        eachSeriesByType: function (subType, cb, context) {\n            assertSeriesInitialized(this);\n            each(this._seriesIndices, function (rawSeriesIndex) {\n                var series = this._componentsMap.get('series')[rawSeriesIndex];\n                if (series.subType === subType) {\n                    cb.call(context, series, rawSeriesIndex);\n                }\n            }, this);\n        },\n\n        /**\n         * Iterate raw series before filtered of given type.\n         *\n         * @parma {string} subType\n         * @param {Function} cb\n         * @param {*} context\n         */\n        eachRawSeriesByType: function (subType, cb, context) {\n            return each(this.getSeriesByType(subType), cb, context);\n        },\n\n        /**\n         * @param {module:echarts/model/Series} seriesModel\n         */\n        isSeriesFiltered: function (seriesModel) {\n            assertSeriesInitialized(this);\n            return zrUtil.indexOf(this._seriesIndices, seriesModel.componentIndex) < 0;\n        },\n\n        /**\n         * @return {Array.<number>}\n         */\n        getCurrentSeriesIndices: function () {\n            return (this._seriesIndices || []).slice();\n        },\n\n        /**\n         * @param {Function} cb\n         * @param {*} context\n         */\n        filterSeries: function (cb, context) {\n            assertSeriesInitialized(this);\n            var filteredSeries = filter(\n                this._componentsMap.get('series'), cb, context\n            );\n            this._seriesIndices = createSeriesIndices(filteredSeries);\n        },\n\n        restoreData: function () {\n            var componentsMap = this._componentsMap;\n\n            this._seriesIndices = createSeriesIndices(componentsMap.get('series'));\n\n            var componentTypes = [];\n            componentsMap.each(function (components, componentType) {\n                componentTypes.push(componentType);\n            });\n\n            ComponentModel.topologicalTravel(\n                componentTypes,\n                ComponentModel.getAllClassMainTypes(),\n                function (componentType, dependencies) {\n                    each(componentsMap.get(componentType), function (component) {\n                        component.restoreData();\n                    });\n                }\n            );\n        }\n\n    });\n\n    /**\n     * @inner\n     */\n    function mergeTheme(option, theme) {\n        zrUtil.each(theme, function (themeItem, name) {\n            // 如果有 component model 则把具体的 merge 逻辑交给该 model 处理\n            if (!ComponentModel.hasClass(name)) {\n                if (typeof themeItem === 'object') {\n                    option[name] = !option[name]\n                        ? zrUtil.clone(themeItem)\n                        : zrUtil.merge(option[name], themeItem, false);\n                }\n                else {\n                    if (option[name] == null) {\n                        option[name] = themeItem;\n                    }\n                }\n            }\n        });\n    }\n\n    function initBase(baseOption) {\n        baseOption = baseOption;\n\n        // Using OPTION_INNER_KEY to mark that this option can not be used outside,\n        // i.e. `chart.setOption(chart.getModel().option);` is forbiden.\n        this.option = {};\n        this.option[OPTION_INNER_KEY] = 1;\n\n        /**\n         * Init with series: [], in case of calling findSeries method\n         * before series initialized.\n         * @type {Object.<string, Array.<module:echarts/model/Model>>}\n         * @private\n         */\n        this._componentsMap = zrUtil.createHashMap({series: []});\n\n        /**\n         * Mapping between filtered series list and raw series list.\n         * key: filtered series indices, value: raw series indices.\n         * @type {Array.<nubmer>}\n         * @private\n         */\n        this._seriesIndices = null;\n\n        mergeTheme(baseOption, this._theme.option);\n\n        // TODO Needs clone when merging to the unexisted property\n        zrUtil.merge(baseOption, globalDefault, false);\n\n        this.mergeOption(baseOption);\n    }\n\n    /**\n     * @inner\n     * @param {Array.<string>|string} types model types\n     * @return {Object} key: {string} type, value: {Array.<Object>} models\n     */\n    function getComponentsByTypes(componentsMap, types) {\n        if (!zrUtil.isArray(types)) {\n            types = types ? [types] : [];\n        }\n\n        var ret = {};\n        each(types, function (type) {\n            ret[type] = (componentsMap.get(type) || []).slice();\n        });\n\n        return ret;\n    }\n\n    /**\n     * @inner\n     */\n    function determineSubType(mainType, newCptOption, existComponent) {\n        var subType = newCptOption.type\n            ? newCptOption.type\n            : existComponent\n            ? existComponent.subType\n            // Use determineSubType only when there is no existComponent.\n            : ComponentModel.determineSubType(mainType, newCptOption);\n\n        // tooltip, markline, markpoint may always has no subType\n        return subType;\n    }\n\n    /**\n     * @inner\n     */\n    function createSeriesIndices(seriesModels) {\n        return map(seriesModels, function (series) {\n            return series.componentIndex;\n        }) || [];\n    }\n\n    /**\n     * @inner\n     */\n    function filterBySubType(components, condition) {\n        // Using hasOwnProperty for restrict. Consider\n        // subType is undefined in user payload.\n        return condition.hasOwnProperty('subType')\n            ? filter(components, function (cpt) {\n                return cpt.subType === condition.subType;\n            })\n            : components;\n    }\n\n    /**\n     * @inner\n     */\n    function assertSeriesInitialized(ecModel) {\n        // Components that use _seriesIndices should depends on series component,\n        // which make sure that their initialization is after series.\n        if (__DEV__) {\n            if (!ecModel._seriesIndices) {\n                throw new Error('Option should contains series.');\n            }\n        }\n    }\n\n    zrUtil.mixin(GlobalModel, require('./mixin/colorPalette'));\n\n    module.exports = GlobalModel;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.6.1@echarts/lib/model/Global.js\n// module id = MU/F\n// module chunks = 0 1","\n\n    require('./toolbox/ToolboxModel');\n    require('./toolbox/ToolboxView');\n\n    require('./toolbox/feature/SaveAsImage');\n    require('./toolbox/feature/MagicType');\n    require('./toolbox/feature/DataView');\n    require('./toolbox/feature/DataZoom');\n    require('./toolbox/feature/Restore');\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.6.1@echarts/lib/component/toolbox.js\n// module id = MVgO\n// module chunks = 0 1","'use strict';\n\n\n    var createListFromArray = require('../helper/createListFromArray');\n    var SeriesModel = require('../../model/Series');\n\n    module.exports = SeriesModel.extend({\n\n        type: 'series.line',\n\n        dependencies: ['grid', 'polar'],\n\n        getInitialData: function (option, ecModel) {\n            if (__DEV__) {\n                var coordSys = option.coordinateSystem;\n                if (coordSys !== 'polar' && coordSys !== 'cartesian2d') {\n                    throw new Error('Line not support coordinateSystem besides cartesian and polar');\n                }\n            }\n            return createListFromArray(option.data, this, ecModel);\n        },\n\n        defaultOption: {\n            zlevel: 0,                  // 一级层叠\n            z: 2,                       // 二级层叠\n            coordinateSystem: 'cartesian2d',\n            legendHoverLink: true,\n\n            hoverAnimation: true,\n            // stack: null\n            // xAxisIndex: 0,\n            // yAxisIndex: 0,\n\n            // polarIndex: 0,\n\n            // If clip the overflow value\n            clipOverflow: true,\n\n            label: {\n                normal: {\n                    position: 'top'\n                }\n            },\n            // itemStyle: {\n            //     normal: {},\n            //     emphasis: {}\n            // },\n            lineStyle: {\n                normal: {\n                    width: 2,\n                    type: 'solid'\n                }\n            },\n            // areaStyle: {},\n            // false, 'start', 'end', 'middle'\n            step: false,\n\n            // Disabled if step is true\n            smooth: false,\n            smoothMonotone: null,\n            // 拐点图形类型\n            symbol: 'emptyCircle',\n            // 拐点图形大小\n            symbolSize: 4,\n            // 拐点图形旋转控制\n            symbolRotate: null,\n\n            // 是否显示 symbol, 只有在 tooltip hover 的时候显示\n            showSymbol: true,\n            // 标志图形默认只有主轴显示（随主轴标签间隔隐藏策略）\n            showAllSymbol: false,\n\n            // 是否连接断点\n            connectNulls: false,\n\n            // 数据过滤，'average', 'max', 'min', 'sum'\n            sampling: 'none',\n\n            animationEasing: 'linear',\n\n            // Disable progressive\n            progressive: 0,\n            hoverLayerThreshold: Infinity\n        }\n    });\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.6.1@echarts/lib/chart/line/LineSeries.js\n// module id = MpSj\n// module chunks = 0 1","\n\n    var ATTR = '\\0_ec_interaction_mutex';\n\n    var interactionMutex = {\n\n        take: function (zr, resourceKey, userKey) {\n            var store = getStore(zr);\n            store[resourceKey] = userKey;\n        },\n\n        release: function (zr, resourceKey, userKey) {\n            var store = getStore(zr);\n            var uKey = store[resourceKey];\n\n            if (uKey === userKey) {\n                store[resourceKey] = null;\n            }\n        },\n\n        isTaken: function (zr, resourceKey) {\n            return !!getStore(zr)[resourceKey];\n        }\n    };\n\n    function getStore(zr) {\n        return zr[ATTR] || (zr[ATTR] = {});\n    }\n\n    /**\n     * payload: {\n     *     type: 'takeGlobalCursor',\n     *     key: 'dataZoomSelect', or 'brush', or ...,\n     *         If no userKey, release global cursor.\n     * }\n     */\n    require('../../echarts').registerAction(\n        {type: 'takeGlobalCursor', event: 'globalCursorTaken', update: 'update'},\n        function () {}\n    );\n\n    module.exports = interactionMutex;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.6.1@echarts/lib/component/helper/interactionMutex.js\n// module id = NPNz\n// module chunks = 0 1","\n\n    var eventTool = require('../core/event');\n    var zrUtil = require('../core/util');\n    var Eventful = require('../mixin/Eventful');\n    var env = require('../core/env');\n    var GestureMgr = require('../core/GestureMgr');\n\n    var addEventListener = eventTool.addEventListener;\n    var removeEventListener = eventTool.removeEventListener;\n    var normalizeEvent = eventTool.normalizeEvent;\n\n    var TOUCH_CLICK_DELAY = 300;\n\n    var mouseHandlerNames = [\n        'click', 'dblclick', 'mousewheel', 'mouseout',\n        'mouseup', 'mousedown', 'mousemove', 'contextmenu'\n    ];\n\n    var touchHandlerNames = [\n        'touchstart', 'touchend', 'touchmove'\n    ];\n\n    var pointerEventNames = {\n        pointerdown: 1, pointerup: 1, pointermove: 1, pointerout: 1\n    };\n\n    var pointerHandlerNames = zrUtil.map(mouseHandlerNames, function (name) {\n        var nm = name.replace('mouse', 'pointer');\n        return pointerEventNames[nm] ? nm : name;\n    });\n\n    function eventNameFix(name) {\n        return (name === 'mousewheel' && env.browser.firefox) ? 'DOMMouseScroll' : name;\n    }\n\n    function processGesture(proxy, event, stage) {\n        var gestureMgr = proxy._gestureMgr;\n\n        stage === 'start' && gestureMgr.clear();\n\n        var gestureInfo = gestureMgr.recognize(\n            event,\n            proxy.handler.findHover(event.zrX, event.zrY, null).target,\n            proxy.dom\n        );\n\n        stage === 'end' && gestureMgr.clear();\n\n        // Do not do any preventDefault here. Upper application do that if necessary.\n        if (gestureInfo) {\n            var type = gestureInfo.type;\n            event.gestureEvent = type;\n\n            proxy.handler.dispatchToElement({target: gestureInfo.target}, type, gestureInfo.event);\n        }\n    }\n\n    // function onMSGestureChange(proxy, event) {\n    //     if (event.translationX || event.translationY) {\n    //         // mousemove is carried by MSGesture to reduce the sensitivity.\n    //         proxy.handler.dispatchToElement(event.target, 'mousemove', event);\n    //     }\n    //     if (event.scale !== 1) {\n    //         event.pinchX = event.offsetX;\n    //         event.pinchY = event.offsetY;\n    //         event.pinchScale = event.scale;\n    //         proxy.handler.dispatchToElement(event.target, 'pinch', event);\n    //     }\n    // }\n\n    /**\n     * Prevent mouse event from being dispatched after Touch Events action\n     * @see <https://github.com/deltakosh/handjs/blob/master/src/hand.base.js>\n     * 1. Mobile browsers dispatch mouse events 300ms after touchend.\n     * 2. Chrome for Android dispatch mousedown for long-touch about 650ms\n     * Result: Blocking Mouse Events for 700ms.\n     */\n    function setTouchTimer(instance) {\n        instance._touching = true;\n        clearTimeout(instance._touchTimer);\n        instance._touchTimer = setTimeout(function () {\n            instance._touching = false;\n        }, 700);\n    }\n\n\n    var domHandlers = {\n        /**\n         * Mouse move handler\n         * @inner\n         * @param {Event} event\n         */\n        mousemove: function (event) {\n            event = normalizeEvent(this.dom, event);\n\n            this.trigger('mousemove', event);\n        },\n\n        /**\n         * Mouse out handler\n         * @inner\n         * @param {Event} event\n         */\n        mouseout: function (event) {\n            event = normalizeEvent(this.dom, event);\n\n            var element = event.toElement || event.relatedTarget;\n            if (element != this.dom) {\n                while (element && element.nodeType != 9) {\n                    // 忽略包含在root中的dom引起的mouseOut\n                    if (element === this.dom) {\n                        return;\n                    }\n\n                    element = element.parentNode;\n                }\n            }\n\n            this.trigger('mouseout', event);\n        },\n\n        /**\n         * Touch开始响应函数\n         * @inner\n         * @param {Event} event\n         */\n        touchstart: function (event) {\n            // Default mouse behaviour should not be disabled here.\n            // For example, page may needs to be slided.\n            event = normalizeEvent(this.dom, event);\n\n            // Mark touch, which is useful in distinguish touch and\n            // mouse event in upper applicatoin.\n            event.zrByTouch = true;\n\n            this._lastTouchMoment = new Date();\n\n            processGesture(this, event, 'start');\n\n            // In touch device, trigger `mousemove`(`mouseover`) should\n            // be triggered, and must before `mousedown` triggered.\n            domHandlers.mousemove.call(this, event);\n\n            domHandlers.mousedown.call(this, event);\n\n            setTouchTimer(this);\n        },\n\n        /**\n         * Touch移动响应函数\n         * @inner\n         * @param {Event} event\n         */\n        touchmove: function (event) {\n\n            event = normalizeEvent(this.dom, event);\n\n            // Mark touch, which is useful in distinguish touch and\n            // mouse event in upper applicatoin.\n            event.zrByTouch = true;\n\n            processGesture(this, event, 'change');\n\n            // Mouse move should always be triggered no matter whether\n            // there is gestrue event, because mouse move and pinch may\n            // be used at the same time.\n            domHandlers.mousemove.call(this, event);\n\n            setTouchTimer(this);\n        },\n\n        /**\n         * Touch结束响应函数\n         * @inner\n         * @param {Event} event\n         */\n        touchend: function (event) {\n\n            event = normalizeEvent(this.dom, event);\n\n            // Mark touch, which is useful in distinguish touch and\n            // mouse event in upper applicatoin.\n            event.zrByTouch = true;\n\n            processGesture(this, event, 'end');\n\n            domHandlers.mouseup.call(this, event);\n\n            // Do not trigger `mouseout` here, in spite of `mousemove`(`mouseover`) is\n            // triggered in `touchstart`. This seems to be illogical, but by this mechanism,\n            // we can conveniently implement \"hover style\" in both PC and touch device just\n            // by listening to `mouseover` to add \"hover style\" and listening to `mouseout`\n            // to remove \"hover style\" on an element, without any additional code for\n            // compatibility. (`mouseout` will not be triggered in `touchend`, so \"hover\n            // style\" will remain for user view)\n\n            // click event should always be triggered no matter whether\n            // there is gestrue event. System click can not be prevented.\n            if (+new Date() - this._lastTouchMoment < TOUCH_CLICK_DELAY) {\n                domHandlers.click.call(this, event);\n            }\n\n            setTouchTimer(this);\n        },\n\n        pointerdown: function (event) {\n            domHandlers.mousedown.call(this, event);\n\n            // if (useMSGuesture(this, event)) {\n            //     this._msGesture.addPointer(event.pointerId);\n            // }\n        },\n\n        pointermove: function (event) {\n            // FIXME\n            // pointermove is so sensitive that it always triggered when\n            // tap(click) on touch screen, which affect some judgement in\n            // upper application. So, we dont support mousemove on MS touch\n            // device yet.\n            if (!isPointerFromTouch(event)) {\n                domHandlers.mousemove.call(this, event);\n            }\n        },\n\n        pointerup: function (event) {\n            domHandlers.mouseup.call(this, event);\n        },\n\n        pointerout: function (event) {\n            // pointerout will be triggered when tap on touch screen\n            // (IE11+/Edge on MS Surface) after click event triggered,\n            // which is inconsistent with the mousout behavior we defined\n            // in touchend. So we unify them.\n            // (check domHandlers.touchend for detailed explanation)\n            if (!isPointerFromTouch(event)) {\n                domHandlers.mouseout.call(this, event);\n            }\n        }\n    };\n\n    function isPointerFromTouch(event) {\n        var pointerType = event.pointerType;\n        return pointerType === 'pen' || pointerType === 'touch';\n    }\n\n    // function useMSGuesture(handlerProxy, event) {\n    //     return isPointerFromTouch(event) && !!handlerProxy._msGesture;\n    // }\n\n    // Common handlers\n    zrUtil.each(['click', 'mousedown', 'mouseup', 'mousewheel', 'dblclick', 'contextmenu'], function (name) {\n        domHandlers[name] = function (event) {\n            event = normalizeEvent(this.dom, event);\n            this.trigger(name, event);\n        };\n    });\n\n    /**\n     * 为控制类实例初始化dom 事件处理函数\n     *\n     * @inner\n     * @param {module:zrender/Handler} instance 控制类实例\n     */\n    function initDomHandler(instance) {\n        zrUtil.each(touchHandlerNames, function (name) {\n            instance._handlers[name] = zrUtil.bind(domHandlers[name], instance);\n        });\n\n        zrUtil.each(pointerHandlerNames, function (name) {\n            instance._handlers[name] = zrUtil.bind(domHandlers[name], instance);\n        });\n\n        zrUtil.each(mouseHandlerNames, function (name) {\n            instance._handlers[name] = makeMouseHandler(domHandlers[name], instance);\n        });\n\n        function makeMouseHandler(fn, instance) {\n            return function () {\n                if (instance._touching) {\n                    return;\n                }\n                return fn.apply(instance, arguments);\n            };\n        }\n    }\n\n\n    function HandlerDomProxy(dom) {\n        Eventful.call(this);\n\n        this.dom = dom;\n\n        /**\n         * @private\n         * @type {boolean}\n         */\n        this._touching = false;\n\n        /**\n         * @private\n         * @type {number}\n         */\n        this._touchTimer;\n\n        /**\n         * @private\n         * @type {module:zrender/core/GestureMgr}\n         */\n        this._gestureMgr = new GestureMgr();\n\n        this._handlers = {};\n\n        initDomHandler(this);\n\n        if (env.pointerEventsSupported) { // Only IE11+/Edge\n            // 1. On devices that both enable touch and mouse (e.g., MS Surface and lenovo X240),\n            // IE11+/Edge do not trigger touch event, but trigger pointer event and mouse event\n            // at the same time.\n            // 2. On MS Surface, it probablely only trigger mousedown but no mouseup when tap on\n            // screen, which do not occurs in pointer event.\n            // So we use pointer event to both detect touch gesture and mouse behavior.\n            mountHandlers(pointerHandlerNames, this);\n\n            // FIXME\n            // Note: MS Gesture require CSS touch-action set. But touch-action is not reliable,\n            // which does not prevent defuault behavior occasionally (which may cause view port\n            // zoomed in but use can not zoom it back). And event.preventDefault() does not work.\n            // So we have to not to use MSGesture and not to support touchmove and pinch on MS\n            // touch screen. And we only support click behavior on MS touch screen now.\n\n            // MS Gesture Event is only supported on IE11+/Edge and on Windows 8+.\n            // We dont support touch on IE on win7.\n            // See <https://msdn.microsoft.com/en-us/library/dn433243(v=vs.85).aspx>\n            // if (typeof MSGesture === 'function') {\n            //     (this._msGesture = new MSGesture()).target = dom; // jshint ignore:line\n            //     dom.addEventListener('MSGestureChange', onMSGestureChange);\n            // }\n        }\n        else {\n            if (env.touchEventsSupported) {\n                mountHandlers(touchHandlerNames, this);\n                // Handler of 'mouseout' event is needed in touch mode, which will be mounted below.\n                // addEventListener(root, 'mouseout', this._mouseoutHandler);\n            }\n\n            // 1. Considering some devices that both enable touch and mouse event (like on MS Surface\n            // and lenovo X240, @see #2350), we make mouse event be always listened, otherwise\n            // mouse event can not be handle in those devices.\n            // 2. On MS Surface, Chrome will trigger both touch event and mouse event. How to prevent\n            // mouseevent after touch event triggered, see `setTouchTimer`.\n            mountHandlers(mouseHandlerNames, this);\n        }\n\n        function mountHandlers(handlerNames, instance) {\n            zrUtil.each(handlerNames, function (name) {\n                addEventListener(dom, eventNameFix(name), instance._handlers[name]);\n            }, instance);\n        }\n    }\n\n    var handlerDomProxyProto = HandlerDomProxy.prototype;\n    handlerDomProxyProto.dispose = function () {\n        var handlerNames = mouseHandlerNames.concat(touchHandlerNames);\n\n        for (var i = 0; i < handlerNames.length; i++) {\n            var name = handlerNames[i];\n            removeEventListener(this.dom, eventNameFix(name), this._handlers[name]);\n        }\n    };\n\n    handlerDomProxyProto.setCursor = function (cursorStyle) {\n        this.dom.style.cursor = cursorStyle || 'default';\n    };\n\n    zrUtil.mixin(HandlerDomProxy, Eventful);\n\n    module.exports = HandlerDomProxy;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.5.1@zrender/lib/dom/HandlerProxy.js\n// module id = NXVI\n// module chunks = 0 1","'use strict';\n\n\n    var zrUtil = require('zrender/lib/core/util');\n    var BrushController = require('../../helper/BrushController');\n    var BrushTargetManager = require('../../helper/BrushTargetManager');\n    var history = require('../../dataZoom/history');\n    var sliderMove = require('../../helper/sliderMove');\n\n    var each = zrUtil.each;\n\n    // Use dataZoomSelect\n    require('../../dataZoomSelect');\n\n    // Spectial component id start with \\0ec\\0, see echarts/model/Global.js~hasInnerId\n    var DATA_ZOOM_ID_BASE = '\\0_ec_\\0toolbox-dataZoom_';\n\n    function DataZoom(model, ecModel, api) {\n\n        /**\n         * @private\n         * @type {module:echarts/component/helper/BrushController}\n         */\n        (this._brushController = new BrushController(api.getZr()))\n            .on('brush', zrUtil.bind(this._onBrush, this))\n            .mount();\n\n        /**\n         * @private\n         * @type {boolean}\n         */\n        this._isZoomActive;\n    }\n\n    DataZoom.defaultOption = {\n        show: true,\n        // Icon group\n        icon: {\n            zoom: 'M0,13.5h26.9 M13.5,26.9V0 M32.1,13.5H58V58H13.5 V32.1',\n            back: 'M22,1.4L9.9,13.5l12.3,12.3 M10.3,13.5H54.9v44.6 H10.3v-26'\n        },\n        title: {\n            zoom: '区域缩放',\n            back: '区域缩放还原'\n        }\n    };\n\n    var proto = DataZoom.prototype;\n\n    proto.render = function (featureModel, ecModel, api, payload) {\n        this.model = featureModel;\n        this.ecModel = ecModel;\n        this.api = api;\n\n        updateZoomBtnStatus(featureModel, ecModel, this, payload, api);\n        updateBackBtnStatus(featureModel, ecModel);\n    };\n\n    proto.onclick = function (ecModel, api, type) {\n        handlers[type].call(this);\n    };\n\n    proto.remove = function (ecModel, api) {\n        this._brushController.unmount();\n    };\n\n    proto.dispose = function (ecModel, api) {\n        this._brushController.dispose();\n    };\n\n    /**\n     * @private\n     */\n    var handlers = {\n\n        zoom: function () {\n            var nextActive = !this._isZoomActive;\n\n            this.api.dispatchAction({\n                type: 'takeGlobalCursor',\n                key: 'dataZoomSelect',\n                dataZoomSelectActive: nextActive\n            });\n        },\n\n        back: function () {\n            this._dispatchZoomAction(history.pop(this.ecModel));\n        }\n    };\n\n    /**\n     * @private\n     */\n    proto._onBrush = function (areas, opt) {\n        if (!opt.isEnd || !areas.length) {\n            return;\n        }\n        var snapshot = {};\n        var ecModel = this.ecModel;\n\n        this._brushController.updateCovers([]); // remove cover\n\n        var brushTargetManager = new BrushTargetManager(\n            retrieveAxisSetting(this.model.option), ecModel, {include: ['grid']}\n        );\n        brushTargetManager.matchOutputRanges(areas, ecModel, function (area, coordRange, coordSys) {\n            if (coordSys.type !== 'cartesian2d') {\n                return;\n            }\n\n            var brushType = area.brushType;\n            if (brushType === 'rect') {\n                setBatch('x', coordSys, coordRange[0]);\n                setBatch('y', coordSys, coordRange[1]);\n            }\n            else {\n                setBatch(({lineX: 'x', lineY: 'y'})[brushType], coordSys, coordRange);\n            }\n        });\n\n        history.push(ecModel, snapshot);\n\n        this._dispatchZoomAction(snapshot);\n\n        function setBatch(dimName, coordSys, minMax) {\n            var axis = coordSys.getAxis(dimName);\n            var axisModel = axis.model;\n            var dataZoomModel = findDataZoom(dimName, axisModel, ecModel);\n\n            // Restrict range.\n            var minMaxSpan = dataZoomModel.findRepresentativeAxisProxy(axisModel).getMinMaxSpan();\n            if (minMaxSpan.minValueSpan != null || minMaxSpan.maxValueSpan != null) {\n                minMax = sliderMove(\n                    0, minMax.slice(), axis.scale.getExtent(), 0,\n                    minMaxSpan.minValueSpan, minMaxSpan.maxValueSpan\n                );\n            }\n\n            dataZoomModel && (snapshot[dataZoomModel.id] = {\n                dataZoomId: dataZoomModel.id,\n                startValue: minMax[0],\n                endValue: minMax[1]\n            });\n        }\n\n        function findDataZoom(dimName, axisModel, ecModel) {\n            var found;\n            ecModel.eachComponent({mainType: 'dataZoom', subType: 'select'}, function (dzModel) {\n                var has = dzModel.getAxisModel(dimName, axisModel.componentIndex);\n                has && (found = dzModel);\n            });\n            return found;\n        }\n    };\n\n    /**\n     * @private\n     */\n    proto._dispatchZoomAction = function (snapshot) {\n        var batch = [];\n\n        // Convert from hash map to array.\n        each(snapshot, function (batchItem, dataZoomId) {\n            batch.push(zrUtil.clone(batchItem));\n        });\n\n        batch.length && this.api.dispatchAction({\n            type: 'dataZoom',\n            from: this.uid,\n            batch: batch\n        });\n    };\n\n    function retrieveAxisSetting(option) {\n        var setting = {};\n        // Compatible with previous setting: null => all axis, false => no axis.\n        zrUtil.each(['xAxisIndex', 'yAxisIndex'], function (name) {\n            setting[name] = option[name];\n            setting[name] == null && (setting[name] = 'all');\n            (setting[name] === false || setting[name] === 'none') && (setting[name] = []);\n        });\n        return setting;\n    }\n\n    function updateBackBtnStatus(featureModel, ecModel) {\n        featureModel.setIconStatus(\n            'back',\n            history.count(ecModel) > 1 ? 'emphasis' : 'normal'\n        );\n    }\n\n    function updateZoomBtnStatus(featureModel, ecModel, view, payload, api) {\n        var zoomActive = view._isZoomActive;\n\n        if (payload && payload.type === 'takeGlobalCursor') {\n            zoomActive = payload.key === 'dataZoomSelect'\n                ? payload.dataZoomSelectActive : false;\n        }\n\n        view._isZoomActive = zoomActive;\n\n        featureModel.setIconStatus('zoom', zoomActive ? 'emphasis' : 'normal');\n\n        var brushTargetManager = new BrushTargetManager(\n            retrieveAxisSetting(featureModel.option), ecModel, {include: ['grid']}\n        );\n\n        view._brushController\n            .setPanels(brushTargetManager.makePanelOpts(api, function (targetInfo) {\n                return (targetInfo.xAxisDeclared && !targetInfo.yAxisDeclared)\n                    ? 'lineX'\n                    : (!targetInfo.xAxisDeclared && targetInfo.yAxisDeclared)\n                    ? 'lineY'\n                    : 'rect';\n            }))\n            .enableBrush(\n                zoomActive\n                ? {\n                    brushType: 'auto',\n                    brushStyle: {\n                        // FIXME user customized?\n                        lineWidth: 0,\n                        fill: 'rgba(0,0,0,0.2)'\n                    }\n                }\n                : false\n            );\n    }\n\n\n    require('../featureManager').register('dataZoom', DataZoom);\n\n\n    // Create special dataZoom option for select\n    require('../../../echarts').registerPreprocessor(function (option) {\n        if (!option) {\n            return;\n        }\n\n        var dataZoomOpts = option.dataZoom || (option.dataZoom = []);\n        if (!zrUtil.isArray(dataZoomOpts)) {\n            option.dataZoom = dataZoomOpts = [dataZoomOpts];\n        }\n\n        var toolboxOpt = option.toolbox;\n        if (toolboxOpt) {\n            // Assume there is only one toolbox\n            if (zrUtil.isArray(toolboxOpt)) {\n                toolboxOpt = toolboxOpt[0];\n            }\n\n            if (toolboxOpt && toolboxOpt.feature) {\n                var dataZoomOpt = toolboxOpt.feature.dataZoom;\n                addForAxis('xAxis', dataZoomOpt);\n                addForAxis('yAxis', dataZoomOpt);\n            }\n        }\n\n        function addForAxis(axisName, dataZoomOpt) {\n            if (!dataZoomOpt) {\n                return;\n            }\n\n            // Try not to modify model, because it is not merged yet.\n            var axisIndicesName = axisName + 'Index';\n            var givenAxisIndices = dataZoomOpt[axisIndicesName];\n            if (givenAxisIndices != null\n                && givenAxisIndices != 'all'\n                && !zrUtil.isArray(givenAxisIndices)\n            ) {\n                givenAxisIndices = (givenAxisIndices === false || givenAxisIndices === 'none') ? [] : [givenAxisIndices];\n            }\n\n            forEachComponent(axisName, function (axisOpt, axisIndex) {\n                if (givenAxisIndices != null\n                    && givenAxisIndices != 'all'\n                    && zrUtil.indexOf(givenAxisIndices, axisIndex) === -1\n                ) {\n                    return;\n                }\n                var newOpt = {\n                    type: 'select',\n                    $fromToolbox: true,\n                    // Id for merge mapping.\n                    id: DATA_ZOOM_ID_BASE + axisName + axisIndex\n                };\n                // FIXME\n                // Only support one axis now.\n                newOpt[axisIndicesName] = axisIndex;\n                dataZoomOpts.push(newOpt);\n            });\n        }\n\n        function forEachComponent(mainType, cb) {\n            var opts = option[mainType];\n            if (!zrUtil.isArray(opts)) {\n                opts = opts ? [opts] : [];\n            }\n            each(opts, cb);\n        }\n    });\n\n    module.exports = DataZoom;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.6.1@echarts/lib/component/toolbox/feature/DataZoom.js\n// module id = OGek\n// module chunks = 0 1","/**\n * Grid is a region which contains at most 4 cartesian systems\n *\n * TODO Default cartesian\n */\nvar factory = exports;\n\n    var layout = require('../../util/layout');\n    var axisHelper = require('../../coord/axisHelper');\n\n    var zrUtil = require('zrender/lib/core/util');\n    var Cartesian2D = require('./Cartesian2D');\n    var Axis2D = require('./Axis2D');\n\n    var each = zrUtil.each;\n\n    var ifAxisCrossZero = axisHelper.ifAxisCrossZero;\n    var niceScaleExtent = axisHelper.niceScaleExtent;\n\n    // 依赖 GridModel, AxisModel 做预处理\n    require('./GridModel');\n\n    /**\n     * Check if the axis is used in the specified grid\n     * @inner\n     */\n    function isAxisUsedInTheGrid(axisModel, gridModel, ecModel) {\n        return axisModel.getCoordSysModel() === gridModel;\n    }\n\n    function getLabelUnionRect(axis) {\n        var axisModel = axis.model;\n        var labels = axisModel.getFormattedLabels();\n        var textStyleModel = axisModel.getModel('axisLabel.textStyle');\n        var rect;\n        var step = 1;\n        var labelCount = labels.length;\n        if (labelCount > 40) {\n            // Simple optimization for large amount of labels\n            step = Math.ceil(labelCount / 40);\n        }\n        for (var i = 0; i < labelCount; i += step) {\n            if (!axis.isLabelIgnored(i)) {\n                var singleRect = textStyleModel.getTextRect(labels[i]);\n                // FIXME consider label rotate\n                rect ? rect.union(singleRect) : (rect = singleRect);\n            }\n        }\n        return rect;\n    }\n\n    function Grid(gridModel, ecModel, api) {\n        /**\n         * @type {Object.<string, module:echarts/coord/cartesian/Cartesian2D>}\n         * @private\n         */\n        this._coordsMap = {};\n\n        /**\n         * @type {Array.<module:echarts/coord/cartesian/Cartesian>}\n         * @private\n         */\n        this._coordsList = [];\n\n        /**\n         * @type {Object.<string, module:echarts/coord/cartesian/Axis2D>}\n         * @private\n         */\n        this._axesMap = {};\n\n        /**\n         * @type {Array.<module:echarts/coord/cartesian/Axis2D>}\n         * @private\n         */\n        this._axesList = [];\n\n        this._initCartesian(gridModel, ecModel, api);\n\n        this.model = gridModel;\n    }\n\n    var gridProto = Grid.prototype;\n\n    gridProto.type = 'grid';\n\n    gridProto.axisPointerEnabled = true;\n\n    gridProto.getRect = function () {\n        return this._rect;\n    };\n\n    gridProto.update = function (ecModel, api) {\n\n        var axesMap = this._axesMap;\n\n        this._updateScale(ecModel, this.model);\n\n        function ifAxisCanNotOnZero(otherAxisDim) {\n            var axes = axesMap[otherAxisDim];\n            for (var idx in axes) {\n                if (axes.hasOwnProperty(idx)) {\n                    var axis = axes[idx];\n                    if (axis && (\n                        axis.type === 'category' || axis.type === 'time' || !ifAxisCrossZero(axis)\n                    )) {\n                        return true;\n                    }\n                }\n            }\n            return false;\n        }\n\n        each(axesMap.x, function (xAxis) {\n            niceScaleExtent(xAxis.scale, xAxis.model);\n        });\n        each(axesMap.y, function (yAxis) {\n            niceScaleExtent(yAxis.scale, yAxis.model);\n        });\n        // Fix configuration\n        each(axesMap.x, function (xAxis) {\n            // onZero can not be enabled in these two situations\n            // 1. When any other axis is a category axis\n            // 2. When any other axis not across 0 point\n            if (ifAxisCanNotOnZero('y')) {\n                xAxis.onZero = false;\n            }\n        });\n        each(axesMap.y, function (yAxis) {\n            if (ifAxisCanNotOnZero('x')) {\n                yAxis.onZero = false;\n            }\n        });\n\n        // Resize again if containLabel is enabled\n        // FIXME It may cause getting wrong grid size in data processing stage\n        this.resize(this.model, api);\n    };\n\n    /**\n     * Resize the grid\n     * @param {module:echarts/coord/cartesian/GridModel} gridModel\n     * @param {module:echarts/ExtensionAPI} api\n     */\n    gridProto.resize = function (gridModel, api, ignoreContainLabel) {\n\n        var gridRect = layout.getLayoutRect(\n            gridModel.getBoxLayoutParams(), {\n                width: api.getWidth(),\n                height: api.getHeight()\n            });\n\n        this._rect = gridRect;\n\n        var axesList = this._axesList;\n\n        adjustAxes();\n\n        // Minus label size\n        if (!ignoreContainLabel && gridModel.get('containLabel')) {\n            each(axesList, function (axis) {\n                if (!axis.model.get('axisLabel.inside')) {\n                    var labelUnionRect = getLabelUnionRect(axis);\n                    if (labelUnionRect) {\n                        var dim = axis.isHorizontal() ? 'height' : 'width';\n                        var margin = axis.model.get('axisLabel.margin');\n                        gridRect[dim] -= labelUnionRect[dim] + margin;\n                        if (axis.position === 'top') {\n                            gridRect.y += labelUnionRect.height + margin;\n                        }\n                        else if (axis.position === 'left')  {\n                            gridRect.x += labelUnionRect.width + margin;\n                        }\n                    }\n                }\n            });\n\n            adjustAxes();\n        }\n\n        function adjustAxes() {\n            each(axesList, function (axis) {\n                var isHorizontal = axis.isHorizontal();\n                var extent = isHorizontal ? [0, gridRect.width] : [0, gridRect.height];\n                var idx = axis.inverse ? 1 : 0;\n                axis.setExtent(extent[idx], extent[1 - idx]);\n                updateAxisTransfrom(axis, isHorizontal ? gridRect.x : gridRect.y);\n            });\n        }\n    };\n\n    /**\n     * @param {string} axisType\n     * @param {ndumber} [axisIndex]\n     */\n    gridProto.getAxis = function (axisType, axisIndex) {\n        var axesMapOnDim = this._axesMap[axisType];\n        if (axesMapOnDim != null) {\n            if (axisIndex == null) {\n                // Find first axis\n                for (var name in axesMapOnDim) {\n                    if (axesMapOnDim.hasOwnProperty(name)) {\n                        return axesMapOnDim[name];\n                    }\n                }\n            }\n            return axesMapOnDim[axisIndex];\n        }\n    };\n\n    /**\n     * @return {Array.<module:echarts/coord/Axis>}\n     */\n    gridProto.getAxes = function () {\n        return this._axesList.slice();\n    };\n\n    /**\n     * Usage:\n     *      grid.getCartesian(xAxisIndex, yAxisIndex);\n     *      grid.getCartesian(xAxisIndex);\n     *      grid.getCartesian(null, yAxisIndex);\n     *      grid.getCartesian({xAxisIndex: ..., yAxisIndex: ...});\n     *\n     * @param {number|Object} [xAxisIndex]\n     * @param {number} [yAxisIndex]\n     */\n    gridProto.getCartesian = function (xAxisIndex, yAxisIndex) {\n        if (xAxisIndex != null && yAxisIndex != null) {\n            var key = 'x' + xAxisIndex + 'y' + yAxisIndex;\n            return this._coordsMap[key];\n        }\n\n        if (zrUtil.isObject(xAxisIndex)) {\n            yAxisIndex = xAxisIndex.yAxisIndex;\n            xAxisIndex = xAxisIndex.xAxisIndex;\n        }\n        // When only xAxisIndex or yAxisIndex given, find its first cartesian.\n        for (var i = 0, coordList = this._coordsList; i < coordList.length; i++) {\n            if (coordList[i].getAxis('x').index === xAxisIndex\n                || coordList[i].getAxis('y').index === yAxisIndex\n            ) {\n                return coordList[i];\n            }\n        }\n    };\n\n    gridProto.getCartesians = function () {\n        return this._coordsList.slice();\n    };\n\n    /**\n     * @implements\n     * see {module:echarts/CoodinateSystem}\n     */\n    gridProto.convertToPixel = function (ecModel, finder, value) {\n        var target = this._findConvertTarget(ecModel, finder);\n\n        return target.cartesian\n            ? target.cartesian.dataToPoint(value)\n            : target.axis\n            ? target.axis.toGlobalCoord(target.axis.dataToCoord(value))\n            : null;\n    };\n\n    /**\n     * @implements\n     * see {module:echarts/CoodinateSystem}\n     */\n    gridProto.convertFromPixel = function (ecModel, finder, value) {\n        var target = this._findConvertTarget(ecModel, finder);\n\n        return target.cartesian\n            ? target.cartesian.pointToData(value)\n            : target.axis\n            ? target.axis.coordToData(target.axis.toLocalCoord(value))\n            : null;\n    };\n\n    /**\n     * @inner\n     */\n    gridProto._findConvertTarget = function (ecModel, finder) {\n        var seriesModel = finder.seriesModel;\n        var xAxisModel = finder.xAxisModel\n            || (seriesModel && seriesModel.getReferringComponents('xAxis')[0]);\n        var yAxisModel = finder.yAxisModel\n            || (seriesModel && seriesModel.getReferringComponents('yAxis')[0]);\n        var gridModel = finder.gridModel;\n        var coordsList = this._coordsList;\n        var cartesian;\n        var axis;\n\n        if (seriesModel) {\n            cartesian = seriesModel.coordinateSystem;\n            zrUtil.indexOf(coordsList, cartesian) < 0 && (cartesian = null);\n        }\n        else if (xAxisModel && yAxisModel) {\n            cartesian = this.getCartesian(xAxisModel.componentIndex, yAxisModel.componentIndex);\n        }\n        else if (xAxisModel) {\n            axis = this.getAxis('x', xAxisModel.componentIndex);\n        }\n        else if (yAxisModel) {\n            axis = this.getAxis('y', yAxisModel.componentIndex);\n        }\n        // Lowest priority.\n        else if (gridModel) {\n            var grid = gridModel.coordinateSystem;\n            if (grid === this) {\n                cartesian = this._coordsList[0];\n            }\n        }\n\n        return {cartesian: cartesian, axis: axis};\n    };\n\n    /**\n     * @implements\n     * see {module:echarts/CoodinateSystem}\n     */\n    gridProto.containPoint = function (point) {\n        var coord = this._coordsList[0];\n        if (coord) {\n            return coord.containPoint(point);\n        }\n    };\n\n    /**\n     * Initialize cartesian coordinate systems\n     * @private\n     */\n    gridProto._initCartesian = function (gridModel, ecModel, api) {\n        var axisPositionUsed = {\n            left: false,\n            right: false,\n            top: false,\n            bottom: false\n        };\n\n        var axesMap = {\n            x: {},\n            y: {}\n        };\n        var axesCount = {\n            x: 0,\n            y: 0\n        };\n\n        /// Create axis\n        ecModel.eachComponent('xAxis', createAxisCreator('x'), this);\n        ecModel.eachComponent('yAxis', createAxisCreator('y'), this);\n\n        if (!axesCount.x || !axesCount.y) {\n            // Roll back when there no either x or y axis\n            this._axesMap = {};\n            this._axesList = [];\n            return;\n        }\n\n        this._axesMap = axesMap;\n\n        /// Create cartesian2d\n        each(axesMap.x, function (xAxis, xAxisIndex) {\n            each(axesMap.y, function (yAxis, yAxisIndex) {\n                var key = 'x' + xAxisIndex + 'y' + yAxisIndex;\n                var cartesian = new Cartesian2D(key);\n\n                cartesian.grid = this;\n                cartesian.model = gridModel;\n\n                this._coordsMap[key] = cartesian;\n                this._coordsList.push(cartesian);\n\n                cartesian.addAxis(xAxis);\n                cartesian.addAxis(yAxis);\n            }, this);\n        }, this);\n\n        function createAxisCreator(axisType) {\n            return function (axisModel, idx) {\n                if (!isAxisUsedInTheGrid(axisModel, gridModel, ecModel)) {\n                    return;\n                }\n\n                var axisPosition = axisModel.get('position');\n                if (axisType === 'x') {\n                    // Fix position\n                    if (axisPosition !== 'top' && axisPosition !== 'bottom') {\n                        // Default bottom of X\n                        axisPosition = 'bottom';\n                        if (axisPositionUsed[axisPosition]) {\n                            axisPosition = axisPosition === 'top' ? 'bottom' : 'top';\n                        }\n                    }\n                }\n                else {\n                    // Fix position\n                    if (axisPosition !== 'left' && axisPosition !== 'right') {\n                        // Default left of Y\n                        axisPosition = 'left';\n                        if (axisPositionUsed[axisPosition]) {\n                            axisPosition = axisPosition === 'left' ? 'right' : 'left';\n                        }\n                    }\n                }\n                axisPositionUsed[axisPosition] = true;\n\n                var axis = new Axis2D(\n                    axisType, axisHelper.createScaleByModel(axisModel),\n                    [0, 0],\n                    axisModel.get('type'),\n                    axisPosition\n                );\n\n                var isCategory = axis.type === 'category';\n                axis.onBand = isCategory && axisModel.get('boundaryGap');\n                axis.inverse = axisModel.get('inverse');\n\n                axis.onZero = axisModel.get('axisLine.onZero');\n\n                // Inject axis into axisModel\n                axisModel.axis = axis;\n\n                // Inject axisModel into axis\n                axis.model = axisModel;\n\n                // Inject grid info axis\n                axis.grid = this;\n\n                // Index of axis, can be used as key\n                axis.index = idx;\n\n                this._axesList.push(axis);\n\n                axesMap[axisType][idx] = axis;\n                axesCount[axisType]++;\n            };\n        }\n    };\n\n    /**\n     * Update cartesian properties from series\n     * @param  {module:echarts/model/Option} option\n     * @private\n     */\n    gridProto._updateScale = function (ecModel, gridModel) {\n        // Reset scale\n        zrUtil.each(this._axesList, function (axis) {\n            axis.scale.setExtent(Infinity, -Infinity);\n        });\n        ecModel.eachSeries(function (seriesModel) {\n            if (isCartesian2D(seriesModel)) {\n                var axesModels = findAxesModels(seriesModel, ecModel);\n                var xAxisModel = axesModels[0];\n                var yAxisModel = axesModels[1];\n\n                if (!isAxisUsedInTheGrid(xAxisModel, gridModel, ecModel)\n                    || !isAxisUsedInTheGrid(yAxisModel, gridModel, ecModel)\n                 ) {\n                    return;\n                }\n\n                var cartesian = this.getCartesian(\n                    xAxisModel.componentIndex, yAxisModel.componentIndex\n                );\n                var data = seriesModel.getData();\n                var xAxis = cartesian.getAxis('x');\n                var yAxis = cartesian.getAxis('y');\n\n                if (data.type === 'list') {\n                    unionExtent(data, xAxis, seriesModel);\n                    unionExtent(data, yAxis, seriesModel);\n                }\n            }\n        }, this);\n\n        function unionExtent(data, axis, seriesModel) {\n            each(seriesModel.coordDimToDataDim(axis.dim), function (dim) {\n                axis.scale.unionExtentFromData(data, dim);\n            });\n        }\n    };\n\n    /**\n     * @param {string} [dim] 'x' or 'y' or 'auto' or null/undefined\n     * @return {Object} {baseAxes: [], otherAxes: []}\n     */\n    gridProto.getTooltipAxes = function (dim) {\n        var baseAxes = [];\n        var otherAxes = [];\n\n        each(this.getCartesians(), function (cartesian) {\n            var baseAxis = (dim != null && dim !== 'auto')\n                ? cartesian.getAxis(dim) : cartesian.getBaseAxis();\n            var otherAxis = cartesian.getOtherAxis(baseAxis);\n            zrUtil.indexOf(baseAxes, baseAxis) < 0 && baseAxes.push(baseAxis);\n            zrUtil.indexOf(otherAxes, otherAxis) < 0 && otherAxes.push(otherAxis);\n        });\n\n        return {baseAxes: baseAxes, otherAxes: otherAxes};\n    };\n\n    /**\n     * @inner\n     */\n    function updateAxisTransfrom(axis, coordBase) {\n        var axisExtent = axis.getExtent();\n        var axisExtentSum = axisExtent[0] + axisExtent[1];\n\n        // Fast transform\n        axis.toGlobalCoord = axis.dim === 'x'\n            ? function (coord) {\n                return coord + coordBase;\n            }\n            : function (coord) {\n                return axisExtentSum - coord + coordBase;\n            };\n        axis.toLocalCoord = axis.dim === 'x'\n            ? function (coord) {\n                return coord - coordBase;\n            }\n            : function (coord) {\n                return axisExtentSum - coord + coordBase;\n            };\n    }\n\n    var axesTypes = ['xAxis', 'yAxis'];\n    /**\n     * @inner\n     */\n    function findAxesModels(seriesModel, ecModel) {\n        return zrUtil.map(axesTypes, function (axisType) {\n            var axisModel = seriesModel.getReferringComponents(axisType)[0];\n\n            if (__DEV__) {\n                if (!axisModel) {\n                    throw new Error(axisType + ' \"' + zrUtil.retrieve(\n                        seriesModel.get(axisType + 'Index'),\n                        seriesModel.get(axisType + 'Id'),\n                        0\n                    ) + '\" not found');\n                }\n            }\n            return axisModel;\n        });\n    }\n\n    /**\n     * @inner\n     */\n    function isCartesian2D(seriesModel) {\n        return seriesModel.get('coordinateSystem') === 'cartesian2d';\n    }\n\n    Grid.create = function (ecModel, api) {\n        var grids = [];\n        ecModel.eachComponent('grid', function (gridModel, idx) {\n            var grid = new Grid(gridModel, ecModel, api);\n            grid.name = 'grid_' + idx;\n            // dataSampling requires axis extent, so resize\n            // should be performed in create stage.\n            grid.resize(gridModel, api, true);\n\n            gridModel.coordinateSystem = grid;\n\n            grids.push(grid);\n        });\n\n        // Inject the coordinateSystems into seriesModel\n        ecModel.eachSeries(function (seriesModel) {\n            if (!isCartesian2D(seriesModel)) {\n                return;\n            }\n\n            var axesModels = findAxesModels(seriesModel, ecModel);\n            var xAxisModel = axesModels[0];\n            var yAxisModel = axesModels[1];\n\n            var gridModel = xAxisModel.getCoordSysModel();\n\n            if (__DEV__) {\n                if (!gridModel) {\n                    throw new Error(\n                        'Grid \"' + zrUtil.retrieve(\n                            xAxisModel.get('gridIndex'),\n                            xAxisModel.get('gridId'),\n                            0\n                        ) + '\" not found'\n                    );\n                }\n                if (xAxisModel.getCoordSysModel() !== yAxisModel.getCoordSysModel()) {\n                    throw new Error('xAxis and yAxis must use the same grid');\n                }\n            }\n\n            var grid = gridModel.coordinateSystem;\n\n            seriesModel.coordinateSystem = grid.getCartesian(\n                xAxisModel.componentIndex, yAxisModel.componentIndex\n            );\n        });\n\n        return grids;\n    };\n\n    // For deciding which dimensions to use when creating list data\n    Grid.dimensions = Grid.prototype.dimensions = Cartesian2D.prototype.dimensions;\n\n    require('../../CoordinateSystem').register('cartesian2d', Grid);\n\n    module.exports = Grid;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.6.1@echarts/lib/coord/cartesian/Grid.js\n// module id = OfUh\n// module chunks = 0 1","'use strict';\n/**\n * Default canvas painter\n * @module zrender/Painter\n * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)\n *         errorrik (errorrik@gmail.com)\n *         pissang (https://www.github.com/pissang)\n */\n \n\n    var config = require('./config');\n    var util = require('./core/util');\n    var log = require('./core/log');\n    var BoundingRect = require('./core/BoundingRect');\n    var timsort = require('./core/timsort');\n\n    var Layer = require('./Layer');\n\n    var requestAnimationFrame = require('./animation/requestAnimationFrame');\n\n    // PENDIGN\n    // Layer exceeds MAX_PROGRESSIVE_LAYER_NUMBER may have some problem when flush directly second time.\n    //\n    // Maximum progressive layer. When exceeding this number. All elements will be drawed in the last layer.\n    var MAX_PROGRESSIVE_LAYER_NUMBER = 5;\n\n    function parseInt10(val) {\n        return parseInt(val, 10);\n    }\n\n    function isLayerValid(layer) {\n        if (!layer) {\n            return false;\n        }\n\n        if (layer.__builtin__) {\n            return true;\n        }\n\n        if (typeof(layer.resize) !== 'function'\n            || typeof(layer.refresh) !== 'function'\n        ) {\n            return false;\n        }\n\n        return true;\n    }\n\n    function preProcessLayer(layer) {\n        layer.__unusedCount++;\n    }\n\n    function postProcessLayer(layer) {\n        if (layer.__unusedCount == 1) {\n            layer.clear();\n        }\n    }\n\n    var tmpRect = new BoundingRect(0, 0, 0, 0);\n    var viewRect = new BoundingRect(0, 0, 0, 0);\n    function isDisplayableCulled(el, width, height) {\n        tmpRect.copy(el.getBoundingRect());\n        if (el.transform) {\n            tmpRect.applyTransform(el.transform);\n        }\n        viewRect.width = width;\n        viewRect.height = height;\n        return !tmpRect.intersect(viewRect);\n    }\n\n    function isClipPathChanged(clipPaths, prevClipPaths) {\n        if (clipPaths == prevClipPaths) { // Can both be null or undefined\n            return false;\n        }\n\n        if (!clipPaths || !prevClipPaths || (clipPaths.length !== prevClipPaths.length)) {\n            return true;\n        }\n        for (var i = 0; i < clipPaths.length; i++) {\n            if (clipPaths[i] !== prevClipPaths[i]) {\n                return true;\n            }\n        }\n    }\n\n    function doClip(clipPaths, ctx) {\n        for (var i = 0; i < clipPaths.length; i++) {\n            var clipPath = clipPaths[i];\n\n            clipPath.setTransform(ctx);\n            ctx.beginPath();\n            clipPath.buildPath(ctx, clipPath.shape);\n            ctx.clip();\n            // Transform back\n            clipPath.restoreTransform(ctx);\n        }\n    }\n\n    function createRoot(width, height) {\n        var domRoot = document.createElement('div');\n\n        // domRoot.onselectstart = returnFalse; // 避免页面选中的尴尬\n        domRoot.style.cssText = [\n            'position:relative',\n            'overflow:hidden',\n            'width:' + width + 'px',\n            'height:' + height + 'px',\n            'padding:0',\n            'margin:0',\n            'border-width:0'\n        ].join(';') + ';';\n\n        return domRoot;\n    }\n\n    /**\n     * @alias module:zrender/Painter\n     * @constructor\n     * @param {HTMLElement} root 绘图容器\n     * @param {module:zrender/Storage} storage\n     * @param {Ojbect} opts\n     */\n    var Painter = function (root, storage, opts) {\n        // In node environment using node-canvas\n        var singleCanvas = !root.nodeName // In node ?\n            || root.nodeName.toUpperCase() === 'CANVAS';\n\n        this._opts = opts = util.extend({}, opts || {});\n\n        /**\n         * @type {number}\n         */\n        this.dpr = opts.devicePixelRatio || config.devicePixelRatio;\n        /**\n         * @type {boolean}\n         * @private\n         */\n        this._singleCanvas = singleCanvas;\n        /**\n         * 绘图容器\n         * @type {HTMLElement}\n         */\n        this.root = root;\n\n        var rootStyle = root.style;\n\n        if (rootStyle) {\n            rootStyle['-webkit-tap-highlight-color'] = 'transparent';\n            rootStyle['-webkit-user-select'] =\n            rootStyle['user-select'] =\n            rootStyle['-webkit-touch-callout'] = 'none';\n\n            root.innerHTML = '';\n        }\n\n        /**\n         * @type {module:zrender/Storage}\n         */\n        this.storage = storage;\n\n        /**\n         * @type {Array.<number>}\n         * @private\n         */\n        var zlevelList = this._zlevelList = [];\n\n        /**\n         * @type {Object.<string, module:zrender/Layer>}\n         * @private\n         */\n        var layers = this._layers = {};\n\n        /**\n         * @type {Object.<string, Object>}\n         * @type {private}\n         */\n        this._layerConfig = {};\n\n        if (!singleCanvas) {\n            this._width = this._getSize(0);\n            this._height = this._getSize(1);\n\n            var domRoot = this._domRoot = createRoot(\n                this._width, this._height\n            );\n            root.appendChild(domRoot);\n        }\n        else {\n            if (opts.width != null) {\n                root.width = opts.width;\n            }\n            if (opts.height != null) {\n                root.height = opts.height;\n            }\n            // Use canvas width and height directly\n            var width = root.width;\n            var height = root.height;\n            this._width = width;\n            this._height = height;\n\n            // Create layer if only one given canvas\n            // Device pixel ratio is fixed to 1 because given canvas has its specified width and height\n            var mainLayer = new Layer(root, this, 1);\n            mainLayer.initContext();\n            // FIXME Use canvas width and height\n            // mainLayer.resize(width, height);\n            layers[0] = mainLayer;\n            zlevelList.push(0);\n\n            this._domRoot = root;\n        }\n\n        // Layers for progressive rendering\n        this._progressiveLayers = [];\n\n        /**\n         * @type {module:zrender/Layer}\n         * @private\n         */\n        this._hoverlayer;\n\n        this._hoverElements = [];\n    };\n\n    Painter.prototype = {\n\n        constructor: Painter,\n\n        /**\n         * If painter use a single canvas\n         * @return {boolean}\n         */\n        isSingleCanvas: function () {\n            return this._singleCanvas;\n        },\n        /**\n         * @return {HTMLDivElement}\n         */\n        getViewportRoot: function () {\n            return this._domRoot;\n        },\n\n        /**\n         * 刷新\n         * @param {boolean} [paintAll=false] 强制绘制所有displayable\n         */\n        refresh: function (paintAll) {\n\n            var list = this.storage.getDisplayList(true);\n\n            var zlevelList = this._zlevelList;\n\n            this._paintList(list, paintAll);\n\n            // Paint custum layers\n            for (var i = 0; i < zlevelList.length; i++) {\n                var z = zlevelList[i];\n                var layer = this._layers[z];\n                if (!layer.__builtin__ && layer.refresh) {\n                    layer.refresh();\n                }\n            }\n\n            this.refreshHover();\n\n            if (this._progressiveLayers.length) {\n                this._startProgessive();\n            }\n\n            return this;\n        },\n\n        addHover: function (el, hoverStyle) {\n            if (el.__hoverMir) {\n                return;\n            }\n            var elMirror = new el.constructor({\n                style: el.style,\n                shape: el.shape\n            });\n            elMirror.__from = el;\n            el.__hoverMir = elMirror;\n            elMirror.setStyle(hoverStyle);\n            this._hoverElements.push(elMirror);\n        },\n\n        removeHover: function (el) {\n            var elMirror = el.__hoverMir;\n            var hoverElements = this._hoverElements;\n            var idx = util.indexOf(hoverElements, elMirror);\n            if (idx >= 0) {\n                hoverElements.splice(idx, 1);\n            }\n            el.__hoverMir = null;\n        },\n\n        clearHover: function (el) {\n            var hoverElements = this._hoverElements;\n            for (var i = 0; i < hoverElements.length; i++) {\n                var from = hoverElements[i].__from;\n                if (from) {\n                    from.__hoverMir = null;\n                }\n            }\n            hoverElements.length = 0;\n        },\n\n        refreshHover: function () {\n            var hoverElements = this._hoverElements;\n            var len = hoverElements.length;\n            var hoverLayer = this._hoverlayer;\n            hoverLayer && hoverLayer.clear();\n\n            if (!len) {\n                return;\n            }\n            timsort(hoverElements, this.storage.displayableSortFunc);\n\n            // Use a extream large zlevel\n            // FIXME?\n            if (!hoverLayer) {\n                hoverLayer = this._hoverlayer = this.getLayer(1e5);\n            }\n\n            var scope = {};\n            hoverLayer.ctx.save();\n            for (var i = 0; i < len;) {\n                var el = hoverElements[i];\n                var originalEl = el.__from;\n                // Original el is removed\n                // PENDING\n                if (!(originalEl && originalEl.__zr)) {\n                    hoverElements.splice(i, 1);\n                    originalEl.__hoverMir = null;\n                    len--;\n                    continue;\n                }\n                i++;\n\n                // Use transform\n                // FIXME style and shape ?\n                if (!originalEl.invisible) {\n                    el.transform = originalEl.transform;\n                    el.invTransform = originalEl.invTransform;\n                    el.__clipPaths = originalEl.__clipPaths;\n                    // el.\n                    this._doPaintEl(el, hoverLayer, true, scope);\n                }\n            }\n            hoverLayer.ctx.restore();\n        },\n\n        _startProgessive: function () {\n            var self = this;\n\n            if (!self._furtherProgressive) {\n                return;\n            }\n\n            // Use a token to stop progress steps triggered by\n            // previous zr.refresh calling.\n            var token = self._progressiveToken = +new Date();\n\n            self._progress++;\n            requestAnimationFrame(step);\n\n            function step() {\n                // In case refreshed or disposed\n                if (token === self._progressiveToken && self.storage) {\n\n                    self._doPaintList(self.storage.getDisplayList());\n\n                    if (self._furtherProgressive) {\n                        self._progress++;\n                        requestAnimationFrame(step);\n                    }\n                    else {\n                        self._progressiveToken = -1;\n                    }\n                }\n            }\n        },\n\n        _clearProgressive: function () {\n            this._progressiveToken = -1;\n            this._progress = 0;\n            util.each(this._progressiveLayers, function (layer) {\n                layer.__dirty && layer.clear();\n            });\n        },\n\n        _paintList: function (list, paintAll) {\n\n            if (paintAll == null) {\n                paintAll = false;\n            }\n\n            this._updateLayerStatus(list);\n\n            this._clearProgressive();\n\n            this.eachBuiltinLayer(preProcessLayer);\n\n            this._doPaintList(list, paintAll);\n\n            this.eachBuiltinLayer(postProcessLayer);\n        },\n\n        _doPaintList: function (list, paintAll) {\n            var currentLayer;\n            var currentZLevel;\n            var ctx;\n\n            // var invTransform = [];\n            var scope;\n\n            var progressiveLayerIdx = 0;\n            var currentProgressiveLayer;\n\n            var width = this._width;\n            var height = this._height;\n            var layerProgress;\n            var frame = this._progress;\n            function flushProgressiveLayer(layer) {\n                var dpr = ctx.dpr || 1;\n                ctx.save();\n                ctx.globalAlpha = 1;\n                ctx.shadowBlur = 0;\n                // Avoid layer don't clear in next progressive frame\n                currentLayer.__dirty = true;\n                ctx.setTransform(1, 0, 0, 1, 0, 0);\n                ctx.drawImage(layer.dom, 0, 0, width * dpr, height * dpr);\n                ctx.restore();\n            }\n\n            for (var i = 0, l = list.length; i < l; i++) {\n                var el = list[i];\n                var elZLevel = this._singleCanvas ? 0 : el.zlevel;\n\n                var elFrame = el.__frame;\n\n                // Flush at current context\n                // PENDING\n                if (elFrame < 0 && currentProgressiveLayer) {\n                    flushProgressiveLayer(currentProgressiveLayer);\n                    currentProgressiveLayer = null;\n                }\n\n                // Change draw layer\n                if (currentZLevel !== elZLevel) {\n                    if (ctx) {\n                        ctx.restore();\n                    }\n\n                    // Reset scope\n                    scope = {};\n\n                    // Only 0 zlevel if only has one canvas\n                    currentZLevel = elZLevel;\n                    currentLayer = this.getLayer(currentZLevel);\n\n                    if (!currentLayer.__builtin__) {\n                        log(\n                            'ZLevel ' + currentZLevel\n                            + ' has been used by unkown layer ' + currentLayer.id\n                        );\n                    }\n\n                    ctx = currentLayer.ctx;\n                    ctx.save();\n\n                    // Reset the count\n                    currentLayer.__unusedCount = 0;\n\n                    if (currentLayer.__dirty || paintAll) {\n                        currentLayer.clear();\n                    }\n                }\n\n                if (!(currentLayer.__dirty || paintAll)) {\n                    continue;\n                }\n\n                if (elFrame >= 0) {\n                    // Progressive layer changed\n                    if (!currentProgressiveLayer) {\n                        currentProgressiveLayer = this._progressiveLayers[\n                            Math.min(progressiveLayerIdx++, MAX_PROGRESSIVE_LAYER_NUMBER - 1)\n                        ];\n\n                        currentProgressiveLayer.ctx.save();\n                        currentProgressiveLayer.renderScope = {};\n\n                        if (currentProgressiveLayer\n                            && (currentProgressiveLayer.__progress > currentProgressiveLayer.__maxProgress)\n                        ) {\n                            // flushProgressiveLayer(currentProgressiveLayer);\n                            // Quick jump all progressive elements\n                            // All progressive element are not dirty, jump over and flush directly\n                            i = currentProgressiveLayer.__nextIdxNotProg - 1;\n                            // currentProgressiveLayer = null;\n                            continue;\n                        }\n\n                        layerProgress = currentProgressiveLayer.__progress;\n\n                        if (!currentProgressiveLayer.__dirty) {\n                            // Keep rendering\n                            frame = layerProgress;\n                        }\n\n                        currentProgressiveLayer.__progress = frame + 1;\n                    }\n\n                    if (elFrame === frame) {\n                        this._doPaintEl(el, currentProgressiveLayer, true, currentProgressiveLayer.renderScope);\n                    }\n                }\n                else {\n                    this._doPaintEl(el, currentLayer, paintAll, scope);\n                }\n\n                el.__dirty = false;\n            }\n\n            if (currentProgressiveLayer) {\n                flushProgressiveLayer(currentProgressiveLayer);\n            }\n\n            // Restore the lastLayer ctx\n            ctx && ctx.restore();\n            // If still has clipping state\n            // if (scope.prevElClipPaths) {\n            //     ctx.restore();\n            // }\n\n            this._furtherProgressive = false;\n            util.each(this._progressiveLayers, function (layer) {\n                if (layer.__maxProgress >= layer.__progress) {\n                    this._furtherProgressive = true;\n                }\n            }, this);\n        },\n\n        _doPaintEl: function (el, currentLayer, forcePaint, scope) {\n            var ctx = currentLayer.ctx;\n            var m = el.transform;\n            if (\n                (currentLayer.__dirty || forcePaint)\n                // Ignore invisible element\n                && !el.invisible\n                // Ignore transparent element\n                && el.style.opacity !== 0\n                // Ignore scale 0 element, in some environment like node-canvas\n                // Draw a scale 0 element can cause all following draw wrong\n                // And setTransform with scale 0 will cause set back transform failed.\n                && !(m && !m[0] && !m[3])\n                // Ignore culled element\n                && !(el.culling && isDisplayableCulled(el, this._width, this._height))\n            ) {\n\n                var clipPaths = el.__clipPaths;\n\n                // Optimize when clipping on group with several elements\n                if (scope.prevClipLayer !== currentLayer\n                    || isClipPathChanged(clipPaths, scope.prevElClipPaths)\n                ) {\n                    // If has previous clipping state, restore from it\n                    if (scope.prevElClipPaths) {\n                        scope.prevClipLayer.ctx.restore();\n                        scope.prevClipLayer = scope.prevElClipPaths = null;\n\n                        // Reset prevEl since context has been restored\n                        scope.prevEl = null;\n                    }\n                    // New clipping state\n                    if (clipPaths) {\n                        ctx.save();\n                        doClip(clipPaths, ctx);\n                        scope.prevClipLayer = currentLayer;\n                        scope.prevElClipPaths = clipPaths;\n                    }\n                }\n                el.beforeBrush && el.beforeBrush(ctx);\n\n                el.brush(ctx, scope.prevEl || null);\n                scope.prevEl = el;\n\n                el.afterBrush && el.afterBrush(ctx);\n            }\n        },\n\n        /**\n         * 获取 zlevel 所在层，如果不存在则会创建一个新的层\n         * @param {number} zlevel\n         * @return {module:zrender/Layer}\n         */\n        getLayer: function (zlevel) {\n            if (this._singleCanvas) {\n                return this._layers[0];\n            }\n\n            var layer = this._layers[zlevel];\n            if (!layer) {\n                // Create a new layer\n                layer = new Layer('zr_' + zlevel, this, this.dpr);\n                layer.__builtin__ = true;\n\n                if (this._layerConfig[zlevel]) {\n                    util.merge(layer, this._layerConfig[zlevel], true);\n                }\n\n                this.insertLayer(zlevel, layer);\n\n                // Context is created after dom inserted to document\n                // Or excanvas will get 0px clientWidth and clientHeight\n                layer.initContext();\n            }\n\n            return layer;\n        },\n\n        insertLayer: function (zlevel, layer) {\n\n            var layersMap = this._layers;\n            var zlevelList = this._zlevelList;\n            var len = zlevelList.length;\n            var prevLayer = null;\n            var i = -1;\n            var domRoot = this._domRoot;\n\n            if (layersMap[zlevel]) {\n                log('ZLevel ' + zlevel + ' has been used already');\n                return;\n            }\n            // Check if is a valid layer\n            if (!isLayerValid(layer)) {\n                log('Layer of zlevel ' + zlevel + ' is not valid');\n                return;\n            }\n\n            if (len > 0 && zlevel > zlevelList[0]) {\n                for (i = 0; i < len - 1; i++) {\n                    if (\n                        zlevelList[i] < zlevel\n                        && zlevelList[i + 1] > zlevel\n                    ) {\n                        break;\n                    }\n                }\n                prevLayer = layersMap[zlevelList[i]];\n            }\n            zlevelList.splice(i + 1, 0, zlevel);\n\n            layersMap[zlevel] = layer;\n\n            // Vitual layer will not directly show on the screen.\n            // (It can be a WebGL layer and assigned to a ZImage element)\n            // But it still under management of zrender.\n            if (!layer.virtual) {\n                if (prevLayer) {\n                    var prevDom = prevLayer.dom;\n                    if (prevDom.nextSibling) {\n                        domRoot.insertBefore(\n                            layer.dom,\n                            prevDom.nextSibling\n                        );\n                    }\n                    else {\n                        domRoot.appendChild(layer.dom);\n                    }\n                }\n                else {\n                    if (domRoot.firstChild) {\n                        domRoot.insertBefore(layer.dom, domRoot.firstChild);\n                    }\n                    else {\n                        domRoot.appendChild(layer.dom);\n                    }\n                }\n            }\n        },\n\n        // Iterate each layer\n        eachLayer: function (cb, context) {\n            var zlevelList = this._zlevelList;\n            var z;\n            var i;\n            for (i = 0; i < zlevelList.length; i++) {\n                z = zlevelList[i];\n                cb.call(context, this._layers[z], z);\n            }\n        },\n\n        // Iterate each buildin layer\n        eachBuiltinLayer: function (cb, context) {\n            var zlevelList = this._zlevelList;\n            var layer;\n            var z;\n            var i;\n            for (i = 0; i < zlevelList.length; i++) {\n                z = zlevelList[i];\n                layer = this._layers[z];\n                if (layer.__builtin__) {\n                    cb.call(context, layer, z);\n                }\n            }\n        },\n\n        // Iterate each other layer except buildin layer\n        eachOtherLayer: function (cb, context) {\n            var zlevelList = this._zlevelList;\n            var layer;\n            var z;\n            var i;\n            for (i = 0; i < zlevelList.length; i++) {\n                z = zlevelList[i];\n                layer = this._layers[z];\n                if (!layer.__builtin__) {\n                    cb.call(context, layer, z);\n                }\n            }\n        },\n\n        /**\n         * 获取所有已创建的层\n         * @param {Array.<module:zrender/Layer>} [prevLayer]\n         */\n        getLayers: function () {\n            return this._layers;\n        },\n\n        _updateLayerStatus: function (list) {\n\n            var layers = this._layers;\n            var progressiveLayers = this._progressiveLayers;\n\n            var elCountsLastFrame = {};\n            var progressiveElCountsLastFrame = {};\n\n            this.eachBuiltinLayer(function (layer, z) {\n                elCountsLastFrame[z] = layer.elCount;\n                layer.elCount = 0;\n                layer.__dirty = false;\n            });\n\n            util.each(progressiveLayers, function (layer, idx) {\n                progressiveElCountsLastFrame[idx] = layer.elCount;\n                layer.elCount = 0;\n                layer.__dirty = false;\n            });\n\n            var progressiveLayerCount = 0;\n            var currentProgressiveLayer;\n            var lastProgressiveKey;\n            var frameCount = 0;\n            for (var i = 0, l = list.length; i < l; i++) {\n                var el = list[i];\n                var zlevel = this._singleCanvas ? 0 : el.zlevel;\n                var layer = layers[zlevel];\n                var elProgress = el.progressive;\n                if (layer) {\n                    layer.elCount++;\n                    layer.__dirty = layer.__dirty || el.__dirty;\n                }\n\n                /////// Update progressive\n                if (elProgress >= 0) {\n                    // Fix wrong progressive sequence problem.\n                    if (lastProgressiveKey !== elProgress) {\n                        lastProgressiveKey = elProgress;\n                        frameCount++;\n                    }\n                    var elFrame = el.__frame = frameCount - 1;\n                    if (!currentProgressiveLayer) {\n                        var idx = Math.min(progressiveLayerCount, MAX_PROGRESSIVE_LAYER_NUMBER - 1);\n                        currentProgressiveLayer = progressiveLayers[idx];\n                        if (!currentProgressiveLayer) {\n                            currentProgressiveLayer = progressiveLayers[idx] = new Layer(\n                                'progressive', this, this.dpr\n                            );\n                            currentProgressiveLayer.initContext();\n                        }\n                        currentProgressiveLayer.__maxProgress = 0;\n                    }\n                    currentProgressiveLayer.__dirty = currentProgressiveLayer.__dirty || el.__dirty;\n                    currentProgressiveLayer.elCount++;\n\n                    currentProgressiveLayer.__maxProgress = Math.max(\n                        currentProgressiveLayer.__maxProgress, elFrame\n                    );\n\n                    if (currentProgressiveLayer.__maxProgress >= currentProgressiveLayer.__progress) {\n                        // Should keep rendering this  layer because progressive rendering is not finished yet\n                        layer.__dirty = true;\n                    }\n                }\n                else {\n                    el.__frame = -1;\n\n                    if (currentProgressiveLayer) {\n                        currentProgressiveLayer.__nextIdxNotProg = i;\n                        progressiveLayerCount++;\n                        currentProgressiveLayer = null;\n                    }\n                }\n            }\n\n            if (currentProgressiveLayer) {\n                progressiveLayerCount++;\n                currentProgressiveLayer.__nextIdxNotProg = i;\n            }\n\n            // 层中的元素数量有发生变化\n            this.eachBuiltinLayer(function (layer, z) {\n                if (elCountsLastFrame[z] !== layer.elCount) {\n                    layer.__dirty = true;\n                }\n            });\n\n            progressiveLayers.length = Math.min(progressiveLayerCount, MAX_PROGRESSIVE_LAYER_NUMBER);\n            util.each(progressiveLayers, function (layer, idx) {\n                if (progressiveElCountsLastFrame[idx] !== layer.elCount) {\n                    el.__dirty = true;\n                }\n                if (layer.__dirty) {\n                    layer.__progress = 0;\n                }\n            });\n        },\n\n        /**\n         * 清除hover层外所有内容\n         */\n        clear: function () {\n            this.eachBuiltinLayer(this._clearLayer);\n            return this;\n        },\n\n        _clearLayer: function (layer) {\n            layer.clear();\n        },\n\n        /**\n         * 修改指定zlevel的绘制参数\n         *\n         * @param {string} zlevel\n         * @param {Object} config 配置对象\n         * @param {string} [config.clearColor=0] 每次清空画布的颜色\n         * @param {string} [config.motionBlur=false] 是否开启动态模糊\n         * @param {number} [config.lastFrameAlpha=0.7]\n         *                 在开启动态模糊的时候使用，与上一帧混合的alpha值，值越大尾迹越明显\n         */\n        configLayer: function (zlevel, config) {\n            if (config) {\n                var layerConfig = this._layerConfig;\n                if (!layerConfig[zlevel]) {\n                    layerConfig[zlevel] = config;\n                }\n                else {\n                    util.merge(layerConfig[zlevel], config, true);\n                }\n\n                var layer = this._layers[zlevel];\n\n                if (layer) {\n                    util.merge(layer, layerConfig[zlevel], true);\n                }\n            }\n        },\n\n        /**\n         * 删除指定层\n         * @param {number} zlevel 层所在的zlevel\n         */\n        delLayer: function (zlevel) {\n            var layers = this._layers;\n            var zlevelList = this._zlevelList;\n            var layer = layers[zlevel];\n            if (!layer) {\n                return;\n            }\n            layer.dom.parentNode.removeChild(layer.dom);\n            delete layers[zlevel];\n\n            zlevelList.splice(util.indexOf(zlevelList, zlevel), 1);\n        },\n\n        /**\n         * 区域大小变化后重绘\n         */\n        resize: function (width, height) {\n            var domRoot = this._domRoot;\n            // FIXME Why ?\n            domRoot.style.display = 'none';\n\n            // Save input w/h\n            var opts = this._opts;\n            width != null && (opts.width = width);\n            height != null && (opts.height = height);\n\n            width = this._getSize(0);\n            height = this._getSize(1);\n\n            domRoot.style.display = '';\n\n            // 优化没有实际改变的resize\n            if (this._width != width || height != this._height) {\n                domRoot.style.width = width + 'px';\n                domRoot.style.height = height + 'px';\n\n                for (var id in this._layers) {\n                    if (this._layers.hasOwnProperty(id)) {\n                        this._layers[id].resize(width, height);\n                    }\n                }\n                util.each(this._progressiveLayers, function (layer) {\n                    layer.resize(width, height);\n                });\n\n                this.refresh(true);\n            }\n\n            this._width = width;\n            this._height = height;\n\n            return this;\n        },\n\n        /**\n         * 清除单独的一个层\n         * @param {number} zlevel\n         */\n        clearLayer: function (zlevel) {\n            var layer = this._layers[zlevel];\n            if (layer) {\n                layer.clear();\n            }\n        },\n\n        /**\n         * 释放\n         */\n        dispose: function () {\n            this.root.innerHTML = '';\n\n            this.root =\n            this.storage =\n\n            this._domRoot =\n            this._layers = null;\n        },\n\n        /**\n         * Get canvas which has all thing rendered\n         * @param {Object} opts\n         * @param {string} [opts.backgroundColor]\n         */\n        getRenderedCanvas: function (opts) {\n            opts = opts || {};\n            if (this._singleCanvas) {\n                return this._layers[0].dom;\n            }\n\n            var imageLayer = new Layer('image', this, opts.pixelRatio || this.dpr);\n            imageLayer.initContext();\n\n            imageLayer.clearColor = opts.backgroundColor;\n            imageLayer.clear();\n\n            var displayList = this.storage.getDisplayList(true);\n\n            var scope = {};\n            var zlevel;\n\n            var self = this;\n            function findAndDrawOtherLayer(smaller, larger) {\n                var zlevelList = self._zlevelList;\n                if (smaller == null) {\n                    smaller = -Infinity;\n                }\n                var intermediateLayer;\n                for (var i = 0; i < zlevelList.length; i++) {\n                    var z = zlevelList[i];\n                    var layer = self._layers[z];\n                    if (!layer.__builtin__ && z > smaller && z < larger) {\n                        intermediateLayer = layer;\n                        break;\n                    }\n                }\n                if (intermediateLayer && intermediateLayer.renderToCanvas) {\n                    imageLayer.ctx.save();\n                    intermediateLayer.renderToCanvas(imageLayer.ctx);\n                    imageLayer.ctx.restore();\n                }\n            }\n            for (var i = 0; i < displayList.length; i++) {\n                var el = displayList[i];\n\n                if (el.zlevel !== zlevel) {\n                    findAndDrawOtherLayer(zlevel, el.zlevel);\n                    zlevel = el.zlevel;\n                }\n                this._doPaintEl(el, imageLayer, true, scope);\n            }\n\n            findAndDrawOtherLayer(zlevel, Infinity);\n\n            return imageLayer.dom;\n        },\n        /**\n         * 获取绘图区域宽度\n         */\n        getWidth: function () {\n            return this._width;\n        },\n\n        /**\n         * 获取绘图区域高度\n         */\n        getHeight: function () {\n            return this._height;\n        },\n\n        _getSize: function (whIdx) {\n            var opts = this._opts;\n            var wh = ['width', 'height'][whIdx];\n            var cwh = ['clientWidth', 'clientHeight'][whIdx];\n            var plt = ['paddingLeft', 'paddingTop'][whIdx];\n            var prb = ['paddingRight', 'paddingBottom'][whIdx];\n\n            if (opts[wh] != null && opts[wh] !== 'auto') {\n                return parseFloat(opts[wh]);\n            }\n\n            var root = this.root;\n            var stl = document.defaultView.getComputedStyle(root);\n\n            return (\n                (root[cwh] || parseInt10(stl[wh]) || parseInt10(root.style[wh]))\n                - (parseInt10(stl[plt]) || 0)\n                - (parseInt10(stl[prb]) || 0)\n            ) | 0;\n        },\n\n        pathToImage: function (path, dpr) {\n            dpr = dpr || this.dpr;\n\n            var canvas = document.createElement('canvas');\n            var ctx = canvas.getContext('2d');\n            var rect = path.getBoundingRect();\n            var style = path.style;\n            var shadowBlurSize = style.shadowBlur;\n            var shadowOffsetX = style.shadowOffsetX;\n            var shadowOffsetY = style.shadowOffsetY;\n            var lineWidth = style.hasStroke() ? style.lineWidth : 0;\n\n            var leftMargin = Math.max(lineWidth / 2, -shadowOffsetX + shadowBlurSize);\n            var rightMargin = Math.max(lineWidth / 2, shadowOffsetX + shadowBlurSize);\n            var topMargin = Math.max(lineWidth / 2, -shadowOffsetY + shadowBlurSize);\n            var bottomMargin = Math.max(lineWidth / 2, shadowOffsetY + shadowBlurSize);\n            var width = rect.width + leftMargin + rightMargin;\n            var height = rect.height + topMargin + bottomMargin;\n\n            canvas.width = width * dpr;\n            canvas.height = height * dpr;\n\n            ctx.scale(dpr, dpr);\n            ctx.clearRect(0, 0, width, height);\n            ctx.dpr = dpr;\n\n            var pathTransform = {\n                position: path.position,\n                rotation: path.rotation,\n                scale: path.scale\n            };\n            path.position = [leftMargin - rect.x, topMargin - rect.y];\n            path.rotation = 0;\n            path.scale = [1, 1];\n            path.updateTransform();\n            if (path) {\n                path.brush(ctx);\n            }\n\n            var ImageShape = require('./graphic/Image');\n            var imgShape = new ImageShape({\n                style: {\n                    x: 0,\n                    y: 0,\n                    image: canvas\n                }\n            });\n\n            if (pathTransform.position != null) {\n                imgShape.position = path.position = pathTransform.position;\n            }\n\n            if (pathTransform.rotation != null) {\n                imgShape.rotation = path.rotation = pathTransform.rotation;\n            }\n\n            if (pathTransform.scale != null) {\n                imgShape.scale = path.scale = pathTransform.scale;\n            }\n\n            return imgShape;\n        }\n    };\n\n    module.exports = Painter;\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.5.1@zrender/lib/Painter.js\n// module id = OsTV\n// module chunks = 0 1","\n\n    var featureManager = require('./featureManager');\n    var zrUtil = require('zrender/lib/core/util');\n    var graphic = require('../../util/graphic');\n    var Model = require('../../model/Model');\n    var DataDiffer = require('../../data/DataDiffer');\n    var listComponentHelper = require('../helper/listComponent');\n    var textContain = require('zrender/lib/contain/text');\n\n    module.exports = require('../../echarts').extendComponentView({\n\n        type: 'toolbox',\n\n        render: function (toolboxModel, ecModel, api, payload) {\n            var group = this.group;\n            group.removeAll();\n\n            if (!toolboxModel.get('show')) {\n                return;\n            }\n\n            var itemSize = +toolboxModel.get('itemSize');\n            var featureOpts = toolboxModel.get('feature') || {};\n            var features = this._features || (this._features = {});\n\n            var featureNames = [];\n            zrUtil.each(featureOpts, function (opt, name) {\n                featureNames.push(name);\n            });\n\n            (new DataDiffer(this._featureNames || [], featureNames))\n                .add(process)\n                .update(process)\n                .remove(zrUtil.curry(process, null))\n                .execute();\n\n            // Keep for diff.\n            this._featureNames = featureNames;\n\n            function process(newIndex, oldIndex) {\n                var featureName = featureNames[newIndex];\n                var oldName = featureNames[oldIndex];\n                var featureOpt = featureOpts[featureName];\n                var featureModel = new Model(featureOpt, toolboxModel, toolboxModel.ecModel);\n                var feature;\n\n                if (featureName && !oldName) { // Create\n                    if (isUserFeatureName(featureName)) {\n                        feature = {\n                            model: featureModel,\n                            onclick: featureModel.option.onclick,\n                            featureName: featureName\n                        };\n                    }\n                    else {\n                        var Feature = featureManager.get(featureName);\n                        if (!Feature) {\n                            return;\n                        }\n                        feature = new Feature(featureModel, ecModel, api);\n                    }\n                    features[featureName] = feature;\n                }\n                else {\n                    feature = features[oldName];\n                    // If feature does not exsit.\n                    if (!feature) {\n                        return;\n                    }\n                    feature.model = featureModel;\n                    feature.ecModel = ecModel;\n                    feature.api = api;\n                }\n\n                if (!featureName && oldName) {\n                    feature.dispose && feature.dispose(ecModel, api);\n                    return;\n                }\n\n                if (!featureModel.get('show') || feature.unusable) {\n                    feature.remove && feature.remove(ecModel, api);\n                    return;\n                }\n\n                createIconPaths(featureModel, feature, featureName);\n\n                featureModel.setIconStatus = function (iconName, status) {\n                    var option = this.option;\n                    var iconPaths = this.iconPaths;\n                    option.iconStatus = option.iconStatus || {};\n                    option.iconStatus[iconName] = status;\n                    // FIXME\n                    iconPaths[iconName] && iconPaths[iconName].trigger(status);\n                };\n\n                if (feature.render) {\n                    feature.render(featureModel, ecModel, api, payload);\n                }\n            }\n\n            function createIconPaths(featureModel, feature, featureName) {\n                var iconStyleModel = featureModel.getModel('iconStyle');\n\n                // If one feature has mutiple icon. they are orginaized as\n                // {\n                //     icon: {\n                //         foo: '',\n                //         bar: ''\n                //     },\n                //     title: {\n                //         foo: '',\n                //         bar: ''\n                //     }\n                // }\n                var icons = feature.getIcons ? feature.getIcons() : featureModel.get('icon');\n                var titles = featureModel.get('title') || {};\n                if (typeof icons === 'string') {\n                    var icon = icons;\n                    var title = titles;\n                    icons = {};\n                    titles = {};\n                    icons[featureName] = icon;\n                    titles[featureName] = title;\n                }\n                var iconPaths = featureModel.iconPaths = {};\n                zrUtil.each(icons, function (icon, iconName) {\n                    var normalStyle = iconStyleModel.getModel('normal').getItemStyle();\n                    var hoverStyle = iconStyleModel.getModel('emphasis').getItemStyle();\n\n                    var style = {\n                        x: -itemSize / 2,\n                        y: -itemSize / 2,\n                        width: itemSize,\n                        height: itemSize\n                    };\n                    var path = icon.indexOf('image://') === 0\n                        ? (\n                            style.image = icon.slice(8),\n                            new graphic.Image({style: style})\n                        )\n                        : graphic.makePath(\n                            icon.replace('path://', ''),\n                            {\n                                style: normalStyle,\n                                hoverStyle: hoverStyle,\n                                rectHover: true\n                            },\n                            style,\n                            'center'\n                        );\n\n                    graphic.setHoverStyle(path);\n\n                    if (toolboxModel.get('showTitle')) {\n                        path.__title = titles[iconName];\n                        path.on('mouseover', function () {\n                                // Should not reuse above hoverStyle, which might be modified.\n                                var hoverStyle = iconStyleModel.getModel('emphasis').getItemStyle();\n                                path.setStyle({\n                                    text: titles[iconName],\n                                    textPosition: hoverStyle.textPosition || 'bottom',\n                                    textFill: hoverStyle.fill || hoverStyle.stroke || '#000',\n                                    textAlign: hoverStyle.textAlign || 'center'\n                                });\n                            })\n                            .on('mouseout', function () {\n                                path.setStyle({\n                                    textFill: null\n                                });\n                            });\n                    }\n                    path.trigger(featureModel.get('iconStatus.' + iconName) || 'normal');\n\n                    group.add(path);\n                    path.on('click', zrUtil.bind(\n                        feature.onclick, feature, ecModel, api, iconName\n                    ));\n\n                    iconPaths[iconName] = path;\n                });\n            }\n\n            listComponentHelper.layout(group, toolboxModel, api);\n            // Render background after group is layout\n            // FIXME\n            listComponentHelper.addBackground(group, toolboxModel);\n\n            // Adjust icon title positions to avoid them out of screen\n            group.eachChild(function (icon) {\n                var titleText = icon.__title;\n                var hoverStyle = icon.hoverStyle;\n                // May be background element\n                if (hoverStyle && titleText) {\n                    var rect = textContain.getBoundingRect(\n                        titleText, hoverStyle.font\n                    );\n                    var offsetX = icon.position[0] + group.position[0];\n                    var offsetY = icon.position[1] + group.position[1] + itemSize;\n\n                    var needPutOnTop = false;\n                    if (offsetY + rect.height > api.getHeight()) {\n                        hoverStyle.textPosition = 'top';\n                        needPutOnTop = true;\n                    }\n                    var topOffset = needPutOnTop ? (-5 - rect.height) : (itemSize + 8);\n                    if (offsetX + rect.width /  2 > api.getWidth()) {\n                        hoverStyle.textPosition = ['100%', topOffset];\n                        hoverStyle.textAlign = 'right';\n                    }\n                    else if (offsetX - rect.width / 2 < 0) {\n                        hoverStyle.textPosition = [0, topOffset];\n                        hoverStyle.textAlign = 'left';\n                    }\n                }\n            });\n        },\n\n        updateView: function (toolboxModel, ecModel, api, payload) {\n            zrUtil.each(this._features, function (feature) {\n                feature.updateView && feature.updateView(feature.model, ecModel, api, payload);\n            });\n        },\n\n        updateLayout: function (toolboxModel, ecModel, api, payload) {\n            zrUtil.each(this._features, function (feature) {\n                feature.updateLayout && feature.updateLayout(feature.model, ecModel, api, payload);\n            });\n        },\n\n        remove: function (ecModel, api) {\n            zrUtil.each(this._features, function (feature) {\n                feature.remove && feature.remove(ecModel, api);\n            });\n            this.group.removeAll();\n        },\n\n        dispose: function (ecModel, api) {\n            zrUtil.each(this._features, function (feature) {\n                feature.dispose && feature.dispose(ecModel, api);\n            });\n        }\n    });\n\n    function isUserFeatureName(featureName) {\n        return featureName.indexOf('my') === 0;\n    }\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.6.1@echarts/lib/component/toolbox/ToolboxView.js\n// module id = Ow2V\n// module chunks = 0 1","/**\n * @file Data zoom model\n */\n\n\n    var zrUtil = require('zrender/lib/core/util');\n    var env = require('zrender/lib/core/env');\n    var echarts = require('../../echarts');\n    var modelUtil = require('../../util/model');\n    var helper = require('./helper');\n    var AxisProxy = require('./AxisProxy');\n    var each = zrUtil.each;\n    var eachAxisDim = helper.eachAxisDim;\n\n    var DataZoomModel = echarts.extendComponentModel({\n\n        type: 'dataZoom',\n\n        dependencies: [\n            'xAxis', 'yAxis', 'zAxis', 'radiusAxis', 'angleAxis', 'singleAxis', 'series'\n        ],\n\n        /**\n         * @protected\n         */\n        defaultOption: {\n            zlevel: 0,\n            z: 4,                   // Higher than normal component (z: 2).\n            orient: null,           // Default auto by axisIndex. Possible value: 'horizontal', 'vertical'.\n            xAxisIndex: null,       // Default the first horizontal category axis.\n            yAxisIndex: null,       // Default the first vertical category axis.\n\n            filterMode: 'filter',   // Possible values: 'filter' or 'empty' or 'weakFilter'.\n                                    // 'filter': data items which are out of window will be removed. This option is\n                                    //          applicable when filtering outliers. For each data item, it will be\n                                    //          filtered if one of the relevant dimensions is out of the window.\n                                    // 'weakFilter': data items which are out of window will be removed. This option\n                                    //          is applicable when filtering outliers. For each data item, it will be\n                                    //          filtered only if all  of the relevant dimensions are out of the same\n                                    //          side of the window.\n                                    // 'empty': data items which are out of window will be set to empty.\n                                    //          This option is applicable when user should not neglect\n                                    //          that there are some data items out of window.\n                                    // 'none': Do not filter.\n                                    // Taking line chart as an example, line will be broken in\n                                    // the filtered points when filterModel is set to 'empty', but\n                                    // be connected when set to 'filter'.\n\n            throttle: null,         // Dispatch action by the fixed rate, avoid frequency.\n                                    // default 100. Do not throttle when use null/undefined.\n                                    // If animation === true and animationDurationUpdate > 0,\n                                    // default value is 100, otherwise 20.\n            start: 0,               // Start percent. 0 ~ 100\n            end: 100,               // End percent. 0 ~ 100\n            startValue: null,       // Start value. If startValue specified, start is ignored.\n            endValue: null,         // End value. If endValue specified, end is ignored.\n            minSpan: null,          // 0 ~ 100\n            maxSpan: null,          // 0 ~ 100\n            minValueSpan: null,     // The range of dataZoom can not be smaller than that.\n            maxValueSpan: null      // The range of dataZoom can not be larger than that.\n        },\n\n        /**\n         * @override\n         */\n        init: function (option, parentModel, ecModel) {\n\n            /**\n             * key like x_0, y_1\n             * @private\n             * @type {Object}\n             */\n            this._dataIntervalByAxis = {};\n\n            /**\n             * @private\n             */\n            this._dataInfo = {};\n\n            /**\n             * key like x_0, y_1\n             * @private\n             */\n            this._axisProxies = {};\n\n            /**\n             * @readOnly\n             */\n            this.textStyleModel;\n\n            /**\n             * @private\n             */\n            this._autoThrottle = true;\n\n            /**\n             * 'percent' or 'value'\n             * @private\n             */\n            this._rangePropMode = ['percent', 'percent'];\n\n            var rawOption = retrieveRaw(option);\n\n            this.mergeDefaultAndTheme(option, ecModel);\n\n            this.doInit(rawOption);\n        },\n\n        /**\n         * @override\n         */\n        mergeOption: function (newOption) {\n            var rawOption = retrieveRaw(newOption);\n\n            //FIX #2591\n            zrUtil.merge(this.option, newOption, true);\n\n            this.doInit(rawOption);\n        },\n\n        /**\n         * @protected\n         */\n        doInit: function (rawOption) {\n            var thisOption = this.option;\n\n            // Disable realtime view update if canvas is not supported.\n            if (!env.canvasSupported) {\n                thisOption.realtime = false;\n            }\n\n            this._setDefaultThrottle(rawOption);\n\n            updateRangeUse(this, rawOption);\n\n            each([['start', 'startValue'], ['end', 'endValue']], function (names, index) {\n                // start/end has higher priority over startValue/endValue if they\n                // both set, but we should make chart.setOption({endValue: 1000})\n                // effective, rather than chart.setOption({endValue: 1000, end: null}).\n                if (this._rangePropMode[index] === 'value') {\n                    thisOption[names[0]] = null;\n                }\n                // Otherwise do nothing and use the merge result.\n            }, this);\n\n            this.textStyleModel = this.getModel('textStyle');\n\n            this._resetTarget();\n\n            this._giveAxisProxies();\n        },\n\n        /**\n         * @private\n         */\n        _giveAxisProxies: function () {\n            var axisProxies = this._axisProxies;\n\n            this.eachTargetAxis(function (dimNames, axisIndex, dataZoomModel, ecModel) {\n                var axisModel = this.dependentModels[dimNames.axis][axisIndex];\n\n                // If exists, share axisProxy with other dataZoomModels.\n                var axisProxy = axisModel.__dzAxisProxy || (\n                    // Use the first dataZoomModel as the main model of axisProxy.\n                    axisModel.__dzAxisProxy = new AxisProxy(\n                        dimNames.name, axisIndex, this, ecModel\n                    )\n                );\n                // FIXME\n                // dispose __dzAxisProxy\n\n                axisProxies[dimNames.name + '_' + axisIndex] = axisProxy;\n            }, this);\n        },\n\n        /**\n         * @private\n         */\n        _resetTarget: function () {\n            var thisOption = this.option;\n\n            var autoMode = this._judgeAutoMode();\n\n            eachAxisDim(function (dimNames) {\n                var axisIndexName = dimNames.axisIndex;\n                thisOption[axisIndexName] = modelUtil.normalizeToArray(\n                    thisOption[axisIndexName]\n                );\n            }, this);\n\n            if (autoMode === 'axisIndex') {\n                this._autoSetAxisIndex();\n            }\n            else if (autoMode === 'orient') {\n                this._autoSetOrient();\n            }\n        },\n\n        /**\n         * @private\n         */\n        _judgeAutoMode: function () {\n            // Auto set only works for setOption at the first time.\n            // The following is user's reponsibility. So using merged\n            // option is OK.\n            var thisOption = this.option;\n\n            var hasIndexSpecified = false;\n            eachAxisDim(function (dimNames) {\n                // When user set axisIndex as a empty array, we think that user specify axisIndex\n                // but do not want use auto mode. Because empty array may be encountered when\n                // some error occured.\n                if (thisOption[dimNames.axisIndex] != null) {\n                    hasIndexSpecified = true;\n                }\n            }, this);\n\n            var orient = thisOption.orient;\n\n            if (orient == null && hasIndexSpecified) {\n                return 'orient';\n            }\n            else if (!hasIndexSpecified) {\n                if (orient == null) {\n                    thisOption.orient = 'horizontal';\n                }\n                return 'axisIndex';\n            }\n        },\n\n        /**\n         * @private\n         */\n        _autoSetAxisIndex: function () {\n            var autoAxisIndex = true;\n            var orient = this.get('orient', true);\n            var thisOption = this.option;\n            var dependentModels = this.dependentModels;\n\n            if (autoAxisIndex) {\n                // Find axis that parallel to dataZoom as default.\n                var dimName = orient === 'vertical' ? 'y' : 'x';\n\n                if (dependentModels[dimName + 'Axis'].length) {\n                    thisOption[dimName + 'AxisIndex'] = [0];\n                    autoAxisIndex = false;\n                }\n                else {\n                    each(dependentModels.singleAxis, function (singleAxisModel) {\n                        if (autoAxisIndex && singleAxisModel.get('orient', true) === orient) {\n                            thisOption.singleAxisIndex = [singleAxisModel.componentIndex];\n                            autoAxisIndex = false;\n                        }\n                    });\n                }\n            }\n\n            if (autoAxisIndex) {\n                // Find the first category axis as default. (consider polar)\n                eachAxisDim(function (dimNames) {\n                    if (!autoAxisIndex) {\n                        return;\n                    }\n                    var axisIndices = [];\n                    var axisModels = this.dependentModels[dimNames.axis];\n                    if (axisModels.length && !axisIndices.length) {\n                        for (var i = 0, len = axisModels.length; i < len; i++) {\n                            if (axisModels[i].get('type') === 'category') {\n                                axisIndices.push(i);\n                            }\n                        }\n                    }\n                    thisOption[dimNames.axisIndex] = axisIndices;\n                    if (axisIndices.length) {\n                        autoAxisIndex = false;\n                    }\n                }, this);\n            }\n\n            if (autoAxisIndex) {\n                // FIXME\n                // 这里是兼容ec2的写法（没指定xAxisIndex和yAxisIndex时把scatter和双数值轴折柱纳入dataZoom控制），\n                // 但是实际是否需要Grid.js#getScaleByOption来判断（考虑time，log等axis type）？\n\n                // If both dataZoom.xAxisIndex and dataZoom.yAxisIndex is not specified,\n                // dataZoom component auto adopts series that reference to\n                // both xAxis and yAxis which type is 'value'.\n                this.ecModel.eachSeries(function (seriesModel) {\n                    if (this._isSeriesHasAllAxesTypeOf(seriesModel, 'value')) {\n                        eachAxisDim(function (dimNames) {\n                            var axisIndices = thisOption[dimNames.axisIndex];\n\n                            var axisIndex = seriesModel.get(dimNames.axisIndex);\n                            var axisId = seriesModel.get(dimNames.axisId);\n\n                            var axisModel = seriesModel.ecModel.queryComponents({\n                                mainType: dimNames.axis,\n                                index: axisIndex,\n                                id: axisId\n                            })[0];\n\n                            if (__DEV__) {\n                                if (!axisModel) {\n                                    throw new Error(\n                                        dimNames.axis + ' \"' + zrUtil.retrieve(\n                                            axisIndex,\n                                            axisId,\n                                            0\n                                        ) + '\" not found'\n                                    );\n                                }\n                            }\n                            axisIndex = axisModel.componentIndex;\n\n                            if (zrUtil.indexOf(axisIndices, axisIndex) < 0) {\n                                axisIndices.push(axisIndex);\n                            }\n                        });\n                    }\n                }, this);\n            }\n        },\n\n        /**\n         * @private\n         */\n        _autoSetOrient: function () {\n            var dim;\n\n            // Find the first axis\n            this.eachTargetAxis(function (dimNames) {\n                !dim && (dim = dimNames.name);\n            }, this);\n\n            this.option.orient = dim === 'y' ? 'vertical' : 'horizontal';\n        },\n\n        /**\n         * @private\n         */\n        _isSeriesHasAllAxesTypeOf: function (seriesModel, axisType) {\n            // FIXME\n            // 需要series的xAxisIndex和yAxisIndex都首先自动设置上。\n            // 例如series.type === scatter时。\n\n            var is = true;\n            eachAxisDim(function (dimNames) {\n                var seriesAxisIndex = seriesModel.get(dimNames.axisIndex);\n                var axisModel = this.dependentModels[dimNames.axis][seriesAxisIndex];\n\n                if (!axisModel || axisModel.get('type') !== axisType) {\n                    is = false;\n                }\n            }, this);\n            return is;\n        },\n\n        /**\n         * @private\n         */\n        _setDefaultThrottle: function (rawOption) {\n            // When first time user set throttle, auto throttle ends.\n            if (rawOption.hasOwnProperty('throttle')) {\n                this._autoThrottle = false;\n            }\n            if (this._autoThrottle) {\n                var globalOption = this.ecModel.option;\n                this.option.throttle =\n                    (globalOption.animation && globalOption.animationDurationUpdate > 0)\n                    ? 100 : 20;\n            }\n        },\n\n        /**\n         * @public\n         */\n        getFirstTargetAxisModel: function () {\n            var firstAxisModel;\n            eachAxisDim(function (dimNames) {\n                if (firstAxisModel == null) {\n                    var indices = this.get(dimNames.axisIndex);\n                    if (indices.length) {\n                        firstAxisModel = this.dependentModels[dimNames.axis][indices[0]];\n                    }\n                }\n            }, this);\n\n            return firstAxisModel;\n        },\n\n        /**\n         * @public\n         * @param {Function} callback param: axisModel, dimNames, axisIndex, dataZoomModel, ecModel\n         */\n        eachTargetAxis: function (callback, context) {\n            var ecModel = this.ecModel;\n            eachAxisDim(function (dimNames) {\n                each(\n                    this.get(dimNames.axisIndex),\n                    function (axisIndex) {\n                        callback.call(context, dimNames, axisIndex, this, ecModel);\n                    },\n                    this\n                );\n            }, this);\n        },\n\n        /**\n         * @param {string} dimName\n         * @param {number} axisIndex\n         * @return {module:echarts/component/dataZoom/AxisProxy} If not found, return null/undefined.\n         */\n        getAxisProxy: function (dimName, axisIndex) {\n            return this._axisProxies[dimName + '_' + axisIndex];\n        },\n\n        /**\n         * @param {string} dimName\n         * @param {number} axisIndex\n         * @return {module:echarts/model/Model} If not found, return null/undefined.\n         */\n        getAxisModel: function (dimName, axisIndex) {\n            var axisProxy = this.getAxisProxy(dimName, axisIndex);\n            return axisProxy && axisProxy.getAxisModel();\n        },\n\n        /**\n         * If not specified, set to undefined.\n         *\n         * @public\n         * @param {Object} opt\n         * @param {number} [opt.start]\n         * @param {number} [opt.end]\n         * @param {number} [opt.startValue]\n         * @param {number} [opt.endValue]\n         * @param {boolean} [ignoreUpdateRangeUsg=false]\n         */\n        setRawRange: function (opt, ignoreUpdateRangeUsg) {\n            each(['start', 'end', 'startValue', 'endValue'], function (name) {\n                // If any of those prop is null/undefined, we should alos set\n                // them, because only one pair between start/end and\n                // startValue/endValue can work.\n                this.option[name] = opt[name];\n            }, this);\n\n            !ignoreUpdateRangeUsg && updateRangeUse(this, opt);\n        },\n\n        /**\n         * @public\n         * @return {Array.<number>} [startPercent, endPercent]\n         */\n        getPercentRange: function () {\n            var axisProxy = this.findRepresentativeAxisProxy();\n            if (axisProxy) {\n                return axisProxy.getDataPercentWindow();\n            }\n        },\n\n        /**\n         * @public\n         * For example, chart.getModel().getComponent('dataZoom').getValueRange('y', 0);\n         *\n         * @param {string} [axisDimName]\n         * @param {number} [axisIndex]\n         * @return {Array.<number>} [startValue, endValue] value can only be '-' or finite number.\n         */\n        getValueRange: function (axisDimName, axisIndex) {\n            if (axisDimName == null && axisIndex == null) {\n                var axisProxy = this.findRepresentativeAxisProxy();\n                if (axisProxy) {\n                    return axisProxy.getDataValueWindow();\n                }\n            }\n            else {\n                return this.getAxisProxy(axisDimName, axisIndex).getDataValueWindow();\n            }\n        },\n\n        /**\n         * @public\n         * @param {module:echarts/model/Model} [axisModel] If axisModel given, find axisProxy\n         *      corresponding to the axisModel\n         * @return {module:echarts/component/dataZoom/AxisProxy}\n         */\n        findRepresentativeAxisProxy: function (axisModel) {\n            if (axisModel) {\n                return axisModel.__dzAxisProxy;\n            }\n\n            // Find the first hosted axisProxy\n            var axisProxies = this._axisProxies;\n            for (var key in axisProxies) {\n                if (axisProxies.hasOwnProperty(key) && axisProxies[key].hostedBy(this)) {\n                    return axisProxies[key];\n                }\n            }\n\n            // If no hosted axis find not hosted axisProxy.\n            // Consider this case: dataZoomModel1 and dataZoomModel2 control the same axis,\n            // and the option.start or option.end settings are different. The percentRange\n            // should follow axisProxy.\n            // (We encounter this problem in toolbox data zoom.)\n            for (var key in axisProxies) {\n                if (axisProxies.hasOwnProperty(key) && !axisProxies[key].hostedBy(this)) {\n                    return axisProxies[key];\n                }\n            }\n        },\n\n        /**\n         * @return {Array.<string>}\n         */\n        getRangePropMode: function () {\n            return this._rangePropMode.slice();\n        }\n    });\n\n    function retrieveRaw(option) {\n        var ret = {};\n        each(\n            ['start', 'end', 'startValue', 'endValue', 'throttle'],\n            function (name) {\n                option.hasOwnProperty(name) && (ret[name] = option[name]);\n            }\n        );\n        return ret;\n    }\n\n    function updateRangeUse(dataZoomModel, rawOption) {\n        each([['start', 'startValue'], ['end', 'endValue']], function (names, index) {\n            var rangePropMode = dataZoomModel._rangePropMode;\n            if (rawOption[names[0]] != null) {\n                rangePropMode[index] = 'percent';\n            }\n            else if (rawOption[names[1]] != null) {\n                rangePropMode[index] = 'value';\n            }\n            // else remain its original setting.\n        });\n    }\n\n    module.exports = DataZoomModel;\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.6.1@echarts/lib/component/dataZoom/DataZoomModel.js\n// module id = PtLt\n// module chunks = 0 1","/**\n * @module echarts/model/Model\n */\n\n\n    var zrUtil = require('zrender/lib/core/util');\n    var clazzUtil = require('../util/clazz');\n    var env = require('zrender/lib/core/env');\n\n    /**\n     * @alias module:echarts/model/Model\n     * @constructor\n     * @param {Object} option\n     * @param {module:echarts/model/Model} [parentModel]\n     * @param {module:echarts/model/Global} [ecModel]\n     */\n    function Model(option, parentModel, ecModel) {\n        /**\n         * @type {module:echarts/model/Model}\n         * @readOnly\n         */\n        this.parentModel = parentModel;\n\n        /**\n         * @type {module:echarts/model/Global}\n         * @readOnly\n         */\n        this.ecModel = ecModel;\n\n        /**\n         * @type {Object}\n         * @protected\n         */\n        this.option = option;\n\n        // Simple optimization\n        // if (this.init) {\n        //     if (arguments.length <= 4) {\n        //         this.init(option, parentModel, ecModel, extraOpt);\n        //     }\n        //     else {\n        //         this.init.apply(this, arguments);\n        //     }\n        // }\n    }\n\n    Model.prototype = {\n\n        constructor: Model,\n\n        /**\n         * Model 的初始化函数\n         * @param {Object} option\n         */\n        init: null,\n\n        /**\n         * 从新的 Option merge\n         */\n        mergeOption: function (option) {\n            zrUtil.merge(this.option, option, true);\n        },\n\n        /**\n         * @param {string|Array.<string>} path\n         * @param {boolean} [ignoreParent=false]\n         * @return {*}\n         */\n        get: function (path, ignoreParent) {\n            if (path == null) {\n                return this.option;\n            }\n\n            return doGet(\n                this.option,\n                this.parsePath(path),\n                !ignoreParent && getParent(this, path)\n            );\n        },\n\n        /**\n         * @param {string} key\n         * @param {boolean} [ignoreParent=false]\n         * @return {*}\n         */\n        getShallow: function (key, ignoreParent) {\n            var option = this.option;\n\n            var val = option == null ? option : option[key];\n            var parentModel = !ignoreParent && getParent(this, key);\n            if (val == null && parentModel) {\n                val = parentModel.getShallow(key);\n            }\n            return val;\n        },\n\n        /**\n         * @param {string|Array.<string>} path\n         * @param {module:echarts/model/Model} [parentModel]\n         * @return {module:echarts/model/Model}\n         */\n        getModel: function (path, parentModel) {\n            var obj = path == null\n                ? this.option\n                : doGet(this.option, path = this.parsePath(path));\n\n            var thisParentModel;\n            parentModel = parentModel || (\n                (thisParentModel = getParent(this, path))\n                    && thisParentModel.getModel(path)\n            );\n\n            return new Model(obj, parentModel, this.ecModel);\n        },\n\n        /**\n         * If model has option\n         */\n        isEmpty: function () {\n            return this.option == null;\n        },\n\n        restoreData: function () {},\n\n        // Pending\n        clone: function () {\n            var Ctor = this.constructor;\n            return new Ctor(zrUtil.clone(this.option));\n        },\n\n        setReadOnly: function (properties) {\n            clazzUtil.setReadOnly(this, properties);\n        },\n\n        // If path is null/undefined, return null/undefined.\n        parsePath: function(path) {\n            if (typeof path === 'string') {\n                path = path.split('.');\n            }\n            return path;\n        },\n\n        /**\n         * @param {Function} getParentMethod\n         *        param {Array.<string>|string} path\n         *        return {module:echarts/model/Model}\n         */\n        customizeGetParent: function (getParentMethod) {\n            clazzUtil.set(this, 'getParent', getParentMethod);\n        },\n\n        isAnimationEnabled: function () {\n            if (!env.node) {\n                if (this.option.animation != null) {\n                    return !!this.option.animation;\n                }\n                else if (this.parentModel) {\n                    return this.parentModel.isAnimationEnabled();\n                }\n            }\n        }\n    };\n\n    function doGet(obj, pathArr, parentModel) {\n        for (var i = 0; i < pathArr.length; i++) {\n            // Ignore empty\n            if (!pathArr[i]) {\n                continue;\n            }\n            // obj could be number/string/... (like 0)\n            obj = (obj && typeof obj === 'object') ? obj[pathArr[i]] : null;\n            if (obj == null) {\n                break;\n            }\n        }\n        if (obj == null && parentModel) {\n            obj = parentModel.get(pathArr);\n        }\n        return obj;\n    }\n\n    function getParent(model, path) {\n        var getParentMethod = clazzUtil.get(model, 'getParent');\n        return getParentMethod ? getParentMethod.call(model, path) : model.parentModel;\n    }\n\n    // Enable Model.extend.\n    clazzUtil.enableClassExtend(Model);\n\n    var mixin = zrUtil.mixin;\n    mixin(Model, require('./mixin/lineStyle'));\n    mixin(Model, require('./mixin/areaStyle'));\n    mixin(Model, require('./mixin/textStyle'));\n    mixin(Model, require('./mixin/itemStyle'));\n\n    module.exports = Model;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.6.1@echarts/lib/model/Model.js\n// module id = Q4Sk\n// module chunks = 0 1","/**\n * @file Data zoom model\n */\n\n\n    var DataZoomModel = require('./DataZoomModel');\n\n    var SliderZoomModel = DataZoomModel.extend({\n\n        type: 'dataZoom.slider',\n\n        layoutMode: 'box',\n\n        /**\n         * @protected\n         */\n        defaultOption: {\n            show: true,\n\n            // ph => placeholder. Using placehoder here because\n            // deault value can only be drived in view stage.\n            right: 'ph',  // Default align to grid rect.\n            top: 'ph',    // Default align to grid rect.\n            width: 'ph',  // Default align to grid rect.\n            height: 'ph', // Default align to grid rect.\n            left: null,   // Default align to grid rect.\n            bottom: null, // Default align to grid rect.\n\n            backgroundColor: 'rgba(47,69,84,0)',    // Background of slider zoom component.\n            // dataBackgroundColor: '#ddd',         // Background coor of data shadow and border of box,\n                                                    // highest priority, remain for compatibility of\n                                                    // previous version, but not recommended any more.\n            dataBackground: {\n                lineStyle: {\n                    color: '#2f4554',\n                    width: 0.5,\n                    opacity: 0.3\n                },\n                areaStyle: {\n                    color: 'rgba(47,69,84,0.3)',\n                    opacity: 0.3\n                }\n            },\n            borderColor: '#ddd',                    // border color of the box. For compatibility,\n                                                    // if dataBackgroundColor is set, borderColor\n                                                    // is ignored.\n\n            fillerColor: 'rgba(167,183,204,0.4)',     // Color of selected area.\n            // handleColor: 'rgba(89,170,216,0.95)',     // Color of handle.\n            // handleIcon: 'path://M4.9,17.8c0-1.4,4.5-10.5,5.5-12.4c0-0.1,0.6-1.1,0.9-1.1c0.4,0,0.9,1,0.9,1.1c1.1,2.2,5.4,11,5.4,12.4v17.8c0,1.5-0.6,2.1-1.3,2.1H6.1c-0.7,0-1.3-0.6-1.3-2.1V17.8z',\n            handleIcon: 'M8.2,13.6V3.9H6.3v9.7H3.1v14.9h3.3v9.7h1.8v-9.7h3.3V13.6H8.2z M9.7,24.4H4.8v-1.4h4.9V24.4z M9.7,19.1H4.8v-1.4h4.9V19.1z',\n            // Percent of the slider height\n            handleSize: '100%',\n\n            handleStyle: {\n                color: '#a7b7cc'\n            },\n\n            labelPrecision: null,\n            labelFormatter: null,\n            showDetail: true,\n            showDataShadow: 'auto',                 // Default auto decision.\n            realtime: true,\n            zoomLock: false,                        // Whether disable zoom.\n            textStyle: {\n                color: '#333'\n            }\n        }\n\n    });\n\n    module.exports = SliderZoomModel;\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.6.1@echarts/lib/component/dataZoom/SliderZoomModel.js\n// module id = QPUO\n// module chunks = 0 1","/*!\n * ZRender, a high performance 2d drawing library.\n *\n * Copyright (c) 2013, Baidu Inc.\n * All rights reserved.\n *\n * LICENSE\n * https://github.com/ecomfe/zrender/blob/master/LICENSE.txt\n */\n// Global defines\n\n    var guid = require('./core/guid');\n    var env = require('./core/env');\n    var zrUtil = require('./core/util');\n\n    var Handler = require('./Handler');\n    var Storage = require('./Storage');\n    var Animation = require('./animation/Animation');\n    var HandlerProxy = require('./dom/HandlerProxy');\n\n    var useVML = !env.canvasSupported;\n\n    var painterCtors = {\n        canvas: require('./Painter')\n    };\n\n    var instances = {};    // ZRender实例map索引\n\n    var zrender = {};\n\n    /**\n     * @type {string}\n     */\n    zrender.version = '3.5.1';\n\n    /**\n     * Initializing a zrender instance\n     * @param {HTMLElement} dom\n     * @param {Object} opts\n     * @param {string} [opts.renderer='canvas'] 'canvas' or 'svg'\n     * @param {number} [opts.devicePixelRatio]\n     * @param {number|string} [opts.width] Can be 'auto' (the same as null/undefined)\n     * @param {number|string} [opts.height] Can be 'auto' (the same as null/undefined)\n     * @return {module:zrender/ZRender}\n     */\n    zrender.init = function(dom, opts) {\n        var zr = new ZRender(guid(), dom, opts);\n        instances[zr.id] = zr;\n        return zr;\n    };\n\n    /**\n     * Dispose zrender instance\n     * @param {module:zrender/ZRender} zr\n     */\n    zrender.dispose = function (zr) {\n        if (zr) {\n            zr.dispose();\n        }\n        else {\n            for (var key in instances) {\n                if (instances.hasOwnProperty(key)) {\n                    instances[key].dispose();\n                }\n            }\n            instances = {};\n        }\n\n        return zrender;\n    };\n\n    /**\n     * Get zrender instance by id\n     * @param {string} id zrender instance id\n     * @return {module:zrender/ZRender}\n     */\n    zrender.getInstance = function (id) {\n        return instances[id];\n    };\n\n    zrender.registerPainter = function (name, Ctor) {\n        painterCtors[name] = Ctor;\n    };\n\n    function delInstance(id) {\n        delete instances[id];\n    }\n\n    /**\n     * @module zrender/ZRender\n     */\n    /**\n     * @constructor\n     * @alias module:zrender/ZRender\n     * @param {string} id\n     * @param {HTMLDomElement} dom\n     * @param {Object} opts\n     * @param {string} [opts.renderer='canvas'] 'canvas' or 'svg'\n     * @param {number} [opts.devicePixelRatio]\n     * @param {number} [opts.width] Can be 'auto' (the same as null/undefined)\n     * @param {number} [opts.height] Can be 'auto' (the same as null/undefined)\n     */\n    var ZRender = function(id, dom, opts) {\n\n        opts = opts || {};\n\n        /**\n         * @type {HTMLDomElement}\n         */\n        this.dom = dom;\n\n        /**\n         * @type {string}\n         */\n        this.id = id;\n\n        var self = this;\n        var storage = new Storage();\n\n        var rendererType = opts.renderer;\n        // TODO WebGL\n        if (useVML) {\n            if (!painterCtors.vml) {\n                throw new Error('You need to require \\'zrender/vml/vml\\' to support IE8');\n            }\n            rendererType = 'vml';\n        }\n        else if (!rendererType || !painterCtors[rendererType]) {\n            rendererType = 'canvas';\n        }\n        var painter = new painterCtors[rendererType](dom, storage, opts);\n\n        this.storage = storage;\n        this.painter = painter;\n\n        var handerProxy = !env.node ? new HandlerProxy(painter.getViewportRoot()) : null;\n        this.handler = new Handler(storage, painter, handerProxy, painter.root);\n\n        /**\n         * @type {module:zrender/animation/Animation}\n         */\n        this.animation = new Animation({\n            stage: {\n                update: zrUtil.bind(this.flush, this)\n            }\n        });\n        this.animation.start();\n\n        /**\n         * @type {boolean}\n         * @private\n         */\n        this._needsRefresh;\n\n        // 修改 storage.delFromStorage, 每次删除元素之前删除动画\n        // FIXME 有点ugly\n        var oldDelFromStorage = storage.delFromStorage;\n        var oldAddToStorage = storage.addToStorage;\n\n        storage.delFromStorage = function (el) {\n            oldDelFromStorage.call(storage, el);\n\n            el && el.removeSelfFromZr(self);\n        };\n\n        storage.addToStorage = function (el) {\n            oldAddToStorage.call(storage, el);\n\n            el.addSelfToZr(self);\n        };\n    };\n\n    ZRender.prototype = {\n\n        constructor: ZRender,\n        /**\n         * 获取实例唯一标识\n         * @return {string}\n         */\n        getId: function () {\n            return this.id;\n        },\n\n        /**\n         * 添加元素\n         * @param  {module:zrender/Element} el\n         */\n        add: function (el) {\n            this.storage.addRoot(el);\n            this._needsRefresh = true;\n        },\n\n        /**\n         * 删除元素\n         * @param  {module:zrender/Element} el\n         */\n        remove: function (el) {\n            this.storage.delRoot(el);\n            this._needsRefresh = true;\n        },\n\n        /**\n         * Change configuration of layer\n         * @param {string} zLevel\n         * @param {Object} config\n         * @param {string} [config.clearColor=0] Clear color\n         * @param {string} [config.motionBlur=false] If enable motion blur\n         * @param {number} [config.lastFrameAlpha=0.7] Motion blur factor. Larger value cause longer trailer\n        */\n        configLayer: function (zLevel, config) {\n            this.painter.configLayer(zLevel, config);\n            this._needsRefresh = true;\n        },\n\n        /**\n         * Repaint the canvas immediately\n         */\n        refreshImmediately: function () {\n            // Clear needsRefresh ahead to avoid something wrong happens in refresh\n            // Or it will cause zrender refreshes again and again.\n            this._needsRefresh = false;\n            this.painter.refresh();\n            /**\n             * Avoid trigger zr.refresh in Element#beforeUpdate hook\n             */\n            this._needsRefresh = false;\n        },\n\n        /**\n         * Mark and repaint the canvas in the next frame of browser\n         */\n        refresh: function() {\n            this._needsRefresh = true;\n        },\n\n        /**\n         * Perform all refresh\n         */\n        flush: function () {\n            if (this._needsRefresh) {\n                this.refreshImmediately();\n            }\n            if (this._needsRefreshHover) {\n                this.refreshHoverImmediately();\n            }\n        },\n\n        /**\n         * Add element to hover layer\n         * @param  {module:zrender/Element} el\n         * @param {Object} style\n         */\n        addHover: function (el, style) {\n            if (this.painter.addHover) {\n                this.painter.addHover(el, style);\n                this.refreshHover();\n            }\n        },\n\n        /**\n         * Add element from hover layer\n         * @param  {module:zrender/Element} el\n         */\n        removeHover: function (el) {\n            if (this.painter.removeHover) {\n                this.painter.removeHover(el);\n                this.refreshHover();\n            }\n        },\n\n        /**\n         * Clear all hover elements in hover layer\n         * @param  {module:zrender/Element} el\n         */\n        clearHover: function () {\n            if (this.painter.clearHover) {\n                this.painter.clearHover();\n                this.refreshHover();\n            }\n        },\n\n        /**\n         * Refresh hover in next frame\n         */\n        refreshHover: function () {\n            this._needsRefreshHover = true;\n        },\n\n        /**\n         * Refresh hover immediately\n         */\n        refreshHoverImmediately: function () {\n            this._needsRefreshHover = false;\n            this.painter.refreshHover && this.painter.refreshHover();\n        },\n\n        /**\n         * Resize the canvas.\n         * Should be invoked when container size is changed\n         * @param {Object} [opts]\n         * @param {number|string} [opts.width] Can be 'auto' (the same as null/undefined)\n         * @param {number|string} [opts.height] Can be 'auto' (the same as null/undefined)\n         */\n        resize: function(opts) {\n            opts = opts || {};\n            this.painter.resize(opts.width, opts.height);\n            this.handler.resize();\n        },\n\n        /**\n         * Stop and clear all animation immediately\n         */\n        clearAnimation: function () {\n            this.animation.clear();\n        },\n\n        /**\n         * Get container width\n         */\n        getWidth: function() {\n            return this.painter.getWidth();\n        },\n\n        /**\n         * Get container height\n         */\n        getHeight: function() {\n            return this.painter.getHeight();\n        },\n\n        /**\n         * Export the canvas as Base64 URL\n         * @param {string} type\n         * @param {string} [backgroundColor='#fff']\n         * @return {string} Base64 URL\n         */\n        // toDataURL: function(type, backgroundColor) {\n        //     return this.painter.getRenderedCanvas({\n        //         backgroundColor: backgroundColor\n        //     }).toDataURL(type);\n        // },\n\n        /**\n         * Converting a path to image.\n         * It has much better performance of drawing image rather than drawing a vector path.\n         * @param {module:zrender/graphic/Path} e\n         * @param {number} width\n         * @param {number} height\n         */\n        pathToImage: function(e, dpr) {\n            return this.painter.pathToImage(e, dpr);\n        },\n\n        /**\n         * Set default cursor\n         * @param {string} [cursorStyle='default'] 例如 crosshair\n         */\n        setCursorStyle: function (cursorStyle) {\n            this.handler.setCursorStyle(cursorStyle);\n        },\n\n        /**\n         * Find hovered element\n         * @param {number} x\n         * @param {number} y\n         * @return {Object} {target, topTarget}\n         */\n        findHover: function (x, y) {\n            return this.handler.findHover(x, y);\n        },\n\n        /**\n         * Bind event\n         *\n         * @param {string} eventName Event name\n         * @param {Function} eventHandler Handler function\n         * @param {Object} [context] Context object\n         */\n        on: function(eventName, eventHandler, context) {\n            this.handler.on(eventName, eventHandler, context);\n        },\n\n        /**\n         * Unbind event\n         * @param {string} eventName Event name\n         * @param {Function} [eventHandler] Handler function\n         */\n        off: function(eventName, eventHandler) {\n            this.handler.off(eventName, eventHandler);\n        },\n\n        /**\n         * Trigger event manually\n         *\n         * @param {string} eventName Event name\n         * @param {event=} event Event object\n         */\n        trigger: function (eventName, event) {\n            this.handler.trigger(eventName, event);\n        },\n\n\n        /**\n         * Clear all objects and the canvas.\n         */\n        clear: function () {\n            this.storage.delRoot();\n            this.painter.clear();\n        },\n\n        /**\n         * Dispose self.\n         */\n        dispose: function () {\n            this.animation.stop();\n\n            this.clear();\n            this.storage.dispose();\n            this.painter.dispose();\n            this.handler.dispose();\n\n            this.animation =\n            this.storage =\n            this.painter =\n            this.handler = null;\n\n            delInstance(this.id);\n        }\n    };\n\n    module.exports = zrender;\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.5.1@zrender/lib/zrender.js\n// module id = QXe6\n// module chunks = 0 1","/**\n * Complete dimensions by data (guess dimension).\n */\n\n\n    var zrUtil = require('zrender/lib/core/util');\n    var modelUtil = require('../../util/model');\n    var each = zrUtil.each;\n    var isString = zrUtil.isString;\n    var defaults = zrUtil.defaults;\n    var normalizeToArray = modelUtil.normalizeToArray;\n\n    var OTHER_DIMS = {tooltip: 1, label: 1, itemName: 1};\n\n    /**\n     * Complete the dimensions array, by user defined `dimension` and `encode`,\n     * and guessing from the data structure.\n     * If no 'value' dimension specified, the first no-named dimension will be\n     * named as 'value'.\n     *\n     * @param {Array.<string>} sysDims Necessary dimensions, like ['x', 'y'], which\n     *      provides not only dim template, but also default order.\n     *      `name` of each item provides default coord name.\n     *      [{dimsDef: []}, ...] can be specified to give names.\n     * @param {Array} data Data list. [[1, 2, 3], [2, 3, 4]].\n     * @param {Object} [opt]\n     * @param {Array.<Object|string>} [opt.dimsDef] option.series.dimensions User defined dimensions\n     *      For example: ['asdf', {name, type}, ...].\n     * @param {Object} [opt.encodeDef] option.series.encode {x: 2, y: [3, 1], tooltip: [1, 2], label: 3}\n     * @param {string} [opt.extraPrefix] Prefix of name when filling the left dimensions.\n     * @param {string} [opt.extraFromZero] If specified, extra dim names will be:\n     *                      extraPrefix + 0, extraPrefix + extraBaseIndex + 1 ...\n     *                      If not specified, extra dim names will be:\n     *                      extraPrefix, extraPrefix + 0, extraPrefix + 1 ...\n     * @param {number} [opt.dimCount] If not specified, guess by the first data item.\n     * @return {Array.<Object>} [{\n     *      name: string mandatory,\n     *      coordDim: string mandatory,\n     *      coordDimIndex: number mandatory,\n     *      type: string optional,\n     *      tooltipName: string optional,\n     *      otherDims: {\n     *          tooltip: number optional,\n     *          label: number optional\n     *      },\n     *      isExtraCoord: boolean true or undefined.\n     *      other props ...\n     * }]\n     */\n    function completeDimensions(sysDims, data, opt) {\n        data = data || [];\n        opt = opt || {};\n        sysDims = (sysDims || []).slice();\n        var dimsDef = (opt.dimsDef || []).slice();\n        var encodeDef = zrUtil.createHashMap(opt.encodeDef);\n        var dataDimNameMap = zrUtil.createHashMap();\n        var coordDimNameMap = zrUtil.createHashMap();\n        // var valueCandidate;\n        var result = [];\n\n        var dimCount = opt.dimCount;\n        if (dimCount == null) {\n            var value0 = retrieveValue(data[0]);\n            dimCount = Math.max(\n                zrUtil.isArray(value0) && value0.length || 1,\n                sysDims.length,\n                dimsDef.length\n            );\n            each(sysDims, function (sysDimItem) {\n                var sysDimItemDimsDef = sysDimItem.dimsDef;\n                sysDimItemDimsDef && (dimCount = Math.max(dimCount, sysDimItemDimsDef.length));\n            });\n        }\n\n        // Apply user defined dims (`name` and `type`) and init result.\n        for (var i = 0; i < dimCount; i++) {\n            var dimDefItem = isString(dimsDef[i]) ? {name: dimsDef[i]} : (dimsDef[i] || {});\n            var userDimName = dimDefItem.name;\n            var resultItem = result[i] = {otherDims: {}};\n            // Name will be applied later for avoiding duplication.\n            if (userDimName != null && dataDimNameMap.get(userDimName) == null) {\n                // Only if `series.dimensions` is defined in option, tooltipName\n                // will be set, and dimension will be diplayed vertically in\n                // tooltip by default.\n                resultItem.name = resultItem.tooltipName = userDimName;\n                dataDimNameMap.set(userDimName, i);\n            }\n            dimDefItem.type != null && (resultItem.type = dimDefItem.type);\n        }\n\n        // Set `coordDim` and `coordDimIndex` by `encodeDef` and normalize `encodeDef`.\n        encodeDef.each(function (dataDims, coordDim) {\n            dataDims = encodeDef.set(coordDim, normalizeToArray(dataDims).slice());\n            each(dataDims, function (resultDimIdx, coordDimIndex) {\n                // The input resultDimIdx can be dim name or index.\n                isString(resultDimIdx) && (resultDimIdx = dataDimNameMap.get(resultDimIdx));\n                if (resultDimIdx != null && resultDimIdx < dimCount) {\n                    dataDims[coordDimIndex] = resultDimIdx;\n                    applyDim(result[resultDimIdx], coordDim, coordDimIndex);\n                    // coordDim === 'value' && valueCandidate == null && (valueCandidate = resultDimIdx);\n                }\n            });\n        });\n\n        // Apply templetes and default order from `sysDims`.\n        var availDimIdx = 0;\n        each(sysDims, function (sysDimItem, sysDimIndex) {\n            var coordDim;\n            var sysDimItem;\n            var sysDimItemDimsDef;\n            var sysDimItemOtherDims;\n            if (isString(sysDimItem)) {\n                coordDim = sysDimItem;\n                sysDimItem = {};\n            }\n            else {\n                coordDim = sysDimItem.name;\n                sysDimItem = zrUtil.clone(sysDimItem);\n                // `coordDimIndex` should not be set directly.\n                sysDimItemDimsDef = sysDimItem.dimsDef;\n                sysDimItemOtherDims = sysDimItem.otherDims;\n                sysDimItem.name = sysDimItem.coordDim = sysDimItem.coordDimIndex\n                    = sysDimItem.dimsDef = sysDimItem.otherDims = null;\n            }\n\n            var dataDims = normalizeToArray(encodeDef.get(coordDim));\n            // dimensions provides default dim sequences.\n            if (!dataDims.length) {\n                for (var i = 0; i < (sysDimItemDimsDef && sysDimItemDimsDef.length || 1); i++) {\n                    while (availDimIdx < result.length && result[availDimIdx].coordDim != null) {\n                        availDimIdx++;\n                    }\n                    availDimIdx < result.length && dataDims.push(availDimIdx++);\n                }\n            }\n            // Apply templates.\n            each(dataDims, function (resultDimIdx, coordDimIndex) {\n                var resultItem = result[resultDimIdx];\n                applyDim(defaults(resultItem, sysDimItem), coordDim, coordDimIndex);\n                // coordDim === 'value' && valueCandidate == null && (valueCandidate = resultDimIdx);\n                if (resultItem.name == null && sysDimItemDimsDef) {\n                    resultItem.name = resultItem.tooltipName = sysDimItemDimsDef[coordDimIndex];\n                }\n                sysDimItemOtherDims && defaults(resultItem.otherDims, sysDimItemOtherDims);\n            });\n        });\n\n        // Make sure the first extra dim is 'value'.\n        var extra = opt.extraPrefix || 'value';\n\n        // Set dim `name` and other `coordDim` and other props.\n        for (var resultDimIdx = 0; resultDimIdx < dimCount; resultDimIdx++) {\n            var resultItem = result[resultDimIdx] = result[resultDimIdx] || {};\n            var coordDim = resultItem.coordDim;\n\n            coordDim == null && (\n                resultItem.coordDim = genName(extra, coordDimNameMap, opt.extraFromZero),\n                resultItem.coordDimIndex = 0,\n                resultItem.isExtraCoord = true\n            );\n\n            resultItem.name == null && (resultItem.name = genName(\n                // Ensure At least one value dim.\n                // (dataDimNameMap.get('value') == null\n                //     && (valueCandidate == null || valueCandidate === resultDimIdx)\n                //     // Try to set as 'value' only if coordDim is not set as 'extra'.\n                //     && coordDim == null\n                // )\n                // ? 'value'\n                // :\n                resultItem.coordDim,\n                dataDimNameMap\n            ));\n\n            resultItem.type == null && guessOrdinal(data, resultDimIdx)\n                && (resultItem.type = 'ordinal');\n        }\n\n        return result;\n\n        function applyDim(resultItem, coordDim, coordDimIndex) {\n            if (OTHER_DIMS[coordDim]) {\n                resultItem.otherDims[coordDim] = coordDimIndex;\n            }\n            else {\n                resultItem.coordDim = coordDim;\n                resultItem.coordDimIndex = coordDimIndex;\n                coordDimNameMap.set(coordDim, true);\n            }\n        }\n\n        function genName(name, map, fromZero) {\n            if (fromZero || map.get(name) != null) {\n                var i = 0;\n                while (map.get(name + i) != null) {\n                    i++;\n                }\n                name += i;\n            }\n            map.set(name, true);\n            return name;\n        }\n    }\n\n    // The rule should not be complex, otherwise user might not\n    // be able to known where the data is wrong.\n    var guessOrdinal = completeDimensions.guessOrdinal = function (data, dimIndex) {\n        for (var i = 0, len = data.length; i < len; i++) {\n            var value = retrieveValue(data[i]);\n\n            if (!zrUtil.isArray(value)) {\n                return false;\n            }\n\n            var value = value[dimIndex];\n            // Consider usage convenience, '1', '2' will be treated as \"number\".\n            if (value != null && isFinite(value)) {\n                return false;\n            }\n            else if (isString(value) && value !== '-') {\n                return true;\n            }\n        }\n        return false;\n    };\n\n    function retrieveValue(o) {\n        return zrUtil.isArray(o) ? o : zrUtil.isObject(o) ? o.value: o;\n    }\n\n    module.exports = completeDimensions;\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.6.1@echarts/lib/data/helper/completeDimensions.js\n// module id = Qajf\n// module chunks = 0 1","\n\n    var zrUtil = require('zrender/lib/core/util');\n    var Model = require('../../model/Model');\n    var each = zrUtil.each;\n    var curry = zrUtil.curry;\n\n    var helper = {};\n\n    // Build axisPointerModel, mergin tooltip.axisPointer model for each axis.\n    // allAxesInfo should be updated when setOption performed.\n    helper.collect = function (ecModel, api) {\n        var result = {\n            /**\n             * key: makeKey(axis.model)\n             * value: {\n             *      axis,\n             *      coordSys,\n             *      axisPointerModel,\n             *      triggerTooltip,\n             *      involveSeries,\n             *      snap,\n             *      seriesModels,\n             *      seriesDataCount\n             * }\n             */\n            axesInfo: {},\n            seriesInvolved: false,\n            /**\n             * key: makeKey(coordSys.model)\n             * value: Object: key makeKey(axis.model), value: axisInfo\n             */\n            coordSysAxesInfo: {},\n            coordSysMap: {}\n        };\n\n        collectAxesInfo(result, ecModel, api);\n\n        // Check seriesInvolved for performance, in case too many series in some chart.\n        result.seriesInvolved && collectSeriesInfo(result, ecModel);\n\n        return result;\n    };\n\n    function collectAxesInfo(result, ecModel, api) {\n        var globalTooltipModel = ecModel.getComponent('tooltip');\n        var globalAxisPointerModel = ecModel.getComponent('axisPointer');\n        // links can only be set on global.\n        var linksOption = globalAxisPointerModel.get('link', true) || [];\n        var linkGroups = [];\n\n        // Collect axes info.\n        each(api.getCoordinateSystems(), function (coordSys) {\n            // Some coordinate system do not support axes, like geo.\n            if (!coordSys.axisPointerEnabled) {\n                return;\n            }\n\n            var coordSysKey = makeKey(coordSys.model);\n            var axesInfoInCoordSys = result.coordSysAxesInfo[coordSysKey] = {};\n            result.coordSysMap[coordSysKey] = coordSys;\n\n            // Set tooltip (like 'cross') is a convienent way to show axisPointer\n            // for user. So we enable seting tooltip on coordSys model.\n            var coordSysModel = coordSys.model;\n            var baseTooltipModel = coordSysModel.getModel('tooltip', globalTooltipModel);\n\n            each(coordSys.getAxes(), curry(saveTooltipAxisInfo, false, null));\n\n            // If axis tooltip used, choose tooltip axis for each coordSys.\n            // Notice this case: coordSys is `grid` but not `cartesian2D` here.\n            if (coordSys.getTooltipAxes\n                && globalTooltipModel\n                // If tooltip.showContent is set as false, tooltip will not\n                // show but axisPointer will show as normal.\n                && baseTooltipModel.get('show')\n            ) {\n                // Compatible with previous logic. But series.tooltip.trigger: 'axis'\n                // or series.data[n].tooltip.trigger: 'axis' are not support any more.\n                var triggerAxis = baseTooltipModel.get('trigger') === 'axis';\n                var cross = baseTooltipModel.get('axisPointer.type') === 'cross';\n                var tooltipAxes = coordSys.getTooltipAxes(baseTooltipModel.get('axisPointer.axis'));\n                if (triggerAxis || cross) {\n                    each(tooltipAxes.baseAxes, curry(\n                        saveTooltipAxisInfo, cross ? 'cross' : true, triggerAxis\n                    ));\n                }\n                if (cross) {\n                    each(tooltipAxes.otherAxes, curry(saveTooltipAxisInfo, 'cross', false));\n                }\n            }\n\n            // fromTooltip: true | false | 'cross'\n            // triggerTooltip: true | false | null\n            function saveTooltipAxisInfo(fromTooltip, triggerTooltip, axis) {\n                var axisPointerModel = axis.model.getModel('axisPointer', globalAxisPointerModel);\n\n                var axisPointerShow = axisPointerModel.get('show');\n                if (!axisPointerShow || (\n                    axisPointerShow === 'auto'\n                    && !fromTooltip\n                    && !isHandleTrigger(axisPointerModel)\n                )) {\n                    return;\n                }\n\n                if (triggerTooltip == null) {\n                    triggerTooltip = axisPointerModel.get('triggerTooltip');\n                }\n\n                axisPointerModel = fromTooltip\n                    ? makeAxisPointerModel(\n                        axis, baseTooltipModel, globalAxisPointerModel, ecModel,\n                        fromTooltip, triggerTooltip\n                    )\n                    : axisPointerModel;\n\n                var snap = axisPointerModel.get('snap');\n                var key = makeKey(axis.model);\n                var involveSeries = triggerTooltip || snap || axis.type === 'category';\n\n                // If result.axesInfo[key] exist, override it (tooltip has higher priority).\n                var axisInfo = result.axesInfo[key] = {\n                    key: key,\n                    axis: axis,\n                    coordSys: coordSys,\n                    axisPointerModel: axisPointerModel,\n                    triggerTooltip: triggerTooltip,\n                    involveSeries: involveSeries,\n                    snap: snap,\n                    useHandle: isHandleTrigger(axisPointerModel),\n                    seriesModels: []\n                };\n                axesInfoInCoordSys[key] = axisInfo;\n                result.seriesInvolved |= involveSeries;\n\n                var groupIndex = getLinkGroupIndex(linksOption, axis);\n                if (groupIndex != null) {\n                    var linkGroup = linkGroups[groupIndex] || (linkGroups[groupIndex] = {axesInfo: {}});\n                    linkGroup.axesInfo[key] = axisInfo;\n                    linkGroup.mapper = linksOption[groupIndex].mapper;\n                    axisInfo.linkGroup = linkGroup;\n                }\n            }\n        });\n    }\n\n    function makeAxisPointerModel(\n        axis, baseTooltipModel, globalAxisPointerModel, ecModel, fromTooltip, triggerTooltip\n    ) {\n        var tooltipAxisPointerModel = baseTooltipModel.getModel('axisPointer');\n        var volatileOption = {};\n\n        each(\n            [\n                'type', 'snap', 'lineStyle', 'shadowStyle', 'label',\n                'animation', 'animationDurationUpdate', 'animationEasingUpdate', 'z'\n            ],\n            function (field) {\n                volatileOption[field] = zrUtil.clone(tooltipAxisPointerModel.get(field));\n            }\n        );\n\n        // category axis do not auto snap, otherwise some tick that do not\n        // has value can not be hovered. value/time/log axis default snap if\n        // triggered from tooltip and trigger tooltip.\n        volatileOption.snap = axis.type !== 'category' && !!triggerTooltip;\n\n        // Compatibel with previous behavior, tooltip axis do not show label by default.\n        // Only these properties can be overrided from tooltip to axisPointer.\n        if (tooltipAxisPointerModel.get('type') === 'cross') {\n            volatileOption.type = 'line';\n        }\n        var labelOption = volatileOption.label || (volatileOption.label = {});\n        // Follow the convention, do not show label when triggered by tooltip by default.\n        labelOption.show == null && (labelOption.show = false);\n\n        if (fromTooltip === 'cross') {\n            // When 'cross', both axes show labels.\n            labelOption.show = true;\n            // If triggerTooltip, this is a base axis, which should better not use cross style\n            // (cross style is dashed by default)\n            if (!triggerTooltip) {\n                var crossStyle = volatileOption.lineStyle = tooltipAxisPointerModel.get('crossStyle');\n                crossStyle && zrUtil.defaults(\n                    labelOption.textStyle || (labelOption.textStyle = {}),\n                    crossStyle.textStyle\n                );\n            }\n        }\n\n        return axis.model.getModel(\n            'axisPointer',\n            new Model(volatileOption, globalAxisPointerModel, ecModel)\n        );\n    }\n\n    function collectSeriesInfo(result, ecModel) {\n        // Prepare data for axis trigger\n        ecModel.eachSeries(function (seriesModel) {\n\n            // Notice this case: this coordSys is `cartesian2D` but not `grid`.\n            var coordSys = seriesModel.coordinateSystem;\n            var seriesTooltipTrigger = seriesModel.get('tooltip.trigger', true);\n            if (!coordSys\n                || seriesTooltipTrigger === 'none'\n                || seriesTooltipTrigger === false\n                || seriesTooltipTrigger === 'item'\n                || seriesModel.get('axisPointer.show', true) === false\n            ) {\n                return;\n            }\n\n            each(result.coordSysAxesInfo[makeKey(coordSys.model)], function (axisInfo) {\n                var axis = axisInfo.axis;\n                if (coordSys.getAxis(axis.dim) === axis) {\n                    axisInfo.seriesModels.push(seriesModel);\n                    axisInfo.seriesDataCount == null && (axisInfo.seriesDataCount = 0);\n                    axisInfo.seriesDataCount += seriesModel.getData().count();\n                }\n            });\n\n        }, this);\n    }\n\n    /**\n     * For example:\n     * {\n     *     axisPointer: {\n     *         links: [{\n     *             xAxisIndex: [2, 4],\n     *             yAxisIndex: 'all'\n     *         }, {\n     *             xAxisId: ['a5', 'a7'],\n     *             xAxisName: 'xxx'\n     *         }]\n     *     }\n     * }\n     */\n    function getLinkGroupIndex(linksOption, axis) {\n        var axisModel = axis.model;\n        var dim = axis.dim;\n        for (var i = 0; i < linksOption.length; i++) {\n            var linkOption = linksOption[i] || {};\n            if (checkPropInLink(linkOption[dim + 'AxisId'], axisModel.id)\n                || checkPropInLink(linkOption[dim + 'AxisIndex'], axisModel.componentIndex)\n                || checkPropInLink(linkOption[dim + 'AxisName'], axisModel.name)\n            ) {\n                return i;\n            }\n        }\n    }\n\n    function checkPropInLink(linkPropValue, axisPropValue) {\n        return linkPropValue === 'all'\n            || (zrUtil.isArray(linkPropValue) && zrUtil.indexOf(linkPropValue, axisPropValue) >= 0)\n            || linkPropValue === axisPropValue;\n    }\n\n    helper.fixValue = function (axisModel) {\n        var axisInfo = helper.getAxisInfo(axisModel);\n        if (!axisInfo) {\n            return;\n        }\n\n        var axisPointerModel = axisInfo.axisPointerModel;\n        var scale = axisInfo.axis.scale;\n        var option = axisPointerModel.option;\n        var status = axisPointerModel.get('status');\n        var value = axisPointerModel.get('value');\n\n        // Parse init value for category and time axis.\n        if (value != null) {\n            value = scale.parse(value);\n        }\n\n        var useHandle = isHandleTrigger(axisPointerModel);\n        // If `handle` used, `axisPointer` will always be displayed, so value\n        // and status should be initialized.\n        if (status == null) {\n            option.status = useHandle ? 'show' : 'hide';\n        }\n\n        var extent = scale.getExtent().slice();\n        extent[0] > extent[1] && extent.reverse();\n\n        if (// Pick a value on axis when initializing.\n            value == null\n            // If both `handle` and `dataZoom` are used, value may be out of axis extent,\n            // where we should re-pick a value to keep `handle` displaying normally.\n            || value > extent[1]\n        ) {\n            // Make handle displayed on the end of the axis when init, which looks better.\n            value = extent[1];\n        }\n        if (value < extent[0]) {\n            value = extent[0];\n        }\n\n        option.value = value;\n\n        if (useHandle) {\n            option.status = axisInfo.axis.scale.isBlank() ? 'hide' : 'show';\n        }\n    };\n\n    helper.getAxisInfo = function (axisModel) {\n        var coordSysAxesInfo = (axisModel.ecModel.getComponent('axisPointer') || {}).coordSysAxesInfo;\n        return coordSysAxesInfo && coordSysAxesInfo.axesInfo[makeKey(axisModel)];\n    };\n\n    helper.getAxisPointerModel = function (axisModel) {\n        var axisInfo = helper.getAxisInfo(axisModel);\n        return axisInfo && axisInfo.axisPointerModel;\n    };\n\n    function isHandleTrigger(axisPointerModel) {\n        return !!axisPointerModel.get('handle.show');\n    }\n\n    /**\n     * @param {module:echarts/model/Model} model\n     * @return {string} unique key\n     */\n    var makeKey = helper.makeKey = function (model) {\n        return model.type + '||' + model.id;\n    };\n\n    module.exports = helper;\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.6.1@echarts/lib/component/axisPointer/modelHelper.js\n// module id = Rj1V\n// module chunks = 0 1","\n\n    module.exports = require('./BaseBarSeries').extend({\n\n        type: 'series.bar',\n\n        dependencies: ['grid', 'polar'],\n\n        brushSelector: 'rect'\n    });\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.6.1@echarts/lib/chart/bar/BarSeries.js\n// module id = S+o0\n// module chunks = 0 1","'use strict';\n/**\n * Only implements needed gestures for mobile.\n */\n\n\n    var eventUtil = require('./event');\n\n    var GestureMgr = function () {\n\n        /**\n         * @private\n         * @type {Array.<Object>}\n         */\n        this._track = [];\n    };\n\n    GestureMgr.prototype = {\n\n        constructor: GestureMgr,\n\n        recognize: function (event, target, root) {\n            this._doTrack(event, target, root);\n            return this._recognize(event);\n        },\n\n        clear: function () {\n            this._track.length = 0;\n            return this;\n        },\n\n        _doTrack: function (event, target, root) {\n            var touches = event.touches;\n\n            if (!touches) {\n                return;\n            }\n\n            var trackItem = {\n                points: [],\n                touches: [],\n                target: target,\n                event: event\n            };\n\n            for (var i = 0, len = touches.length; i < len; i++) {\n                var touch = touches[i];\n                var pos = eventUtil.clientToLocal(root, touch, {});\n                trackItem.points.push([pos.zrX, pos.zrY]);\n                trackItem.touches.push(touch);\n            }\n\n            this._track.push(trackItem);\n        },\n\n        _recognize: function (event) {\n            for (var eventName in recognizers) {\n                if (recognizers.hasOwnProperty(eventName)) {\n                    var gestureInfo = recognizers[eventName](this._track, event);\n                    if (gestureInfo) {\n                        return gestureInfo;\n                    }\n                }\n            }\n        }\n    };\n\n    function dist(pointPair) {\n        var dx = pointPair[1][0] - pointPair[0][0];\n        var dy = pointPair[1][1] - pointPair[0][1];\n\n        return Math.sqrt(dx * dx + dy * dy);\n    }\n\n    function center(pointPair) {\n        return [\n            (pointPair[0][0] + pointPair[1][0]) / 2,\n            (pointPair[0][1] + pointPair[1][1]) / 2\n        ];\n    }\n\n    var recognizers = {\n\n        pinch: function (track, event) {\n            var trackLen = track.length;\n\n            if (!trackLen) {\n                return;\n            }\n\n            var pinchEnd = (track[trackLen - 1] || {}).points;\n            var pinchPre = (track[trackLen - 2] || {}).points || pinchEnd;\n\n            if (pinchPre\n                && pinchPre.length > 1\n                && pinchEnd\n                && pinchEnd.length > 1\n            ) {\n                var pinchScale = dist(pinchEnd) / dist(pinchPre);\n                !isFinite(pinchScale) && (pinchScale = 1);\n\n                event.pinchScale = pinchScale;\n\n                var pinchCenter = center(pinchEnd);\n                event.pinchX = pinchCenter[0];\n                event.pinchY = pinchCenter[1];\n\n                return {\n                    type: 'pinch',\n                    target: track[0].target,\n                    event: event\n                };\n            }\n        }\n\n        // Only pinch currently.\n    };\n\n    module.exports = GestureMgr;\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.5.1@zrender/lib/core/GestureMgr.js\n// module id = S2oc\n// module chunks = 0 1","\n\n    var axisDefault = require('./axisDefault');\n    var zrUtil = require('zrender/lib/core/util');\n    var ComponentModel = require('../model/Component');\n    var layout = require('../util/layout');\n\n    // FIXME axisType is fixed ?\n    var AXIS_TYPES = ['value', 'category', 'time', 'log'];\n\n    /**\n     * Generate sub axis model class\n     * @param {string} axisName 'x' 'y' 'radius' 'angle' 'parallel'\n     * @param {module:echarts/model/Component} BaseAxisModelClass\n     * @param {Function} axisTypeDefaulter\n     * @param {Object} [extraDefaultOption]\n     */\n    module.exports = function (axisName, BaseAxisModelClass, axisTypeDefaulter, extraDefaultOption) {\n\n        zrUtil.each(AXIS_TYPES, function (axisType) {\n\n            BaseAxisModelClass.extend({\n\n                type: axisName + 'Axis.' + axisType,\n\n                mergeDefaultAndTheme: function (option, ecModel) {\n                    var layoutMode = this.layoutMode;\n                    var inputPositionParams = layoutMode\n                        ? layout.getLayoutParams(option) : {};\n\n                    var themeModel = ecModel.getTheme();\n                    zrUtil.merge(option, themeModel.get(axisType + 'Axis'));\n                    zrUtil.merge(option, this.getDefaultOption());\n\n                    option.type = axisTypeDefaulter(axisName, option);\n\n                    if (layoutMode) {\n                        layout.mergeLayoutParam(option, inputPositionParams, layoutMode);\n                    }\n                },\n\n                defaultOption: zrUtil.mergeAll(\n                    [\n                        {},\n                        axisDefault[axisType + 'Axis'],\n                        extraDefaultOption\n                    ],\n                    true\n                )\n            });\n        });\n\n        ComponentModel.registerSubTypeDefaulter(\n            axisName + 'Axis',\n            zrUtil.curry(axisTypeDefaulter, axisName)\n        );\n    };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.6.1@echarts/lib/coord/axisModelCreator.js\n// module id = SAoR\n// module chunks = 0 1","/**\n * Data selectable mixin for chart series.\n * To eanble data select, option of series must have `selectedMode`.\n * And each data item will use `selected` to toggle itself selected status\n *\n * @module echarts/chart/helper/DataSelectable\n */\n\n\n    var zrUtil = require('zrender/lib/core/util');\n\n    module.exports = {\n\n        updateSelectedMap: function (targetList) {\n            this._selectTargetMap = zrUtil.reduce(targetList || [], function (targetMap, target) {\n                targetMap.set(target.name, target);\n                return targetMap;\n            }, zrUtil.createHashMap());\n        },\n        /**\n         * @param {string} name\n         */\n        // PENGING If selectedMode is null ?\n        select: function (name) {\n            var targetMap = this._selectTargetMap;\n            var target = targetMap.get(name);\n            var selectedMode = this.get('selectedMode');\n            if (selectedMode === 'single') {\n                targetMap.each(function (target) {\n                    target.selected = false;\n                });\n            }\n            target && (target.selected = true);\n        },\n\n        /**\n         * @param {string} name\n         */\n        unSelect: function (name) {\n            var target = this._selectTargetMap.get(name);\n            // var selectedMode = this.get('selectedMode');\n            // selectedMode !== 'single' && target && (target.selected = false);\n            target && (target.selected = false);\n        },\n\n        /**\n         * @param {string} name\n         */\n        toggleSelected: function (name) {\n            var target = this._selectTargetMap.get(name);\n            if (target != null) {\n                this[target.selected ? 'unSelect' : 'select'](name);\n                return target.selected;\n            }\n        },\n\n        /**\n         * @param {string} name\n         */\n        isSelected: function (name) {\n            var target = this._selectTargetMap.get(name);\n            return target && target.selected;\n        }\n    };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.6.1@echarts/lib/component/helper/selectableMixin.js\n// module id = SUqx\n// module chunks = 0 1","/**\n * @module echarts/component/toolbox/feature/DataView\n */\n\n\n\n    var zrUtil = require('zrender/lib/core/util');\n    var eventTool = require('zrender/lib/core/event');\n\n\n    var BLOCK_SPLITER = new Array(60).join('-');\n    var ITEM_SPLITER = '\\t';\n    /**\n     * Group series into two types\n     *  1. on category axis, like line, bar\n     *  2. others, like scatter, pie\n     * @param {module:echarts/model/Global} ecModel\n     * @return {Object}\n     * @inner\n     */\n    function groupSeries(ecModel) {\n        var seriesGroupByCategoryAxis = {};\n        var otherSeries = [];\n        var meta = [];\n        ecModel.eachRawSeries(function (seriesModel) {\n            var coordSys = seriesModel.coordinateSystem;\n\n            if (coordSys && (coordSys.type === 'cartesian2d' || coordSys.type === 'polar')) {\n                var baseAxis = coordSys.getBaseAxis();\n                if (baseAxis.type === 'category') {\n                    var key = baseAxis.dim + '_' + baseAxis.index;\n                    if (!seriesGroupByCategoryAxis[key]) {\n                        seriesGroupByCategoryAxis[key] = {\n                            categoryAxis: baseAxis,\n                            valueAxis: coordSys.getOtherAxis(baseAxis),\n                            series: []\n                        };\n                        meta.push({\n                            axisDim: baseAxis.dim,\n                            axisIndex: baseAxis.index\n                        });\n                    }\n                    seriesGroupByCategoryAxis[key].series.push(seriesModel);\n                }\n                else {\n                    otherSeries.push(seriesModel);\n                }\n            }\n            else {\n                otherSeries.push(seriesModel);\n            }\n        });\n\n        return {\n            seriesGroupByCategoryAxis: seriesGroupByCategoryAxis,\n            other: otherSeries,\n            meta: meta\n        };\n    }\n\n    /**\n     * Assemble content of series on cateogory axis\n     * @param {Array.<module:echarts/model/Series>} series\n     * @return {string}\n     * @inner\n     */\n    function assembleSeriesWithCategoryAxis(series) {\n        var tables = [];\n        zrUtil.each(series, function (group, key) {\n            var categoryAxis = group.categoryAxis;\n            var valueAxis = group.valueAxis;\n            var valueAxisDim = valueAxis.dim;\n\n            var headers = [' '].concat(zrUtil.map(group.series, function (series) {\n                return series.name;\n            }));\n            var columns = [categoryAxis.model.getCategories()];\n            zrUtil.each(group.series, function (series) {\n                columns.push(series.getRawData().mapArray(valueAxisDim, function (val) {\n                    return val;\n                }));\n            });\n            // Assemble table content\n            var lines = [headers.join(ITEM_SPLITER)];\n            for (var i = 0; i < columns[0].length; i++) {\n                var items = [];\n                for (var j = 0; j < columns.length; j++) {\n                    items.push(columns[j][i]);\n                }\n                lines.push(items.join(ITEM_SPLITER));\n            }\n            tables.push(lines.join('\\n'));\n        });\n        return tables.join('\\n\\n' +  BLOCK_SPLITER + '\\n\\n');\n    }\n\n    /**\n     * Assemble content of other series\n     * @param {Array.<module:echarts/model/Series>} series\n     * @return {string}\n     * @inner\n     */\n    function assembleOtherSeries(series) {\n        return zrUtil.map(series, function (series) {\n            var data = series.getRawData();\n            var lines = [series.name];\n            var vals = [];\n            data.each(data.dimensions, function () {\n                var argLen = arguments.length;\n                var dataIndex = arguments[argLen - 1];\n                var name = data.getName(dataIndex);\n                for (var i = 0; i < argLen - 1; i++) {\n                    vals[i] = arguments[i];\n                }\n                lines.push((name ? (name + ITEM_SPLITER) : '') + vals.join(ITEM_SPLITER));\n            });\n            return lines.join('\\n');\n        }).join('\\n\\n' + BLOCK_SPLITER + '\\n\\n');\n    }\n\n    /**\n     * @param {module:echarts/model/Global}\n     * @return {string}\n     * @inner\n     */\n    function getContentFromModel(ecModel) {\n\n        var result = groupSeries(ecModel);\n\n        return {\n            value: zrUtil.filter([\n                    assembleSeriesWithCategoryAxis(result.seriesGroupByCategoryAxis),\n                    assembleOtherSeries(result.other)\n                ], function (str) {\n                    return str.replace(/[\\n\\t\\s]/g, '');\n                }).join('\\n\\n' + BLOCK_SPLITER + '\\n\\n'),\n\n            meta: result.meta\n        };\n    }\n\n\n    function trim(str) {\n        return str.replace(/^\\s\\s*/, '').replace(/\\s\\s*$/, '');\n    }\n    /**\n     * If a block is tsv format\n     */\n    function isTSVFormat(block) {\n        // Simple method to find out if a block is tsv format\n        var firstLine = block.slice(0, block.indexOf('\\n'));\n        if (firstLine.indexOf(ITEM_SPLITER) >= 0) {\n            return true;\n        }\n    }\n\n    var itemSplitRegex = new RegExp('[' + ITEM_SPLITER + ']+', 'g');\n    /**\n     * @param {string} tsv\n     * @return {Array.<Object>}\n     */\n    function parseTSVContents(tsv) {\n        var tsvLines = tsv.split(/\\n+/g);\n        var headers = trim(tsvLines.shift()).split(itemSplitRegex);\n\n        var categories = [];\n        var series = zrUtil.map(headers, function (header) {\n            return {\n                name: header,\n                data: []\n            };\n        });\n        for (var i = 0; i < tsvLines.length; i++) {\n            var items = trim(tsvLines[i]).split(itemSplitRegex);\n            categories.push(items.shift());\n            for (var j = 0; j < items.length; j++) {\n                series[j] && (series[j].data[i] = items[j]);\n            }\n        }\n        return {\n            series: series,\n            categories: categories\n        };\n    }\n\n    /**\n     * @param {string} str\n     * @return {Array.<Object>}\n     * @inner\n     */\n    function parseListContents(str) {\n        var lines = str.split(/\\n+/g);\n        var seriesName = trim(lines.shift());\n\n        var data = [];\n        for (var i = 0; i < lines.length; i++) {\n            var items = trim(lines[i]).split(itemSplitRegex);\n            var name = '';\n            var value;\n            var hasName = false;\n            if (isNaN(items[0])) { // First item is name\n                hasName = true;\n                name = items[0];\n                items = items.slice(1);\n                data[i] = {\n                    name: name,\n                    value: []\n                };\n                value = data[i].value;\n            }\n            else {\n                value = data[i] = [];\n            }\n            for (var j = 0; j < items.length; j++) {\n                value.push(+items[j]);\n            }\n            if (value.length === 1) {\n                hasName ? (data[i].value = value[0]) : (data[i] = value[0]);\n            }\n        }\n\n        return {\n            name: seriesName,\n            data: data\n        };\n    }\n\n    /**\n     * @param {string} str\n     * @param {Array.<Object>} blockMetaList\n     * @return {Object}\n     * @inner\n     */\n    function parseContents(str, blockMetaList) {\n        var blocks = str.split(new RegExp('\\n*' + BLOCK_SPLITER + '\\n*', 'g'));\n        var newOption = {\n            series: []\n        };\n        zrUtil.each(blocks, function (block, idx) {\n            if (isTSVFormat(block)) {\n                var result = parseTSVContents(block);\n                var blockMeta = blockMetaList[idx];\n                var axisKey = blockMeta.axisDim + 'Axis';\n\n                if (blockMeta) {\n                    newOption[axisKey] = newOption[axisKey] || [];\n                    newOption[axisKey][blockMeta.axisIndex] = {\n                        data: result.categories\n                    };\n                    newOption.series = newOption.series.concat(result.series);\n                }\n            }\n            else {\n                var result = parseListContents(block);\n                newOption.series.push(result);\n            }\n        });\n        return newOption;\n    }\n\n    /**\n     * @alias {module:echarts/component/toolbox/feature/DataView}\n     * @constructor\n     * @param {module:echarts/model/Model} model\n     */\n    function DataView(model) {\n\n        this._dom = null;\n\n        this.model = model;\n    }\n\n    DataView.defaultOption = {\n        show: true,\n        readOnly: false,\n        optionToContent: null,\n        contentToOption: null,\n\n        icon: 'M17.5,17.3H33 M17.5,17.3H33 M45.4,29.5h-28 M11.5,2v56H51V14.8L38.4,2H11.5z M38.4,2.2v12.7H51 M45.4,41.7h-28',\n        title: '数据视图',\n        lang: ['数据视图', '关闭', '刷新'],\n        backgroundColor: '#fff',\n        textColor: '#000',\n        textareaColor: '#fff',\n        textareaBorderColor: '#333',\n        buttonColor: '#c23531',\n        buttonTextColor: '#fff'\n    };\n\n    DataView.prototype.onclick = function (ecModel, api) {\n        var container = api.getDom();\n        var model = this.model;\n        if (this._dom) {\n            container.removeChild(this._dom);\n        }\n        var root = document.createElement('div');\n        root.style.cssText = 'position:absolute;left:5px;top:5px;bottom:5px;right:5px;';\n        root.style.backgroundColor = model.get('backgroundColor') || '#fff';\n\n        // Create elements\n        var header = document.createElement('h4');\n        var lang = model.get('lang') || [];\n        header.innerHTML = lang[0] || model.get('title');\n        header.style.cssText = 'margin: 10px 20px;';\n        header.style.color = model.get('textColor');\n\n        var viewMain = document.createElement('div');\n        var textarea = document.createElement('textarea');\n        viewMain.style.cssText = 'display:block;width:100%;overflow:auto;';\n\n        var optionToContent = model.get('optionToContent');\n        var contentToOption = model.get('contentToOption');\n        var result = getContentFromModel(ecModel);\n        if (typeof optionToContent === 'function') {\n            var htmlOrDom = optionToContent(api.getOption());\n            if (typeof htmlOrDom === 'string') {\n                viewMain.innerHTML = htmlOrDom;\n            }\n            else if (zrUtil.isDom(htmlOrDom)) {\n                viewMain.appendChild(htmlOrDom);\n            }\n        }\n        else {\n            // Use default textarea\n            viewMain.appendChild(textarea);\n            textarea.readOnly = model.get('readOnly');\n            textarea.style.cssText = 'width:100%;height:100%;font-family:monospace;font-size:14px;line-height:1.6rem;';\n            textarea.style.color = model.get('textColor');\n            textarea.style.borderColor = model.get('textareaBorderColor');\n            textarea.style.backgroundColor = model.get('textareaColor');\n            textarea.value = result.value;\n        }\n\n        var blockMetaList = result.meta;\n\n        var buttonContainer = document.createElement('div');\n        buttonContainer.style.cssText = 'position:absolute;bottom:0;left:0;right:0;';\n\n        var buttonStyle = 'float:right;margin-right:20px;border:none;'\n            + 'cursor:pointer;padding:2px 5px;font-size:12px;border-radius:3px';\n        var closeButton = document.createElement('div');\n        var refreshButton = document.createElement('div');\n\n        buttonStyle += ';background-color:' + model.get('buttonColor');\n        buttonStyle += ';color:' + model.get('buttonTextColor');\n\n        var self = this;\n\n        function close() {\n            container.removeChild(root);\n            self._dom = null;\n        }\n        eventTool.addEventListener(closeButton, 'click', close);\n\n        eventTool.addEventListener(refreshButton, 'click', function () {\n            var newOption;\n            try {\n                if (typeof contentToOption === 'function') {\n                    newOption = contentToOption(viewMain, api.getOption());\n                }\n                else {\n                    newOption = parseContents(textarea.value, blockMetaList);\n                }\n            }\n            catch (e) {\n                close();\n                throw new Error('Data view format error ' + e);\n            }\n            if (newOption) {\n                api.dispatchAction({\n                    type: 'changeDataView',\n                    newOption: newOption\n                });\n            }\n\n            close();\n        });\n\n        closeButton.innerHTML = lang[1];\n        refreshButton.innerHTML = lang[2];\n        refreshButton.style.cssText = buttonStyle;\n        closeButton.style.cssText = buttonStyle;\n\n        !model.get('readOnly') && buttonContainer.appendChild(refreshButton);\n        buttonContainer.appendChild(closeButton);\n\n        // http://stackoverflow.com/questions/6637341/use-tab-to-indent-in-textarea\n        eventTool.addEventListener(textarea, 'keydown', function (e) {\n            if ((e.keyCode || e.which) === 9) {\n                // get caret position/selection\n                var val = this.value;\n                var start = this.selectionStart;\n                var end = this.selectionEnd;\n\n                // set textarea value to: text before caret + tab + text after caret\n                this.value = val.substring(0, start) + ITEM_SPLITER + val.substring(end);\n\n                // put caret at right position again\n                this.selectionStart = this.selectionEnd = start + 1;\n\n                // prevent the focus lose\n                eventTool.stop(e);\n            }\n        });\n\n        root.appendChild(header);\n        root.appendChild(viewMain);\n        root.appendChild(buttonContainer);\n\n        viewMain.style.height = (container.clientHeight - 80) + 'px';\n\n        container.appendChild(root);\n        this._dom = root;\n    };\n\n    DataView.prototype.remove = function (ecModel, api) {\n        this._dom && api.getDom().removeChild(this._dom);\n    };\n\n    DataView.prototype.dispose = function (ecModel, api) {\n        this.remove(ecModel, api);\n    };\n\n    /**\n     * @inner\n     */\n    function tryMergeDataOption(newData, originalData) {\n        return zrUtil.map(newData, function (newVal, idx) {\n            var original = originalData && originalData[idx];\n            if (zrUtil.isObject(original) && !zrUtil.isArray(original)) {\n                if (zrUtil.isObject(newVal) && !zrUtil.isArray(newVal)) {\n                    newVal = newVal.value;\n                }\n                // Original data has option\n                return zrUtil.defaults({\n                    value: newVal\n                }, original);\n            }\n            else {\n                return newVal;\n            }\n        });\n    }\n\n    require('../featureManager').register('dataView', DataView);\n\n    require('../../../echarts').registerAction({\n        type: 'changeDataView',\n        event: 'dataViewChanged',\n        update: 'prepareAndUpdate'\n    }, function (payload, ecModel) {\n        var newSeriesOptList = [];\n        zrUtil.each(payload.newOption.series, function (seriesOpt) {\n            var seriesModel = ecModel.getSeriesByName(seriesOpt.name)[0];\n            if (!seriesModel) {\n                // New created series\n                // Geuss the series type\n                newSeriesOptList.push(zrUtil.extend({\n                    // Default is scatter\n                    type: 'scatter'\n                }, seriesOpt));\n            }\n            else {\n                var originalData = seriesModel.get('data');\n                newSeriesOptList.push({\n                    name: seriesOpt.name,\n                    data: tryMergeDataOption(seriesOpt.data, originalData)\n                });\n            }\n        });\n\n        ecModel.mergeOption(zrUtil.defaults({\n            series: newSeriesOptList\n        }, payload.newOption));\n    });\n\n    module.exports = DataView;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.6.1@echarts/lib/component/toolbox/feature/DataView.js\n// module id = SZ7R\n// module chunks = 0 1","\n    var Gradient = require('zrender/lib/graphic/Gradient');\n    module.exports = function (ecModel) {\n        function encodeColor(seriesModel) {\n            var colorAccessPath = (seriesModel.visualColorAccessPath || 'itemStyle.normal.color').split('.');\n            var data = seriesModel.getData();\n            var color = seriesModel.get(colorAccessPath) // Set in itemStyle\n                || seriesModel.getColorFromPalette(seriesModel.get('name'));  // Default color\n\n            // FIXME Set color function or use the platte color\n            data.setVisual('color', color);\n\n            // Only visible series has each data be visual encoded\n            if (!ecModel.isSeriesFiltered(seriesModel)) {\n                if (typeof color === 'function' && !(color instanceof Gradient)) {\n                    data.each(function (idx) {\n                        data.setItemVisual(\n                            idx, 'color', color(seriesModel.getDataParams(idx))\n                        );\n                    });\n                }\n\n                // itemStyle in each data item\n                data.each(function (idx) {\n                    var itemModel = data.getItemModel(idx);\n                    var color = itemModel.get(colorAccessPath, true);\n                    if (color != null) {\n                        data.setItemVisual(idx, 'color', color);\n                    }\n                });\n            }\n        }\n        ecModel.eachRawSeries(encodeColor);\n    };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.6.1@echarts/lib/visual/seriesColor.js\n// module id = T3k4\n// module chunks = 0 1","// https://github.com/mziccard/node-timsort\n\n    var DEFAULT_MIN_MERGE = 32;\n\n    var DEFAULT_MIN_GALLOPING = 7;\n\n    var DEFAULT_TMP_STORAGE_LENGTH = 256;\n\n    function minRunLength(n) {\n        var r = 0;\n\n        while (n >= DEFAULT_MIN_MERGE) {\n            r |= n & 1;\n            n >>= 1;\n        }\n\n        return n + r;\n    }\n\n    function makeAscendingRun(array, lo, hi, compare) {\n        var runHi = lo + 1;\n\n        if (runHi === hi) {\n            return 1;\n        }\n\n        if (compare(array[runHi++], array[lo]) < 0) {\n            while (runHi < hi && compare(array[runHi], array[runHi - 1]) < 0) {\n                runHi++;\n            }\n\n            reverseRun(array, lo, runHi);\n        }\n        else {\n            while (runHi < hi && compare(array[runHi], array[runHi - 1]) >= 0) {\n                runHi++;\n            }\n        }\n\n        return runHi - lo;\n    }\n\n    function reverseRun(array, lo, hi) {\n        hi--;\n\n        while (lo < hi) {\n            var t = array[lo];\n            array[lo++] = array[hi];\n            array[hi--] = t;\n        }\n    }\n\n    function binaryInsertionSort(array, lo, hi, start, compare) {\n        if (start === lo) {\n            start++;\n        }\n\n        for (; start < hi; start++) {\n            var pivot = array[start];\n\n            var left = lo;\n            var right = start;\n            var mid;\n\n            while (left < right) {\n                mid = left + right >>> 1;\n\n                if (compare(pivot, array[mid]) < 0) {\n                    right = mid;\n                }\n                else {\n                    left = mid + 1;\n                }\n            }\n\n            var n = start - left;\n\n            switch (n) {\n                case 3:\n                    array[left + 3] = array[left + 2];\n\n                case 2:\n                    array[left + 2] = array[left + 1];\n\n                case 1:\n                    array[left + 1] = array[left];\n                    break;\n                default:\n                    while (n > 0) {\n                        array[left + n] = array[left + n - 1];\n                        n--;\n                    }\n            }\n\n            array[left] = pivot;\n        }\n    }\n\n    function gallopLeft(value, array, start, length, hint, compare) {\n        var lastOffset = 0;\n        var maxOffset = 0;\n        var offset = 1;\n\n        if (compare(value, array[start + hint]) > 0) {\n            maxOffset = length - hint;\n\n            while (offset < maxOffset && compare(value, array[start + hint + offset]) > 0) {\n                lastOffset = offset;\n                offset = (offset << 1) + 1;\n\n                if (offset <= 0) {\n                    offset = maxOffset;\n                }\n            }\n\n            if (offset > maxOffset) {\n                offset = maxOffset;\n            }\n\n            lastOffset += hint;\n            offset += hint;\n        }\n        else {\n            maxOffset = hint + 1;\n            while (offset < maxOffset && compare(value, array[start + hint - offset]) <= 0) {\n                lastOffset = offset;\n                offset = (offset << 1) + 1;\n\n                if (offset <= 0) {\n                    offset = maxOffset;\n                }\n            }\n            if (offset > maxOffset) {\n                offset = maxOffset;\n            }\n\n            var tmp = lastOffset;\n            lastOffset = hint - offset;\n            offset = hint - tmp;\n        }\n\n        lastOffset++;\n        while (lastOffset < offset) {\n            var m = lastOffset + (offset - lastOffset >>> 1);\n\n            if (compare(value, array[start + m]) > 0) {\n                lastOffset = m + 1;\n            }\n            else {\n                offset = m;\n            }\n        }\n        return offset;\n    }\n\n    function gallopRight(value, array, start, length, hint, compare) {\n        var lastOffset = 0;\n        var maxOffset = 0;\n        var offset = 1;\n\n        if (compare(value, array[start + hint]) < 0) {\n            maxOffset = hint + 1;\n\n            while (offset < maxOffset && compare(value, array[start + hint - offset]) < 0) {\n                lastOffset = offset;\n                offset = (offset << 1) + 1;\n\n                if (offset <= 0) {\n                    offset = maxOffset;\n                }\n            }\n\n            if (offset > maxOffset) {\n                offset = maxOffset;\n            }\n\n            var tmp = lastOffset;\n            lastOffset = hint - offset;\n            offset = hint - tmp;\n        }\n        else {\n            maxOffset = length - hint;\n\n            while (offset < maxOffset && compare(value, array[start + hint + offset]) >= 0) {\n                lastOffset = offset;\n                offset = (offset << 1) + 1;\n\n                if (offset <= 0) {\n                    offset = maxOffset;\n                }\n            }\n\n            if (offset > maxOffset) {\n                offset = maxOffset;\n            }\n\n            lastOffset += hint;\n            offset += hint;\n        }\n\n        lastOffset++;\n\n        while (lastOffset < offset) {\n            var m = lastOffset + (offset - lastOffset >>> 1);\n\n            if (compare(value, array[start + m]) < 0) {\n                offset = m;\n            }\n            else {\n                lastOffset = m + 1;\n            }\n        }\n\n        return offset;\n    }\n\n    function TimSort(array, compare) {\n        var minGallop = DEFAULT_MIN_GALLOPING;\n        var length = 0;\n        var tmpStorageLength = DEFAULT_TMP_STORAGE_LENGTH;\n        var stackLength = 0;\n        var runStart;\n        var runLength;\n        var stackSize = 0;\n\n        length = array.length;\n\n        if (length < 2 * DEFAULT_TMP_STORAGE_LENGTH) {\n            tmpStorageLength = length >>> 1;\n        }\n\n        var tmp = [];\n\n        stackLength = length < 120 ? 5 : length < 1542 ? 10 : length < 119151 ? 19 : 40;\n\n        runStart = [];\n        runLength = [];\n\n        function pushRun(_runStart, _runLength) {\n            runStart[stackSize] = _runStart;\n            runLength[stackSize] = _runLength;\n            stackSize += 1;\n        }\n\n        function mergeRuns() {\n            while (stackSize > 1) {\n                var n = stackSize - 2;\n\n                if (n >= 1 && runLength[n - 1] <= runLength[n] + runLength[n + 1] || n >= 2 && runLength[n - 2] <= runLength[n] + runLength[n - 1]) {\n                    if (runLength[n - 1] < runLength[n + 1]) {\n                        n--;\n                    }\n                }\n                else if (runLength[n] > runLength[n + 1]) {\n                    break;\n                }\n                mergeAt(n);\n            }\n        }\n\n        function forceMergeRuns() {\n            while (stackSize > 1) {\n                var n = stackSize - 2;\n\n                if (n > 0 && runLength[n - 1] < runLength[n + 1]) {\n                    n--;\n                }\n\n                mergeAt(n);\n            }\n        }\n\n        function mergeAt(i) {\n            var start1 = runStart[i];\n            var length1 = runLength[i];\n            var start2 = runStart[i + 1];\n            var length2 = runLength[i + 1];\n\n            runLength[i] = length1 + length2;\n\n            if (i === stackSize - 3) {\n                runStart[i + 1] = runStart[i + 2];\n                runLength[i + 1] = runLength[i + 2];\n            }\n\n            stackSize--;\n\n            var k = gallopRight(array[start2], array, start1, length1, 0, compare);\n            start1 += k;\n            length1 -= k;\n\n            if (length1 === 0) {\n                return;\n            }\n\n            length2 = gallopLeft(array[start1 + length1 - 1], array, start2, length2, length2 - 1, compare);\n\n            if (length2 === 0) {\n                return;\n            }\n\n            if (length1 <= length2) {\n                mergeLow(start1, length1, start2, length2);\n            }\n            else {\n                mergeHigh(start1, length1, start2, length2);\n            }\n        }\n\n        function mergeLow(start1, length1, start2, length2) {\n            var i = 0;\n\n            for (i = 0; i < length1; i++) {\n                tmp[i] = array[start1 + i];\n            }\n\n            var cursor1 = 0;\n            var cursor2 = start2;\n            var dest = start1;\n\n            array[dest++] = array[cursor2++];\n\n            if (--length2 === 0) {\n                for (i = 0; i < length1; i++) {\n                    array[dest + i] = tmp[cursor1 + i];\n                }\n                return;\n            }\n\n            if (length1 === 1) {\n                for (i = 0; i < length2; i++) {\n                    array[dest + i] = array[cursor2 + i];\n                }\n                array[dest + length2] = tmp[cursor1];\n                return;\n            }\n\n            var _minGallop = minGallop;\n            var count1, count2, exit;\n\n            while (1) {\n                count1 = 0;\n                count2 = 0;\n                exit = false;\n\n                do {\n                    if (compare(array[cursor2], tmp[cursor1]) < 0) {\n                        array[dest++] = array[cursor2++];\n                        count2++;\n                        count1 = 0;\n\n                        if (--length2 === 0) {\n                            exit = true;\n                            break;\n                        }\n                    }\n                    else {\n                        array[dest++] = tmp[cursor1++];\n                        count1++;\n                        count2 = 0;\n                        if (--length1 === 1) {\n                            exit = true;\n                            break;\n                        }\n                    }\n                } while ((count1 | count2) < _minGallop);\n\n                if (exit) {\n                    break;\n                }\n\n                do {\n                    count1 = gallopRight(array[cursor2], tmp, cursor1, length1, 0, compare);\n\n                    if (count1 !== 0) {\n                        for (i = 0; i < count1; i++) {\n                            array[dest + i] = tmp[cursor1 + i];\n                        }\n\n                        dest += count1;\n                        cursor1 += count1;\n                        length1 -= count1;\n                        if (length1 <= 1) {\n                            exit = true;\n                            break;\n                        }\n                    }\n\n                    array[dest++] = array[cursor2++];\n\n                    if (--length2 === 0) {\n                        exit = true;\n                        break;\n                    }\n\n                    count2 = gallopLeft(tmp[cursor1], array, cursor2, length2, 0, compare);\n\n                    if (count2 !== 0) {\n                        for (i = 0; i < count2; i++) {\n                            array[dest + i] = array[cursor2 + i];\n                        }\n\n                        dest += count2;\n                        cursor2 += count2;\n                        length2 -= count2;\n\n                        if (length2 === 0) {\n                            exit = true;\n                            break;\n                        }\n                    }\n                    array[dest++] = tmp[cursor1++];\n\n                    if (--length1 === 1) {\n                        exit = true;\n                        break;\n                    }\n\n                    _minGallop--;\n                } while (count1 >= DEFAULT_MIN_GALLOPING || count2 >= DEFAULT_MIN_GALLOPING);\n\n                if (exit) {\n                    break;\n                }\n\n                if (_minGallop < 0) {\n                    _minGallop = 0;\n                }\n\n                _minGallop += 2;\n            }\n\n            minGallop = _minGallop;\n\n            minGallop < 1 && (minGallop = 1);\n\n            if (length1 === 1) {\n                for (i = 0; i < length2; i++) {\n                    array[dest + i] = array[cursor2 + i];\n                }\n                array[dest + length2] = tmp[cursor1];\n            }\n            else if (length1 === 0) {\n                throw new Error();\n                // throw new Error('mergeLow preconditions were not respected');\n            }\n            else {\n                for (i = 0; i < length1; i++) {\n                    array[dest + i] = tmp[cursor1 + i];\n                }\n            }\n        }\n\n        function mergeHigh (start1, length1, start2, length2) {\n            var i = 0;\n\n            for (i = 0; i < length2; i++) {\n                tmp[i] = array[start2 + i];\n            }\n\n            var cursor1 = start1 + length1 - 1;\n            var cursor2 = length2 - 1;\n            var dest = start2 + length2 - 1;\n            var customCursor = 0;\n            var customDest = 0;\n\n            array[dest--] = array[cursor1--];\n\n            if (--length1 === 0) {\n                customCursor = dest - (length2 - 1);\n\n                for (i = 0; i < length2; i++) {\n                    array[customCursor + i] = tmp[i];\n                }\n\n                return;\n            }\n\n            if (length2 === 1) {\n                dest -= length1;\n                cursor1 -= length1;\n                customDest = dest + 1;\n                customCursor = cursor1 + 1;\n\n                for (i = length1 - 1; i >= 0; i--) {\n                    array[customDest + i] = array[customCursor + i];\n                }\n\n                array[dest] = tmp[cursor2];\n                return;\n            }\n\n            var _minGallop = minGallop;\n\n            while (true) {\n                var count1 = 0;\n                var count2 = 0;\n                var exit = false;\n\n                do {\n                    if (compare(tmp[cursor2], array[cursor1]) < 0) {\n                        array[dest--] = array[cursor1--];\n                        count1++;\n                        count2 = 0;\n                        if (--length1 === 0) {\n                            exit = true;\n                            break;\n                        }\n                    }\n                    else {\n                        array[dest--] = tmp[cursor2--];\n                        count2++;\n                        count1 = 0;\n                        if (--length2 === 1) {\n                            exit = true;\n                            break;\n                        }\n                    }\n                } while ((count1 | count2) < _minGallop);\n\n                if (exit) {\n                    break;\n                }\n\n                do {\n                    count1 = length1 - gallopRight(tmp[cursor2], array, start1, length1, length1 - 1, compare);\n\n                    if (count1 !== 0) {\n                        dest -= count1;\n                        cursor1 -= count1;\n                        length1 -= count1;\n                        customDest = dest + 1;\n                        customCursor = cursor1 + 1;\n\n                        for (i = count1 - 1; i >= 0; i--) {\n                            array[customDest + i] = array[customCursor + i];\n                        }\n\n                        if (length1 === 0) {\n                            exit = true;\n                            break;\n                        }\n                    }\n\n                    array[dest--] = tmp[cursor2--];\n\n                    if (--length2 === 1) {\n                        exit = true;\n                        break;\n                    }\n\n                    count2 = length2 - gallopLeft(array[cursor1], tmp, 0, length2, length2 - 1, compare);\n\n                    if (count2 !== 0) {\n                        dest -= count2;\n                        cursor2 -= count2;\n                        length2 -= count2;\n                        customDest = dest + 1;\n                        customCursor = cursor2 + 1;\n\n                        for (i = 0; i < count2; i++) {\n                            array[customDest + i] = tmp[customCursor + i];\n                        }\n\n                        if (length2 <= 1) {\n                            exit = true;\n                            break;\n                        }\n                    }\n\n                    array[dest--] = array[cursor1--];\n\n                    if (--length1 === 0) {\n                        exit = true;\n                        break;\n                    }\n\n                    _minGallop--;\n                } while (count1 >= DEFAULT_MIN_GALLOPING || count2 >= DEFAULT_MIN_GALLOPING);\n\n                if (exit) {\n                    break;\n                }\n\n                if (_minGallop < 0) {\n                    _minGallop = 0;\n                }\n\n                _minGallop += 2;\n            }\n\n            minGallop = _minGallop;\n\n            if (minGallop < 1) {\n                minGallop = 1;\n            }\n\n            if (length2 === 1) {\n                dest -= length1;\n                cursor1 -= length1;\n                customDest = dest + 1;\n                customCursor = cursor1 + 1;\n\n                for (i = length1 - 1; i >= 0; i--) {\n                    array[customDest + i] = array[customCursor + i];\n                }\n\n                array[dest] = tmp[cursor2];\n            }\n            else if (length2 === 0) {\n                throw new Error();\n                // throw new Error('mergeHigh preconditions were not respected');\n            }\n            else {\n                customCursor = dest - (length2 - 1);\n                for (i = 0; i < length2; i++) {\n                    array[customCursor + i] = tmp[i];\n                }\n            }\n        }\n\n        this.mergeRuns = mergeRuns;\n        this.forceMergeRuns = forceMergeRuns;\n        this.pushRun = pushRun;\n    }\n\n    function sort(array, compare, lo, hi) {\n        if (!lo) {\n            lo = 0;\n        }\n        if (!hi) {\n            hi = array.length;\n        }\n\n        var remaining = hi - lo;\n\n        if (remaining < 2) {\n            return;\n        }\n\n        var runLength = 0;\n\n        if (remaining < DEFAULT_MIN_MERGE) {\n            runLength = makeAscendingRun(array, lo, hi, compare);\n            binaryInsertionSort(array, lo, hi, lo + runLength, compare);\n            return;\n        }\n\n        var ts = new TimSort(array, compare);\n\n        var minRun = minRunLength(remaining);\n\n        do {\n            runLength = makeAscendingRun(array, lo, hi, compare);\n            if (runLength < minRun) {\n                var force = remaining;\n                if (force > minRun) {\n                    force = minRun;\n                }\n\n                binaryInsertionSort(array, lo, lo + force, lo + runLength, compare);\n                runLength = force;\n            }\n\n            ts.pushRun(lo, runLength);\n            ts.mergeRuns();\n\n            remaining -= runLength;\n            lo += runLength;\n        } while (remaining !== 0);\n\n        ts.forceMergeRuns();\n    }\n\n    module.exports = sort;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.5.1@zrender/lib/core/timsort.js\n// module id = TQiH\n// module chunks = 0 1","/**\n * // Scale class management\n * @module echarts/scale/Scale\n */\n\n\n    var clazzUtil = require('../util/clazz');\n\n    /**\n     * @param {Object} [setting]\n     */\n    function Scale(setting) {\n        this._setting = setting || {};\n\n        /**\n         * Extent\n         * @type {Array.<number>}\n         * @protected\n         */\n        this._extent = [Infinity, -Infinity];\n\n        /**\n         * Step is calculated in adjustExtent\n         * @type {Array.<number>}\n         * @protected\n         */\n        this._interval = 0;\n\n        this.init && this.init.apply(this, arguments);\n    }\n\n    var scaleProto = Scale.prototype;\n\n    /**\n     * Parse input val to valid inner number.\n     * @param {*} val\n     * @return {number}\n     */\n    scaleProto.parse = function (val) {\n        // Notice: This would be a trap here, If the implementation\n        // of this method depends on extent, and this method is used\n        // before extent set (like in dataZoom), it would be wrong.\n        // Nevertheless, parse does not depend on extent generally.\n        return val;\n    };\n\n    scaleProto.getSetting = function (name) {\n        return this._setting[name];\n    };\n\n    scaleProto.contain = function (val) {\n        var extent = this._extent;\n        return val >= extent[0] && val <= extent[1];\n    };\n\n    /**\n     * Normalize value to linear [0, 1], return 0.5 if extent span is 0\n     * @param {number} val\n     * @return {number}\n     */\n    scaleProto.normalize = function (val) {\n        var extent = this._extent;\n        if (extent[1] === extent[0]) {\n            return 0.5;\n        }\n        return (val - extent[0]) / (extent[1] - extent[0]);\n    };\n\n    /**\n     * Scale normalized value\n     * @param {number} val\n     * @return {number}\n     */\n    scaleProto.scale = function (val) {\n        var extent = this._extent;\n        return val * (extent[1] - extent[0]) + extent[0];\n    };\n\n    /**\n     * Set extent from data\n     * @param {Array.<number>} other\n     */\n    scaleProto.unionExtent = function (other) {\n        var extent = this._extent;\n        other[0] < extent[0] && (extent[0] = other[0]);\n        other[1] > extent[1] && (extent[1] = other[1]);\n        // not setExtent because in log axis it may transformed to power\n        // this.setExtent(extent[0], extent[1]);\n    };\n\n    /**\n     * Set extent from data\n     * @param {module:echarts/data/List} data\n     * @param {string} dim\n     */\n    scaleProto.unionExtentFromData = function (data, dim) {\n        this.unionExtent(data.getDataExtent(dim, true));\n    };\n\n    /**\n     * Get extent\n     * @return {Array.<number>}\n     */\n    scaleProto.getExtent = function () {\n        return this._extent.slice();\n    };\n\n    /**\n     * Set extent\n     * @param {number} start\n     * @param {number} end\n     */\n    scaleProto.setExtent = function (start, end) {\n        var thisExtent = this._extent;\n        if (!isNaN(start)) {\n            thisExtent[0] = start;\n        }\n        if (!isNaN(end)) {\n            thisExtent[1] = end;\n        }\n    };\n\n    /**\n     * @return {Array.<string>}\n     */\n    scaleProto.getTicksLabels = function () {\n        var labels = [];\n        var ticks = this.getTicks();\n        for (var i = 0; i < ticks.length; i++) {\n            labels.push(this.getLabel(ticks[i]));\n        }\n        return labels;\n    };\n\n    /**\n     * When axis extent depends on data and no data exists,\n     * axis ticks should not be drawn, which is named 'blank'.\n     */\n    scaleProto.isBlank = function () {\n        return this._isBlank;\n    },\n\n    /**\n     * When axis extent depends on data and no data exists,\n     * axis ticks should not be drawn, which is named 'blank'.\n     */\n    scaleProto.setBlank = function (isBlank) {\n        this._isBlank = isBlank;\n    };\n\n\n    clazzUtil.enableClassExtend(Scale);\n    clazzUtil.enableClassManagement(Scale, {\n        registerWhenExtend: true\n    });\n\n    module.exports = Scale;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.6.1@echarts/lib/scale/Scale.js\n// module id = Tpbs\n// module chunks = 0 1","// Pick color from palette for each data item.\n// Applicable for charts that require applying color palette\n// in data level (like pie, funnel, chord).\n\n\n    module.exports = function (seriesType, ecModel) {\n        // Pie and funnel may use diferrent scope\n        var paletteScope = {};\n        ecModel.eachRawSeriesByType(seriesType, function (seriesModel) {\n            var dataAll = seriesModel.getRawData();\n            var idxMap = {};\n            if (!ecModel.isSeriesFiltered(seriesModel)) {\n                var data = seriesModel.getData();\n                data.each(function (idx) {\n                    var rawIdx = data.getRawIndex(idx);\n                    idxMap[rawIdx] = idx;\n                });\n                dataAll.each(function (rawIdx) {\n                    var filteredIdx = idxMap[rawIdx];\n\n                    // If series.itemStyle.normal.color is a function. itemVisual may be encoded\n                    var singleDataColor = filteredIdx != null\n                        && data.getItemVisual(filteredIdx, 'color', true);\n\n                    if (!singleDataColor) {\n                        // FIXME Performance\n                        var itemModel = dataAll.getItemModel(rawIdx);\n                        var color = itemModel.get('itemStyle.normal.color')\n                            || seriesModel.getColorFromPalette(dataAll.getName(rawIdx), paletteScope);\n                        // Legend may use the visual info in data before processed\n                        dataAll.setItemVisual(rawIdx, 'color', color);\n\n                        // Data is not filtered\n                        if (filteredIdx != null) {\n                            data.setItemVisual(filteredIdx, 'color', color);\n                        }\n                    }\n                    else {\n                        // Set data all color for legend\n                        dataAll.setItemVisual(rawIdx, 'color', singleDataColor);\n                    }\n                });\n            }\n        });\n    };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.6.1@echarts/lib/visual/dataColor.js\n// module id = UFrj\n// module chunks = 0 1","\n    // List layout\n    var layout = require('../../util/layout');\n    var formatUtil = require('../../util/format');\n    var graphic = require('../../util/graphic');\n\n    function positionGroup(group, model, api) {\n        layout.positionElement(\n            group, model.getBoxLayoutParams(),\n            {\n                width: api.getWidth(),\n                height: api.getHeight()\n            },\n            model.get('padding')\n        );\n    }\n\n    module.exports = {\n        /**\n         * Layout list like component.\n         * It will box layout each items in group of component and then position the whole group in the viewport\n         * @param {module:zrender/group/Group} group\n         * @param {module:echarts/model/Component} componentModel\n         * @param {module:echarts/ExtensionAPI}\n         */\n        layout: function (group, componentModel, api) {\n            var rect = layout.getLayoutRect(componentModel.getBoxLayoutParams(), {\n                width: api.getWidth(),\n                height: api.getHeight()\n            }, componentModel.get('padding'));\n            layout.box(\n                componentModel.get('orient'),\n                group,\n                componentModel.get('itemGap'),\n                rect.width,\n                rect.height\n            );\n\n            positionGroup(group, componentModel, api);\n        },\n\n        addBackground: function (group, componentModel) {\n            var padding = formatUtil.normalizeCssArray(\n                componentModel.get('padding')\n            );\n            var boundingRect = group.getBoundingRect();\n            var style = componentModel.getItemStyle(['color', 'opacity']);\n            style.fill = componentModel.get('backgroundColor');\n            var rect = new graphic.Rect({\n                shape: {\n                    x: boundingRect.x - padding[3],\n                    y: boundingRect.y - padding[0],\n                    width: boundingRect.width + padding[1] + padding[3],\n                    height: boundingRect.height + padding[0] + padding[2]\n                },\n                style: style,\n                silent: true,\n                z2: -1\n            });\n            graphic.subPixelOptimizeRect(rect);\n\n            group.add(rect);\n        }\n    };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.6.1@echarts/lib/component/helper/listComponent.js\n// module id = UqER\n// module chunks = 0 1","'use strict';\n\n\n    var zrUtil = require('../core/util');\n\n    var Gradient = require('./Gradient');\n\n    /**\n     * x, y, x2, y2 are all percent from 0 to 1\n     * @param {number} [x=0]\n     * @param {number} [y=0]\n     * @param {number} [x2=1]\n     * @param {number} [y2=0]\n     * @param {Array.<Object>} colorStops\n     * @param {boolean} [globalCoord=false]\n     */\n    var LinearGradient = function (x, y, x2, y2, colorStops, globalCoord) {\n        // Should do nothing more in this constructor. Because gradient can be\n        // declard by `color: {type: 'linear', colorStops: ...}`, where\n        // this constructor will not be called.\n\n        this.x = x == null ? 0 : x;\n\n        this.y = y == null ? 0 : y;\n\n        this.x2 = x2 == null ? 1 : x2;\n\n        this.y2 = y2 == null ? 0 : y2;\n\n        // Can be cloned\n        this.type = 'linear';\n\n        // If use global coord\n        this.global = globalCoord || false;\n\n        Gradient.call(this, colorStops);\n    };\n\n    LinearGradient.prototype = {\n\n        constructor: LinearGradient\n    };\n\n    zrUtil.inherits(LinearGradient, Gradient);\n\n    module.exports = LinearGradient;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.5.1@zrender/lib/graphic/LinearGradient.js\n// module id = V+37\n// module chunks = 0 1","'use strict';\n/**\n * 提供变换扩展\n * @module zrender/mixin/Transformable\n * @author pissang (https://www.github.com/pissang)\n */\n\n\n    var matrix = require('../core/matrix');\n    var vector = require('../core/vector');\n    var mIdentity = matrix.identity;\n\n    var EPSILON = 5e-5;\n\n    function isNotAroundZero(val) {\n        return val > EPSILON || val < -EPSILON;\n    }\n\n    /**\n     * @alias module:zrender/mixin/Transformable\n     * @constructor\n     */\n    var Transformable = function (opts) {\n        opts = opts || {};\n        // If there are no given position, rotation, scale\n        if (!opts.position) {\n            /**\n             * 平移\n             * @type {Array.<number>}\n             * @default [0, 0]\n             */\n            this.position = [0, 0];\n        }\n        if (opts.rotation == null) {\n            /**\n             * 旋转\n             * @type {Array.<number>}\n             * @default 0\n             */\n            this.rotation = 0;\n        }\n        if (!opts.scale) {\n            /**\n             * 缩放\n             * @type {Array.<number>}\n             * @default [1, 1]\n             */\n            this.scale = [1, 1];\n        }\n        /**\n         * 旋转和缩放的原点\n         * @type {Array.<number>}\n         * @default null\n         */\n        this.origin = this.origin || null;\n    };\n\n    var transformableProto = Transformable.prototype;\n    transformableProto.transform = null;\n\n    /**\n     * 判断是否需要有坐标变换\n     * 如果有坐标变换, 则从position, rotation, scale以及父节点的transform计算出自身的transform矩阵\n     */\n    transformableProto.needLocalTransform = function () {\n        return isNotAroundZero(this.rotation)\n            || isNotAroundZero(this.position[0])\n            || isNotAroundZero(this.position[1])\n            || isNotAroundZero(this.scale[0] - 1)\n            || isNotAroundZero(this.scale[1] - 1);\n    };\n\n    transformableProto.updateTransform = function () {\n        var parent = this.parent;\n        var parentHasTransform = parent && parent.transform;\n        var needLocalTransform = this.needLocalTransform();\n\n        var m = this.transform;\n        if (!(needLocalTransform || parentHasTransform)) {\n            m && mIdentity(m);\n            return;\n        }\n\n        m = m || matrix.create();\n\n        if (needLocalTransform) {\n            this.getLocalTransform(m);\n        }\n        else {\n            mIdentity(m);\n        }\n\n        // 应用父节点变换\n        if (parentHasTransform) {\n            if (needLocalTransform) {\n                matrix.mul(m, parent.transform, m);\n            }\n            else {\n                matrix.copy(m, parent.transform);\n            }\n        }\n        // 保存这个变换矩阵\n        this.transform = m;\n\n        this.invTransform = this.invTransform || matrix.create();\n        matrix.invert(this.invTransform, m);\n    };\n\n    transformableProto.getLocalTransform = function (m) {\n        return Transformable.getLocalTransform(this, m);\n    };\n\n    /**\n     * 将自己的transform应用到context上\n     * @param {Context2D} ctx\n     */\n    transformableProto.setTransform = function (ctx) {\n        var m = this.transform;\n        var dpr = ctx.dpr || 1;\n        if (m) {\n            ctx.setTransform(dpr * m[0], dpr * m[1], dpr * m[2], dpr * m[3], dpr * m[4], dpr * m[5]);\n        }\n        else {\n            ctx.setTransform(dpr, 0, 0, dpr, 0, 0);\n        }\n    };\n\n    transformableProto.restoreTransform = function (ctx) {\n        var dpr = ctx.dpr || 1;\n        ctx.setTransform(dpr, 0, 0, dpr, 0, 0);\n    };\n\n    var tmpTransform = [];\n\n    /**\n     * 分解`transform`矩阵到`position`, `rotation`, `scale`\n     */\n    transformableProto.decomposeTransform = function () {\n        if (!this.transform) {\n            return;\n        }\n        var parent = this.parent;\n        var m = this.transform;\n        if (parent && parent.transform) {\n            // Get local transform and decompose them to position, scale, rotation\n            matrix.mul(tmpTransform, parent.invTransform, m);\n            m = tmpTransform;\n        }\n        var sx = m[0] * m[0] + m[1] * m[1];\n        var sy = m[2] * m[2] + m[3] * m[3];\n        var position = this.position;\n        var scale = this.scale;\n        if (isNotAroundZero(sx - 1)) {\n            sx = Math.sqrt(sx);\n        }\n        if (isNotAroundZero(sy - 1)) {\n            sy = Math.sqrt(sy);\n        }\n        if (m[0] < 0) {\n            sx = -sx;\n        }\n        if (m[3] < 0) {\n            sy = -sy;\n        }\n        position[0] = m[4];\n        position[1] = m[5];\n        scale[0] = sx;\n        scale[1] = sy;\n        this.rotation = Math.atan2(-m[1] / sy, m[0] / sx);\n    };\n\n    /**\n     * Get global scale\n     * @return {Array.<number>}\n     */\n    transformableProto.getGlobalScale = function () {\n        var m = this.transform;\n        if (!m) {\n            return [1, 1];\n        }\n        var sx = Math.sqrt(m[0] * m[0] + m[1] * m[1]);\n        var sy = Math.sqrt(m[2] * m[2] + m[3] * m[3]);\n        if (m[0] < 0) {\n            sx = -sx;\n        }\n        if (m[3] < 0) {\n            sy = -sy;\n        }\n        return [sx, sy];\n    };\n    /**\n     * 变换坐标位置到 shape 的局部坐标空间\n     * @method\n     * @param {number} x\n     * @param {number} y\n     * @return {Array.<number>}\n     */\n    transformableProto.transformCoordToLocal = function (x, y) {\n        var v2 = [x, y];\n        var invTransform = this.invTransform;\n        if (invTransform) {\n            vector.applyTransform(v2, v2, invTransform);\n        }\n        return v2;\n    };\n\n    /**\n     * 变换局部坐标位置到全局坐标空间\n     * @method\n     * @param {number} x\n     * @param {number} y\n     * @return {Array.<number>}\n     */\n    transformableProto.transformCoordToGlobal = function (x, y) {\n        var v2 = [x, y];\n        var transform = this.transform;\n        if (transform) {\n            vector.applyTransform(v2, v2, transform);\n        }\n        return v2;\n    };\n\n    /**\n     * @static\n     * @param {Object} target\n     * @param {Array.<number>} target.origin\n     * @param {number} target.rotation\n     * @param {Array.<number>} target.position\n     * @param {Array.<number>} [m]\n     */\n    Transformable.getLocalTransform = function (target, m) {\n        m = m || [];\n        mIdentity(m);\n\n        var origin = target.origin;\n        var scale = target.scale || [1, 1];\n        var rotation = target.rotation || 0;\n        var position = target.position || [0, 0];\n\n        if (origin) {\n            // Translate to origin\n            m[4] -= origin[0];\n            m[5] -= origin[1];\n        }\n        matrix.scale(m, m, scale);\n        if (rotation) {\n            matrix.rotate(m, m, rotation);\n        }\n        if (origin) {\n            // Translate back from origin\n            m[4] += origin[0];\n            m[5] += origin[1];\n        }\n\n        m[4] += position[0];\n        m[5] += position[1];\n\n        return m;\n    };\n\n    module.exports = Transformable;\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.5.1@zrender/lib/mixin/Transformable.js\n// module id = V5JR\n// module chunks = 0 1","\n    var platform = '';\n    // Navigator not exists in node\n    if (typeof navigator !== 'undefined') {\n        platform = navigator.platform || '';\n    }\n    module.exports = {\n        // 全图默认背景\n        // backgroundColor: 'rgba(0,0,0,0)',\n\n        // https://dribbble.com/shots/1065960-Infographic-Pie-chart-visualization\n        // color: ['#5793f3', '#d14a61', '#fd9c35', '#675bba', '#fec42c', '#dd4444', '#d4df5a', '#cd4870'],\n        // 浅色\n        // color: ['#bcd3bb', '#e88f70', '#edc1a5', '#9dc5c8', '#e1e8c8', '#7b7c68', '#e5b5b5', '#f0b489', '#928ea8', '#bda29a'],\n        // color: ['#cc5664', '#9bd6ec', '#ea946e', '#8acaaa', '#f1ec64', '#ee8686', '#a48dc1', '#5da6bc', '#b9dcae'],\n        // 深色\n        color: ['#c23531','#2f4554', '#61a0a8', '#d48265', '#91c7ae','#749f83',  '#ca8622', '#bda29a','#6e7074', '#546570', '#c4ccd3'],\n\n        // 默认需要 Grid 配置项\n        // grid: {},\n        // 主题，主题\n        textStyle: {\n            // color: '#000',\n            // decoration: 'none',\n            // PENDING\n            fontFamily: platform.match(/^Win/) ? 'Microsoft YaHei' : 'sans-serif',\n            // fontFamily: 'Arial, Verdana, sans-serif',\n            fontSize: 12,\n            fontStyle: 'normal',\n            fontWeight: 'normal'\n        },\n\n        // http://blogs.adobe.com/webplatform/2014/02/24/using-blend-modes-in-html-canvas/\n        // https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/globalCompositeOperation\n        // Default is source-over\n        blendMode: null,\n\n        animation: 'auto',\n        animationDuration: 1000,\n        animationDurationUpdate: 300,\n        animationEasing: 'exponentialOut',\n        animationEasingUpdate: 'cubicOut',\n\n        animationThreshold: 2000,\n        // Configuration for progressive/incremental rendering\n        progressiveThreshold: 3000,\n        progressive: 400,\n\n        // Threshold of if use single hover layer to optimize.\n        // It is recommended that `hoverLayerThreshold` is equivalent to or less than\n        // `progressiveThreshold`, otherwise hover will cause restart of progressive,\n        // which is unexpected.\n        // see example <echarts/test/heatmap-large.html>.\n        hoverLayerThreshold: 3000,\n\n        // See: module:echarts/scale/Time\n        useUTC: false\n    };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.6.1@echarts/lib/model/globalDefault.js\n// module id = VaUJ\n// module chunks = 0 1","'use strict';\n\n\n    function defaultKeyGetter(item) {\n        return item;\n    }\n\n    function DataDiffer(oldArr, newArr, oldKeyGetter, newKeyGetter) {\n        this._old = oldArr;\n        this._new = newArr;\n\n        this._oldKeyGetter = oldKeyGetter || defaultKeyGetter;\n        this._newKeyGetter = newKeyGetter || defaultKeyGetter;\n    }\n\n    DataDiffer.prototype = {\n\n        constructor: DataDiffer,\n\n        /**\n         * Callback function when add a data\n         */\n        add: function (func) {\n            this._add = func;\n            return this;\n        },\n\n        /**\n         * Callback function when update a data\n         */\n        update: function (func) {\n            this._update = func;\n            return this;\n        },\n\n        /**\n         * Callback function when remove a data\n         */\n        remove: function (func) {\n            this._remove = func;\n            return this;\n        },\n\n        execute: function () {\n            var oldArr = this._old;\n            var newArr = this._new;\n            var oldKeyGetter = this._oldKeyGetter;\n            var newKeyGetter = this._newKeyGetter;\n\n            var oldDataIndexMap = {};\n            var newDataIndexMap = {};\n            var oldDataKeyArr = [];\n            var newDataKeyArr = [];\n            var i;\n\n            initIndexMap(oldArr, oldDataIndexMap, oldDataKeyArr, oldKeyGetter);\n            initIndexMap(newArr, newDataIndexMap, newDataKeyArr, newKeyGetter);\n\n            // Travel by inverted order to make sure order consistency\n            // when duplicate keys exists (consider newDataIndex.pop() below).\n            // For performance consideration, these code below do not look neat.\n            for (i = 0; i < oldArr.length; i++) {\n                var key = oldDataKeyArr[i];\n                var idx = newDataIndexMap[key];\n\n                // idx can never be empty array here. see 'set null' logic below.\n                if (idx != null) {\n                    // Consider there is duplicate key (for example, use dataItem.name as key).\n                    // We should make sure every item in newArr and oldArr can be visited.\n                    var len = idx.length;\n                    if (len) {\n                        len === 1 && (newDataIndexMap[key] = null);\n                        idx = idx.unshift();\n                    }\n                    else {\n                        newDataIndexMap[key] = null;\n                    }\n                    this._update && this._update(idx, i);\n                }\n                else {\n                    this._remove && this._remove(i);\n                }\n            }\n\n            for (var i = 0; i < newDataKeyArr.length; i++) {\n                var key = newDataKeyArr[i];\n                if (newDataIndexMap.hasOwnProperty(key)) {\n                    var idx = newDataIndexMap[key];\n                    if (idx == null) {\n                        continue;\n                    }\n                    // idx can never be empty array here. see 'set null' logic above.\n                    if (!idx.length) {\n                        this._add && this._add(idx);\n                    }\n                    else {\n                        for (var j = 0, len = idx.length; j < len; j++) {\n                            this._add && this._add(idx[j]);\n                        }\n                    }\n                }\n            }\n        }\n    };\n\n    function initIndexMap(arr, map, keyArr, keyGetter) {\n        for (var i = 0; i < arr.length; i++) {\n            // Add prefix to avoid conflict with Object.prototype.\n            var key = '_ec_' + keyGetter(arr[i], i);\n            var existence = map[key];\n            if (existence == null) {\n                keyArr.push(key);\n                map[key] = i;\n            }\n            else {\n                if (!existence.length) {\n                    map[key] = existence = [existence];\n                }\n                existence.push(i);\n            }\n        }\n    }\n\n    module.exports = DataDiffer;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.6.1@echarts/lib/data/DataDiffer.js\n// module id = VfTC\n// module chunks = 0 1","\n\n    module.exports = require('./DataZoomView').extend({\n\n        type: 'dataZoom.select'\n\n    });\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.6.1@echarts/lib/component/dataZoom/SelectZoomView.js\n// module id = Vlf+\n// module chunks = 0 1","'use strict';\n/**\n * @module echarts/core/BoundingRect\n */\n\n\n    var vec2 = require('./vector');\n    var matrix = require('./matrix');\n\n    var v2ApplyTransform = vec2.applyTransform;\n    var mathMin = Math.min;\n    var mathMax = Math.max;\n    /**\n     * @alias module:echarts/core/BoundingRect\n     */\n    function BoundingRect(x, y, width, height) {\n\n        if (width < 0) {\n            x = x + width;\n            width = -width;\n        }\n        if (height < 0) {\n            y = y + height;\n            height = -height;\n        }\n\n        /**\n         * @type {number}\n         */\n        this.x = x;\n        /**\n         * @type {number}\n         */\n        this.y = y;\n        /**\n         * @type {number}\n         */\n        this.width = width;\n        /**\n         * @type {number}\n         */\n        this.height = height;\n    }\n\n    BoundingRect.prototype = {\n\n        constructor: BoundingRect,\n\n        /**\n         * @param {module:echarts/core/BoundingRect} other\n         */\n        union: function (other) {\n            var x = mathMin(other.x, this.x);\n            var y = mathMin(other.y, this.y);\n\n            this.width = mathMax(\n                    other.x + other.width,\n                    this.x + this.width\n                ) - x;\n            this.height = mathMax(\n                    other.y + other.height,\n                    this.y + this.height\n                ) - y;\n            this.x = x;\n            this.y = y;\n        },\n\n        /**\n         * @param {Array.<number>} m\n         * @methods\n         */\n        applyTransform: (function () {\n            var lt = [];\n            var rb = [];\n            var lb = [];\n            var rt = [];\n            return function (m) {\n                // In case usage like this\n                // el.getBoundingRect().applyTransform(el.transform)\n                // And element has no transform\n                if (!m) {\n                    return;\n                }\n                lt[0] = lb[0] = this.x;\n                lt[1] = rt[1] = this.y;\n                rb[0] = rt[0] = this.x + this.width;\n                rb[1] = lb[1] = this.y + this.height;\n\n                v2ApplyTransform(lt, lt, m);\n                v2ApplyTransform(rb, rb, m);\n                v2ApplyTransform(lb, lb, m);\n                v2ApplyTransform(rt, rt, m);\n\n                this.x = mathMin(lt[0], rb[0], lb[0], rt[0]);\n                this.y = mathMin(lt[1], rb[1], lb[1], rt[1]);\n                var maxX = mathMax(lt[0], rb[0], lb[0], rt[0]);\n                var maxY = mathMax(lt[1], rb[1], lb[1], rt[1]);\n                this.width = maxX - this.x;\n                this.height = maxY - this.y;\n            };\n        })(),\n\n        /**\n         * Calculate matrix of transforming from self to target rect\n         * @param  {module:zrender/core/BoundingRect} b\n         * @return {Array.<number>}\n         */\n        calculateTransform: function (b) {\n            var a = this;\n            var sx = b.width / a.width;\n            var sy = b.height / a.height;\n\n            var m = matrix.create();\n\n            // 矩阵右乘\n            matrix.translate(m, m, [-a.x, -a.y]);\n            matrix.scale(m, m, [sx, sy]);\n            matrix.translate(m, m, [b.x, b.y]);\n\n            return m;\n        },\n\n        /**\n         * @param {(module:echarts/core/BoundingRect|Object)} b\n         * @return {boolean}\n         */\n        intersect: function (b) {\n            if (!b) {\n                return false;\n            }\n\n            if (!(b instanceof BoundingRect)) {\n                // Normalize negative width/height.\n                b = BoundingRect.create(b);\n            }\n\n            var a = this;\n            var ax0 = a.x;\n            var ax1 = a.x + a.width;\n            var ay0 = a.y;\n            var ay1 = a.y + a.height;\n\n            var bx0 = b.x;\n            var bx1 = b.x + b.width;\n            var by0 = b.y;\n            var by1 = b.y + b.height;\n\n            return ! (ax1 < bx0 || bx1 < ax0 || ay1 < by0 || by1 < ay0);\n        },\n\n        contain: function (x, y) {\n            var rect = this;\n            return x >= rect.x\n                && x <= (rect.x + rect.width)\n                && y >= rect.y\n                && y <= (rect.y + rect.height);\n        },\n\n        /**\n         * @return {module:echarts/core/BoundingRect}\n         */\n        clone: function () {\n            return new BoundingRect(this.x, this.y, this.width, this.height);\n        },\n\n        /**\n         * Copy from another rect\n         */\n        copy: function (other) {\n            this.x = other.x;\n            this.y = other.y;\n            this.width = other.width;\n            this.height = other.height;\n        },\n\n        plain: function () {\n            return {\n                x: this.x,\n                y: this.y,\n                width: this.width,\n                height: this.height\n            };\n        }\n    };\n\n    /**\n     * @param {Object|module:zrender/core/BoundingRect} rect\n     * @param {number} rect.x\n     * @param {number} rect.y\n     * @param {number} rect.width\n     * @param {number} rect.height\n     * @return {module:zrender/core/BoundingRect}\n     */\n    BoundingRect.create = function (rect) {\n        return new BoundingRect(rect.x, rect.y, rect.width, rect.height);\n    };\n\n    module.exports = BoundingRect;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.5.1@zrender/lib/core/BoundingRect.js\n// module id = W4Cx\n// module chunks = 0 1","\n\n    var zrUtil = require('zrender/lib/core/util');\n\n    var helper = {};\n\n    /**\n     * @param {Object} opt {labelInside}\n     * @return {Object} {\n     *  position, rotation, labelDirection, labelOffset,\n     *  tickDirection, labelRotate, labelInterval, z2\n     * }\n     */\n    helper.layout = function (gridModel, axisModel, opt) {\n        opt = opt || {};\n        var grid = gridModel.coordinateSystem;\n        var axis = axisModel.axis;\n        var layout = {};\n\n        var rawAxisPosition = axis.position;\n        var axisPosition = axis.onZero ? 'onZero' : rawAxisPosition;\n        var axisDim = axis.dim;\n\n        // [left, right, top, bottom]\n        var rect = grid.getRect();\n        var rectBound = [rect.x, rect.x + rect.width, rect.y, rect.y + rect.height];\n\n        var axisOffset = axisModel.get('offset') || 0;\n\n        var posMap = {\n            x: { top: rectBound[2] - axisOffset, bottom: rectBound[3] + axisOffset },\n            y: { left: rectBound[0] - axisOffset, right: rectBound[1] + axisOffset }\n        };\n\n        posMap.x.onZero = Math.max(Math.min(getZero('y'), posMap.x.bottom), posMap.x.top);\n        posMap.y.onZero = Math.max(Math.min(getZero('x'), posMap.y.right), posMap.y.left);\n\n        function getZero(dim, val) {\n            var theAxis = grid.getAxis(dim);\n            return theAxis.toGlobalCoord(theAxis.dataToCoord(0));\n        }\n\n        // Axis position\n        layout.position = [\n            axisDim === 'y' ? posMap.y[axisPosition] : rectBound[0],\n            axisDim === 'x' ? posMap.x[axisPosition] : rectBound[3]\n        ];\n\n        // Axis rotation\n        layout.rotation = Math.PI / 2 * (axisDim === 'x' ? 0 : 1);\n\n        // Tick and label direction, x y is axisDim\n        var dirMap = {top: -1, bottom: 1, left: -1, right: 1};\n\n        layout.labelDirection = layout.tickDirection = layout.nameDirection = dirMap[rawAxisPosition];\n        layout.labelOffset = axis.onZero ? posMap[axisDim][rawAxisPosition] - posMap[axisDim].onZero : 0;\n\n        if (axisModel.get('axisTick.inside')) {\n            layout.tickDirection = -layout.tickDirection;\n        }\n        if (zrUtil.retrieve(opt.labelInside, axisModel.get('axisLabel.inside'))) {\n            layout.labelDirection = -layout.labelDirection;\n        }\n\n        // Special label rotation\n        var labelRotate = axisModel.get('axisLabel.rotate');\n        layout.labelRotate = axisPosition === 'top' ? -labelRotate : labelRotate;\n\n        // label interval when auto mode.\n        layout.labelInterval = axis.getLabelInterval();\n\n        // Over splitLine and splitArea\n        layout.z2 = 1;\n\n        return layout;\n    };\n\n    module.exports = helper;\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.6.1@echarts/lib/component/axis/cartesianAxisHelper.js\n// module id = Wgry\n// module chunks = 0 1","/**\n * Mixin for drawing text in a element bounding rect\n * @module zrender/mixin/RectText\n */\n\n\n\n    var textContain = require('../../contain/text');\n    var BoundingRect = require('../../core/BoundingRect');\n\n    var tmpRect = new BoundingRect();\n\n    var RectText = function () {};\n\n    function parsePercent(value, maxValue) {\n        if (typeof value === 'string') {\n            if (value.lastIndexOf('%') >= 0) {\n                return parseFloat(value) / 100 * maxValue;\n            }\n            return parseFloat(value);\n        }\n        return value;\n    }\n\n    RectText.prototype = {\n\n        constructor: RectText,\n\n        /**\n         * Draw text in a rect with specified position.\n         * @param  {CanvasRenderingContext} ctx\n         * @param  {Object} rect Displayable rect\n         * @return {Object} textRect Alternative precalculated text bounding rect\n         */\n        drawRectText: function (ctx, rect, textRect) {\n            var style = this.style;\n            var text = style.text;\n            // Convert to string\n            text != null && (text += '');\n            if (!text) {\n                return;\n            }\n\n            // FIXME\n            ctx.save();\n\n            var x;\n            var y;\n            var textPosition = style.textPosition;\n            var textOffset = style.textOffset;\n            var distance = style.textDistance;\n            var align = style.textAlign;\n            var font = style.textFont || style.font;\n            var baseline = style.textBaseline;\n            var verticalAlign = style.textVerticalAlign;\n\n            textRect = textRect || textContain.getBoundingRect(text, font, align, baseline);\n\n            // Transform rect to view space\n            var transform = this.transform;\n            if (!style.textTransform) {\n                if (transform) {\n                    tmpRect.copy(rect);\n                    tmpRect.applyTransform(transform);\n                    rect = tmpRect;\n                }\n            }\n            else {\n                this.setTransform(ctx);\n            }\n\n            // Text position represented by coord\n            if (textPosition instanceof Array) {\n                // Percent\n                x = rect.x + parsePercent(textPosition[0], rect.width);\n                y = rect.y + parsePercent(textPosition[1], rect.height);\n                align = align || 'left';\n                baseline = baseline || 'top';\n\n                if (verticalAlign) {\n                    switch (verticalAlign) {\n                        case 'middle':\n                            y -= textRect.height / 2 - textRect.lineHeight / 2;\n                            break;\n                        case 'bottom':\n                            y -= textRect.height - textRect.lineHeight / 2;\n                            break;\n                        default:\n                            y += textRect.lineHeight / 2;\n                    }\n                    // Force bseline to be middle\n                    baseline = 'middle';\n                }\n            }\n            else {\n                var res = textContain.adjustTextPositionOnRect(\n                    textPosition, rect, textRect, distance\n                );\n                x = res.x;\n                y = res.y;\n                // Default align and baseline when has textPosition\n                align = align || res.textAlign;\n                baseline = baseline || res.textBaseline;\n            }\n\n            if (textOffset) {\n                x += textOffset[0];\n                y += textOffset[1];\n            }\n\n            // Use canvas default left textAlign. Giving invalid value will cause state not change\n            ctx.textAlign = align || 'left';\n            // Use canvas default alphabetic baseline\n            ctx.textBaseline = baseline || 'alphabetic';\n\n            var textFill = style.textFill;\n            var textStroke = style.textStroke;\n            textFill && (ctx.fillStyle = textFill);\n            textStroke && (ctx.strokeStyle = textStroke);\n\n            // TODO Invalid font\n            ctx.font = font || '12px sans-serif';\n\n            // Text shadow\n            // Always set shadowBlur and shadowOffset to avoid leak from displayable\n            ctx.shadowBlur = style.textShadowBlur;\n            ctx.shadowColor = style.textShadowColor || 'transparent';\n            ctx.shadowOffsetX = style.textShadowOffsetX;\n            ctx.shadowOffsetY = style.textShadowOffsetY;\n\n            var textLines = text.split('\\n');\n\n            if (style.textRotation) {\n                transform && ctx.translate(transform[4], transform[5]);\n                ctx.rotate(style.textRotation);\n                transform && ctx.translate(-transform[4], -transform[5]);\n            }\n\n            for (var i = 0; i < textLines.length; i++) {\n                    // Fill after stroke so the outline will not cover the main part.\n                textStroke && ctx.strokeText(textLines[i], x, y);\n                textFill && ctx.fillText(textLines[i], x, y);\n                y += textRect.lineHeight;\n            }\n\n            ctx.restore();\n        }\n    };\n\n    module.exports = RectText;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.5.1@zrender/lib/graphic/mixin/RectText.js\n// module id = WkjF\n// module chunks = 0 1","\n\n    var numberUtil = require('../util/number');\n    var linearMap = numberUtil.linearMap;\n    var zrUtil = require('zrender/lib/core/util');\n    var axisHelper = require('./axisHelper');\n\n    function fixExtentWithBands(extent, nTick) {\n        var size = extent[1] - extent[0];\n        var len = nTick;\n        var margin = size / len / 2;\n        extent[0] += margin;\n        extent[1] -= margin;\n    }\n\n    var normalizedExtent = [0, 1];\n    /**\n     * @name module:echarts/coord/CartesianAxis\n     * @constructor\n     */\n    var Axis = function (dim, scale, extent) {\n\n        /**\n         * Axis dimension. Such as 'x', 'y', 'z', 'angle', 'radius'\n         * @type {string}\n         */\n        this.dim = dim;\n\n        /**\n         * Axis scale\n         * @type {module:echarts/coord/scale/*}\n         */\n        this.scale = scale;\n\n        /**\n         * @type {Array.<number>}\n         * @private\n         */\n        this._extent = extent || [0, 0];\n\n        /**\n         * @type {boolean}\n         */\n        this.inverse = false;\n\n        /**\n         * Usually true when axis has a ordinal scale\n         * @type {boolean}\n         */\n        this.onBand = false;\n\n        /**\n         * @private\n         * @type {number}\n         */\n        this._labelInterval;\n    };\n\n    Axis.prototype = {\n\n        constructor: Axis,\n\n        /**\n         * If axis extent contain given coord\n         * @param {number} coord\n         * @return {boolean}\n         */\n        contain: function (coord) {\n            var extent = this._extent;\n            var min = Math.min(extent[0], extent[1]);\n            var max = Math.max(extent[0], extent[1]);\n            return coord >= min && coord <= max;\n        },\n\n        /**\n         * If axis extent contain given data\n         * @param {number} data\n         * @return {boolean}\n         */\n        containData: function (data) {\n            return this.contain(this.dataToCoord(data));\n        },\n\n        /**\n         * Get coord extent.\n         * @return {Array.<number>}\n         */\n        getExtent: function () {\n            return this._extent.slice();\n        },\n\n        /**\n         * Get precision used for formatting\n         * @param {Array.<number>} [dataExtent]\n         * @return {number}\n         */\n        getPixelPrecision: function (dataExtent) {\n            return numberUtil.getPixelPrecision(\n                dataExtent || this.scale.getExtent(),\n                this._extent\n            );\n        },\n\n        /**\n         * Set coord extent\n         * @param {number} start\n         * @param {number} end\n         */\n        setExtent: function (start, end) {\n            var extent = this._extent;\n            extent[0] = start;\n            extent[1] = end;\n        },\n\n        /**\n         * Convert data to coord. Data is the rank if it has a ordinal scale\n         * @param {number} data\n         * @param  {boolean} clamp\n         * @return {number}\n         */\n        dataToCoord: function (data, clamp) {\n            var extent = this._extent;\n            var scale = this.scale;\n            data = scale.normalize(data);\n\n            if (this.onBand && scale.type === 'ordinal') {\n                extent = extent.slice();\n                fixExtentWithBands(extent, scale.count());\n            }\n\n            return linearMap(data, normalizedExtent, extent, clamp);\n        },\n\n        /**\n         * Convert coord to data. Data is the rank if it has a ordinal scale\n         * @param {number} coord\n         * @param  {boolean} clamp\n         * @return {number}\n         */\n        coordToData: function (coord, clamp) {\n            var extent = this._extent;\n            var scale = this.scale;\n\n            if (this.onBand && scale.type === 'ordinal') {\n                extent = extent.slice();\n                fixExtentWithBands(extent, scale.count());\n            }\n\n            var t = linearMap(coord, extent, normalizedExtent, clamp);\n\n            return this.scale.scale(t);\n        },\n\n        /**\n         * Convert pixel point to data in axis\n         * @param {Array.<number>} point\n         * @param  {boolean} clamp\n         * @return {number} data\n         */\n        pointToData: function (point, clamp) {\n            // Should be implemented in derived class if necessary.\n        },\n\n        /**\n         * @return {Array.<number>}\n         */\n        getTicksCoords: function (alignWithLabel) {\n            if (this.onBand && !alignWithLabel) {\n                var bands = this.getBands();\n                var coords = [];\n                for (var i = 0; i < bands.length; i++) {\n                    coords.push(bands[i][0]);\n                }\n                if (bands[i - 1]) {\n                    coords.push(bands[i - 1][1]);\n                }\n                return coords;\n            }\n            else {\n                return zrUtil.map(this.scale.getTicks(), this.dataToCoord, this);\n            }\n        },\n\n        /**\n         * Coords of labels are on the ticks or on the middle of bands\n         * @return {Array.<number>}\n         */\n        getLabelsCoords: function () {\n            return zrUtil.map(this.scale.getTicks(), this.dataToCoord, this);\n        },\n\n        /**\n         * Get bands.\n         *\n         * If axis has labels [1, 2, 3, 4]. Bands on the axis are\n         * |---1---|---2---|---3---|---4---|.\n         *\n         * @return {Array}\n         */\n         // FIXME Situation when labels is on ticks\n        getBands: function () {\n            var extent = this.getExtent();\n            var bands = [];\n            var len = this.scale.count();\n            var start = extent[0];\n            var end = extent[1];\n            var span = end - start;\n\n            for (var i = 0; i < len; i++) {\n                bands.push([\n                    span * i / len + start,\n                    span * (i + 1) / len + start\n                ]);\n            }\n            return bands;\n        },\n\n        /**\n         * Get width of band\n         * @return {number}\n         */\n        getBandWidth: function () {\n            var axisExtent = this._extent;\n            var dataExtent = this.scale.getExtent();\n\n            var len = dataExtent[1] - dataExtent[0] + (this.onBand ? 1 : 0);\n            // Fix #2728, avoid NaN when only one data.\n            len === 0 && (len = 1);\n\n            var size = Math.abs(axisExtent[1] - axisExtent[0]);\n\n            return Math.abs(size) / len;\n        },\n\n        /**\n         * Get interval of the axis label.\n         * @return {number}\n         */\n        getLabelInterval: function () {\n            var labelInterval = this._labelInterval;\n            if (!labelInterval) {\n                var axisModel = this.model;\n                var labelModel = axisModel.getModel('axisLabel');\n                var interval = labelModel.get('interval');\n                if (!(this.type === 'category' && interval === 'auto')) {\n                    labelInterval = interval === 'auto' ? 0 : interval;\n                }\n                else if (this.isHorizontal){\n                    labelInterval = axisHelper.getAxisLabelInterval(\n                        zrUtil.map(this.scale.getTicks(), this.dataToCoord, this),\n                        axisModel.getFormattedLabels(),\n                        labelModel.getModel('textStyle').getFont(),\n                        this.isHorizontal()\n                    );\n                }\n                this._labelInterval = labelInterval;\n            }\n            return labelInterval;\n        }\n\n    };\n\n    module.exports = Axis;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.6.1@echarts/lib/coord/Axis.js\n// module id = X+UG\n// module chunks = 0 1","'use strict';\n// FIXME emphasis label position is not same with normal label position\n\n\n    var textContain = require('zrender/lib/contain/text');\n\n    function adjustSingleSide(list, cx, cy, r, dir, viewWidth, viewHeight) {\n        list.sort(function (a, b) {\n            return a.y - b.y;\n        });\n\n        // 压\n        function shiftDown(start, end, delta, dir) {\n            for (var j = start; j < end; j++) {\n                list[j].y += delta;\n                if (j > start\n                    && j + 1 < end\n                    && list[j + 1].y > list[j].y + list[j].height\n                ) {\n                    shiftUp(j, delta / 2);\n                    return;\n                }\n            }\n\n            shiftUp(end - 1, delta / 2);\n        }\n\n        // 弹\n        function shiftUp(end, delta) {\n            for (var j = end; j >= 0; j--) {\n                list[j].y -= delta;\n                if (j > 0\n                    && list[j].y > list[j - 1].y + list[j - 1].height\n                ) {\n                    break;\n                }\n            }\n        }\n\n        function changeX(list, isDownList, cx, cy, r, dir) {\n            var lastDeltaX = dir > 0\n                ? isDownList                // 右侧\n                    ? Number.MAX_VALUE      // 下\n                    : 0                     // 上\n                : isDownList                // 左侧\n                    ? Number.MAX_VALUE      // 下\n                    : 0;                    // 上\n\n            for (var i = 0, l = list.length; i < l; i++) {\n                // Not change x for center label\n                if (list[i].position === 'center') {\n                    continue;\n                }\n                var deltaY = Math.abs(list[i].y - cy);\n                var length = list[i].len;\n                var length2 = list[i].len2;\n                var deltaX = (deltaY < r + length)\n                    ? Math.sqrt(\n                          (r + length + length2) * (r + length + length2)\n                          - deltaY * deltaY\n                      )\n                    : Math.abs(list[i].x - cx);\n                if (isDownList && deltaX >= lastDeltaX) {\n                    // 右下，左下\n                    deltaX = lastDeltaX - 10;\n                }\n                if (!isDownList && deltaX <= lastDeltaX) {\n                    // 右上，左上\n                    deltaX = lastDeltaX + 10;\n                }\n\n                list[i].x = cx + deltaX * dir;\n                lastDeltaX = deltaX;\n            }\n        }\n\n        var lastY = 0;\n        var delta;\n        var len = list.length;\n        var upList = [];\n        var downList = [];\n        for (var i = 0; i < len; i++) {\n            delta = list[i].y - lastY;\n            if (delta < 0) {\n                shiftDown(i, len, -delta, dir);\n            }\n            lastY = list[i].y + list[i].height;\n        }\n        if (viewHeight - lastY < 0) {\n            shiftUp(len - 1, lastY - viewHeight);\n        }\n        for (var i = 0; i < len; i++) {\n            if (list[i].y >= cy) {\n                downList.push(list[i]);\n            }\n            else {\n                upList.push(list[i]);\n            }\n        }\n        changeX(upList, false, cx, cy, r, dir);\n        changeX(downList, true, cx, cy, r, dir);\n    }\n\n    function avoidOverlap(labelLayoutList, cx, cy, r, viewWidth, viewHeight) {\n        var leftList = [];\n        var rightList = [];\n        for (var i = 0; i < labelLayoutList.length; i++) {\n            if (labelLayoutList[i].x < cx) {\n                leftList.push(labelLayoutList[i]);\n            }\n            else {\n                rightList.push(labelLayoutList[i]);\n            }\n        }\n\n        adjustSingleSide(rightList, cx, cy, r, 1, viewWidth, viewHeight);\n        adjustSingleSide(leftList, cx, cy, r, -1, viewWidth, viewHeight);\n\n        for (var i = 0; i < labelLayoutList.length; i++) {\n            var linePoints = labelLayoutList[i].linePoints;\n            if (linePoints) {\n                var dist = linePoints[1][0] - linePoints[2][0];\n                if (labelLayoutList[i].x < cx) {\n                    linePoints[2][0] = labelLayoutList[i].x + 3;\n                }\n                else {\n                    linePoints[2][0] = labelLayoutList[i].x - 3;\n                }\n                linePoints[1][1] = linePoints[2][1] = labelLayoutList[i].y;\n                linePoints[1][0] = linePoints[2][0] + dist;\n            }\n        }\n    }\n\n    module.exports = function (seriesModel, r, viewWidth, viewHeight) {\n        var data = seriesModel.getData();\n        var labelLayoutList = [];\n        var cx;\n        var cy;\n        var hasLabelRotate = false;\n\n        data.each(function (idx) {\n            var layout = data.getItemLayout(idx);\n\n            var itemModel = data.getItemModel(idx);\n            var labelModel = itemModel.getModel('label.normal');\n            // Use position in normal or emphasis\n            var labelPosition = labelModel.get('position') || itemModel.get('label.emphasis.position');\n\n            var labelLineModel = itemModel.getModel('labelLine.normal');\n            var labelLineLen = labelLineModel.get('length');\n            var labelLineLen2 = labelLineModel.get('length2');\n\n            var midAngle = (layout.startAngle + layout.endAngle) / 2;\n            var dx = Math.cos(midAngle);\n            var dy = Math.sin(midAngle);\n\n            var textX;\n            var textY;\n            var linePoints;\n            var textAlign;\n\n            cx = layout.cx;\n            cy = layout.cy;\n\n            var isLabelInside = labelPosition === 'inside' || labelPosition === 'inner';\n            if (labelPosition === 'center') {\n                textX = layout.cx;\n                textY = layout.cy;\n                textAlign = 'center';\n            }\n            else {\n                var x1 = (isLabelInside ? (layout.r + layout.r0) / 2 * dx : layout.r * dx) + cx;\n                var y1 = (isLabelInside ? (layout.r + layout.r0) / 2 * dy : layout.r * dy) + cy;\n\n                textX = x1 + dx * 3;\n                textY = y1 + dy * 3;\n\n                if (!isLabelInside) {\n                    // For roseType\n                    var x2 = x1 + dx * (labelLineLen + r - layout.r);\n                    var y2 = y1 + dy * (labelLineLen + r - layout.r);\n                    var x3 = x2 + ((dx < 0 ? -1 : 1) * labelLineLen2);\n                    var y3 = y2;\n\n                    textX = x3 + (dx < 0 ? -5 : 5);\n                    textY = y3;\n                    linePoints = [[x1, y1], [x2, y2], [x3, y3]];\n                }\n\n                textAlign = isLabelInside ? 'center' : (dx > 0 ? 'left' : 'right');\n            }\n            var font = labelModel.getModel('textStyle').getFont();\n\n            var labelRotate = labelModel.get('rotate')\n                ? (dx < 0 ? -midAngle + Math.PI : -midAngle) : 0;\n            var text = seriesModel.getFormattedLabel(idx, 'normal')\n                        || data.getName(idx);\n            var textRect = textContain.getBoundingRect(\n                text, font, textAlign, 'top'\n            );\n            hasLabelRotate = !!labelRotate;\n            layout.label = {\n                x: textX,\n                y: textY,\n                position: labelPosition,\n                height: textRect.height,\n                len: labelLineLen,\n                len2: labelLineLen2,\n                linePoints: linePoints,\n                textAlign: textAlign,\n                verticalAlign: 'middle',\n                font: font,\n                rotation: labelRotate\n            };\n\n            // Not layout the inside label\n            if (!isLabelInside) {\n                labelLayoutList.push(layout.label);\n            }\n        });\n        if (!hasLabelRotate && seriesModel.get('avoidLabelOverlap')) {\n            avoidOverlap(labelLayoutList, cx, cy, r, viewWidth, viewHeight);\n        }\n    };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.6.1@echarts/lib/chart/pie/labelLayout.js\n// module id = X6QE\n// module chunks = 0 1","/**\n * Legend component entry file8\n */\n\n\n    require('./legend/LegendModel');\n    require('./legend/legendAction');\n    require('./legend/LegendView');\n\n    var echarts = require('../echarts');\n    // Series Filter\n    echarts.registerProcessor(require('./legend/legendFilter'));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.6.1@echarts/lib/component/legend.js\n// module id = XEbH\n// module chunks = 0 1","\n\n    var zrUtil = require('zrender/lib/core/util');\n    var graphic = require('../../util/graphic');\n    var throttle = require('../../util/throttle');\n    var DataZoomView = require('./DataZoomView');\n    var Rect = graphic.Rect;\n    var numberUtil = require('../../util/number');\n    var linearMap = numberUtil.linearMap;\n    var layout = require('../../util/layout');\n    var sliderMove = require('../helper/sliderMove');\n    var eventTool = require('zrender/lib/core/event');\n\n    var asc = numberUtil.asc;\n    var bind = zrUtil.bind;\n    // var mathMax = Math.max;\n    var each = zrUtil.each;\n\n    // Constants\n    var DEFAULT_LOCATION_EDGE_GAP = 7;\n    var DEFAULT_FRAME_BORDER_WIDTH = 1;\n    var DEFAULT_FILLER_SIZE = 30;\n    var HORIZONTAL = 'horizontal';\n    var VERTICAL = 'vertical';\n    var LABEL_GAP = 5;\n    var SHOW_DATA_SHADOW_SERIES_TYPE = ['line', 'bar', 'candlestick', 'scatter'];\n\n    var SliderZoomView = DataZoomView.extend({\n\n        type: 'dataZoom.slider',\n\n        init: function (ecModel, api) {\n\n            /**\n             * @private\n             * @type {Object}\n             */\n            this._displayables = {};\n\n            /**\n             * @private\n             * @type {string}\n             */\n            this._orient;\n\n            /**\n             * [0, 100]\n             * @private\n             */\n            this._range;\n\n            /**\n             * [coord of the first handle, coord of the second handle]\n             * @private\n             */\n            this._handleEnds;\n\n            /**\n             * [length, thick]\n             * @private\n             * @type {Array.<number>}\n             */\n            this._size;\n\n            /**\n             * @private\n             * @type {number}\n             */\n            this._handleWidth;\n\n            /**\n             * @private\n             * @type {number}\n             */\n            this._handleHeight;\n\n            /**\n             * @private\n             */\n            this._location;\n\n            /**\n             * @private\n             */\n            this._dragging;\n\n            /**\n             * @private\n             */\n            this._dataShadowInfo;\n\n            this.api = api;\n        },\n\n        /**\n         * @override\n         */\n        render: function (dataZoomModel, ecModel, api, payload) {\n            SliderZoomView.superApply(this, 'render', arguments);\n\n            throttle.createOrUpdate(\n                this,\n                '_dispatchZoomAction',\n                this.dataZoomModel.get('throttle'),\n                'fixRate'\n            );\n\n            this._orient = dataZoomModel.get('orient');\n\n            if (this.dataZoomModel.get('show') === false) {\n                this.group.removeAll();\n                return;\n            }\n\n            // Notice: this._resetInterval() should not be executed when payload.type\n            // is 'dataZoom', origin this._range should be maintained, otherwise 'pan'\n            // or 'zoom' info will be missed because of 'throttle' of this.dispatchAction,\n            if (!payload || payload.type !== 'dataZoom' || payload.from !== this.uid) {\n                this._buildView();\n            }\n\n            this._updateView();\n        },\n\n        /**\n         * @override\n         */\n        remove: function () {\n            SliderZoomView.superApply(this, 'remove', arguments);\n            throttle.clear(this, '_dispatchZoomAction');\n        },\n\n        /**\n         * @override\n         */\n        dispose: function () {\n            SliderZoomView.superApply(this, 'dispose', arguments);\n            throttle.clear(this, '_dispatchZoomAction');\n        },\n\n        _buildView: function () {\n            var thisGroup = this.group;\n\n            thisGroup.removeAll();\n\n            this._resetLocation();\n            this._resetInterval();\n\n            var barGroup = this._displayables.barGroup = new graphic.Group();\n\n            this._renderBackground();\n\n            this._renderHandle();\n\n            this._renderDataShadow();\n\n            thisGroup.add(barGroup);\n\n            this._positionGroup();\n        },\n\n        /**\n         * @private\n         */\n        _resetLocation: function () {\n            var dataZoomModel = this.dataZoomModel;\n            var api = this.api;\n\n            // If some of x/y/width/height are not specified,\n            // auto-adapt according to target grid.\n            var coordRect = this._findCoordRect();\n            var ecSize = {width: api.getWidth(), height: api.getHeight()};\n            // Default align by coordinate system rect.\n            var positionInfo = this._orient === HORIZONTAL\n                ? {\n                    // Why using 'right', because right should be used in vertical,\n                    // and it is better to be consistent for dealing with position param merge.\n                    right: ecSize.width - coordRect.x - coordRect.width,\n                    top: (ecSize.height - DEFAULT_FILLER_SIZE - DEFAULT_LOCATION_EDGE_GAP),\n                    width: coordRect.width,\n                    height: DEFAULT_FILLER_SIZE\n                }\n                : { // vertical\n                    right: DEFAULT_LOCATION_EDGE_GAP,\n                    top: coordRect.y,\n                    width: DEFAULT_FILLER_SIZE,\n                    height: coordRect.height\n                };\n\n            // Do not write back to option and replace value 'ph', because\n            // the 'ph' value should be recalculated when resize.\n            var layoutParams = layout.getLayoutParams(dataZoomModel.option);\n\n            // Replace the placeholder value.\n            zrUtil.each(['right', 'top', 'width', 'height'], function (name) {\n                if (layoutParams[name] === 'ph') {\n                    layoutParams[name] = positionInfo[name];\n                }\n            });\n\n            var layoutRect = layout.getLayoutRect(\n                layoutParams,\n                ecSize,\n                dataZoomModel.padding\n            );\n\n            this._location = {x: layoutRect.x, y: layoutRect.y};\n            this._size = [layoutRect.width, layoutRect.height];\n            this._orient === VERTICAL && this._size.reverse();\n        },\n\n        /**\n         * @private\n         */\n        _positionGroup: function () {\n            var thisGroup = this.group;\n            var location = this._location;\n            var orient = this._orient;\n\n            // Just use the first axis to determine mapping.\n            var targetAxisModel = this.dataZoomModel.getFirstTargetAxisModel();\n            var inverse = targetAxisModel && targetAxisModel.get('inverse');\n\n            var barGroup = this._displayables.barGroup;\n            var otherAxisInverse = (this._dataShadowInfo || {}).otherAxisInverse;\n\n            // Transform barGroup.\n            barGroup.attr(\n                (orient === HORIZONTAL && !inverse)\n                ? {scale: otherAxisInverse ? [1, 1] : [1, -1]}\n                : (orient === HORIZONTAL && inverse)\n                ? {scale: otherAxisInverse ? [-1, 1] : [-1, -1]}\n                : (orient === VERTICAL && !inverse)\n                ? {scale: otherAxisInverse ? [1, -1] : [1, 1], rotation: Math.PI / 2}\n                // Dont use Math.PI, considering shadow direction.\n                : {scale: otherAxisInverse ? [-1, -1] : [-1, 1], rotation: Math.PI / 2}\n            );\n\n            // Position barGroup\n            var rect = thisGroup.getBoundingRect([barGroup]);\n            thisGroup.attr('position', [location.x - rect.x, location.y - rect.y]);\n        },\n\n        /**\n         * @private\n         */\n        _getViewExtent: function () {\n            return [0, this._size[0]];\n        },\n\n        _renderBackground: function () {\n            var dataZoomModel = this.dataZoomModel;\n            var size = this._size;\n            var barGroup = this._displayables.barGroup;\n\n            barGroup.add(new Rect({\n                silent: true,\n                shape: {\n                    x: 0, y: 0, width: size[0], height: size[1]\n                },\n                style: {\n                    fill: dataZoomModel.get('backgroundColor')\n                },\n                z2: -40\n            }));\n\n            // Click panel, over shadow, below handles.\n            barGroup.add(new Rect({\n                shape: {\n                    x: 0, y: 0, width: size[0], height: size[1]\n                },\n                style: {\n                    fill: 'transparent'\n                },\n                z2: 0,\n                onclick: zrUtil.bind(this._onClickPanelClick, this)\n            }));\n        },\n\n        _renderDataShadow: function () {\n            var info = this._dataShadowInfo = this._prepareDataShadowInfo();\n\n            if (!info) {\n                return;\n            }\n\n            var size = this._size;\n            var seriesModel = info.series;\n            var data = seriesModel.getRawData();\n            var otherDim = seriesModel.getShadowDim\n                ? seriesModel.getShadowDim() // @see candlestick\n                : info.otherDim;\n\n            if (otherDim == null) {\n                return;\n            }\n\n            var otherDataExtent = data.getDataExtent(otherDim);\n            // Nice extent.\n            var otherOffset = (otherDataExtent[1] - otherDataExtent[0]) * 0.3;\n            otherDataExtent = [\n                otherDataExtent[0] - otherOffset,\n                otherDataExtent[1] + otherOffset\n            ];\n            var otherShadowExtent = [0, size[1]];\n\n            var thisShadowExtent = [0, size[0]];\n\n            var areaPoints = [[size[0], 0], [0, 0]];\n            var linePoints = [];\n            var step = thisShadowExtent[1] / (data.count() - 1);\n            var thisCoord = 0;\n\n            // Optimize for large data shadow\n            var stride = Math.round(data.count() / size[0]);\n            var lastIsEmpty;\n            data.each([otherDim], function (value, index) {\n                if (stride > 0 && (index % stride)) {\n                    thisCoord += step;\n                    return;\n                }\n\n                // FIXME\n                // Should consider axis.min/axis.max when drawing dataShadow.\n\n                // FIXME\n                // 应该使用统一的空判断？还是在list里进行空判断？\n                var isEmpty = value == null || isNaN(value) || value === '';\n                // See #4235.\n                var otherCoord = isEmpty\n                    ? 0 : linearMap(value, otherDataExtent, otherShadowExtent, true);\n\n                // Attempt to draw data shadow precisely when there are empty value.\n                if (isEmpty && !lastIsEmpty && index) {\n                    areaPoints.push([areaPoints[areaPoints.length - 1][0], 0]);\n                    linePoints.push([linePoints[linePoints.length - 1][0], 0]);\n                }\n                else if (!isEmpty && lastIsEmpty) {\n                    areaPoints.push([thisCoord, 0]);\n                    linePoints.push([thisCoord, 0]);\n                }\n\n                areaPoints.push([thisCoord, otherCoord]);\n                linePoints.push([thisCoord, otherCoord]);\n\n                thisCoord += step;\n                lastIsEmpty = isEmpty;\n            });\n\n            var dataZoomModel = this.dataZoomModel;\n            // var dataBackgroundModel = dataZoomModel.getModel('dataBackground');\n            this._displayables.barGroup.add(new graphic.Polygon({\n                shape: {points: areaPoints},\n                style: zrUtil.defaults(\n                    {fill: dataZoomModel.get('dataBackgroundColor')},\n                    dataZoomModel.getModel('dataBackground.areaStyle').getAreaStyle()\n                ),\n                silent: true,\n                z2: -20\n            }));\n            this._displayables.barGroup.add(new graphic.Polyline({\n                shape: {points: linePoints},\n                style: dataZoomModel.getModel('dataBackground.lineStyle').getLineStyle(),\n                silent: true,\n                z2: -19\n            }));\n        },\n\n        _prepareDataShadowInfo: function () {\n            var dataZoomModel = this.dataZoomModel;\n            var showDataShadow = dataZoomModel.get('showDataShadow');\n\n            if (showDataShadow === false) {\n                return;\n            }\n\n            // Find a representative series.\n            var result;\n            var ecModel = this.ecModel;\n\n            dataZoomModel.eachTargetAxis(function (dimNames, axisIndex) {\n                var seriesModels = dataZoomModel\n                    .getAxisProxy(dimNames.name, axisIndex)\n                    .getTargetSeriesModels();\n\n                zrUtil.each(seriesModels, function (seriesModel) {\n                    if (result) {\n                        return;\n                    }\n\n                    if (showDataShadow !== true && zrUtil.indexOf(\n                            SHOW_DATA_SHADOW_SERIES_TYPE, seriesModel.get('type')\n                        ) < 0\n                    ) {\n                        return;\n                    }\n\n                    var thisAxis = ecModel.getComponent(dimNames.axis, axisIndex).axis;\n                    var otherDim = getOtherDim(dimNames.name);\n                    var otherAxisInverse;\n                    var coordSys = seriesModel.coordinateSystem;\n                    if (otherDim != null && coordSys.getOtherAxis) {\n                        otherAxisInverse = coordSys.getOtherAxis(thisAxis).inverse;\n                    }\n\n                    result = {\n                        thisAxis: thisAxis,\n                        series: seriesModel,\n                        thisDim: dimNames.name,\n                        otherDim: otherDim,\n                        otherAxisInverse: otherAxisInverse\n                    };\n\n                }, this);\n\n            }, this);\n\n            return result;\n        },\n\n        _renderHandle: function () {\n            var displaybles = this._displayables;\n            var handles = displaybles.handles = [];\n            var handleLabels = displaybles.handleLabels = [];\n            var barGroup = this._displayables.barGroup;\n            var size = this._size;\n            var dataZoomModel = this.dataZoomModel;\n\n            barGroup.add(displaybles.filler = new Rect({\n                draggable: true,\n                cursor: 'move',\n                drift: bind(this._onDragMove, this, 'all'),\n                onmousemove: function (e) {\n                    // Fot mobile devicem, prevent screen slider on the button.\n                    eventTool.stop(e.event);\n                },\n                ondragstart: bind(this._showDataInfo, this, true),\n                ondragend: bind(this._onDragEnd, this),\n                onmouseover: bind(this._showDataInfo, this, true),\n                onmouseout: bind(this._showDataInfo, this, false),\n                style: {\n                    fill: dataZoomModel.get('fillerColor'),\n                    textPosition : 'inside'\n                }\n            }));\n\n            // Frame border.\n            barGroup.add(new Rect(graphic.subPixelOptimizeRect({\n                silent: true,\n                shape: {\n                    x: 0,\n                    y: 0,\n                    width: size[0],\n                    height: size[1]\n                },\n                style: {\n                    stroke: dataZoomModel.get('dataBackgroundColor')\n                        || dataZoomModel.get('borderColor'),\n                    lineWidth: DEFAULT_FRAME_BORDER_WIDTH,\n                    fill: 'rgba(0,0,0,0)'\n                }\n            })));\n\n            var iconStr = dataZoomModel.get('handleIcon');\n            each([0, 1], function (handleIndex) {\n                var iconOpt = {\n                    style: {\n                        strokeNoScale: true\n                    },\n                    rectHover: true,\n                    cursor: this._orient === 'vertical' ? 'ns-resize' : 'ew-resize',\n                    draggable: true,\n                    drift: bind(this._onDragMove, this, handleIndex),\n                    onmousemove: function (e) {\n                        // Fot mobile devicem, prevent screen slider on the button.\n                        eventTool.stop(e.event);\n                    },\n                    ondragend: bind(this._onDragEnd, this),\n                    onmouseover: bind(this._showDataInfo, this, true),\n                    onmouseout: bind(this._showDataInfo, this, false)\n                };\n                var iconStyle = {x: -1, y: 0, width: 2, height: 2};\n\n                var path = iconStr.indexOf('image://') === 0\n                    ? (\n                        iconStyle.image = iconStr.slice(8),\n                        iconOpt.style = iconStyle,\n                        new graphic.Image(iconOpt)\n                    )\n                    : graphic.makePath(\n                        iconStr.replace('path://', ''),\n                        iconOpt,\n                        iconStyle,\n                        'center'\n                    );\n\n                var bRect = path.getBoundingRect();\n                this._handleHeight = numberUtil.parsePercent(dataZoomModel.get('handleSize'), this._size[1]);\n                this._handleWidth = bRect.width / bRect.height * this._handleHeight;\n\n                path.setStyle(dataZoomModel.getModel('handleStyle').getItemStyle());\n                var handleColor = dataZoomModel.get('handleColor');\n                // Compatitable with previous version\n                if (handleColor != null) {\n                    path.style.fill = handleColor;\n                }\n\n                barGroup.add(handles[handleIndex] = path);\n\n                var textStyleModel = dataZoomModel.textStyleModel;\n\n                this.group.add(\n                    handleLabels[handleIndex] = new graphic.Text({\n                    silent: true,\n                    invisible: true,\n                    style: {\n                        x: 0, y: 0, text: '',\n                        textVerticalAlign: 'middle',\n                        textAlign: 'center',\n                        fill: textStyleModel.getTextColor(),\n                        textFont: textStyleModel.getFont()\n                    },\n                    z2: 10\n                }));\n\n            }, this);\n        },\n\n        /**\n         * @private\n         */\n        _resetInterval: function () {\n            var range = this._range = this.dataZoomModel.getPercentRange();\n            var viewExtent = this._getViewExtent();\n\n            this._handleEnds = [\n                linearMap(range[0], [0, 100], viewExtent, true),\n                linearMap(range[1], [0, 100], viewExtent, true)\n            ];\n        },\n\n        /**\n         * @private\n         * @param {(number|string)} handleIndex 0 or 1 or 'all'\n         * @param {number} delta\n         */\n        _updateInterval: function (handleIndex, delta) {\n            var dataZoomModel = this.dataZoomModel;\n            var handleEnds = this._handleEnds;\n            var viewExtend = this._getViewExtent();\n            var minMaxSpan = dataZoomModel.findRepresentativeAxisProxy().getMinMaxSpan();\n            var percentExtent = [0, 100];\n\n            sliderMove(\n                delta,\n                handleEnds,\n                viewExtend,\n                dataZoomModel.get('zoomLock') ? 'all' : handleIndex,\n                minMaxSpan.minSpan != null\n                    ? linearMap(minMaxSpan.minSpan, percentExtent, viewExtend, true) : null,\n                minMaxSpan.maxSpan != null\n                    ? linearMap(minMaxSpan.maxSpan, percentExtent, viewExtend, true) : null\n            );\n\n            this._range = asc([\n                linearMap(handleEnds[0], viewExtend, percentExtent, true),\n                linearMap(handleEnds[1], viewExtend, percentExtent, true)\n            ]);\n        },\n\n        /**\n         * @private\n         */\n        _updateView: function (nonRealtime) {\n            var displaybles = this._displayables;\n            var handleEnds = this._handleEnds;\n            var handleInterval = asc(handleEnds.slice());\n            var size = this._size;\n\n            each([0, 1], function (handleIndex) {\n                // Handles\n                var handle = displaybles.handles[handleIndex];\n                var handleHeight = this._handleHeight;\n                handle.attr({\n                    scale: [handleHeight / 2, handleHeight / 2],\n                    position: [handleEnds[handleIndex], size[1] / 2 - handleHeight / 2]\n                });\n            }, this);\n\n            // Filler\n            displaybles.filler.setShape({\n                x: handleInterval[0],\n                y: 0,\n                width: handleInterval[1] - handleInterval[0],\n                height: size[1]\n            });\n\n            this._updateDataInfo(nonRealtime);\n        },\n\n        /**\n         * @private\n         */\n        _updateDataInfo: function (nonRealtime) {\n            var dataZoomModel = this.dataZoomModel;\n            var displaybles = this._displayables;\n            var handleLabels = displaybles.handleLabels;\n            var orient = this._orient;\n            var labelTexts = ['', ''];\n\n            // FIXME\n            // date型，支持formatter，autoformatter（ec2 date.getAutoFormatter）\n            if (dataZoomModel.get('showDetail')) {\n                var axisProxy = dataZoomModel.findRepresentativeAxisProxy();\n\n                if (axisProxy) {\n                    var axis = axisProxy.getAxisModel().axis;\n                    var range = this._range;\n\n                    var dataInterval = nonRealtime\n                        // See #4434, data and axis are not processed and reset yet in non-realtime mode.\n                        ? axisProxy.calculateDataWindow({\n                            start: range[0], end: range[1]\n                        }).valueWindow\n                        : axisProxy.getDataValueWindow();\n\n                    labelTexts = [\n                        this._formatLabel(dataInterval[0], axis),\n                        this._formatLabel(dataInterval[1], axis)\n                    ];\n                }\n            }\n\n            var orderedHandleEnds = asc(this._handleEnds.slice());\n\n            setLabel.call(this, 0);\n            setLabel.call(this, 1);\n\n            function setLabel(handleIndex) {\n                // Label\n                // Text should not transform by barGroup.\n                // Ignore handlers transform\n                var barTransform = graphic.getTransform(\n                    displaybles.handles[handleIndex].parent, this.group\n                );\n                var direction = graphic.transformDirection(\n                    handleIndex === 0 ? 'right' : 'left', barTransform\n                );\n                var offset = this._handleWidth / 2 + LABEL_GAP;\n                var textPoint = graphic.applyTransform(\n                    [\n                        orderedHandleEnds[handleIndex] + (handleIndex === 0 ? -offset : offset),\n                        this._size[1] / 2\n                    ],\n                    barTransform\n                );\n                handleLabels[handleIndex].setStyle({\n                    x: textPoint[0],\n                    y: textPoint[1],\n                    textVerticalAlign: orient === HORIZONTAL ? 'middle' : direction,\n                    textAlign: orient === HORIZONTAL ? direction : 'center',\n                    text: labelTexts[handleIndex]\n                });\n            }\n        },\n\n        /**\n         * @private\n         */\n        _formatLabel: function (value, axis) {\n            var dataZoomModel = this.dataZoomModel;\n            var labelFormatter = dataZoomModel.get('labelFormatter');\n\n            var labelPrecision = dataZoomModel.get('labelPrecision');\n            if (labelPrecision == null || labelPrecision === 'auto') {\n                labelPrecision = axis.getPixelPrecision();\n            }\n\n            var valueStr = (value == null || isNaN(value))\n                ? ''\n                // FIXME Glue code\n                : (axis.type === 'category' || axis.type === 'time')\n                    ? axis.scale.getLabel(Math.round(value))\n                    // param of toFixed should less then 20.\n                    : value.toFixed(Math.min(labelPrecision, 20));\n\n            return zrUtil.isFunction(labelFormatter)\n                ? labelFormatter(value, valueStr)\n                : zrUtil.isString(labelFormatter)\n                ? labelFormatter.replace('{value}', valueStr)\n                : valueStr;\n        },\n\n        /**\n         * @private\n         * @param {boolean} showOrHide true: show, false: hide\n         */\n        _showDataInfo: function (showOrHide) {\n            // Always show when drgging.\n            showOrHide = this._dragging || showOrHide;\n\n            var handleLabels = this._displayables.handleLabels;\n            handleLabels[0].attr('invisible', !showOrHide);\n            handleLabels[1].attr('invisible', !showOrHide);\n        },\n\n        _onDragMove: function (handleIndex, dx, dy) {\n            this._dragging = true;\n\n            // Transform dx, dy to bar coordination.\n            var barTransform = this._displayables.barGroup.getLocalTransform();\n            var vertex = graphic.applyTransform([dx, dy], barTransform, true);\n\n            this._updateInterval(handleIndex, vertex[0]);\n\n            var realtime = this.dataZoomModel.get('realtime');\n\n            this._updateView(!realtime);\n\n            if (realtime) {\n                realtime && this._dispatchZoomAction();\n            }\n        },\n\n        _onDragEnd: function () {\n            this._dragging = false;\n            this._showDataInfo(false);\n            this._dispatchZoomAction();\n        },\n\n        _onClickPanelClick: function (e) {\n            var size = this._size;\n            var localPoint = this._displayables.barGroup.transformCoordToLocal(e.offsetX, e.offsetY);\n\n            if (localPoint[0] < 0 || localPoint[0] > size[0]\n                || localPoint[1] < 0 || localPoint[1] > size[1]\n            ) {\n                return;\n            }\n\n            var handleEnds = this._handleEnds;\n            var center = (handleEnds[0] + handleEnds[1]) / 2;\n\n            this._updateInterval('all', localPoint[0] - center);\n            this._updateView();\n            this._dispatchZoomAction();\n        },\n\n        /**\n         * This action will be throttled.\n         * @private\n         */\n        _dispatchZoomAction: function () {\n            var range = this._range;\n\n            this.api.dispatchAction({\n                type: 'dataZoom',\n                from: this.uid,\n                dataZoomId: this.dataZoomModel.id,\n                start: range[0],\n                end: range[1]\n            });\n        },\n\n        /**\n         * @private\n         */\n        _findCoordRect: function () {\n            // Find the grid coresponding to the first axis referred by dataZoom.\n            var rect;\n            each(this.getTargetCoordInfo(), function (coordInfoList) {\n                if (!rect && coordInfoList.length) {\n                    var coordSys = coordInfoList[0].model.coordinateSystem;\n                    rect = coordSys.getRect && coordSys.getRect();\n                }\n            });\n            if (!rect) {\n                var width = this.api.getWidth();\n                var height = this.api.getHeight();\n                rect = {\n                    x: width * 0.2,\n                    y: height * 0.2,\n                    width: width * 0.6,\n                    height: height * 0.6\n                };\n            }\n\n            return rect;\n        }\n\n    });\n\n    function getOtherDim(thisDim) {\n        // FIXME\n        // 这个逻辑和getOtherAxis里一致，但是写在这里是否不好\n        var map = {x: 'y', y: 'x', radius: 'angle', angle: 'radius'};\n        return map[thisDim];\n    }\n\n    module.exports = SliderZoomView;\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.6.1@echarts/lib/component/dataZoom/SliderZoomView.js\n// module id = XL7f\n// module chunks = 0 1","\n\n    var helper = {};\n\n    var IRRELEVANT_EXCLUDES = {'axisPointer': 1, 'tooltip': 1, 'brush': 1};\n\n    /**\n     * Avoid that: mouse click on a elements that is over geo or graph,\n     * but roam is triggered.\n     */\n    helper.onIrrelevantElement = function (e, api, targetCoordSysModel) {\n        var model = api.getComponentByElement(e.topTarget);\n        // If model is axisModel, it works only if it is injected with coordinateSystem.\n        var coordSys = model && model.coordinateSystem;\n        return model\n            && model !== targetCoordSysModel\n            && !IRRELEVANT_EXCLUDES[model.mainType]\n            && (coordSys && coordSys.model !== targetCoordSysModel);\n    };\n\n    module.exports = helper;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.6.1@echarts/lib/component/helper/cursorHelper.js\n// module id = XQWN\n// module chunks = 0 1","\n\n    var createListFromArray = require('./chart/helper/createListFromArray');\n    var symbolUtil = require('./util/symbol');\n    var axisHelper = require('./coord/axisHelper');\n    var axisModelCommonMixin = require('./coord/axisModelCommonMixin');\n    var Model = require('./model/Model');\n    var util = require('zrender/lib/core/util');\n\n    module.exports = {\n        /**\n         * Create a muti dimension List structure from seriesModel.\n         * @param  {module:echarts/model/Model} seriesModel\n         * @return {module:echarts/data/List} list\n         */\n        createList: function (seriesModel) {\n            var data = seriesModel.get('data');\n            return createListFromArray(data, seriesModel, seriesModel.ecModel);\n        },\n\n        /**\n         * @see {module:echarts/data/helper/completeDimensions}\n         */\n        completeDimensions: require('./data/helper/completeDimensions'),\n\n        /**\n         * Create a symbol element with given symbol configuration: shape, x, y, width, height, color\n         * @see http://echarts.baidu.com/option.html#series-scatter.symbol\n         * @param {string} symbolDesc\n         * @param {number} x\n         * @param {number} y\n         * @param {number} w\n         * @param {number} h\n         * @param {string} color\n         */\n        createSymbol: symbolUtil.createSymbol,\n\n        /**\n         * Create scale\n         * @param {Array.<number>} dataExtent\n         * @param {Object|module:echarts/Model} option\n         */\n        createScale: function (dataExtent, option) {\n            var axisModel = option;\n            if (!(option instanceof Model)) {\n                axisModel = new Model(option);\n                util.mixin(axisModel, axisModelCommonMixin);\n            }\n\n            var scale = axisHelper.createScaleByModel(axisModel);\n            scale.setExtent(dataExtent[0], dataExtent[1]);\n\n            axisHelper.niceScaleExtent(scale, axisModel);\n            return scale;\n        },\n\n        /**\n         * Mixin common methods to axis model,\n         *\n         * Inlcude methods\n         * `getFormattedLabels() => Array.<string>`\n         * `getCategories() => Array.<string>`\n         * `getMin(origin: boolean) => number`\n         * `getMax(origin: boolean) => number`\n         * `getNeedCrossZero() => boolean`\n         * `setRange(start: number, end: number)`\n         * `resetRange()`\n         */\n        mixinAxisModelCommonMethods: function (Model) {\n            util.mixin(Model, axisModelCommonMixin);\n        }\n    };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.6.1@echarts/lib/helper.js\n// module id = XZzg\n// module chunks = 0 1","'use strict';\n\n\n    var zrUtil = require('zrender/lib/core/util');\n    var graphic = require('../../util/graphic');\n    var textContain = require('zrender/lib/contain/text');\n    var formatUtil = require('../../util/format');\n    var matrix = require('zrender/lib/core/matrix');\n    var axisHelper = require('../../coord/axisHelper');\n    var AxisBuilder = require('../axis/AxisBuilder');\n\n    var helper = {};\n\n    /**\n     * @param {module:echarts/model/Model} axisPointerModel\n     */\n    helper.buildElStyle = function (axisPointerModel) {\n        var axisPointerType = axisPointerModel.get('type');\n        var styleModel = axisPointerModel.getModel(axisPointerType + 'Style');\n        var style;\n        if (axisPointerType === 'line') {\n            style = styleModel.getLineStyle();\n            style.fill = null;\n        }\n        else if (axisPointerType === 'shadow') {\n            style = styleModel.getAreaStyle();\n            style.stroke = null;\n        }\n        return style;\n    };\n\n    /**\n     * @param {Function} labelPos {align, verticalAlign, position}\n     */\n    helper.buildLabelElOption = function (\n        elOption, axisModel, axisPointerModel, api, labelPos\n    ) {\n        var value = axisPointerModel.get('value');\n        var text = helper.getValueLabel(\n            value, axisModel.axis, axisModel.ecModel,\n            axisPointerModel.get('seriesDataIndices'),\n            {\n                precision: axisPointerModel.get('label.precision'),\n                formatter: axisPointerModel.get('label.formatter')\n            }\n        );\n        var labelModel = axisPointerModel.getModel('label');\n        var textStyleModel = labelModel.getModel('textStyle');\n        var paddings = formatUtil.normalizeCssArray(labelModel.get('padding') || 0);\n\n        var font = textStyleModel.getFont();\n        var textRect = textContain.getBoundingRect(\n            text, font, labelPos.textAlign, labelPos.textBaseline\n        );\n\n        var position = labelPos.position;\n        var width = textRect.width + paddings[1] + paddings[3];\n        var height = textRect.height + paddings[0] + paddings[2];\n\n        // Adjust by align.\n        var align = labelPos.align;\n        align === 'right' && (position[0] -= width);\n        align === 'center' && (position[0] -= width / 2);\n        var verticalAlign = labelPos.verticalAlign;\n        verticalAlign === 'bottom' && (position[1] -= height);\n        verticalAlign === 'middle' && (position[1] -= height / 2);\n\n        // Not overflow ec container\n        confineInContainer(position, width, height, api);\n\n        var bgColor = labelModel.get('backgroundColor');\n        if (!bgColor || bgColor === 'auto') {\n            bgColor = axisModel.get('axisLine.lineStyle.color');\n        }\n\n        elOption.label = {\n            shape: {x: 0, y: 0, width: width, height: height, r: labelModel.get('borderRadius')},\n            position: position.slice(),\n            style: {\n                text: text,\n                textFont: font,\n                textFill: textStyleModel.getTextColor(),\n                textPosition: 'inside',\n                fill: bgColor,\n                stroke: labelModel.get('borderColor') || 'transparent',\n                lineWidth: labelModel.get('borderWidth') || 0,\n                shadowBlur: labelModel.get('shadowBlur'),\n                shadowColor: labelModel.get('shadowColor'),\n                shadowOffsetX: labelModel.get('shadowOffsetX'),\n                shadowOffsetY: labelModel.get('shadowOffsetY')\n            },\n            // Lable should be over axisPointer.\n            z2: 10\n        };\n    };\n\n    // Do not overflow ec container\n    function confineInContainer(position, width, height, api) {\n        var viewWidth = api.getWidth();\n        var viewHeight = api.getHeight();\n        position[0] = Math.min(position[0] + width, viewWidth) - width;\n        position[1] = Math.min(position[1] + height, viewHeight) - height;\n        position[0] = Math.max(position[0], 0);\n        position[1] = Math.max(position[1], 0);\n    }\n\n    /**\n     * @param {number} value\n     * @param {module:echarts/coord/Axis} axis\n     * @param {module:echarts/model/Global} ecModel\n     * @param {Object} opt\n     * @param {Array.<Object>} seriesDataIndices\n     * @param {number|string} opt.precision 'auto' or a number\n     * @param {string|Function} opt.formatter label formatter\n     */\n    helper.getValueLabel = function (value, axis, ecModel, seriesDataIndices, opt) {\n        var text = axis.scale.getLabel(\n            // If `precision` is set, width can be fixed (like '12.00500'), which\n            // helps to debounce when when moving label.\n            value, {precision: opt.precision}\n        );\n        var formatter = opt.formatter;\n\n        if (formatter) {\n            var params = {\n                value: axisHelper.getAxisRawValue(axis, value),\n                seriesData: []\n            };\n            zrUtil.each(seriesDataIndices, function (idxItem) {\n                var series = ecModel.getSeriesByIndex(idxItem.seriesIndex);\n                var dataIndex = idxItem.dataIndexInside;\n                var dataParams = series && series.getDataParams(dataIndex);\n                dataParams && params.seriesData.push(dataParams);\n            });\n\n            if (zrUtil.isString(formatter)) {\n                text = formatter.replace('{value}', text);\n            }\n            else if (zrUtil.isFunction(formatter)) {\n                text = formatter(params);\n            }\n        }\n\n        return text;\n    };\n\n    /**\n     * @param {module:echarts/coord/Axis} axis\n     * @param {number} value\n     * @param {Object} layoutInfo {\n     *  rotation, position, labelOffset, labelDirection, labelMargin\n     * }\n     */\n    helper.getTransformedPosition = function (axis, value, layoutInfo) {\n        var transform = matrix.create();\n        matrix.rotate(transform, transform, layoutInfo.rotation);\n        matrix.translate(transform, transform, layoutInfo.position);\n\n        return graphic.applyTransform([\n            axis.dataToCoord(value),\n            (layoutInfo.labelOffset || 0)\n                + (layoutInfo.labelDirection || 1) * (layoutInfo.labelMargin || 0)\n        ], transform);\n    };\n\n    helper.buildCartesianSingleLabelElOption = function (\n        value, elOption, layoutInfo, axisModel, axisPointerModel, api\n    ) {\n        var textLayout = AxisBuilder.innerTextLayout(\n            layoutInfo.rotation, 0, layoutInfo.labelDirection\n        );\n        layoutInfo.labelMargin = axisPointerModel.get('label.margin');\n        helper.buildLabelElOption(elOption, axisModel, axisPointerModel, api, {\n            position: helper.getTransformedPosition(axisModel.axis, value, layoutInfo),\n            align: textLayout.textAlign,\n            verticalAlign: textLayout.textVerticalAlign\n        });\n    };\n\n    /**\n     * @param {Array.<number>} p1\n     * @param {Array.<number>} p2\n     * @param {number} [xDimIndex=0] or 1\n     */\n    helper.makeLineShape = function (p1, p2, xDimIndex) {\n        xDimIndex = xDimIndex || 0;\n        return {\n            x1: p1[xDimIndex],\n            y1: p1[1 - xDimIndex],\n            x2: p2[xDimIndex],\n            y2: p2[1 - xDimIndex]\n        };\n    };\n\n    /**\n     * @param {Array.<number>} xy\n     * @param {Array.<number>} wh\n     * @param {number} [xDimIndex=0] or 1\n     */\n    helper.makeRectShape = function (xy, wh, xDimIndex) {\n        xDimIndex = xDimIndex || 0;\n        return {\n            x: xy[xDimIndex],\n            y: xy[1 - xDimIndex],\n            width: wh[xDimIndex],\n            height: wh[1 - xDimIndex]\n        };\n    };\n\n    helper.makeSectorShape = function (cx, cy, r0, r, startAngle, endAngle) {\n        return {\n            cx: cx,\n            cy: cy,\n            r0: r0,\n            r: r,\n            startAngle: startAngle,\n            endAngle: endAngle,\n            clockwise: true\n        };\n    };\n\n    module.exports = helper;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.6.1@echarts/lib/component/axisPointer/viewHelper.js\n// module id = XrCg\n// module chunks = 0 1","/**\n * Linear continuous scale\n * @module echarts/coord/scale/Ordinal\n *\n * http://en.wikipedia.org/wiki/Level_of_measurement\n */\n\n// FIXME only one data\n\n\n    var zrUtil = require('zrender/lib/core/util');\n    var Scale = require('./Scale');\n\n    var scaleProto = Scale.prototype;\n\n    var OrdinalScale = Scale.extend({\n\n        type: 'ordinal',\n\n        init: function (data, extent) {\n            this._data = data;\n            this._extent = extent || [0, data.length - 1];\n        },\n\n        parse: function (val) {\n            return typeof val === 'string'\n                ? zrUtil.indexOf(this._data, val)\n                // val might be float.\n                : Math.round(val);\n        },\n\n        contain: function (rank) {\n            rank = this.parse(rank);\n            return scaleProto.contain.call(this, rank)\n                && this._data[rank] != null;\n        },\n\n        /**\n         * Normalize given rank or name to linear [0, 1]\n         * @param {number|string} [val]\n         * @return {number}\n         */\n        normalize: function (val) {\n            return scaleProto.normalize.call(this, this.parse(val));\n        },\n\n        scale: function (val) {\n            return Math.round(scaleProto.scale.call(this, val));\n        },\n\n        /**\n         * @return {Array}\n         */\n        getTicks: function () {\n            var ticks = [];\n            var extent = this._extent;\n            var rank = extent[0];\n\n            while (rank <= extent[1]) {\n                ticks.push(rank);\n                rank++;\n            }\n\n            return ticks;\n        },\n\n        /**\n         * Get item on rank n\n         * @param {number} n\n         * @return {string}\n         */\n        getLabel: function (n) {\n            return this._data[n];\n        },\n\n        /**\n         * @return {number}\n         */\n        count: function () {\n            return this._extent[1] - this._extent[0] + 1;\n        },\n\n        /**\n         * @override\n         */\n        unionExtentFromData: function (data, dim) {\n            this.unionExtent(data.getDataExtent(dim, false));\n        },\n\n        niceTicks: zrUtil.noop,\n        niceExtent: zrUtil.noop\n    });\n\n    /**\n     * @return {module:echarts/scale/Time}\n     */\n    OrdinalScale.create = function () {\n        return new OrdinalScale();\n    };\n\n    module.exports = OrdinalScale;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.6.1@echarts/lib/scale/Ordinal.js\n// module id = YiND\n// module chunks = 0 1","\n\n    var echarts = require('../../echarts');\n\n    var AxisPointerModel = echarts.extendComponentModel({\n\n        type: 'axisPointer',\n\n        coordSysAxesInfo: null,\n\n        defaultOption: {\n            // 'auto' means that show when triggered by tooltip or handle.\n            show: 'auto',\n            // 'click' | 'mousemove' | 'none'\n            triggerOn: null, // set default in AxisPonterView.js\n\n            zlevel: 0,\n            z: 50,\n\n            type: 'line',\n            // axispointer triggered by tootip determine snap automatically,\n            // see `modelHelper`.\n            snap: false,\n            triggerTooltip: true,\n\n            value: null,\n            status: null, // Init value depends on whether handle is used.\n\n            // [group0, group1, ...]\n            // Each group can be: {\n            //      mapper: function () {},\n            //      singleTooltip: 'multiple',  // 'multiple' or 'single'\n            //      xAxisId: ...,\n            //      yAxisName: ...,\n            //      angleAxisIndex: ...\n            // }\n            // mapper: can be ignored.\n            //      input: {axisInfo, value}\n            //      output: {axisInfo, value}\n            link: [],\n\n            // Do not set 'auto' here, otherwise global animation: false\n            // will not effect at this axispointer.\n            animation: null,\n            animationDurationUpdate: 200,\n\n            lineStyle: {\n                color: '#aaa',\n                width: 1,\n                type: 'solid'\n            },\n\n            shadowStyle: {\n                color: 'rgba(150,150,150,0.3)'\n            },\n\n            label: {\n                show: true,\n                formatter: null, // string | Function\n                precision: 'auto', // Or a number like 0, 1, 2 ...\n                margin: 3,\n                textStyle: {\n                    color: '#fff'\n                },\n                padding: [5, 7, 5, 7],\n                backgroundColor: 'auto', // default: axis line color\n                borderColor: null,\n                borderWidth: 0,\n                shadowBlur: 3,\n                shadowColor: '#aaa'\n                // Considering applicability, common style should\n                // better not have shadowOffset.\n                // shadowOffsetX: 0,\n                // shadowOffsetY: 2\n            },\n\n            handle: {\n                show: false,\n                icon: 'M10.7,11.9v-1.3H9.3v1.3c-4.9,0.3-8.8,4.4-8.8,9.4c0,5,3.9,9.1,8.8,9.4h1.3c4.9-0.3,8.8-4.4,8.8-9.4C19.5,16.3,15.6,12.2,10.7,11.9z M13.3,24.4H6.7v-1.2h6.6z M13.3,22H6.7v-1.2h6.6z M13.3,19.6H6.7v-1.2h6.6z', // jshint ignore:line\n                size: 45,\n                // handle margin is from symbol center to axis, which is stable when circular move.\n                margin: 50,\n                // color: '#1b8bbd'\n                // color: '#2f4554'\n                color: '#333',\n                shadowBlur: 3,\n                shadowColor: '#aaa',\n                shadowOffsetX: 0,\n                shadowOffsetY: 2,\n\n                // For mobile performance\n                throttle: 40\n            }\n        }\n\n    });\n\n    module.exports = AxisPointerModel;\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.6.1@echarts/lib/component/axisPointer/AxisPointerModel.js\n// module id = ZCII\n// module chunks = 0 1","\n\n    require('../../model/Component').registerSubTypeDefaulter('dataZoom', function (option) {\n        // Default 'slider' when no type specified.\n        return 'slider';\n    });\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.6.1@echarts/lib/component/dataZoom/typeDefaulter.js\n// module id = ZRRT\n// module chunks = 0 1","/**\n * 多边形\n * @module zrender/shape/Polygon\n */\n\n\n    var polyHelper = require('../helper/poly');\n\n    module.exports = require('../Path').extend({\n        \n        type: 'polygon',\n\n        shape: {\n            points: null,\n\n            smooth: false,\n\n            smoothConstraint: null\n        },\n\n        buildPath: function (ctx, shape) {\n            polyHelper.buildPath(ctx, shape, true);\n        }\n    });\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.5.1@zrender/lib/graphic/shape/Polygon.js\n// module id = aREe\n// module chunks = 0 1","'use strict';\n\n\n    var zrUtil = require('zrender/lib/core/util');\n    var graphic = require('../../util/graphic');\n    var helper = require('./helper');\n\n    var BAR_BORDER_WIDTH_QUERY = ['itemStyle', 'normal', 'barBorderWidth'];\n\n    // FIXME\n    // Just for compatible with ec2.\n    zrUtil.extend(require('../../model/Model').prototype, require('./barItemStyle'));\n\n    var BarView = require('../../echarts').extendChartView({\n\n        type: 'bar',\n\n        render: function (seriesModel, ecModel, api) {\n            var coordinateSystemType = seriesModel.get('coordinateSystem');\n\n            if (coordinateSystemType === 'cartesian2d'\n                || coordinateSystemType === 'polar'\n            ) {\n                this._render(seriesModel, ecModel, api);\n            }\n            else if (__DEV__) {\n                console.warn('Only cartesian2d and polar supported for bar.');\n            }\n\n            return this.group;\n        },\n\n        dispose: zrUtil.noop,\n\n        _render: function (seriesModel, ecModel, api) {\n            var group = this.group;\n            var data = seriesModel.getData();\n            var oldData = this._data;\n\n            var coord = seriesModel.coordinateSystem;\n            var baseAxis = coord.getBaseAxis();\n            var isHorizontalOrRadial;\n\n            if (coord.type === 'cartesian2d') {\n                isHorizontalOrRadial = baseAxis.isHorizontal();\n            }\n            else if (coord.type === 'polar') {\n                isHorizontalOrRadial = baseAxis.dim === 'angle';\n            }\n\n            var animationModel = seriesModel.isAnimationEnabled() ? seriesModel : null;\n\n            data.diff(oldData)\n                .add(function (dataIndex) {\n                    if (!data.hasValue(dataIndex)) {\n                        return;\n                    }\n\n                    var itemModel = data.getItemModel(dataIndex);\n                    var layout = getLayout[coord.type](data, dataIndex, itemModel);\n                    var el = elementCreator[coord.type](\n                        data, dataIndex, itemModel, layout, isHorizontalOrRadial, animationModel\n                    );\n                    data.setItemGraphicEl(dataIndex, el);\n                    group.add(el);\n\n                    updateStyle(\n                        el, data, dataIndex, itemModel, layout,\n                        seriesModel, isHorizontalOrRadial, coord.type === 'polar'\n                    );\n                })\n                .update(function (newIndex, oldIndex) {\n                    var el = oldData.getItemGraphicEl(oldIndex);\n\n                    if (!data.hasValue(newIndex)) {\n                        group.remove(el);\n                        return;\n                    }\n\n                    var itemModel = data.getItemModel(newIndex);\n                    var layout = getLayout[coord.type](data, newIndex, itemModel);\n\n                    if (el) {\n                        graphic.updateProps(el, {shape: layout}, animationModel, newIndex);\n                    }\n                    else {\n                        el = elementCreator[coord.type](\n                            data, newIndex, itemModel, layout, isHorizontalOrRadial, animationModel, true\n                        );\n                    }\n\n                    data.setItemGraphicEl(newIndex, el);\n                    // Add back\n                    group.add(el);\n\n                    updateStyle(\n                        el, data, newIndex, itemModel, layout,\n                        seriesModel, isHorizontalOrRadial, coord.type === 'polar'\n                    );\n                })\n                .remove(function (dataIndex) {\n                    var el = oldData.getItemGraphicEl(dataIndex);\n                    if (coord.type === 'cartesian2d') {\n                        el && removeRect(dataIndex, animationModel, el);\n                    }\n                    else {\n                        el && removeSector(dataIndex, animationModel, el);\n                    }\n                })\n                .execute();\n\n            this._data = data;\n        },\n\n        remove: function (ecModel, api) {\n            var group = this.group;\n            var data = this._data;\n            if (ecModel.get('animation')) {\n                if (data) {\n                    data.eachItemGraphicEl(function (el) {\n                        if (el.type === 'sector') {\n                            removeSector(el.dataIndex, ecModel, el);\n                        }\n                        else {\n                            removeRect(el.dataIndex, ecModel, el);\n                        }\n                    });\n                }\n            }\n            else {\n                group.removeAll();\n            }\n        }\n    });\n\n    var elementCreator = {\n\n        cartesian2d: function (\n            data, dataIndex, itemModel, layout, isHorizontal,\n            animationModel, isUpdate\n        ) {\n            var rect = new graphic.Rect({shape: zrUtil.extend({}, layout)});\n\n            // Animation\n            if (animationModel) {\n                var rectShape = rect.shape;\n                var animateProperty = isHorizontal ? 'height' : 'width';\n                var animateTarget = {};\n                rectShape[animateProperty] = 0;\n                animateTarget[animateProperty] = layout[animateProperty];\n                graphic[isUpdate ? 'updateProps' : 'initProps'](rect, {\n                    shape: animateTarget\n                }, animationModel, dataIndex);\n            }\n\n            return rect;\n        },\n\n        polar: function (\n            data, dataIndex, itemModel, layout, isRadial,\n            animationModel, isUpdate\n        ) {\n            var sector = new graphic.Sector({shape: zrUtil.extend({}, layout)});\n\n            // Animation\n            if (animationModel) {\n                var sectorShape = sector.shape;\n                var animateProperty = isRadial ? 'r' : 'endAngle';\n                var animateTarget = {};\n                sectorShape[animateProperty] = isRadial ? 0 : layout.startAngle;\n                animateTarget[animateProperty] = layout[animateProperty];\n                graphic[isUpdate ? 'updateProps' : 'initProps'](sector, {\n                    shape: animateTarget\n                }, animationModel, dataIndex);\n            }\n\n            return sector;\n        }\n    };\n\n    function removeRect(dataIndex, animationModel, el) {\n        // Not show text when animating\n        el.style.text = '';\n        graphic.updateProps(el, {\n            shape: {\n                width: 0\n            }\n        }, animationModel, dataIndex, function () {\n            el.parent && el.parent.remove(el);\n        });\n    }\n\n    function removeSector(dataIndex, animationModel, el) {\n        // Not show text when animating\n        el.style.text = '';\n        graphic.updateProps(el, {\n            shape: {\n                r: el.shape.r0\n            }\n        }, animationModel, dataIndex, function () {\n            el.parent && el.parent.remove(el);\n        });\n    }\n\n    var getLayout = {\n        cartesian2d: function (data, dataIndex, itemModel) {\n            var layout = data.getItemLayout(dataIndex);\n            var fixedLineWidth = getLineWidth(itemModel, layout);\n\n            // fix layout with lineWidth\n            var signX = layout.width > 0 ? 1 : -1;\n            var signY = layout.height > 0 ? 1 : -1;\n            return {\n                x: layout.x + signX * fixedLineWidth / 2,\n                y: layout.y + signY * fixedLineWidth / 2,\n                width: layout.width - signX * fixedLineWidth,\n                height: layout.height - signY * fixedLineWidth\n            };\n        },\n\n        polar: function (data, dataIndex, itemModel) {\n            var layout = data.getItemLayout(dataIndex);\n            return {\n                cx: layout.cx,\n                cy: layout.cy,\n                r0: layout.r0,\n                r: layout.r,\n                startAngle: layout.startAngle,\n                endAngle: layout.endAngle\n            };\n        }\n    };\n\n    function updateStyle(\n        el, data, dataIndex, itemModel, layout, seriesModel, isHorizontal, isPolar\n    ) {\n        var color = data.getItemVisual(dataIndex, 'color');\n        var opacity = data.getItemVisual(dataIndex, 'opacity');\n        var itemStyleModel = itemModel.getModel('itemStyle.normal');\n        var hoverStyle = itemModel.getModel('itemStyle.emphasis').getBarItemStyle();\n\n        if (!isPolar && isHorizontal) {\n            el.setShape('r', itemStyleModel.get('barBorderRadius') || 0);\n        }\n\n        el.useStyle(zrUtil.defaults(\n            {\n                fill: color,\n                opacity: opacity\n            },\n            itemStyleModel.getBarItemStyle()\n        ));\n\n        var labelPositionOutside = isHorizontal\n            ? (layout.height > 0 ? 'bottom' : 'top')\n            : (layout.width > 0 ? 'left' : 'right');\n\n        if (!isPolar) {\n            helper.setLabel(\n                el.style, hoverStyle, itemModel, color,\n                seriesModel, dataIndex, labelPositionOutside\n            );\n        }\n\n        graphic.setHoverStyle(el, hoverStyle);\n    }\n\n    // In case width or height are too small.\n    function getLineWidth(itemModel, rawLayout) {\n        var lineWidth = itemModel.get(BAR_BORDER_WIDTH_QUERY) || 0;\n        return Math.min(lineWidth, Math.abs(rawLayout.width), Math.abs(rawLayout.height));\n    }\n\n    module.exports = BarView;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.6.1@echarts/lib/chart/bar/BarView.js\n// module id = ad5Q\n// module chunks = 0 1","\n\n    var globalListener = require('./globalListener');\n\n    var AxisPonterView = require('../../echarts').extendComponentView({\n\n        type: 'axisPointer',\n\n        render: function (globalAxisPointerModel, ecModel, api) {\n            var globalTooltipModel = ecModel.getComponent('tooltip');\n            var triggerOn = globalAxisPointerModel.get('triggerOn')\n                || (globalTooltipModel && globalTooltipModel.get('triggerOn') || 'mousemove|click');\n\n            // Register global listener in AxisPointerView to enable\n            // AxisPointerView to be independent to Tooltip.\n            globalListener.register(\n                'axisPointer',\n                api,\n                function (currTrigger, e, dispatchAction) {\n                    // If 'none', it is not controlled by mouse totally.\n                    if (triggerOn !== 'none'\n                        && (currTrigger === 'leave' || triggerOn.indexOf(currTrigger) >= 0)\n                    ) {\n                        dispatchAction({\n                            type: 'updateAxisPointer',\n                            currTrigger: currTrigger,\n                            x: e && e.offsetX,\n                            y: e && e.offsetY\n                        });\n                    }\n                }\n            );\n        },\n\n        /**\n         * @override\n         */\n        remove: function (ecModel, api) {\n            globalListener.disopse(api.getZr(), 'axisPointer');\n            AxisPonterView.superApply(this._model, 'remove', arguments);\n        },\n\n        /**\n         * @override\n         */\n        dispose: function (ecModel, api) {\n            globalListener.unregister('axisPointer', api);\n            AxisPonterView.superApply(this._model, 'dispose', arguments);\n        }\n\n    });\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.6.1@echarts/lib/component/axisPointer/AxisPointerView.js\n// module id = ai9K\n// module chunks = 0 1","'use strict';\n\n\n    var zrUtil = require('../core/util');\n\n    var Gradient = require('./Gradient');\n\n    /**\n     * x, y, r are all percent from 0 to 1\n     * @param {number} [x=0.5]\n     * @param {number} [y=0.5]\n     * @param {number} [r=0.5]\n     * @param {Array.<Object>} [colorStops]\n     * @param {boolean} [globalCoord=false]\n     */\n    var RadialGradient = function (x, y, r, colorStops, globalCoord) {\n        // Should do nothing more in this constructor. Because gradient can be\n        // declard by `color: {type: 'radial', colorStops: ...}`, where\n        // this constructor will not be called.\n\n        this.x = x == null ? 0.5 : x;\n\n        this.y = y == null ? 0.5 : y;\n\n        this.r = r == null ? 0.5 : r;\n\n        // Can be cloned\n        this.type = 'radial';\n\n        // If use global coord\n        this.global = globalCoord || false;\n\n        Gradient.call(this, colorStops);\n    };\n\n    RadialGradient.prototype = {\n\n        constructor: RadialGradient\n    };\n\n    zrUtil.inherits(RadialGradient, Gradient);\n\n    module.exports = RadialGradient;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.5.1@zrender/lib/graphic/RadialGradient.js\n// module id = bHR6\n// module chunks = 0 1","\n\n    var OrdinalScale = require('../scale/Ordinal');\n    var IntervalScale = require('../scale/Interval');\n    require('../scale/Time');\n    require('../scale/Log');\n    var Scale = require('../scale/Scale');\n\n    var numberUtil = require('../util/number');\n    var zrUtil = require('zrender/lib/core/util');\n    var textContain = require('zrender/lib/contain/text');\n    var axisHelper = {};\n\n    /**\n     * Get axis scale extent before niced.\n     * Item of returned array can only be number (including Infinity and NaN).\n     */\n    axisHelper.getScaleExtent = function (scale, model) {\n        var scaleType = scale.type;\n\n        var min = model.getMin();\n        var max = model.getMax();\n        var fixMin = min != null;\n        var fixMax = max != null;\n        var originalExtent = scale.getExtent();\n\n        var axisDataLen;\n        var boundaryGap;\n        var span;\n        if (scaleType === 'ordinal') {\n            axisDataLen = (model.get('data') || []).length;\n        }\n        else {\n            boundaryGap = model.get('boundaryGap');\n            if (!zrUtil.isArray(boundaryGap)) {\n                boundaryGap = [boundaryGap || 0, boundaryGap || 0];\n            }\n            if (typeof boundaryGap[0] === 'boolean') {\n                if (__DEV__) {\n                    console.warn('Boolean type for boundaryGap is only '\n                        + 'allowed for ordinal axis. Please use string in '\n                        + 'percentage instead, e.g., \"20%\". Currently, '\n                        + 'boundaryGap is set to be 0.');\n                }\n                boundaryGap = [0, 0];\n            }\n            boundaryGap[0] = numberUtil.parsePercent(boundaryGap[0], 1);\n            boundaryGap[1] = numberUtil.parsePercent(boundaryGap[1], 1);\n            span = (originalExtent[1] - originalExtent[0])\n                || Math.abs(originalExtent[0]);\n        }\n\n        // Notice: When min/max is not set (that is, when there are null/undefined,\n        // which is the most common case), these cases should be ensured:\n        // (1) For 'ordinal', show all axis.data.\n        // (2) For others:\n        //      + `boundaryGap` is applied (if min/max set, boundaryGap is\n        //      disabled).\n        //      + If `needCrossZero`, min/max should be zero, otherwise, min/max should\n        //      be the result that originalExtent enlarged by boundaryGap.\n        // (3) If no data, it should be ensured that `scale.setBlank` is set.\n\n        // FIXME\n        // (1) When min/max is 'dataMin' or 'dataMax', should boundaryGap be able to used?\n        // (2) When `needCrossZero` and all data is positive/negative, should it be ensured\n        // that the results processed by boundaryGap are positive/negative?\n\n        if (min == null) {\n            min = scaleType === 'ordinal'\n                ? (axisDataLen ? 0 : NaN)\n                : originalExtent[0] - boundaryGap[0] * span;\n        }\n        if (max == null) {\n            max = scaleType === 'ordinal'\n                ? (axisDataLen ? axisDataLen - 1 : NaN)\n                : originalExtent[1] + boundaryGap[1] * span;\n        }\n\n        if (min === 'dataMin') {\n            min = originalExtent[0];\n        }\n        if (max === 'dataMax') {\n            max = originalExtent[1];\n        }\n\n        (min == null || !isFinite(min)) && (min = NaN);\n        (max == null || !isFinite(max)) && (max = NaN);\n\n        scale.setBlank(zrUtil.eqNaN(min) || zrUtil.eqNaN(max));\n\n        // Evaluate if axis needs cross zero\n        if (model.getNeedCrossZero()) {\n            // Axis is over zero and min is not set\n            if (min > 0 && max > 0 && !fixMin) {\n                min = 0;\n            }\n            // Axis is under zero and max is not set\n            if (min < 0 && max < 0 && !fixMax) {\n                max = 0;\n            }\n        }\n\n        return [min, max];\n    };\n\n    axisHelper.niceScaleExtent = function (scale, model) {\n        var extent = axisHelper.getScaleExtent(scale, model);\n        var fixMin = model.getMin() != null;\n        var fixMax = model.getMax() != null;\n        var splitNumber = model.get('splitNumber');\n\n        if (scale.type === 'log') {\n            scale.base = model.get('logBase');\n        }\n\n        scale.setExtent(extent[0], extent[1]);\n        scale.niceExtent({\n            splitNumber: splitNumber,\n            fixMin: fixMin,\n            fixMax: fixMax,\n            minInterval: scale.type === 'interval' ? model.get('minInterval') : null\n        });\n\n        // If some one specified the min, max. And the default calculated interval\n        // is not good enough. He can specify the interval. It is often appeared\n        // in angle axis with angle 0 - 360. Interval calculated in interval scale is hard\n        // to be 60.\n        // FIXME\n        var interval = model.get('interval');\n        if (interval != null) {\n            scale.setInterval && scale.setInterval(interval);\n        }\n    };\n\n    /**\n     * @param {module:echarts/model/Model} model\n     * @param {string} [axisType] Default retrieve from model.type\n     * @return {module:echarts/scale/*}\n     */\n    axisHelper.createScaleByModel = function(model, axisType) {\n        axisType = axisType || model.get('type');\n        if (axisType) {\n            switch (axisType) {\n                // Buildin scale\n                case 'category':\n                    return new OrdinalScale(\n                        model.getCategories(), [Infinity, -Infinity]\n                    );\n                case 'value':\n                    return new IntervalScale();\n                // Extended scale, like time and log\n                default:\n                    return (Scale.getClass(axisType) || IntervalScale).create(model);\n            }\n        }\n    };\n\n    /**\n     * Check if the axis corss 0\n     */\n    axisHelper.ifAxisCrossZero = function (axis) {\n        var dataExtent = axis.scale.getExtent();\n        var min = dataExtent[0];\n        var max = dataExtent[1];\n        return !((min > 0 && max > 0) || (min < 0 && max < 0));\n    };\n\n    /**\n     * @param {Array.<number>} tickCoords In axis self coordinate.\n     * @param {Array.<string>} labels\n     * @param {string} font\n     * @param {boolean} isAxisHorizontal\n     * @return {number}\n     */\n    axisHelper.getAxisLabelInterval = function (tickCoords, labels, font, isAxisHorizontal) {\n        // FIXME\n        // 不同角的axis和label，不只是horizontal和vertical.\n\n        var textSpaceTakenRect;\n        var autoLabelInterval = 0;\n        var accumulatedLabelInterval = 0;\n\n        var step = 1;\n        if (labels.length > 40) {\n            // Simple optimization for large amount of labels\n            step = Math.floor(labels.length / 40);\n        }\n\n        for (var i = 0; i < tickCoords.length; i += step) {\n            var tickCoord = tickCoords[i];\n            var rect = textContain.getBoundingRect(\n                labels[i], font, 'center', 'top'\n            );\n            rect[isAxisHorizontal ? 'x' : 'y'] += tickCoord;\n            // FIXME Magic number 1.5\n            rect[isAxisHorizontal ? 'width' : 'height'] *= 1.3;\n            if (!textSpaceTakenRect) {\n                textSpaceTakenRect = rect.clone();\n            }\n            // There is no space for current label;\n            else if (textSpaceTakenRect.intersect(rect)) {\n                accumulatedLabelInterval++;\n                autoLabelInterval = Math.max(autoLabelInterval, accumulatedLabelInterval);\n            }\n            else {\n                textSpaceTakenRect.union(rect);\n                // Reset\n                accumulatedLabelInterval = 0;\n            }\n        }\n        if (autoLabelInterval === 0 && step > 1) {\n            return step;\n        }\n        return (autoLabelInterval + 1) * step - 1;\n    };\n\n    /**\n     * @param {Object} axis\n     * @param {Function} labelFormatter\n     * @return {Array.<string>}\n     */\n    axisHelper.getFormattedLabels = function (axis, labelFormatter) {\n        var scale = axis.scale;\n        var labels = scale.getTicksLabels();\n        var ticks = scale.getTicks();\n        if (typeof labelFormatter === 'string') {\n            labelFormatter = (function (tpl) {\n                return function (val) {\n                    return tpl.replace('{value}', val != null ? val : '');\n                };\n            })(labelFormatter);\n            // Consider empty array\n            return zrUtil.map(labels, labelFormatter);\n        }\n        else if (typeof labelFormatter === 'function') {\n            return zrUtil.map(ticks, function (tick, idx) {\n                return labelFormatter(\n                    axisHelper.getAxisRawValue(axis, tick),\n                    idx\n                );\n            }, this);\n        }\n        else {\n            return labels;\n        }\n    };\n\n    axisHelper.getAxisRawValue = function (axis, value) {\n        // In category axis with data zoom, tick is not the original\n        // index of axis.data. So tick should not be exposed to user\n        // in category axis.\n        return axis.type === 'category' ? axis.scale.getLabel(value) : value;\n    };\n\n    module.exports = axisHelper;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.6.1@echarts/lib/coord/axisHelper.js\n// module id = bL7R\n// module chunks = 0 1","\n\n    /**\n     * Calculate slider move result.\n     * Usage:\n     * (1) If both handle0 and handle1 are needed to be moved, set minSpan the same as\n     * maxSpan and the same as `Math.abs(handleEnd[1] - handleEnds[0])`.\n     * (2) If handle0 is forbidden to cross handle1, set minSpan as `0`.\n     *\n     * @param {number} delta Move length.\n     * @param {Array.<number>} handleEnds handleEnds[0] can be bigger then handleEnds[1].\n     *              handleEnds will be modified in this method.\n     * @param {Array.<number>} extent handleEnds is restricted by extent.\n     *              extent[0] should less or equals than extent[1].\n     * @param {number|string} handleIndex Can be 'all', means that both move the two handleEnds,\n     *              where the input minSpan and maxSpan will not work.\n     * @param {number} [minSpan] The range of dataZoom can not be smaller than that.\n     *              If not set, handle0 and cross handle1. If set as a non-negative\n     *              number (including `0`), handles will push each other when reaching\n     *              the minSpan.\n     * @param {number} [maxSpan] The range of dataZoom can not be larger than that.\n     * @return {Array.<number>} The input handleEnds.\n     */\n    module.exports = function (delta, handleEnds, extent, handleIndex, minSpan, maxSpan) {\n        // Normalize firstly.\n        handleEnds[0] = restrict(handleEnds[0], extent);\n        handleEnds[1] = restrict(handleEnds[1], extent);\n\n        delta = delta || 0;\n\n        var extentSpan = extent[1] - extent[0];\n\n        // Notice maxSpan and minSpan can be null/undefined.\n        if (minSpan != null) {\n            minSpan = restrict(minSpan, [0, extentSpan]);\n        }\n        if (maxSpan != null) {\n            maxSpan = Math.max(maxSpan, minSpan != null ? minSpan : 0);\n        }\n        if (handleIndex === 'all') {\n            minSpan = maxSpan = Math.abs(handleEnds[1] - handleEnds[0]);\n            handleIndex = 0;\n        }\n\n        var originalDistSign = getSpanSign(handleEnds, handleIndex);\n\n        handleEnds[handleIndex] += delta;\n\n        // Restrict in extent.\n        var extentMinSpan = minSpan || 0;\n        var realExtent = extent.slice();\n        originalDistSign.sign < 0 ? (realExtent[0] += extentMinSpan) : (realExtent[1] -= extentMinSpan);\n        handleEnds[handleIndex] = restrict(handleEnds[handleIndex], realExtent);\n\n        // Expand span.\n        var currDistSign = getSpanSign(handleEnds, handleIndex);\n        if (minSpan != null && (\n            currDistSign.sign !== originalDistSign.sign || currDistSign.span < minSpan\n        )) {\n            // If minSpan exists, 'cross' is forbinden.\n            handleEnds[1 - handleIndex] = handleEnds[handleIndex] + originalDistSign.sign * minSpan;\n        }\n\n        // Shrink span.\n        var currDistSign = getSpanSign(handleEnds, handleIndex);\n        if (maxSpan != null && currDistSign.span > maxSpan) {\n            handleEnds[1 - handleIndex] = handleEnds[handleIndex] + currDistSign.sign * maxSpan;\n        }\n\n        return handleEnds;\n    };\n\n    function getSpanSign(handleEnds, handleIndex) {\n        var dist = handleEnds[handleIndex] - handleEnds[1 - handleIndex];\n        // If `handleEnds[0] === handleEnds[1]`, always believe that handleEnd[0]\n        // is at left of handleEnds[1] for non-cross case.\n        return {span: Math.abs(dist), sign: dist > 0 ? -1 : dist < 0 ? 1 : handleIndex ? -1 : 1};\n    }\n\n    function restrict(value, extend) {\n        return Math.min(extend[1], Math.max(extend[0], value));\n    }\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.6.1@echarts/lib/component/helper/sliderMove.js\n// module id = biqb\n// module chunks = 0 1","\n\n    var CMD = require('../core/PathProxy').CMD;\n    var vec2 = require('../core/vector');\n    var v2ApplyTransform = vec2.applyTransform;\n\n    var points = [[], [], []];\n    var mathSqrt = Math.sqrt;\n    var mathAtan2 = Math.atan2;\n    function transformPath(path, m) {\n        var data = path.data;\n        var cmd;\n        var nPoint;\n        var i;\n        var j;\n        var k;\n        var p;\n\n        var M = CMD.M;\n        var C = CMD.C;\n        var L = CMD.L;\n        var R = CMD.R;\n        var A = CMD.A;\n        var Q = CMD.Q;\n\n        for (i = 0, j = 0; i < data.length;) {\n            cmd = data[i++];\n            j = i;\n            nPoint = 0;\n\n            switch (cmd) {\n                case M:\n                    nPoint = 1;\n                    break;\n                case L:\n                    nPoint = 1;\n                    break;\n                case C:\n                    nPoint = 3;\n                    break;\n                case Q:\n                    nPoint = 2;\n                    break;\n                case A:\n                    var x = m[4];\n                    var y = m[5];\n                    var sx = mathSqrt(m[0] * m[0] + m[1] * m[1]);\n                    var sy = mathSqrt(m[2] * m[2] + m[3] * m[3]);\n                    var angle = mathAtan2(-m[1] / sy, m[0] / sx);\n                    // cx\n                    data[i] *= sx;\n                    data[i++] += x;\n                    // cy\n                    data[i] *= sy;\n                    data[i++] += y;\n                    // Scale rx and ry\n                    // FIXME Assume psi is 0 here\n                    data[i++] *= sx;\n                    data[i++] *= sy;\n\n                    // Start angle\n                    data[i++] += angle;\n                    // end angle\n                    data[i++] += angle;\n                    // FIXME psi\n                    i += 2;\n                    j = i;\n                    break;\n                case R:\n                    // x0, y0\n                    p[0] = data[i++];\n                    p[1] = data[i++];\n                    v2ApplyTransform(p, p, m);\n                    data[j++] = p[0];\n                    data[j++] = p[1];\n                    // x1, y1\n                    p[0] += data[i++];\n                    p[1] += data[i++];\n                    v2ApplyTransform(p, p, m);\n                    data[j++] = p[0];\n                    data[j++] = p[1];\n            }\n\n            for (k = 0; k < nPoint; k++) {\n                var p = points[k];\n                p[0] = data[i++];\n                p[1] = data[i++];\n\n                v2ApplyTransform(p, p, m);\n                // Write back\n                data[j++] = p[0];\n                data[j++] = p[1];\n            }\n        }\n    }\n\n    module.exports = transformPath;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.5.1@zrender/lib/tool/transformPath.js\n// module id = bpLu\n// module chunks = 0 1","\n\n    var smoothSpline = require('./smoothSpline');\n    var smoothBezier = require('./smoothBezier');\n\n    module.exports = {\n        buildPath: function (ctx, shape, closePath) {\n            var points = shape.points;\n            var smooth = shape.smooth;\n            if (points && points.length >= 2) {\n                if (smooth && smooth !== 'spline') {\n                    var controlPoints = smoothBezier(\n                        points, smooth, closePath, shape.smoothConstraint\n                    );\n\n                    ctx.moveTo(points[0][0], points[0][1]);\n                    var len = points.length;\n                    for (var i = 0; i < (closePath ? len : len - 1); i++) {\n                        var cp1 = controlPoints[i * 2];\n                        var cp2 = controlPoints[i * 2 + 1];\n                        var p = points[(i + 1) % len];\n                        ctx.bezierCurveTo(\n                            cp1[0], cp1[1], cp2[0], cp2[1], p[0], p[1]\n                        );\n                    }\n                }\n                else {\n                    if (smooth === 'spline') {\n                        points = smoothSpline(points, closePath);\n                    }\n\n                    ctx.moveTo(points[0][0], points[0][1]);\n                    for (var i = 1, l = points.length; i < l; i++) {\n                        ctx.lineTo(points[i][0], points[i][1]);\n                    }\n                }\n\n                closePath && ctx.closePath();\n            }\n        }\n    };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.5.1@zrender/lib/graphic/helper/poly.js\n// module id = bt+j\n// module chunks = 0 1","/**\n * @file Data zoom processor\n */\n\n\n    var echarts = require('../../echarts');\n\n    echarts.registerProcessor(function (ecModel, api) {\n\n        ecModel.eachComponent('dataZoom', function (dataZoomModel) {\n            // We calculate window and reset axis here but not in model\n            // init stage and not after action dispatch handler, because\n            // reset should be called after seriesData.restoreData.\n            dataZoomModel.eachTargetAxis(resetSingleAxis);\n\n            // Caution: data zoom filtering is order sensitive when using\n            // percent range and no min/max/scale set on axis.\n            // For example, we have dataZoom definition:\n            // [\n            //      {xAxisIndex: 0, start: 30, end: 70},\n            //      {yAxisIndex: 0, start: 20, end: 80}\n            // ]\n            // In this case, [20, 80] of y-dataZoom should be based on data\n            // that have filtered by x-dataZoom using range of [30, 70],\n            // but should not be based on full raw data. Thus sliding\n            // x-dataZoom will change both ranges of xAxis and yAxis,\n            // while sliding y-dataZoom will only change the range of yAxis.\n            // So we should filter x-axis after reset x-axis immediately,\n            // and then reset y-axis and filter y-axis.\n            dataZoomModel.eachTargetAxis(filterSingleAxis);\n        });\n\n        ecModel.eachComponent('dataZoom', function (dataZoomModel) {\n            // Fullfill all of the range props so that user\n            // is able to get them from chart.getOption().\n            var axisProxy = dataZoomModel.findRepresentativeAxisProxy();\n            var percentRange = axisProxy.getDataPercentWindow();\n            var valueRange = axisProxy.getDataValueWindow();\n\n            dataZoomModel.setRawRange({\n                start: percentRange[0],\n                end: percentRange[1],\n                startValue: valueRange[0],\n                endValue: valueRange[1]\n            }, true);\n        });\n    });\n\n    function resetSingleAxis(dimNames, axisIndex, dataZoomModel) {\n        dataZoomModel.getAxisProxy(dimNames.name, axisIndex).reset(dataZoomModel);\n    }\n\n    function filterSingleAxis(dimNames, axisIndex, dataZoomModel) {\n        dataZoomModel.getAxisProxy(dimNames.name, axisIndex).filterData(dataZoomModel);\n    }\n\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.6.1@echarts/lib/component/dataZoom/dataZoomProcessor.js\n// module id = bv/E\n// module chunks = 0 1","'use strict';\n\n\n    var zrUtil = require('zrender/lib/core/util');\n    var clazzUtil = require('../../util/clazz');\n    var graphic = require('../../util/graphic');\n    var get = require('../../util/model').makeGetter();\n    var axisPointerModelHelper = require('./modelHelper');\n    var eventTool = require('zrender/lib/core/event');\n    var throttle = require('../../util/throttle');\n\n    var clone = zrUtil.clone;\n    var bind = zrUtil.bind;\n\n    /**\n     * Base axis pointer class in 2D.\n     * Implemenents {module:echarts/component/axis/IAxisPointer}.\n     */\n    function BaseAxisPointer () {\n    }\n\n    BaseAxisPointer.prototype = {\n\n        /**\n         * @private\n         */\n        _group: null,\n\n        /**\n         * @private\n         */\n        _lastGraphicKey: null,\n\n        /**\n         * @private\n         */\n        _handle: null,\n\n        /**\n         * @private\n         */\n        _dragging: false,\n\n        /**\n         * @private\n         */\n        _lastValue: null,\n\n        /**\n         * @private\n         */\n        _lastStatus: null,\n\n        /**\n         * @private\n         */\n        _payloadInfo: null,\n\n        /**\n         * In px, arbitrary value. Do not set too small,\n         * no animation is ok for most cases.\n         * @protected\n         */\n        animationThreshold: 15,\n\n        /**\n         * @implement\n         */\n        render: function (axisModel, axisPointerModel, api, forceRender) {\n            var value = axisPointerModel.get('value');\n            var status = axisPointerModel.get('status');\n\n            // Bind them to `this`, not in closure, otherwise they will not\n            // be replaced when user calling setOption in not merge mode.\n            this._axisModel = axisModel;\n            this._axisPointerModel = axisPointerModel;\n            this._api = api;\n\n            // Optimize: `render` will be called repeatly during mouse move.\n            // So it is power consuming if performing `render` each time,\n            // especially on mobile device.\n            if (!forceRender\n                && this._lastValue === value\n                && this._lastStatus === status\n            ) {\n                return;\n            }\n            this._lastValue = value;\n            this._lastStatus = status;\n\n            var group = this._group;\n            var handle = this._handle;\n\n            if (!status || status === 'hide') {\n                // Do not clear here, for animation better.\n                group && group.hide();\n                handle && handle.hide();\n                return;\n            }\n            group && group.show();\n            handle && handle.show();\n\n            // Otherwise status is 'show'\n            var elOption = {};\n            this.makeElOption(elOption, value, axisModel, axisPointerModel, api);\n\n            // Enable change axis pointer type.\n            var graphicKey = elOption.graphicKey;\n            if (graphicKey !== this._lastGraphicKey) {\n                this.clear(api);\n            }\n            this._lastGraphicKey = graphicKey;\n\n            var moveAnimation = this._moveAnimation =\n                this.determineAnimation(axisModel, axisPointerModel);\n\n            if (!group) {\n                group = this._group = new graphic.Group();\n                this.createPointerEl(group, elOption, axisModel, axisPointerModel);\n                this.createLabelEl(group, elOption, axisModel, axisPointerModel);\n                api.getZr().add(group);\n            }\n            else {\n                var doUpdateProps = zrUtil.curry(updateProps, axisPointerModel, moveAnimation);\n                this.updatePointerEl(group, elOption, doUpdateProps, axisPointerModel);\n                this.updateLabelEl(group, elOption, doUpdateProps, axisPointerModel);\n            }\n\n            updateMandatoryProps(group, axisPointerModel, true);\n\n            this._renderHandle(value);\n        },\n\n        /**\n         * @implement\n         */\n        remove: function (api) {\n            this.clear(api);\n        },\n\n        /**\n         * @implement\n         */\n        dispose: function (api) {\n            this.clear(api);\n        },\n\n        /**\n         * @protected\n         */\n        determineAnimation: function (axisModel, axisPointerModel) {\n            var animation = axisPointerModel.get('animation');\n            var axis = axisModel.axis;\n            var isCategoryAxis = axis.type === 'category';\n            var useSnap = axisPointerModel.get('snap');\n\n            // Value axis without snap always do not snap.\n            if (!useSnap && !isCategoryAxis) {\n                return false;\n            }\n\n            if (animation === 'auto' || animation == null) {\n                var animationThreshold = this.animationThreshold;\n                if (isCategoryAxis && axis.getBandWidth() > animationThreshold) {\n                    return true;\n                }\n\n                // It is important to auto animation when snap used. Consider if there is\n                // a dataZoom, animation will be disabled when too many points exist, while\n                // it will be enabled for better visual effect when little points exist.\n                if (useSnap) {\n                    var seriesDataCount = axisPointerModelHelper.getAxisInfo(axisModel).seriesDataCount;\n                    var axisExtent = axis.getExtent();\n                    // Approximate band width\n                    return Math.abs(axisExtent[0] - axisExtent[1]) / seriesDataCount > animationThreshold;\n                }\n\n                return false;\n            }\n\n            return animation === true;\n        },\n\n        /**\n         * add {pointer, label, graphicKey} to elOption\n         * @protected\n         */\n        makeElOption: function (elOption, value, axisModel, axisPointerModel, api) {\n            // Shoule be implemenented by sub-class.\n        },\n\n        /**\n         * @protected\n         */\n        createPointerEl: function (group, elOption, axisModel, axisPointerModel) {\n            var pointerOption = elOption.pointer;\n            if (pointerOption) {\n                var pointerEl = get(group).pointerEl = new graphic[pointerOption.type](\n                    clone(elOption.pointer)\n                );\n                group.add(pointerEl);\n            }\n        },\n\n        /**\n         * @protected\n         */\n        createLabelEl: function (group, elOption, axisModel, axisPointerModel) {\n            if (elOption.label) {\n                var labelEl = get(group).labelEl = new graphic.Rect(\n                    clone(elOption.label)\n                );\n\n                group.add(labelEl);\n                updateLabelShowHide(labelEl, axisPointerModel);\n            }\n        },\n\n        /**\n         * @protected\n         */\n        updatePointerEl: function (group, elOption, updateProps) {\n            var pointerEl = get(group).pointerEl;\n            if (pointerEl) {\n                pointerEl.setStyle(elOption.pointer.style);\n                updateProps(pointerEl, {shape: elOption.pointer.shape});\n            }\n        },\n\n        /**\n         * @protected\n         */\n        updateLabelEl: function (group, elOption, updateProps, axisPointerModel) {\n            var labelEl = get(group).labelEl;\n            if (labelEl) {\n                labelEl.setStyle(elOption.label.style);\n                updateProps(labelEl, {\n                    // Consider text length change in vertical axis, animation should\n                    // be used on shape, otherwise the effect will be weird.\n                    shape: elOption.label.shape,\n                    position: elOption.label.position\n                });\n\n                updateLabelShowHide(labelEl, axisPointerModel);\n            }\n        },\n\n        /**\n         * @private\n         */\n        _renderHandle: function (value) {\n            if (this._dragging || !this.updateHandleTransform) {\n                return;\n            }\n\n            var axisPointerModel = this._axisPointerModel;\n            var zr = this._api.getZr();\n            var handle = this._handle;\n            var handleModel = axisPointerModel.getModel('handle');\n\n            var status = axisPointerModel.get('status');\n            if (!handleModel.get('show') || !status || status === 'hide') {\n                handle && zr.remove(handle);\n                this._handle = null;\n                return;\n            }\n\n            var isInit;\n            if (!this._handle) {\n                isInit = true;\n                handle = this._handle = createIcon(handleModel, {\n                    onmousemove: function (e) {\n                        // Fot mobile devicem, prevent screen slider on the button.\n                        eventTool.stop(e.event);\n                    },\n                    onmousedown: bind(this._onHandleDragMove, this, 0, 0),\n                    drift: bind(this._onHandleDragMove, this),\n                    ondragend: bind(this._onHandleDragEnd, this)\n                });\n                zr.add(handle);\n            }\n\n            updateMandatoryProps(handle, axisPointerModel, false);\n\n            // update style\n            var includeStyles = [\n                'color', 'borderColor', 'borderWidth', 'opacity',\n                'shadowColor', 'shadowBlur', 'shadowOffsetX', 'shadowOffsetY'\n            ];\n            handle.setStyle(handleModel.getItemStyle(null, includeStyles));\n\n            // update position\n            var handleSize = handleModel.get('size');\n            if (!zrUtil.isArray(handleSize)) {\n                handleSize = [handleSize, handleSize];\n            }\n            handle.attr('scale', [handleSize[0] / 2, handleSize[1] / 2]);\n\n            throttle.createOrUpdate(\n                this,\n                '_doDispatchAxisPointer',\n                handleModel.get('throttle') || 0,\n                'fixRate'\n            );\n\n            this._moveHandleToValue(value, isInit);\n        },\n\n        /**\n         * @private\n         */\n        _moveHandleToValue: function (value, isInit) {\n            updateProps(\n                this._axisPointerModel,\n                !isInit && this._moveAnimation,\n                this._handle,\n                getHandleTransProps(this.getHandleTransform(\n                    value, this._axisModel, this._axisPointerModel\n                ))\n            );\n        },\n\n        /**\n         * @private\n         */\n        _onHandleDragMove: function (dx, dy) {\n            var handle = this._handle;\n            if (!handle) {\n                return;\n            }\n\n            this._dragging = true;\n\n            // Persistent for throttle.\n            var trans = this.updateHandleTransform(\n                getHandleTransProps(handle),\n                [dx, dy],\n                this._axisModel,\n                this._axisPointerModel\n            );\n            this._payloadInfo = trans;\n\n            handle.stopAnimation();\n            handle.attr(getHandleTransProps(trans));\n            get(handle).lastProp = null;\n\n            this._doDispatchAxisPointer();\n        },\n\n        /**\n         * Throttled method.\n         * @private\n         */\n        _doDispatchAxisPointer: function () {\n            var handle = this._handle;\n            if (!handle) {\n                return;\n            }\n\n            var payloadInfo = this._payloadInfo;\n            var axisModel = this._axisModel;\n            this._api.dispatchAction({\n                type: 'updateAxisPointer',\n                x: payloadInfo.cursorPoint[0],\n                y: payloadInfo.cursorPoint[1],\n                tooltipOption: payloadInfo.tooltipOption,\n                axesInfo: [{\n                    axisDim: axisModel.axis.dim,\n                    axisIndex: axisModel.componentIndex\n                }]\n            });\n        },\n\n        /**\n         * @private\n         */\n        _onHandleDragEnd: function (moveAnimation) {\n            this._dragging = false;\n            var handle = this._handle;\n            if (!handle) {\n                return;\n            }\n\n            var value = this._axisPointerModel.get('value');\n            // Consider snap or categroy axis, handle may be not consistent with\n            // axisPointer. So move handle to align the exact value position when\n            // drag ended.\n            this._moveHandleToValue(value);\n\n            // For the effect: tooltip will be shown when finger holding on handle\n            // button, and will be hidden after finger left handle button.\n            this._api.dispatchAction({\n                type: 'hideTip'\n            });\n        },\n\n        /**\n         * Should be implemenented by sub-class if support `handle`.\n         * @protected\n         * @param {number} value\n         * @param {module:echarts/model/Model} axisModel\n         * @param {module:echarts/model/Model} axisPointerModel\n         * @return {Object} {position: [x, y], rotation: 0}\n         */\n        getHandleTransform: null,\n\n        /**\n         * * Should be implemenented by sub-class if support `handle`.\n         * @protected\n         * @param {Object} transform {position, rotation}\n         * @param {Array.<number>} delta [dx, dy]\n         * @param {module:echarts/model/Model} axisModel\n         * @param {module:echarts/model/Model} axisPointerModel\n         * @return {Object} {position: [x, y], rotation: 0, cursorPoint: [x, y]}\n         */\n        updateHandleTransform: null,\n\n        /**\n         * @private\n         */\n        clear: function (api) {\n            this._lastValue = null;\n            this._lastStatus = null;\n\n            var zr = api.getZr();\n            var group = this._group;\n            var handle = this._handle;\n            if (zr && group) {\n                this._lastGraphicKey = null;\n                group && zr.remove(group);\n                handle && zr.remove(handle);\n                this._group = null;\n                this._handle = null;\n                this._payloadInfo = null;\n            }\n        },\n\n        /**\n         * @protected\n         */\n        doClear: function () {\n            // Implemented by sub-class if necessary.\n        },\n\n        /**\n         * @protected\n         * @param {Array.<number>} xy\n         * @param {Array.<number>} wh\n         * @param {number} [xDimIndex=0] or 1\n         */\n        buildLabel: function (xy, wh, xDimIndex) {\n            xDimIndex = xDimIndex || 0;\n            return {\n                x: xy[xDimIndex],\n                y: xy[1 - xDimIndex],\n                width: wh[xDimIndex],\n                height: wh[1 - xDimIndex]\n            };\n        }\n    };\n\n    BaseAxisPointer.prototype.constructor = BaseAxisPointer;\n\n\n    function updateProps(animationModel, moveAnimation, el, props) {\n        // Animation optimize.\n        if (!propsEqual(get(el).lastProp, props)) {\n            get(el).lastProp = props;\n            moveAnimation\n                ? graphic.updateProps(el, props, animationModel)\n                : (el.stopAnimation(), el.attr(props));\n        }\n    }\n\n    function propsEqual(lastProps, newProps) {\n        if (zrUtil.isObject(lastProps) && zrUtil.isObject(newProps)) {\n            var equals = true;\n            zrUtil.each(newProps, function (item, key) {\n                equals &= propsEqual(lastProps[key], item);\n            });\n            return !!equals;\n        }\n        else {\n            return lastProps === newProps;\n        }\n    }\n\n    function updateLabelShowHide(labelEl, axisPointerModel) {\n        labelEl[axisPointerModel.get('label.show') ? 'show' : 'hide']();\n    }\n\n    function getHandleTransProps(trans) {\n        return {\n            position: trans.position.slice(),\n            rotation: trans.rotation || 0\n        };\n    }\n\n    function createIcon(handleModel, handlers) {\n        var iconStr = handleModel.get('icon');\n        var style = {\n            x: -1, y: -1, width: 2, height: 2\n        };\n        var opt = zrUtil.extend({\n            style: {\n                strokeNoScale: true\n            },\n            rectHover: true,\n            cursor: 'move',\n            draggable: true\n        }, handlers);\n\n        return iconStr.indexOf('image://') === 0\n            ? (\n                style.image = iconStr.slice(8),\n                opt.style = style,\n                new graphic.Image(opt)\n            )\n            : graphic.makePath(\n                iconStr.replace('path://', ''),\n                opt,\n                style,\n                'center'\n            );\n    }\n\n    function updateMandatoryProps(group, axisPointerModel, silent) {\n        var z = axisPointerModel.get('z');\n        var zlevel = axisPointerModel.get('zlevel');\n\n        group && group.traverse(function (el) {\n            if (el.type !== 'group') {\n                z != null && (el.z = z);\n                zlevel != null && (el.zlevel = zlevel);\n                el.silent = silent;\n            }\n        });\n    }\n\n    clazzUtil.enableClassExtend(BaseAxisPointer);\n\n    module.exports = BaseAxisPointer;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.6.1@echarts/lib/component/axisPointer/BaseAxisPointer.js\n// module id = c3To\n// module chunks = 0 1","/**\n * Interval scale\n * @module echarts/coord/scale/Time\n */\n\n\n\n    // [About UTC and local time zone]:\n    // In most cases, `number.parseDate` will treat input data string as local time\n    // (except time zone is specified in time string). And `format.formateTime` returns\n    // local time by default. option.useUTC is false by default. This design have\n    // concidered these common case:\n    // (1) Time that is persistent in server is in UTC, but it is needed to be diplayed\n    // in local time by default.\n    // (2) By default, the input data string (e.g., '2011-01-02') should be displayed\n    // as its original time, without any time difference.\n\n    var zrUtil = require('zrender/lib/core/util');\n    var numberUtil = require('../util/number');\n    var formatUtil = require('../util/format');\n    var scaleHelper = require('./helper');\n\n    var IntervalScale = require('./Interval');\n\n    var intervalScaleProto = IntervalScale.prototype;\n\n    var mathCeil = Math.ceil;\n    var mathFloor = Math.floor;\n    var ONE_SECOND = 1000;\n    var ONE_MINUTE = ONE_SECOND * 60;\n    var ONE_HOUR = ONE_MINUTE * 60;\n    var ONE_DAY = ONE_HOUR * 24;\n\n    // FIXME 公用？\n    var bisect = function (a, x, lo, hi) {\n        while (lo < hi) {\n            var mid = lo + hi >>> 1;\n            if (a[mid][2] < x) {\n                lo = mid + 1;\n            }\n            else {\n                hi  = mid;\n            }\n        }\n        return lo;\n    };\n\n    /**\n     * @alias module:echarts/coord/scale/Time\n     * @constructor\n     */\n    var TimeScale = IntervalScale.extend({\n        type: 'time',\n\n        /**\n         * @override\n         */\n        getLabel: function (val) {\n            var stepLvl = this._stepLvl;\n\n            var date = new Date(val);\n\n            return formatUtil.formatTime(stepLvl[0], date, this.getSetting('useUTC'));\n        },\n\n        /**\n         * @override\n         */\n        niceExtent: function (opt) {\n            var extent = this._extent;\n            // If extent start and end are same, expand them\n            if (extent[0] === extent[1]) {\n                // Expand extent\n                extent[0] -= ONE_DAY;\n                extent[1] += ONE_DAY;\n            }\n            // If there are no data and extent are [Infinity, -Infinity]\n            if (extent[1] === -Infinity && extent[0] === Infinity) {\n                var d = new Date();\n                extent[1] = new Date(d.getFullYear(), d.getMonth(), d.getDate());\n                extent[0] = extent[1] - ONE_DAY;\n            }\n\n            this.niceTicks(opt.splitNumber);\n\n            // var extent = this._extent;\n            var interval = this._interval;\n\n            if (!opt.fixMin) {\n                extent[0] = numberUtil.round(mathFloor(extent[0] / interval) * interval);\n            }\n            if (!opt.fixMax) {\n                extent[1] = numberUtil.round(mathCeil(extent[1] / interval) * interval);\n            }\n        },\n\n        /**\n         * @override\n         */\n        niceTicks: function (approxTickNum) {\n            var timezoneOffset = this.getSetting('useUTC')\n                ? 0 : numberUtil.getTimezoneOffset() * 60 * 1000;\n            approxTickNum = approxTickNum || 10;\n\n            var extent = this._extent;\n            var span = extent[1] - extent[0];\n            var approxInterval = span / approxTickNum;\n            var scaleLevelsLen = scaleLevels.length;\n            var idx = bisect(scaleLevels, approxInterval, 0, scaleLevelsLen);\n\n            var level = scaleLevels[Math.min(idx, scaleLevelsLen - 1)];\n            var interval = level[2];\n            // Same with interval scale if span is much larger than 1 year\n            if (level[0] === 'year') {\n                var yearSpan = span / interval;\n\n                // From \"Nice Numbers for Graph Labels\" of Graphic Gems\n                // var niceYearSpan = numberUtil.nice(yearSpan, false);\n                var yearStep = numberUtil.nice(yearSpan / approxTickNum, true);\n\n                interval *= yearStep;\n            }\n\n            var niceExtent = [\n                Math.round(mathCeil((extent[0] - timezoneOffset) / interval) * interval + timezoneOffset),\n                Math.round(mathFloor((extent[1] - timezoneOffset)/ interval) * interval + timezoneOffset)\n            ];\n\n            scaleHelper.fixExtent(niceExtent, extent);\n\n            this._stepLvl = level;\n            // Interval will be used in getTicks\n            this._interval = interval;\n            this._niceExtent = niceExtent;\n        },\n\n        parse: function (val) {\n            // val might be float.\n            return +numberUtil.parseDate(val);\n        }\n    });\n\n    zrUtil.each(['contain', 'normalize'], function (methodName) {\n        TimeScale.prototype[methodName] = function (val) {\n            return intervalScaleProto[methodName].call(this, this.parse(val));\n        };\n    });\n\n    // Steps from d3\n    var scaleLevels = [\n        // Format       step    interval\n        ['hh:mm:ss',    1,      ONE_SECOND],           // 1s\n        ['hh:mm:ss',    5,      ONE_SECOND * 5],       // 5s\n        ['hh:mm:ss',    10,     ONE_SECOND * 10],      // 10s\n        ['hh:mm:ss',    15,     ONE_SECOND * 15],      // 15s\n        ['hh:mm:ss',    30,     ONE_SECOND * 30],      // 30s\n        ['hh:mm\\nMM-dd',1,      ONE_MINUTE],          // 1m\n        ['hh:mm\\nMM-dd',5,      ONE_MINUTE * 5],      // 5m\n        ['hh:mm\\nMM-dd',10,     ONE_MINUTE * 10],     // 10m\n        ['hh:mm\\nMM-dd',15,     ONE_MINUTE * 15],     // 15m\n        ['hh:mm\\nMM-dd',30,     ONE_MINUTE * 30],     // 30m\n        ['hh:mm\\nMM-dd',1,      ONE_HOUR],        // 1h\n        ['hh:mm\\nMM-dd',2,      ONE_HOUR * 2],    // 2h\n        ['hh:mm\\nMM-dd',6,      ONE_HOUR * 6],    // 6h\n        ['hh:mm\\nMM-dd',12,     ONE_HOUR * 12],   // 12h\n        ['MM-dd\\nyyyy', 1,      ONE_DAY],   // 1d\n        ['week',        7,      ONE_DAY * 7],        // 7d\n        ['month',       1,      ONE_DAY * 31],       // 1M\n        ['quarter',     3,      ONE_DAY * 380 / 4],  // 3M\n        ['half-year',   6,      ONE_DAY * 380 / 2],  // 6M\n        ['year',        1,      ONE_DAY * 380]       // 1Y\n    ];\n\n    /**\n     * @param {module:echarts/model/Model}\n     * @return {module:echarts/scale/Time}\n     */\n    TimeScale.create = function (model) {\n        return new TimeScale({useUTC: model.ecModel.get('useUTC')});\n    };\n\n    module.exports = TimeScale;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.6.1@echarts/lib/scale/Time.js\n// module id = cDka\n// module chunks = 0 1","\n\n    var zrUtil = require('zrender/lib/core/util');\n    var formatUtil = require('../../util/format');\n    var graphic = require('../../util/graphic');\n    var Model = require('../../model/Model');\n    var numberUtil = require('../../util/number');\n    var remRadian = numberUtil.remRadian;\n    var isRadianAroundZero = numberUtil.isRadianAroundZero;\n    var vec2 = require('zrender/lib/core/vector');\n    var matrix = require('zrender/lib/core/matrix');\n    var v2ApplyTransform = vec2.applyTransform;\n    var retrieve = zrUtil.retrieve;\n\n    var PI = Math.PI;\n\n    function makeAxisEventDataBase(axisModel) {\n        var eventData = {\n            componentType: axisModel.mainType\n        };\n        eventData[axisModel.mainType + 'Index'] = axisModel.componentIndex;\n        return eventData;\n    }\n\n    /**\n     * A final axis is translated and rotated from a \"standard axis\".\n     * So opt.position and opt.rotation is required.\n     *\n     * A standard axis is and axis from [0, 0] to [0, axisExtent[1]],\n     * for example: (0, 0) ------------> (0, 50)\n     *\n     * nameDirection or tickDirection or labelDirection is 1 means tick\n     * or label is below the standard axis, whereas is -1 means above\n     * the standard axis. labelOffset means offset between label and axis,\n     * which is useful when 'onZero', where axisLabel is in the grid and\n     * label in outside grid.\n     *\n     * Tips: like always,\n     * positive rotation represents anticlockwise, and negative rotation\n     * represents clockwise.\n     * The direction of position coordinate is the same as the direction\n     * of screen coordinate.\n     *\n     * Do not need to consider axis 'inverse', which is auto processed by\n     * axis extent.\n     *\n     * @param {module:zrender/container/Group} group\n     * @param {Object} axisModel\n     * @param {Object} opt Standard axis parameters.\n     * @param {Array.<number>} opt.position [x, y]\n     * @param {number} opt.rotation by radian\n     * @param {number} [opt.nameDirection=1] 1 or -1 Used when nameLocation is 'middle'.\n     * @param {number} [opt.tickDirection=1] 1 or -1\n     * @param {number} [opt.labelDirection=1] 1 or -1\n     * @param {number} [opt.labelOffset=0] Usefull when onZero.\n     * @param {string} [opt.axisLabelShow] default get from axisModel.\n     * @param {string} [opt.axisName] default get from axisModel.\n     * @param {number} [opt.axisNameAvailableWidth]\n     * @param {number} [opt.labelRotate] by degree, default get from axisModel.\n     * @param {number} [opt.labelInterval] Default label interval when label\n     *                                     interval from model is null or 'auto'.\n     * @param {number} [opt.strokeContainThreshold] Default label interval when label\n     * @param {number} [opt.nameTruncateMaxWidth]\n     */\n    var AxisBuilder = function (axisModel, opt) {\n\n        /**\n         * @readOnly\n         */\n        this.opt = opt;\n\n        /**\n         * @readOnly\n         */\n        this.axisModel = axisModel;\n\n        // Default value\n        zrUtil.defaults(\n            opt,\n            {\n                labelOffset: 0,\n                nameDirection: 1,\n                tickDirection: 1,\n                labelDirection: 1,\n                silent: true\n            }\n        );\n\n        /**\n         * @readOnly\n         */\n        this.group = new graphic.Group();\n\n        // FIXME Not use a seperate text group?\n        var dumbGroup = new graphic.Group({\n            position: opt.position.slice(),\n            rotation: opt.rotation\n        });\n\n        // this.group.add(dumbGroup);\n        // this._dumbGroup = dumbGroup;\n\n        dumbGroup.updateTransform();\n        this._transform = dumbGroup.transform;\n\n        this._dumbGroup = dumbGroup;\n    };\n\n    AxisBuilder.prototype = {\n\n        constructor: AxisBuilder,\n\n        hasBuilder: function (name) {\n            return !!builders[name];\n        },\n\n        add: function (name) {\n            builders[name].call(this);\n        },\n\n        getGroup: function () {\n            return this.group;\n        }\n\n    };\n\n    var builders = {\n\n        /**\n         * @private\n         */\n        axisLine: function () {\n            var opt = this.opt;\n            var axisModel = this.axisModel;\n\n            if (!axisModel.get('axisLine.show')) {\n                return;\n            }\n\n            var extent = this.axisModel.axis.getExtent();\n\n            var matrix = this._transform;\n            var pt1 = [extent[0], 0];\n            var pt2 = [extent[1], 0];\n            if (matrix) {\n                v2ApplyTransform(pt1, pt1, matrix);\n                v2ApplyTransform(pt2, pt2, matrix);\n            }\n\n            this.group.add(new graphic.Line(graphic.subPixelOptimizeLine({\n\n                // Id for animation\n                anid: 'line',\n\n                shape: {\n                    x1: pt1[0],\n                    y1: pt1[1],\n                    x2: pt2[0],\n                    y2: pt2[1]\n                },\n                style: zrUtil.extend(\n                    {lineCap: 'round'},\n                    axisModel.getModel('axisLine.lineStyle').getLineStyle()\n                ),\n                strokeContainThreshold: opt.strokeContainThreshold || 5,\n                silent: true,\n                z2: 1\n            })));\n        },\n\n        /**\n         * @private\n         */\n        axisTick: function () {\n            var axisModel = this.axisModel;\n            var axis = axisModel.axis;\n\n            if (!axisModel.get('axisTick.show') || axis.scale.isBlank()) {\n                return;\n            }\n\n            var tickModel = axisModel.getModel('axisTick');\n            var opt = this.opt;\n\n            var lineStyleModel = tickModel.getModel('lineStyle');\n            var tickLen = tickModel.get('length');\n\n            var tickInterval = getInterval(tickModel, opt.labelInterval);\n            var ticksCoords = axis.getTicksCoords(tickModel.get('alignWithLabel'));\n            var ticks = axis.scale.getTicks();\n\n            var pt1 = [];\n            var pt2 = [];\n            var matrix = this._transform;\n\n            for (var i = 0; i < ticksCoords.length; i++) {\n                // Only ordinal scale support tick interval\n                if (ifIgnoreOnTick(axis, i, tickInterval)) {\n                     continue;\n                }\n\n                var tickCoord = ticksCoords[i];\n\n                pt1[0] = tickCoord;\n                pt1[1] = 0;\n                pt2[0] = tickCoord;\n                pt2[1] = opt.tickDirection * tickLen;\n\n                if (matrix) {\n                    v2ApplyTransform(pt1, pt1, matrix);\n                    v2ApplyTransform(pt2, pt2, matrix);\n                }\n                // Tick line, Not use group transform to have better line draw\n                this.group.add(new graphic.Line(graphic.subPixelOptimizeLine({\n\n                    // Id for animation\n                    anid: 'tick_' + ticks[i],\n\n                    shape: {\n                        x1: pt1[0],\n                        y1: pt1[1],\n                        x2: pt2[0],\n                        y2: pt2[1]\n                    },\n                    style: zrUtil.defaults(\n                        lineStyleModel.getLineStyle(),\n                        {\n                            stroke: axisModel.get('axisLine.lineStyle.color')\n                        }\n                    ),\n                    z2: 2,\n                    silent: true\n                })));\n            }\n        },\n\n        /**\n         * @param {module:echarts/coord/cartesian/AxisModel} axisModel\n         * @param {module:echarts/coord/cartesian/GridModel} gridModel\n         * @private\n         */\n        axisLabel: function () {\n            var opt = this.opt;\n            var axisModel = this.axisModel;\n            var axis = axisModel.axis;\n            var show = retrieve(opt.axisLabelShow, axisModel.get('axisLabel.show'));\n\n            if (!show || axis.scale.isBlank()) {\n                return;\n            }\n\n            var labelModel = axisModel.getModel('axisLabel');\n            var textStyleModel = labelModel.getModel('textStyle');\n            var labelMargin = labelModel.get('margin');\n            var ticks = axis.scale.getTicks();\n            var labels = axisModel.getFormattedLabels();\n\n            // Special label rotate.\n            var labelRotation = (\n                retrieve(opt.labelRotate, labelModel.get('rotate')) || 0\n            ) * PI / 180;\n\n            var labelLayout = innerTextLayout(opt.rotation, labelRotation, opt.labelDirection);\n            var categoryData = axisModel.get('data');\n\n            var textEls = [];\n            var silent = isSilent(axisModel);\n            var triggerEvent = axisModel.get('triggerEvent');\n\n            zrUtil.each(ticks, function (tickVal, index) {\n                if (ifIgnoreOnTick(axis, index, opt.labelInterval)) {\n                     return;\n                }\n\n                var itemTextStyleModel = textStyleModel;\n                if (categoryData && categoryData[tickVal] && categoryData[tickVal].textStyle) {\n                    itemTextStyleModel = new Model(\n                        categoryData[tickVal].textStyle, textStyleModel, axisModel.ecModel\n                    );\n                }\n                var textColor = itemTextStyleModel.getTextColor()\n                    || axisModel.get('axisLine.lineStyle.color');\n\n                var tickCoord = axis.dataToCoord(tickVal);\n                var pos = [\n                    tickCoord,\n                    opt.labelOffset + opt.labelDirection * labelMargin\n                ];\n                var labelStr = axis.scale.getLabel(tickVal);\n\n                var textEl = new graphic.Text({\n\n                    // Id for animation\n                    anid: 'label_' + tickVal,\n\n                    style: {\n                        text: labels[index],\n                        textAlign: itemTextStyleModel.get('align', true) || labelLayout.textAlign,\n                        textVerticalAlign: itemTextStyleModel.get('baseline', true) || labelLayout.textVerticalAlign,\n                        textFont: itemTextStyleModel.getFont(),\n                        fill: typeof textColor === 'function'\n                            ? textColor(\n                                // (1) In category axis with data zoom, tick is not the original\n                                // index of axis.data. So tick should not be exposed to user\n                                // in category axis.\n                                // (2) Compatible with previous version, which always returns labelStr.\n                                // But in interval scale labelStr is like '223,445', which maked\n                                // user repalce ','. So we modify it to return original val but remain\n                                // it as 'string' to avoid error in replacing.\n                                axis.type === 'category' ? labelStr : axis.type === 'value' ? tickVal + '' : tickVal,\n                                index\n                            )\n                            : textColor\n                    },\n                    position: pos,\n                    rotation: labelLayout.rotation,\n                    silent: silent,\n                    z2: 10\n                });\n\n                // Pack data for mouse event\n                if (triggerEvent) {\n                    textEl.eventData = makeAxisEventDataBase(axisModel);\n                    textEl.eventData.targetType = 'axisLabel';\n                    textEl.eventData.value = labelStr;\n                }\n\n                // FIXME\n                this._dumbGroup.add(textEl);\n                textEl.updateTransform();\n\n                textEls.push(textEl);\n                this.group.add(textEl);\n\n                textEl.decomposeTransform();\n\n            }, this);\n\n            fixMinMaxLabelShow(axisModel, textEls);\n        },\n\n        /**\n         * @private\n         */\n        axisName: function () {\n            var opt = this.opt;\n            var axisModel = this.axisModel;\n            var name = retrieve(opt.axisName, axisModel.get('name'));\n\n            if (!name) {\n                return;\n            }\n\n            var nameLocation = axisModel.get('nameLocation');\n            var nameDirection = opt.nameDirection;\n            var textStyleModel = axisModel.getModel('nameTextStyle');\n            var gap = axisModel.get('nameGap') || 0;\n\n            var extent = this.axisModel.axis.getExtent();\n            var gapSignal = extent[0] > extent[1] ? -1 : 1;\n            var pos = [\n                nameLocation === 'start'\n                    ? extent[0] - gapSignal * gap\n                    : nameLocation === 'end'\n                    ? extent[1] + gapSignal * gap\n                    : (extent[0] + extent[1]) / 2, // 'middle'\n                // Reuse labelOffset.\n                nameLocation === 'middle' ? opt.labelOffset + nameDirection * gap : 0\n            ];\n\n            var labelLayout;\n\n            var nameRotation = axisModel.get('nameRotate');\n            if (nameRotation != null) {\n                nameRotation = nameRotation * PI / 180; // To radian.\n            }\n\n            var axisNameAvailableWidth;\n\n            if (nameLocation === 'middle') {\n                labelLayout = innerTextLayout(\n                    opt.rotation,\n                    nameRotation != null ? nameRotation : opt.rotation, // Adapt to axis.\n                    nameDirection\n                );\n            }\n            else {\n                labelLayout = endTextLayout(\n                    opt, nameLocation, nameRotation || 0, extent\n                );\n\n                axisNameAvailableWidth = opt.axisNameAvailableWidth;\n                if (axisNameAvailableWidth != null) {\n                    axisNameAvailableWidth = Math.abs(\n                        axisNameAvailableWidth / Math.sin(labelLayout.rotation)\n                    );\n                    !isFinite(axisNameAvailableWidth) && (axisNameAvailableWidth = null);\n                }\n            }\n\n            var textFont = textStyleModel.getFont();\n\n            var truncateOpt = axisModel.get('nameTruncate', true) || {};\n            var ellipsis = truncateOpt.ellipsis;\n            var maxWidth = retrieve(\n                opt.nameTruncateMaxWidth, truncateOpt.maxWidth, axisNameAvailableWidth\n            );\n            var truncatedText = (ellipsis != null && maxWidth != null)\n                ? formatUtil.truncateText(\n                    name, maxWidth, textFont, ellipsis,\n                    {minChar: 2, placeholder: truncateOpt.placeholder}\n                )\n                : name;\n\n            var tooltipOpt = axisModel.get('tooltip', true);\n\n            var mainType = axisModel.mainType;\n            var formatterParams = {\n                componentType: mainType,\n                name: name,\n                $vars: ['name']\n            };\n            formatterParams[mainType + 'Index'] = axisModel.componentIndex;\n\n            var textEl = new graphic.Text({\n\n                // Id for animation\n                anid: 'name',\n\n                __fullText: name,\n                __truncatedText: truncatedText,\n\n                style: {\n                    text: truncatedText,\n                    textFont: textFont,\n                    fill: textStyleModel.getTextColor()\n                        || axisModel.get('axisLine.lineStyle.color'),\n                    textAlign: labelLayout.textAlign,\n                    textVerticalAlign: labelLayout.textVerticalAlign\n                },\n                position: pos,\n                rotation: labelLayout.rotation,\n                silent: isSilent(axisModel),\n                z2: 1,\n                tooltip: (tooltipOpt && tooltipOpt.show)\n                    ? zrUtil.extend({\n                        content: name,\n                        formatter: function () {\n                            return name;\n                        },\n                        formatterParams: formatterParams\n                    }, tooltipOpt)\n                    : null\n            });\n\n            if (axisModel.get('triggerEvent')) {\n                textEl.eventData = makeAxisEventDataBase(axisModel);\n                textEl.eventData.targetType = 'axisName';\n                textEl.eventData.name = name;\n            }\n\n            // FIXME\n            this._dumbGroup.add(textEl);\n            textEl.updateTransform();\n\n            this.group.add(textEl);\n\n            textEl.decomposeTransform();\n        }\n\n    };\n\n    /**\n     * @public\n     * @static\n     * @param {Object} opt\n     * @param {number} axisRotation in radian\n     * @param {number} textRotation in radian\n     * @param {number} direction\n     * @return {Object} {\n     *  rotation, // according to axis\n     *  textAlign,\n     *  textVerticalAlign\n     * }\n     */\n    var innerTextLayout = AxisBuilder.innerTextLayout = function (axisRotation, textRotation, direction) {\n        var rotationDiff = remRadian(textRotation - axisRotation);\n        var textAlign;\n        var textVerticalAlign;\n\n        if (isRadianAroundZero(rotationDiff)) { // Label is parallel with axis line.\n            textVerticalAlign = direction > 0 ? 'top' : 'bottom';\n            textAlign = 'center';\n        }\n        else if (isRadianAroundZero(rotationDiff - PI)) { // Label is inverse parallel with axis line.\n            textVerticalAlign = direction > 0 ? 'bottom' : 'top';\n            textAlign = 'center';\n        }\n        else {\n            textVerticalAlign = 'middle';\n\n            if (rotationDiff > 0 && rotationDiff < PI) {\n                textAlign = direction > 0 ? 'right' : 'left';\n            }\n            else {\n                textAlign = direction > 0 ? 'left' : 'right';\n            }\n        }\n\n        return {\n            rotation: rotationDiff,\n            textAlign: textAlign,\n            textVerticalAlign: textVerticalAlign\n        };\n    };\n\n    function endTextLayout(opt, textPosition, textRotate, extent) {\n        var rotationDiff = remRadian(textRotate - opt.rotation);\n        var textAlign;\n        var textVerticalAlign;\n        var inverse = extent[0] > extent[1];\n        var onLeft = (textPosition === 'start' && !inverse)\n            || (textPosition !== 'start' && inverse);\n\n        if (isRadianAroundZero(rotationDiff - PI / 2)) {\n            textVerticalAlign = onLeft ? 'bottom' : 'top';\n            textAlign = 'center';\n        }\n        else if (isRadianAroundZero(rotationDiff - PI * 1.5)) {\n            textVerticalAlign = onLeft ? 'top' : 'bottom';\n            textAlign = 'center';\n        }\n        else {\n            textVerticalAlign = 'middle';\n            if (rotationDiff < PI * 1.5 && rotationDiff > PI / 2) {\n                textAlign = onLeft ? 'left' : 'right';\n            }\n            else {\n                textAlign = onLeft ? 'right' : 'left';\n            }\n        }\n\n        return {\n            rotation: rotationDiff,\n            textAlign: textAlign,\n            textVerticalAlign: textVerticalAlign\n        };\n    }\n\n    function isSilent(axisModel) {\n        var tooltipOpt = axisModel.get('tooltip');\n        return axisModel.get('silent')\n            // Consider mouse cursor, add these restrictions.\n            || !(\n                axisModel.get('triggerEvent') || (tooltipOpt && tooltipOpt.show)\n            );\n    }\n\n    function fixMinMaxLabelShow(axisModel, textEls) {\n        // If min or max are user set, we need to check\n        // If the tick on min(max) are overlap on their neighbour tick\n        // If they are overlapped, we need to hide the min(max) tick label\n        var showMinLabel = axisModel.get('axisLabel.showMinLabel');\n        var showMaxLabel = axisModel.get('axisLabel.showMaxLabel');\n        var firstLabel = textEls[0];\n        var nextLabel = textEls[1];\n        var lastLabel = textEls[textEls.length - 1];\n        var prevLabel = textEls[textEls.length - 2];\n\n        if (showMinLabel === false) {\n            firstLabel.ignore = true;\n        }\n        else if (axisModel.getMin() != null && isTwoLabelOverlapped(firstLabel, nextLabel)) {\n            showMinLabel ? (nextLabel.ignore = true) : (firstLabel.ignore = true);\n        }\n\n        if (showMaxLabel === false) {\n            lastLabel.ignore = true;\n        }\n        else if (axisModel.getMax() != null && isTwoLabelOverlapped(prevLabel, lastLabel)) {\n            showMaxLabel ? (prevLabel.ignore = true) : (lastLabel.ignore = true);\n        }\n    }\n\n    function isTwoLabelOverlapped(current, next, labelLayout) {\n        // current and next has the same rotation.\n        var firstRect = current && current.getBoundingRect().clone();\n        var nextRect = next && next.getBoundingRect().clone();\n\n        if (!firstRect || !nextRect) {\n            return;\n        }\n\n        // When checking intersect of two rotated labels, we use mRotationBack\n        // to avoid that boundingRect is enlarge when using `boundingRect.applyTransform`.\n        var mRotationBack = matrix.identity([]);\n        matrix.rotate(mRotationBack, mRotationBack, -current.rotation);\n\n        firstRect.applyTransform(matrix.mul([], mRotationBack, current.getLocalTransform()));\n        nextRect.applyTransform(matrix.mul([], mRotationBack, next.getLocalTransform()));\n\n        return firstRect.intersect(nextRect);\n    }\n\n\n    /**\n     * @static\n     */\n    var ifIgnoreOnTick = AxisBuilder.ifIgnoreOnTick = function (axis, i, interval) {\n        var rawTick;\n        var scale = axis.scale;\n        return scale.type === 'ordinal'\n            && (\n                typeof interval === 'function'\n                    ? (\n                        rawTick = scale.getTicks()[i],\n                        !interval(rawTick, scale.getLabel(rawTick))\n                    )\n                    : i % (interval + 1)\n            );\n    };\n\n    /**\n     * @static\n     */\n    var getInterval = AxisBuilder.getInterval = function (model, labelInterval) {\n        var interval = model.get('interval');\n        if (interval == null || interval == 'auto') {\n            interval = labelInterval;\n        }\n        return interval;\n    };\n\n    module.exports = AxisBuilder;\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.6.1@echarts/lib/component/axis/AxisBuilder.js\n// module id = cH+X\n// module chunks = 0 1","/**\n * Box selection tool.\n *\n * @module echarts/component/helper/BrushController\n */\n\n\n\n    var Eventful = require('zrender/lib/mixin/Eventful');\n    var zrUtil = require('zrender/lib/core/util');\n    var graphic = require('../../util/graphic');\n    var interactionMutex = require('./interactionMutex');\n    var DataDiffer = require('../../data/DataDiffer');\n\n    var curry = zrUtil.curry;\n    var each = zrUtil.each;\n    var map = zrUtil.map;\n    var mathMin = Math.min;\n    var mathMax = Math.max;\n    var mathPow = Math.pow;\n\n    var COVER_Z = 10000;\n    var UNSELECT_THRESHOLD = 6;\n    var MIN_RESIZE_LINE_WIDTH = 6;\n    var MUTEX_RESOURCE_KEY = 'globalPan';\n\n    var DIRECTION_MAP = {\n        w: [0, 0],\n        e: [0, 1],\n        n: [1, 0],\n        s: [1, 1]\n    };\n    var CURSOR_MAP = {\n        w: 'ew',\n        e: 'ew',\n        n: 'ns',\n        s: 'ns',\n        ne: 'nesw',\n        sw: 'nesw',\n        nw: 'nwse',\n        se: 'nwse'\n    };\n    var DEFAULT_BRUSH_OPT = {\n        brushStyle: {\n            lineWidth: 2,\n            stroke: 'rgba(0,0,0,0.3)',\n            fill: 'rgba(0,0,0,0.1)'\n        },\n        transformable: true,\n        brushMode: 'single',\n        removeOnClick: false\n    };\n\n    var baseUID = 0;\n\n    /**\n     * @alias module:echarts/component/helper/BrushController\n     * @constructor\n     * @mixin {module:zrender/mixin/Eventful}\n     * @event module:echarts/component/helper/BrushController#brush\n     *        params:\n     *            areas: Array.<Array>, coord relates to container group,\n     *                                    If no container specified, to global.\n     *            opt {\n     *                isEnd: boolean,\n     *                removeOnClick: boolean\n     *            }\n     *\n     * @param {module:zrender/zrender~ZRender} zr\n     */\n    function BrushController(zr) {\n\n        if (__DEV__) {\n            zrUtil.assert(zr);\n        }\n\n        Eventful.call(this);\n\n        /**\n         * @type {module:zrender/zrender~ZRender}\n         * @private\n         */\n        this._zr = zr;\n\n        /**\n         * @type {module:zrender/container/Group}\n         * @readOnly\n         */\n        this.group = new graphic.Group();\n\n        /**\n         * Only for drawing (after enabledBrush).\n         *     'line', 'rect', 'polygon' or false\n         *     If passing false/null/undefined, disable brush.\n         *     If passing 'auto', determined by panel.defaultBrushType\n         * @private\n         * @type {string}\n         */\n        this._brushType;\n\n        /**\n         * Only for drawing (after enabledBrush).\n         *\n         * @private\n         * @type {Object}\n         */\n        this._brushOption;\n\n        /**\n         * @private\n         * @type {Object}\n         */\n        this._panels;\n\n        /**\n         * @private\n         * @type {Array.<nubmer>}\n         */\n        this._track = [];\n\n        /**\n         * @private\n         * @type {boolean}\n         */\n        this._dragging;\n\n        /**\n         * @private\n         * @type {Array}\n         */\n        this._covers = [];\n\n        /**\n         * @private\n         * @type {moudule:zrender/container/Group}\n         */\n        this._creatingCover;\n\n        /**\n         * `true` means global panel\n         * @private\n         * @type {module:zrender/container/Group|boolean}\n         */\n        this._creatingPanel;\n\n        /**\n         * @private\n         * @type {boolean}\n         */\n        this._enableGlobalPan;\n\n        /**\n         * @private\n         * @type {boolean}\n         */\n        if (__DEV__) {\n            this._mounted;\n        }\n\n        /**\n         * @private\n         * @type {string}\n         */\n        this._uid = 'brushController_' + baseUID++;\n\n        /**\n         * @private\n         * @type {Object}\n         */\n        this._handlers = {};\n        each(mouseHandlers, function (handler, eventName) {\n            this._handlers[eventName] = zrUtil.bind(handler, this);\n        }, this);\n    }\n\n    BrushController.prototype = {\n\n        constructor: BrushController,\n\n        /**\n         * If set to null/undefined/false, select disabled.\n         * @param {Object} brushOption\n         * @param {string|boolean} brushOption.brushType 'line', 'rect', 'polygon' or false\n         *                          If passing false/null/undefined, disable brush.\n         *                          If passing 'auto', determined by panel.defaultBrushType.\n         *                              ('auto' can not be used in global panel)\n         * @param {number} [brushOption.brushMode='single'] 'single' or 'multiple'\n         * @param {boolean} [brushOption.transformable=true]\n         * @param {boolean} [brushOption.removeOnClick=false]\n         * @param {Object} [brushOption.brushStyle]\n         * @param {number} [brushOption.brushStyle.width]\n         * @param {number} [brushOption.brushStyle.lineWidth]\n         * @param {string} [brushOption.brushStyle.stroke]\n         * @param {string} [brushOption.brushStyle.fill]\n         * @param {number} [brushOption.z]\n         */\n        enableBrush: function (brushOption) {\n            if (__DEV__) {\n                zrUtil.assert(this._mounted);\n            }\n\n            this._brushType && doDisableBrush(this);\n            brushOption.brushType && doEnableBrush(this, brushOption);\n\n            return this;\n        },\n\n        /**\n         * @param {Array.<Object>} panelOpts If not pass, it is global brush.\n         *        Each items: {\n         *            panelId, // mandatory.\n         *            clipPath, // mandatory. function.\n         *            isTargetByCursor, // mandatory. function.\n         *            defaultBrushType, // optional, only used when brushType is 'auto'.\n         *            getLinearBrushOtherExtent, // optional. function.\n         *        }\n         */\n        setPanels: function (panelOpts) {\n            if (panelOpts && panelOpts.length) {\n                var panels = this._panels = {};\n                zrUtil.each(panelOpts, function (panelOpts) {\n                    panels[panelOpts.panelId] = zrUtil.clone(panelOpts);\n                });\n            }\n            else {\n                this._panels = null;\n            }\n            return this;\n        },\n\n        /**\n         * @param {Object} [opt]\n         * @return {boolean} [opt.enableGlobalPan=false]\n         */\n        mount: function (opt) {\n            opt = opt || {};\n\n            if (__DEV__) {\n                this._mounted = true; // should be at first.\n            }\n\n            this._enableGlobalPan = opt.enableGlobalPan;\n\n            var thisGroup = this.group;\n            this._zr.add(thisGroup);\n\n            thisGroup.attr({\n                position: opt.position || [0, 0],\n                rotation: opt.rotation || 0,\n                scale: opt.scale || [1, 1]\n            });\n            this._transform = thisGroup.getLocalTransform();\n\n            return this;\n        },\n\n        eachCover: function (cb, context) {\n            each(this._covers, cb, context);\n        },\n\n        /**\n         * Update covers.\n         * @param {Array.<Object>} brushOptionList Like:\n         *        [\n         *            {id: 'xx', brushType: 'line', range: [23, 44], brushStyle, transformable},\n         *            {id: 'yy', brushType: 'rect', range: [[23, 44], [23, 54]]},\n         *            ...\n         *        ]\n         *        `brushType` is required in each cover info. (can not be 'auto')\n         *        `id` is not mandatory.\n         *        `brushStyle`, `transformable` is not mandatory, use DEFAULT_BRUSH_OPT by default.\n         *        If brushOptionList is null/undefined, all covers removed.\n         */\n        updateCovers: function (brushOptionList) {\n            if (__DEV__) {\n                zrUtil.assert(this._mounted);\n            }\n\n            brushOptionList = zrUtil.map(brushOptionList, function (brushOption) {\n                return zrUtil.merge(zrUtil.clone(DEFAULT_BRUSH_OPT), brushOption, true);\n            });\n\n            var tmpIdPrefix = '\\0-brush-index-';\n            var oldCovers = this._covers;\n            var newCovers = this._covers = [];\n            var controller = this;\n            var creatingCover = this._creatingCover;\n\n            (new DataDiffer(oldCovers, brushOptionList, oldGetKey, getKey))\n                .add(addOrUpdate)\n                .update(addOrUpdate)\n                .remove(remove)\n                .execute();\n\n            return this;\n\n            function getKey(brushOption, index) {\n                return (brushOption.id != null ? brushOption.id : tmpIdPrefix + index)\n                    + '-' + brushOption.brushType;\n            }\n\n            function oldGetKey(cover, index) {\n                return getKey(cover.__brushOption, index);\n            }\n\n            function addOrUpdate(newIndex, oldIndex) {\n                var newBrushOption = brushOptionList[newIndex];\n                // Consider setOption in event listener of brushSelect,\n                // where updating cover when creating should be forbiden.\n                if (oldIndex != null && oldCovers[oldIndex] === creatingCover) {\n                    newCovers[newIndex] = oldCovers[oldIndex];\n                }\n                else {\n                    var cover = newCovers[newIndex] = oldIndex != null\n                        ? (\n                            oldCovers[oldIndex].__brushOption = newBrushOption,\n                            oldCovers[oldIndex]\n                        )\n                        : endCreating(controller, createCover(controller, newBrushOption));\n                    updateCoverAfterCreation(controller, cover);\n                }\n            }\n\n            function remove(oldIndex) {\n                if (oldCovers[oldIndex] !== creatingCover) {\n                    controller.group.remove(oldCovers[oldIndex]);\n                }\n            }\n        },\n\n        unmount: function () {\n            if (__DEV__) {\n                if (!this._mounted) {\n                    return;\n                }\n            }\n\n            this.enableBrush(false);\n\n            // container may 'removeAll' outside.\n            clearCovers(this);\n            this._zr.remove(this.group);\n\n            if (__DEV__) {\n                this._mounted = false; // should be at last.\n            }\n\n            return this;\n        },\n\n        dispose: function () {\n            this.unmount();\n            this.off();\n        }\n    };\n\n    zrUtil.mixin(BrushController, Eventful);\n\n    function doEnableBrush(controller, brushOption) {\n        var zr = controller._zr;\n\n        // Consider roam, which takes globalPan too.\n        if (!controller._enableGlobalPan) {\n            interactionMutex.take(zr, MUTEX_RESOURCE_KEY, controller._uid);\n        }\n\n        each(controller._handlers, function (handler, eventName) {\n            zr.on(eventName, handler);\n        });\n\n        controller._brushType = brushOption.brushType;\n        controller._brushOption = zrUtil.merge(zrUtil.clone(DEFAULT_BRUSH_OPT), brushOption, true);\n    }\n\n    function doDisableBrush(controller) {\n        var zr = controller._zr;\n\n        interactionMutex.release(zr, MUTEX_RESOURCE_KEY, controller._uid);\n\n        each(controller._handlers, function (handler, eventName) {\n            zr.off(eventName, handler);\n        });\n\n        controller._brushType = controller._brushOption = null;\n    }\n\n    function createCover(controller, brushOption) {\n        var cover = coverRenderers[brushOption.brushType].createCover(controller, brushOption);\n        cover.__brushOption = brushOption;\n        updateZ(cover, brushOption);\n        controller.group.add(cover);\n        return cover;\n    }\n\n    function endCreating(controller, creatingCover) {\n        var coverRenderer = getCoverRenderer(creatingCover);\n        if (coverRenderer.endCreating) {\n            coverRenderer.endCreating(controller, creatingCover);\n            updateZ(creatingCover, creatingCover.__brushOption);\n        }\n        return creatingCover;\n    }\n\n    function updateCoverShape(controller, cover) {\n        var brushOption = cover.__brushOption;\n        getCoverRenderer(cover).updateCoverShape(\n            controller, cover, brushOption.range, brushOption\n        );\n    }\n\n    function updateZ(cover, brushOption) {\n        var z = brushOption.z;\n        z == null && (z = COVER_Z);\n        cover.traverse(function (el) {\n            el.z = z;\n            el.z2 = z; // Consider in given container.\n        });\n    }\n\n    function updateCoverAfterCreation(controller, cover) {\n        getCoverRenderer(cover).updateCommon(controller, cover);\n        updateCoverShape(controller, cover);\n    }\n\n    function getCoverRenderer(cover) {\n        return coverRenderers[cover.__brushOption.brushType];\n    }\n\n    // return target panel or `true` (means global panel)\n    function getPanelByPoint(controller, e, localCursorPoint) {\n        var panels = controller._panels;\n        if (!panels) {\n            return true; // Global panel\n        }\n        var panel;\n        var transform = controller._transform;\n        each(panels, function (pn) {\n            pn.isTargetByCursor(e, localCursorPoint, transform) && (panel = pn);\n        });\n        return panel;\n    }\n\n    // Return a panel or true\n    function getPanelByCover(controller, cover) {\n        var panels = controller._panels;\n        if (!panels) {\n            return true; // Global panel\n        }\n        var panelId = cover.__brushOption.panelId;\n        // User may give cover without coord sys info,\n        // which is then treated as global panel.\n        return panelId != null ? panels[panelId] : true;\n    }\n\n    function clearCovers(controller) {\n        var covers = controller._covers;\n        var originalLength = covers.length;\n        each(covers, function (cover) {\n            controller.group.remove(cover);\n        }, controller);\n        covers.length = 0;\n\n        return !!originalLength;\n    }\n\n    function trigger(controller, opt) {\n        var areas = map(controller._covers, function (cover) {\n            var brushOption = cover.__brushOption;\n            var range = zrUtil.clone(brushOption.range);\n            return {\n                brushType: brushOption.brushType,\n                panelId: brushOption.panelId,\n                range: range\n            };\n        });\n\n        controller.trigger('brush', areas, {\n            isEnd: !!opt.isEnd,\n            removeOnClick: !!opt.removeOnClick\n        });\n    }\n\n    function shouldShowCover(controller) {\n        var track = controller._track;\n\n        if (!track.length) {\n            return false;\n        }\n\n        var p2 = track[track.length - 1];\n        var p1 = track[0];\n        var dx = p2[0] - p1[0];\n        var dy = p2[1] - p1[1];\n        var dist = mathPow(dx * dx + dy * dy, 0.5);\n\n        return dist > UNSELECT_THRESHOLD;\n    }\n\n    function getTrackEnds(track) {\n        var tail = track.length - 1;\n        tail < 0 && (tail = 0);\n        return [track[0], track[tail]];\n    }\n\n    function createBaseRectCover(doDrift, controller, brushOption, edgeNames) {\n        var cover = new graphic.Group();\n\n        cover.add(new graphic.Rect({\n            name: 'main',\n            style: makeStyle(brushOption),\n            silent: true,\n            draggable: true,\n            cursor: 'move',\n            drift: curry(doDrift, controller, cover, 'nswe'),\n            ondragend: curry(trigger, controller, {isEnd: true})\n        }));\n\n        each(\n            edgeNames,\n            function (name) {\n                cover.add(new graphic.Rect({\n                    name: name,\n                    style: {opacity: 0},\n                    draggable: true,\n                    silent: true,\n                    invisible: true,\n                    drift: curry(doDrift, controller, cover, name),\n                    ondragend: curry(trigger, controller, {isEnd: true})\n                }));\n            }\n        );\n\n        return cover;\n    }\n\n    function updateBaseRect(controller, cover, localRange, brushOption) {\n        var lineWidth = brushOption.brushStyle.lineWidth || 0;\n        var handleSize = mathMax(lineWidth, MIN_RESIZE_LINE_WIDTH);\n        var x = localRange[0][0];\n        var y = localRange[1][0];\n        var xa = x - lineWidth / 2;\n        var ya = y - lineWidth / 2;\n        var x2 = localRange[0][1];\n        var y2 = localRange[1][1];\n        var x2a = x2 - handleSize + lineWidth / 2;\n        var y2a = y2 - handleSize + lineWidth / 2;\n        var width = x2 - x;\n        var height = y2 - y;\n        var widtha = width + lineWidth;\n        var heighta = height + lineWidth;\n\n        updateRectShape(controller, cover, 'main', x, y, width, height);\n\n        if (brushOption.transformable) {\n            updateRectShape(controller, cover, 'w', xa, ya, handleSize, heighta);\n            updateRectShape(controller, cover, 'e', x2a, ya, handleSize, heighta);\n            updateRectShape(controller, cover, 'n', xa, ya, widtha, handleSize);\n            updateRectShape(controller, cover, 's', xa, y2a, widtha, handleSize);\n\n            updateRectShape(controller, cover, 'nw', xa, ya, handleSize, handleSize);\n            updateRectShape(controller, cover, 'ne', x2a, ya, handleSize, handleSize);\n            updateRectShape(controller, cover, 'sw', xa, y2a, handleSize, handleSize);\n            updateRectShape(controller, cover, 'se', x2a, y2a, handleSize, handleSize);\n        }\n    }\n\n    function updateCommon(controller, cover) {\n        var brushOption = cover.__brushOption;\n        var transformable = brushOption.transformable;\n\n        var mainEl = cover.childAt(0);\n        mainEl.useStyle(makeStyle(brushOption));\n        mainEl.attr({\n            silent: !transformable,\n            cursor: transformable ? 'move' : 'default'\n        });\n\n        each(\n            ['w', 'e', 'n', 's', 'se', 'sw', 'ne', 'nw'],\n            function (name) {\n                var el = cover.childOfName(name);\n                var globalDir = getGlobalDirection(controller, name);\n\n                el && el.attr({\n                    silent: !transformable,\n                    invisible: !transformable,\n                    cursor: transformable ? CURSOR_MAP[globalDir] + '-resize' : null\n                });\n            }\n        );\n    }\n\n    function updateRectShape(controller, cover, name, x, y, w, h) {\n        var el = cover.childOfName(name);\n        el && el.setShape(pointsToRect(\n            clipByPanel(controller, cover, [[x, y], [x + w, y + h]])\n        ));\n    }\n\n    function makeStyle(brushOption) {\n        return zrUtil.defaults({strokeNoScale: true}, brushOption.brushStyle);\n    }\n\n    function formatRectRange(x, y, x2, y2) {\n        var min = [mathMin(x, x2), mathMin(y, y2)];\n        var max = [mathMax(x, x2), mathMax(y, y2)];\n\n        return [\n            [min[0], max[0]], // x range\n            [min[1], max[1]] // y range\n        ];\n    }\n\n    function getTransform(controller) {\n        return graphic.getTransform(controller.group);\n    }\n\n    function getGlobalDirection(controller, localDirection) {\n        if (localDirection.length > 1) {\n            localDirection = localDirection.split('');\n            var globalDir = [\n                getGlobalDirection(controller, localDirection[0]),\n                getGlobalDirection(controller, localDirection[1])\n            ];\n            (globalDir[0] === 'e' || globalDir[0] === 'w') && globalDir.reverse();\n            return globalDir.join('');\n        }\n        else {\n            var map = {w: 'left', e: 'right', n: 'top', s: 'bottom'};\n            var inverseMap = {left: 'w', right: 'e', top: 'n', bottom: 's'};\n            var globalDir = graphic.transformDirection(\n                map[localDirection], getTransform(controller)\n            );\n            return inverseMap[globalDir];\n        }\n    }\n\n    function driftRect(toRectRange, fromRectRange, controller, cover, name, dx, dy, e) {\n        var brushOption = cover.__brushOption;\n        var rectRange = toRectRange(brushOption.range);\n        var localDelta = toLocalDelta(controller, dx, dy);\n\n        each(name.split(''), function (namePart) {\n            var ind = DIRECTION_MAP[namePart];\n            rectRange[ind[0]][ind[1]] += localDelta[ind[0]];\n        });\n\n        brushOption.range = fromRectRange(formatRectRange(\n            rectRange[0][0], rectRange[1][0], rectRange[0][1], rectRange[1][1]\n        ));\n\n        updateCoverAfterCreation(controller, cover);\n        trigger(controller, {isEnd: false});\n    }\n\n    function driftPolygon(controller, cover, dx, dy, e) {\n        var range = cover.__brushOption.range;\n        var localDelta = toLocalDelta(controller, dx, dy);\n\n        each(range, function (point) {\n            point[0] += localDelta[0];\n            point[1] += localDelta[1];\n        });\n\n        updateCoverAfterCreation(controller, cover);\n        trigger(controller, {isEnd: false});\n    }\n\n    function toLocalDelta(controller, dx, dy) {\n        var thisGroup = controller.group;\n        var localD = thisGroup.transformCoordToLocal(dx, dy);\n        var localZero = thisGroup.transformCoordToLocal(0, 0);\n\n        return [localD[0] - localZero[0], localD[1] - localZero[1]];\n    }\n\n    function clipByPanel(controller, cover, data) {\n        var panel = getPanelByCover(controller, cover);\n\n        return (panel && panel !== true)\n            ? panel.clipPath(data, controller._transform)\n            : zrUtil.clone(data);\n    }\n\n    function pointsToRect(points) {\n        var xmin = mathMin(points[0][0], points[1][0]);\n        var ymin = mathMin(points[0][1], points[1][1]);\n        var xmax = mathMax(points[0][0], points[1][0]);\n        var ymax = mathMax(points[0][1], points[1][1]);\n\n        return {\n            x: xmin,\n            y: ymin,\n            width: xmax - xmin,\n            height: ymax - ymin\n        };\n    }\n\n    function resetCursor(controller, e, localCursorPoint) {\n        // Check active\n        if (!controller._brushType) {\n            return;\n        }\n\n        var zr = controller._zr;\n        var covers = controller._covers;\n        var currPanel = getPanelByPoint(controller, e, localCursorPoint);\n\n        // Check whether in covers.\n        if (!controller._dragging) {\n            for (var i = 0; i < covers.length; i++) {\n                var brushOption = covers[i].__brushOption;\n                if (currPanel\n                    && (currPanel === true || brushOption.panelId === currPanel.panelId)\n                    && coverRenderers[brushOption.brushType].contain(\n                        covers[i], localCursorPoint[0], localCursorPoint[1]\n                    )\n                ) {\n                    // Use cursor style set on cover.\n                    return;\n                }\n            }\n        }\n\n        currPanel && zr.setCursorStyle('crosshair');\n    }\n\n    function preventDefault(e) {\n        var rawE = e.event;\n        rawE.preventDefault && rawE.preventDefault();\n    }\n\n    function mainShapeContain(cover, x, y) {\n        return cover.childOfName('main').contain(x, y);\n    }\n\n    function updateCoverByMouse(controller, e, localCursorPoint, isEnd) {\n        var creatingCover = controller._creatingCover;\n        var panel = controller._creatingPanel;\n        var thisBrushOption = controller._brushOption;\n        var eventParams;\n\n        controller._track.push(localCursorPoint.slice());\n\n        if (shouldShowCover(controller) || creatingCover) {\n\n            if (panel && !creatingCover) {\n                thisBrushOption.brushMode === 'single' && clearCovers(controller);\n                var brushOption = zrUtil.clone(thisBrushOption);\n                brushOption.brushType = determineBrushType(brushOption.brushType, panel);\n                brushOption.panelId = panel === true ? null : panel.panelId;\n                creatingCover = controller._creatingCover = createCover(controller, brushOption);\n                controller._covers.push(creatingCover);\n            }\n\n            if (creatingCover) {\n                var coverRenderer = coverRenderers[determineBrushType(controller._brushType, panel)];\n                var coverBrushOption = creatingCover.__brushOption;\n\n                coverBrushOption.range = coverRenderer.getCreatingRange(\n                    clipByPanel(controller, creatingCover, controller._track)\n                );\n\n                if (isEnd) {\n                    endCreating(controller, creatingCover);\n                    coverRenderer.updateCommon(controller, creatingCover);\n                }\n\n                updateCoverShape(controller, creatingCover);\n\n                eventParams = {isEnd: isEnd};\n            }\n        }\n        else if (\n            isEnd\n            && thisBrushOption.brushMode === 'single'\n            && thisBrushOption.removeOnClick\n        ) {\n            // Help user to remove covers easily, only by a tiny drag, in 'single' mode.\n            // But a single click do not clear covers, because user may have casual\n            // clicks (for example, click on other component and do not expect covers\n            // disappear).\n            // Only some cover removed, trigger action, but not every click trigger action.\n            if (getPanelByPoint(controller, e, localCursorPoint) && clearCovers(controller)) {\n                eventParams = {isEnd: isEnd, removeOnClick: true};\n            }\n        }\n\n        return eventParams;\n    }\n\n    function determineBrushType(brushType, panel) {\n        if (brushType === 'auto') {\n            if (__DEV__) {\n                zrUtil.assert(\n                    panel && panel.defaultBrushType,\n                    'MUST have defaultBrushType when brushType is \"atuo\"'\n                );\n            }\n            return panel.defaultBrushType;\n        }\n        return brushType;\n    }\n\n    var mouseHandlers = {\n\n        mousedown: function (e) {\n            if (this._dragging) {\n                // In case some browser do not support globalOut,\n                // and release mose out side the browser.\n                handleDragEnd.call(this, e);\n            }\n            else if (!e.target || !e.target.draggable) {\n\n                preventDefault(e);\n\n                var localCursorPoint = this.group.transformCoordToLocal(e.offsetX, e.offsetY);\n\n                this._creatingCover = null;\n                var panel = this._creatingPanel = getPanelByPoint(this, e, localCursorPoint);\n\n                if (panel) {\n                    this._dragging = true;\n                    this._track = [localCursorPoint.slice()];\n                }\n            }\n        },\n\n        mousemove: function (e) {\n            var localCursorPoint = this.group.transformCoordToLocal(e.offsetX, e.offsetY);\n\n            resetCursor(this, e, localCursorPoint);\n\n            if (this._dragging) {\n\n                preventDefault(e);\n\n                var eventParams = updateCoverByMouse(this, e, localCursorPoint, false);\n\n                eventParams && trigger(this, eventParams);\n            }\n        },\n\n        mouseup: handleDragEnd //,\n\n        // FIXME\n        // in tooltip, globalout should not be triggered.\n        // globalout: handleDragEnd\n    };\n\n    function handleDragEnd(e) {\n        if (this._dragging) {\n\n            preventDefault(e);\n\n            var localCursorPoint = this.group.transformCoordToLocal(e.offsetX, e.offsetY);\n            var eventParams = updateCoverByMouse(this, e, localCursorPoint, true);\n\n            this._dragging = false;\n            this._track = [];\n            this._creatingCover = null;\n\n            // trigger event shoule be at final, after procedure will be nested.\n            eventParams && trigger(this, eventParams);\n        }\n    }\n\n    /**\n     * key: brushType\n     * @type {Object}\n     */\n    var coverRenderers = {\n\n        lineX: getLineRenderer(0),\n\n        lineY: getLineRenderer(1),\n\n        rect: {\n            createCover: function (controller, brushOption) {\n                return createBaseRectCover(\n                    curry(\n                        driftRect,\n                        function (range) {\n                            return range;\n                        },\n                        function (range) {\n                            return range;\n                        }\n                    ),\n                    controller,\n                    brushOption,\n                    ['w', 'e', 'n', 's', 'se', 'sw', 'ne', 'nw']\n                );\n            },\n            getCreatingRange: function (localTrack) {\n                var ends = getTrackEnds(localTrack);\n                return formatRectRange(ends[1][0], ends[1][1], ends[0][0], ends[0][1]);\n            },\n            updateCoverShape: function (controller, cover, localRange, brushOption) {\n                updateBaseRect(controller, cover, localRange, brushOption);\n            },\n            updateCommon: updateCommon,\n            contain: mainShapeContain\n        },\n\n        polygon: {\n            createCover: function (controller, brushOption) {\n                var cover = new graphic.Group();\n\n                // Do not use graphic.Polygon because graphic.Polyline do not close the\n                // border of the shape when drawing, which is a better experience for user.\n                cover.add(new graphic.Polyline({\n                    name: 'main',\n                    style: makeStyle(brushOption),\n                    silent: true\n                }));\n\n                return cover;\n            },\n            getCreatingRange: function (localTrack) {\n                return localTrack;\n            },\n            endCreating: function (controller, cover) {\n                cover.remove(cover.childAt(0));\n                // Use graphic.Polygon close the shape.\n                cover.add(new graphic.Polygon({\n                    name: 'main',\n                    draggable: true,\n                    drift: curry(driftPolygon, controller, cover),\n                    ondragend: curry(trigger, controller, {isEnd: true})\n                }));\n            },\n            updateCoverShape: function (controller, cover, localRange, brushOption) {\n                cover.childAt(0).setShape({\n                    points: clipByPanel(controller, cover, localRange)\n                });\n            },\n            updateCommon: updateCommon,\n            contain: mainShapeContain\n        }\n    };\n\n    function getLineRenderer(xyIndex) {\n        return {\n            createCover: function (controller, brushOption) {\n                return createBaseRectCover(\n                    curry(\n                        driftRect,\n                        function (range) {\n                            var rectRange = [range, [0, 100]];\n                            xyIndex && rectRange.reverse();\n                            return rectRange;\n                        },\n                        function (rectRange) {\n                            return rectRange[xyIndex];\n                        }\n                    ),\n                    controller,\n                    brushOption,\n                    [['w', 'e'], ['n', 's']][xyIndex]\n                );\n            },\n            getCreatingRange: function (localTrack) {\n                var ends = getTrackEnds(localTrack);\n                var min = mathMin(ends[0][xyIndex], ends[1][xyIndex]);\n                var max = mathMax(ends[0][xyIndex], ends[1][xyIndex]);\n\n                return [min, max];\n            },\n            updateCoverShape: function (controller, cover, localRange, brushOption) {\n                var otherExtent;\n                // If brushWidth not specified, fit the panel.\n                var panel = getPanelByCover(controller, cover);\n                if (panel !== true && panel.getLinearBrushOtherExtent) {\n                    otherExtent = panel.getLinearBrushOtherExtent(\n                        xyIndex, controller._transform\n                    );\n                }\n                else {\n                    var zr = controller._zr;\n                    otherExtent = [0, [zr.getWidth(), zr.getHeight()][1 - xyIndex]];\n                }\n                var rectRange = [localRange, otherExtent];\n                xyIndex && rectRange.reverse();\n\n                updateBaseRect(controller, cover, rectRange, brushOption);\n            },\n            updateCommon: updateCommon,\n            contain: mainShapeContain\n        };\n    }\n\n    module.exports = BrushController;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.6.1@echarts/lib/component/helper/BrushController.js\n// module id = cOuU\n// module chunks = 0 1","'use strict';\n/**\n * 曲线辅助模块\n * @module zrender/core/curve\n * @author pissang(https://www.github.com/pissang)\n */\n\n\n    var vec2 = require('./vector');\n    var v2Create = vec2.create;\n    var v2DistSquare = vec2.distSquare;\n    var mathPow = Math.pow;\n    var mathSqrt = Math.sqrt;\n\n    var EPSILON = 1e-8;\n    var EPSILON_NUMERIC = 1e-4;\n\n    var THREE_SQRT = mathSqrt(3);\n    var ONE_THIRD = 1 / 3;\n\n    // 临时变量\n    var _v0 = v2Create();\n    var _v1 = v2Create();\n    var _v2 = v2Create();\n    // var _v3 = vec2.create();\n\n    function isAroundZero(val) {\n        return val > -EPSILON && val < EPSILON;\n    }\n    function isNotAroundZero(val) {\n        return val > EPSILON || val < -EPSILON;\n    }\n    /**\n     * 计算三次贝塞尔值\n     * @memberOf module:zrender/core/curve\n     * @param  {number} p0\n     * @param  {number} p1\n     * @param  {number} p2\n     * @param  {number} p3\n     * @param  {number} t\n     * @return {number}\n     */\n    function cubicAt(p0, p1, p2, p3, t) {\n        var onet = 1 - t;\n        return onet * onet * (onet * p0 + 3 * t * p1)\n             + t * t * (t * p3 + 3 * onet * p2);\n    }\n\n    /**\n     * 计算三次贝塞尔导数值\n     * @memberOf module:zrender/core/curve\n     * @param  {number} p0\n     * @param  {number} p1\n     * @param  {number} p2\n     * @param  {number} p3\n     * @param  {number} t\n     * @return {number}\n     */\n    function cubicDerivativeAt(p0, p1, p2, p3, t) {\n        var onet = 1 - t;\n        return 3 * (\n            ((p1 - p0) * onet + 2 * (p2 - p1) * t) * onet\n            + (p3 - p2) * t * t\n        );\n    }\n\n    /**\n     * 计算三次贝塞尔方程根，使用盛金公式\n     * @memberOf module:zrender/core/curve\n     * @param  {number} p0\n     * @param  {number} p1\n     * @param  {number} p2\n     * @param  {number} p3\n     * @param  {number} val\n     * @param  {Array.<number>} roots\n     * @return {number} 有效根数目\n     */\n    function cubicRootAt(p0, p1, p2, p3, val, roots) {\n        // Evaluate roots of cubic functions\n        var a = p3 + 3 * (p1 - p2) - p0;\n        var b = 3 * (p2 - p1 * 2 + p0);\n        var c = 3 * (p1  - p0);\n        var d = p0 - val;\n\n        var A = b * b - 3 * a * c;\n        var B = b * c - 9 * a * d;\n        var C = c * c - 3 * b * d;\n\n        var n = 0;\n\n        if (isAroundZero(A) && isAroundZero(B)) {\n            if (isAroundZero(b)) {\n                roots[0] = 0;\n            }\n            else {\n                var t1 = -c / b;  //t1, t2, t3, b is not zero\n                if (t1 >= 0 && t1 <= 1) {\n                    roots[n++] = t1;\n                }\n            }\n        }\n        else {\n            var disc = B * B - 4 * A * C;\n\n            if (isAroundZero(disc)) {\n                var K = B / A;\n                var t1 = -b / a + K;  // t1, a is not zero\n                var t2 = -K / 2;  // t2, t3\n                if (t1 >= 0 && t1 <= 1) {\n                    roots[n++] = t1;\n                }\n                if (t2 >= 0 && t2 <= 1) {\n                    roots[n++] = t2;\n                }\n            }\n            else if (disc > 0) {\n                var discSqrt = mathSqrt(disc);\n                var Y1 = A * b + 1.5 * a * (-B + discSqrt);\n                var Y2 = A * b + 1.5 * a * (-B - discSqrt);\n                if (Y1 < 0) {\n                    Y1 = -mathPow(-Y1, ONE_THIRD);\n                }\n                else {\n                    Y1 = mathPow(Y1, ONE_THIRD);\n                }\n                if (Y2 < 0) {\n                    Y2 = -mathPow(-Y2, ONE_THIRD);\n                }\n                else {\n                    Y2 = mathPow(Y2, ONE_THIRD);\n                }\n                var t1 = (-b - (Y1 + Y2)) / (3 * a);\n                if (t1 >= 0 && t1 <= 1) {\n                    roots[n++] = t1;\n                }\n            }\n            else {\n                var T = (2 * A * b - 3 * a * B) / (2 * mathSqrt(A * A * A));\n                var theta = Math.acos(T) / 3;\n                var ASqrt = mathSqrt(A);\n                var tmp = Math.cos(theta);\n\n                var t1 = (-b - 2 * ASqrt * tmp) / (3 * a);\n                var t2 = (-b + ASqrt * (tmp + THREE_SQRT * Math.sin(theta))) / (3 * a);\n                var t3 = (-b + ASqrt * (tmp - THREE_SQRT * Math.sin(theta))) / (3 * a);\n                if (t1 >= 0 && t1 <= 1) {\n                    roots[n++] = t1;\n                }\n                if (t2 >= 0 && t2 <= 1) {\n                    roots[n++] = t2;\n                }\n                if (t3 >= 0 && t3 <= 1) {\n                    roots[n++] = t3;\n                }\n            }\n        }\n        return n;\n    }\n\n    /**\n     * 计算三次贝塞尔方程极限值的位置\n     * @memberOf module:zrender/core/curve\n     * @param  {number} p0\n     * @param  {number} p1\n     * @param  {number} p2\n     * @param  {number} p3\n     * @param  {Array.<number>} extrema\n     * @return {number} 有效数目\n     */\n    function cubicExtrema(p0, p1, p2, p3, extrema) {\n        var b = 6 * p2 - 12 * p1 + 6 * p0;\n        var a = 9 * p1 + 3 * p3 - 3 * p0 - 9 * p2;\n        var c = 3 * p1 - 3 * p0;\n\n        var n = 0;\n        if (isAroundZero(a)) {\n            if (isNotAroundZero(b)) {\n                var t1 = -c / b;\n                if (t1 >= 0 && t1 <=1) {\n                    extrema[n++] = t1;\n                }\n            }\n        }\n        else {\n            var disc = b * b - 4 * a * c;\n            if (isAroundZero(disc)) {\n                extrema[0] = -b / (2 * a);\n            }\n            else if (disc > 0) {\n                var discSqrt = mathSqrt(disc);\n                var t1 = (-b + discSqrt) / (2 * a);\n                var t2 = (-b - discSqrt) / (2 * a);\n                if (t1 >= 0 && t1 <= 1) {\n                    extrema[n++] = t1;\n                }\n                if (t2 >= 0 && t2 <= 1) {\n                    extrema[n++] = t2;\n                }\n            }\n        }\n        return n;\n    }\n\n    /**\n     * 细分三次贝塞尔曲线\n     * @memberOf module:zrender/core/curve\n     * @param  {number} p0\n     * @param  {number} p1\n     * @param  {number} p2\n     * @param  {number} p3\n     * @param  {number} t\n     * @param  {Array.<number>} out\n     */\n    function cubicSubdivide(p0, p1, p2, p3, t, out) {\n        var p01 = (p1 - p0) * t + p0;\n        var p12 = (p2 - p1) * t + p1;\n        var p23 = (p3 - p2) * t + p2;\n\n        var p012 = (p12 - p01) * t + p01;\n        var p123 = (p23 - p12) * t + p12;\n\n        var p0123 = (p123 - p012) * t + p012;\n        // Seg0\n        out[0] = p0;\n        out[1] = p01;\n        out[2] = p012;\n        out[3] = p0123;\n        // Seg1\n        out[4] = p0123;\n        out[5] = p123;\n        out[6] = p23;\n        out[7] = p3;\n    }\n\n    /**\n     * 投射点到三次贝塞尔曲线上，返回投射距离。\n     * 投射点有可能会有一个或者多个，这里只返回其中距离最短的一个。\n     * @param {number} x0\n     * @param {number} y0\n     * @param {number} x1\n     * @param {number} y1\n     * @param {number} x2\n     * @param {number} y2\n     * @param {number} x3\n     * @param {number} y3\n     * @param {number} x\n     * @param {number} y\n     * @param {Array.<number>} [out] 投射点\n     * @return {number}\n     */\n    function cubicProjectPoint(\n        x0, y0, x1, y1, x2, y2, x3, y3,\n        x, y, out\n    ) {\n        // http://pomax.github.io/bezierinfo/#projections\n        var t;\n        var interval = 0.005;\n        var d = Infinity;\n        var prev;\n        var next;\n        var d1;\n        var d2;\n\n        _v0[0] = x;\n        _v0[1] = y;\n\n        // 先粗略估计一下可能的最小距离的 t 值\n        // PENDING\n        for (var _t = 0; _t < 1; _t += 0.05) {\n            _v1[0] = cubicAt(x0, x1, x2, x3, _t);\n            _v1[1] = cubicAt(y0, y1, y2, y3, _t);\n            d1 = v2DistSquare(_v0, _v1);\n            if (d1 < d) {\n                t = _t;\n                d = d1;\n            }\n        }\n        d = Infinity;\n\n        // At most 32 iteration\n        for (var i = 0; i < 32; i++) {\n            if (interval < EPSILON_NUMERIC) {\n                break;\n            }\n            prev = t - interval;\n            next = t + interval;\n            // t - interval\n            _v1[0] = cubicAt(x0, x1, x2, x3, prev);\n            _v1[1] = cubicAt(y0, y1, y2, y3, prev);\n\n            d1 = v2DistSquare(_v1, _v0);\n\n            if (prev >= 0 && d1 < d) {\n                t = prev;\n                d = d1;\n            }\n            else {\n                // t + interval\n                _v2[0] = cubicAt(x0, x1, x2, x3, next);\n                _v2[1] = cubicAt(y0, y1, y2, y3, next);\n                d2 = v2DistSquare(_v2, _v0);\n\n                if (next <= 1 && d2 < d) {\n                    t = next;\n                    d = d2;\n                }\n                else {\n                    interval *= 0.5;\n                }\n            }\n        }\n        // t\n        if (out) {\n            out[0] = cubicAt(x0, x1, x2, x3, t);\n            out[1] = cubicAt(y0, y1, y2, y3, t);\n        }\n        // console.log(interval, i);\n        return mathSqrt(d);\n    }\n\n    /**\n     * 计算二次方贝塞尔值\n     * @param  {number} p0\n     * @param  {number} p1\n     * @param  {number} p2\n     * @param  {number} t\n     * @return {number}\n     */\n    function quadraticAt(p0, p1, p2, t) {\n        var onet = 1 - t;\n        return onet * (onet * p0 + 2 * t * p1) + t * t * p2;\n    }\n\n    /**\n     * 计算二次方贝塞尔导数值\n     * @param  {number} p0\n     * @param  {number} p1\n     * @param  {number} p2\n     * @param  {number} t\n     * @return {number}\n     */\n    function quadraticDerivativeAt(p0, p1, p2, t) {\n        return 2 * ((1 - t) * (p1 - p0) + t * (p2 - p1));\n    }\n\n    /**\n     * 计算二次方贝塞尔方程根\n     * @param  {number} p0\n     * @param  {number} p1\n     * @param  {number} p2\n     * @param  {number} t\n     * @param  {Array.<number>} roots\n     * @return {number} 有效根数目\n     */\n    function quadraticRootAt(p0, p1, p2, val, roots) {\n        var a = p0 - 2 * p1 + p2;\n        var b = 2 * (p1 - p0);\n        var c = p0 - val;\n\n        var n = 0;\n        if (isAroundZero(a)) {\n            if (isNotAroundZero(b)) {\n                var t1 = -c / b;\n                if (t1 >= 0 && t1 <= 1) {\n                    roots[n++] = t1;\n                }\n            }\n        }\n        else {\n            var disc = b * b - 4 * a * c;\n            if (isAroundZero(disc)) {\n                var t1 = -b / (2 * a);\n                if (t1 >= 0 && t1 <= 1) {\n                    roots[n++] = t1;\n                }\n            }\n            else if (disc > 0) {\n                var discSqrt = mathSqrt(disc);\n                var t1 = (-b + discSqrt) / (2 * a);\n                var t2 = (-b - discSqrt) / (2 * a);\n                if (t1 >= 0 && t1 <= 1) {\n                    roots[n++] = t1;\n                }\n                if (t2 >= 0 && t2 <= 1) {\n                    roots[n++] = t2;\n                }\n            }\n        }\n        return n;\n    }\n\n    /**\n     * 计算二次贝塞尔方程极限值\n     * @memberOf module:zrender/core/curve\n     * @param  {number} p0\n     * @param  {number} p1\n     * @param  {number} p2\n     * @return {number}\n     */\n    function quadraticExtremum(p0, p1, p2) {\n        var divider = p0 + p2 - 2 * p1;\n        if (divider === 0) {\n            // p1 is center of p0 and p2\n            return 0.5;\n        }\n        else {\n            return (p0 - p1) / divider;\n        }\n    }\n\n    /**\n     * 细分二次贝塞尔曲线\n     * @memberOf module:zrender/core/curve\n     * @param  {number} p0\n     * @param  {number} p1\n     * @param  {number} p2\n     * @param  {number} t\n     * @param  {Array.<number>} out\n     */\n    function quadraticSubdivide(p0, p1, p2, t, out) {\n        var p01 = (p1 - p0) * t + p0;\n        var p12 = (p2 - p1) * t + p1;\n        var p012 = (p12 - p01) * t + p01;\n\n        // Seg0\n        out[0] = p0;\n        out[1] = p01;\n        out[2] = p012;\n\n        // Seg1\n        out[3] = p012;\n        out[4] = p12;\n        out[5] = p2;\n    }\n\n    /**\n     * 投射点到二次贝塞尔曲线上，返回投射距离。\n     * 投射点有可能会有一个或者多个，这里只返回其中距离最短的一个。\n     * @param {number} x0\n     * @param {number} y0\n     * @param {number} x1\n     * @param {number} y1\n     * @param {number} x2\n     * @param {number} y2\n     * @param {number} x\n     * @param {number} y\n     * @param {Array.<number>} out 投射点\n     * @return {number}\n     */\n    function quadraticProjectPoint(\n        x0, y0, x1, y1, x2, y2,\n        x, y, out\n    ) {\n        // http://pomax.github.io/bezierinfo/#projections\n        var t;\n        var interval = 0.005;\n        var d = Infinity;\n\n        _v0[0] = x;\n        _v0[1] = y;\n\n        // 先粗略估计一下可能的最小距离的 t 值\n        // PENDING\n        for (var _t = 0; _t < 1; _t += 0.05) {\n            _v1[0] = quadraticAt(x0, x1, x2, _t);\n            _v1[1] = quadraticAt(y0, y1, y2, _t);\n            var d1 = v2DistSquare(_v0, _v1);\n            if (d1 < d) {\n                t = _t;\n                d = d1;\n            }\n        }\n        d = Infinity;\n\n        // At most 32 iteration\n        for (var i = 0; i < 32; i++) {\n            if (interval < EPSILON_NUMERIC) {\n                break;\n            }\n            var prev = t - interval;\n            var next = t + interval;\n            // t - interval\n            _v1[0] = quadraticAt(x0, x1, x2, prev);\n            _v1[1] = quadraticAt(y0, y1, y2, prev);\n\n            var d1 = v2DistSquare(_v1, _v0);\n\n            if (prev >= 0 && d1 < d) {\n                t = prev;\n                d = d1;\n            }\n            else {\n                // t + interval\n                _v2[0] = quadraticAt(x0, x1, x2, next);\n                _v2[1] = quadraticAt(y0, y1, y2, next);\n                var d2 = v2DistSquare(_v2, _v0);\n                if (next <= 1 && d2 < d) {\n                    t = next;\n                    d = d2;\n                }\n                else {\n                    interval *= 0.5;\n                }\n            }\n        }\n        // t\n        if (out) {\n            out[0] = quadraticAt(x0, x1, x2, t);\n            out[1] = quadraticAt(y0, y1, y2, t);\n        }\n        // console.log(interval, i);\n        return mathSqrt(d);\n    }\n\n    module.exports = {\n\n        cubicAt: cubicAt,\n\n        cubicDerivativeAt: cubicDerivativeAt,\n\n        cubicRootAt: cubicRootAt,\n\n        cubicExtrema: cubicExtrema,\n\n        cubicSubdivide: cubicSubdivide,\n\n        cubicProjectPoint: cubicProjectPoint,\n\n        quadraticAt: quadraticAt,\n\n        quadraticDerivativeAt: quadraticDerivativeAt,\n\n        quadraticRootAt: quadraticRootAt,\n\n        quadraticExtremum: quadraticExtremum,\n\n        quadraticSubdivide: quadraticSubdivide,\n\n        quadraticProjectPoint: quadraticProjectPoint\n    };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.5.1@zrender/lib/core/curve.js\n// module id = cZ/t\n// module chunks = 0 1","/**\n * @module zrender/tool/color\n */\n\n\n    var LRU = require('../core/LRU');\n\n    var kCSSColorTable = {\n        'transparent': [0,0,0,0], 'aliceblue': [240,248,255,1],\n        'antiquewhite': [250,235,215,1], 'aqua': [0,255,255,1],\n        'aquamarine': [127,255,212,1], 'azure': [240,255,255,1],\n        'beige': [245,245,220,1], 'bisque': [255,228,196,1],\n        'black': [0,0,0,1], 'blanchedalmond': [255,235,205,1],\n        'blue': [0,0,255,1], 'blueviolet': [138,43,226,1],\n        'brown': [165,42,42,1], 'burlywood': [222,184,135,1],\n        'cadetblue': [95,158,160,1], 'chartreuse': [127,255,0,1],\n        'chocolate': [210,105,30,1], 'coral': [255,127,80,1],\n        'cornflowerblue': [100,149,237,1], 'cornsilk': [255,248,220,1],\n        'crimson': [220,20,60,1], 'cyan': [0,255,255,1],\n        'darkblue': [0,0,139,1], 'darkcyan': [0,139,139,1],\n        'darkgoldenrod': [184,134,11,1], 'darkgray': [169,169,169,1],\n        'darkgreen': [0,100,0,1], 'darkgrey': [169,169,169,1],\n        'darkkhaki': [189,183,107,1], 'darkmagenta': [139,0,139,1],\n        'darkolivegreen': [85,107,47,1], 'darkorange': [255,140,0,1],\n        'darkorchid': [153,50,204,1], 'darkred': [139,0,0,1],\n        'darksalmon': [233,150,122,1], 'darkseagreen': [143,188,143,1],\n        'darkslateblue': [72,61,139,1], 'darkslategray': [47,79,79,1],\n        'darkslategrey': [47,79,79,1], 'darkturquoise': [0,206,209,1],\n        'darkviolet': [148,0,211,1], 'deeppink': [255,20,147,1],\n        'deepskyblue': [0,191,255,1], 'dimgray': [105,105,105,1],\n        'dimgrey': [105,105,105,1], 'dodgerblue': [30,144,255,1],\n        'firebrick': [178,34,34,1], 'floralwhite': [255,250,240,1],\n        'forestgreen': [34,139,34,1], 'fuchsia': [255,0,255,1],\n        'gainsboro': [220,220,220,1], 'ghostwhite': [248,248,255,1],\n        'gold': [255,215,0,1], 'goldenrod': [218,165,32,1],\n        'gray': [128,128,128,1], 'green': [0,128,0,1],\n        'greenyellow': [173,255,47,1], 'grey': [128,128,128,1],\n        'honeydew': [240,255,240,1], 'hotpink': [255,105,180,1],\n        'indianred': [205,92,92,1], 'indigo': [75,0,130,1],\n        'ivory': [255,255,240,1], 'khaki': [240,230,140,1],\n        'lavender': [230,230,250,1], 'lavenderblush': [255,240,245,1],\n        'lawngreen': [124,252,0,1], 'lemonchiffon': [255,250,205,1],\n        'lightblue': [173,216,230,1], 'lightcoral': [240,128,128,1],\n        'lightcyan': [224,255,255,1], 'lightgoldenrodyellow': [250,250,210,1],\n        'lightgray': [211,211,211,1], 'lightgreen': [144,238,144,1],\n        'lightgrey': [211,211,211,1], 'lightpink': [255,182,193,1],\n        'lightsalmon': [255,160,122,1], 'lightseagreen': [32,178,170,1],\n        'lightskyblue': [135,206,250,1], 'lightslategray': [119,136,153,1],\n        'lightslategrey': [119,136,153,1], 'lightsteelblue': [176,196,222,1],\n        'lightyellow': [255,255,224,1], 'lime': [0,255,0,1],\n        'limegreen': [50,205,50,1], 'linen': [250,240,230,1],\n        'magenta': [255,0,255,1], 'maroon': [128,0,0,1],\n        'mediumaquamarine': [102,205,170,1], 'mediumblue': [0,0,205,1],\n        'mediumorchid': [186,85,211,1], 'mediumpurple': [147,112,219,1],\n        'mediumseagreen': [60,179,113,1], 'mediumslateblue': [123,104,238,1],\n        'mediumspringgreen': [0,250,154,1], 'mediumturquoise': [72,209,204,1],\n        'mediumvioletred': [199,21,133,1], 'midnightblue': [25,25,112,1],\n        'mintcream': [245,255,250,1], 'mistyrose': [255,228,225,1],\n        'moccasin': [255,228,181,1], 'navajowhite': [255,222,173,1],\n        'navy': [0,0,128,1], 'oldlace': [253,245,230,1],\n        'olive': [128,128,0,1], 'olivedrab': [107,142,35,1],\n        'orange': [255,165,0,1], 'orangered': [255,69,0,1],\n        'orchid': [218,112,214,1], 'palegoldenrod': [238,232,170,1],\n        'palegreen': [152,251,152,1], 'paleturquoise': [175,238,238,1],\n        'palevioletred': [219,112,147,1], 'papayawhip': [255,239,213,1],\n        'peachpuff': [255,218,185,1], 'peru': [205,133,63,1],\n        'pink': [255,192,203,1], 'plum': [221,160,221,1],\n        'powderblue': [176,224,230,1], 'purple': [128,0,128,1],\n        'red': [255,0,0,1], 'rosybrown': [188,143,143,1],\n        'royalblue': [65,105,225,1], 'saddlebrown': [139,69,19,1],\n        'salmon': [250,128,114,1], 'sandybrown': [244,164,96,1],\n        'seagreen': [46,139,87,1], 'seashell': [255,245,238,1],\n        'sienna': [160,82,45,1], 'silver': [192,192,192,1],\n        'skyblue': [135,206,235,1], 'slateblue': [106,90,205,1],\n        'slategray': [112,128,144,1], 'slategrey': [112,128,144,1],\n        'snow': [255,250,250,1], 'springgreen': [0,255,127,1],\n        'steelblue': [70,130,180,1], 'tan': [210,180,140,1],\n        'teal': [0,128,128,1], 'thistle': [216,191,216,1],\n        'tomato': [255,99,71,1], 'turquoise': [64,224,208,1],\n        'violet': [238,130,238,1], 'wheat': [245,222,179,1],\n        'white': [255,255,255,1], 'whitesmoke': [245,245,245,1],\n        'yellow': [255,255,0,1], 'yellowgreen': [154,205,50,1]\n    };\n\n    function clampCssByte(i) {  // Clamp to integer 0 .. 255.\n        i = Math.round(i);  // Seems to be what Chrome does (vs truncation).\n        return i < 0 ? 0 : i > 255 ? 255 : i;\n    }\n\n    function clampCssAngle(i) {  // Clamp to integer 0 .. 360.\n        i = Math.round(i);  // Seems to be what Chrome does (vs truncation).\n        return i < 0 ? 0 : i > 360 ? 360 : i;\n    }\n\n    function clampCssFloat(f) {  // Clamp to float 0.0 .. 1.0.\n        return f < 0 ? 0 : f > 1 ? 1 : f;\n    }\n\n    function parseCssInt(str) {  // int or percentage.\n        if (str.length && str.charAt(str.length - 1) === '%') {\n            return clampCssByte(parseFloat(str) / 100 * 255);\n        }\n        return clampCssByte(parseInt(str, 10));\n    }\n\n    function parseCssFloat(str) {  // float or percentage.\n        if (str.length && str.charAt(str.length - 1) === '%') {\n            return clampCssFloat(parseFloat(str) / 100);\n        }\n        return clampCssFloat(parseFloat(str));\n    }\n\n    function cssHueToRgb(m1, m2, h) {\n        if (h < 0) {\n            h += 1;\n        }\n        else if (h > 1) {\n            h -= 1;\n        }\n\n        if (h * 6 < 1) {\n            return m1 + (m2 - m1) * h * 6;\n        }\n        if (h * 2 < 1) {\n            return m2;\n        }\n        if (h * 3 < 2) {\n            return m1 + (m2 - m1) * (2/3 - h) * 6;\n        }\n        return m1;\n    }\n\n    function lerp(a, b, p) {\n        return a + (b - a) * p;\n    }\n\n    function setRgba(out, r, g, b, a) {\n        out[0] = r; out[1] = g; out[2] = b; out[3] = a;\n        return out;\n    }\n    function copyRgba(out, a) {\n        out[0] = a[0]; out[1] = a[1]; out[2] = a[2]; out[3] = a[3];\n        return out;\n    }\n    var colorCache = new LRU(20);\n    var lastRemovedArr = null;\n    function putToCache(colorStr, rgbaArr) {\n        // Reuse removed array\n        if (lastRemovedArr) {\n            copyRgba(lastRemovedArr, rgbaArr);\n        }\n        lastRemovedArr = colorCache.put(colorStr, lastRemovedArr || (rgbaArr.slice()));\n    }\n    /**\n     * @param {string} colorStr\n     * @param {Array.<number>} out\n     * @return {Array.<number>}\n     * @memberOf module:zrender/util/color\n     */\n    function parse(colorStr, rgbaArr) {\n        if (!colorStr) {\n            return;\n        }\n        rgbaArr = rgbaArr || [];\n\n        var cached = colorCache.get(colorStr);\n        if (cached) {\n            return copyRgba(rgbaArr, cached);\n        }\n\n        // colorStr may be not string\n        colorStr = colorStr + '';\n        // Remove all whitespace, not compliant, but should just be more accepting.\n        var str = colorStr.replace(/ /g, '').toLowerCase();\n\n        // Color keywords (and transparent) lookup.\n        if (str in kCSSColorTable) {\n            copyRgba(rgbaArr, kCSSColorTable[str]);\n            putToCache(colorStr, rgbaArr);\n            return rgbaArr;\n        }\n\n        // #abc and #abc123 syntax.\n        if (str.charAt(0) === '#') {\n            if (str.length === 4) {\n                var iv = parseInt(str.substr(1), 16);  // TODO(deanm): Stricter parsing.\n                if (!(iv >= 0 && iv <= 0xfff)) {\n                    setRgba(rgbaArr, 0, 0, 0, 1);\n                    return;  // Covers NaN.\n                }\n                setRgba(rgbaArr,\n                    ((iv & 0xf00) >> 4) | ((iv & 0xf00) >> 8),\n                    (iv & 0xf0) | ((iv & 0xf0) >> 4),\n                    (iv & 0xf) | ((iv & 0xf) << 4),\n                    1\n                );\n                putToCache(colorStr, rgbaArr);\n                return rgbaArr;\n            }\n            else if (str.length === 7) {\n                var iv = parseInt(str.substr(1), 16);  // TODO(deanm): Stricter parsing.\n                if (!(iv >= 0 && iv <= 0xffffff)) {\n                    setRgba(rgbaArr, 0, 0, 0, 1);\n                    return;  // Covers NaN.\n                }\n                setRgba(rgbaArr,\n                    (iv & 0xff0000) >> 16,\n                    (iv & 0xff00) >> 8,\n                    iv & 0xff,\n                    1\n                );\n                putToCache(colorStr, rgbaArr);\n                return rgbaArr;\n            }\n\n            return;\n        }\n        var op = str.indexOf('('), ep = str.indexOf(')');\n        if (op !== -1 && ep + 1 === str.length) {\n            var fname = str.substr(0, op);\n            var params = str.substr(op + 1, ep - (op + 1)).split(',');\n            var alpha = 1;  // To allow case fallthrough.\n            switch (fname) {\n                case 'rgba':\n                    if (params.length !== 4) {\n                        setRgba(rgbaArr, 0, 0, 0, 1);\n                        return;\n                    }\n                    alpha = parseCssFloat(params.pop()); // jshint ignore:line\n                // Fall through.\n                case 'rgb':\n                    if (params.length !== 3) {\n                        setRgba(rgbaArr, 0, 0, 0, 1);\n                        return;\n                    }\n                    setRgba(rgbaArr,\n                        parseCssInt(params[0]),\n                        parseCssInt(params[1]),\n                        parseCssInt(params[2]),\n                        alpha\n                    );\n                    putToCache(colorStr, rgbaArr);\n                    return rgbaArr;\n                case 'hsla':\n                    if (params.length !== 4) {\n                        setRgba(rgbaArr, 0, 0, 0, 1);\n                        return;\n                    }\n                    params[3] = parseCssFloat(params[3]);\n                    hsla2rgba(params, rgbaArr);\n                    putToCache(colorStr, rgbaArr);\n                    return rgbaArr;\n                case 'hsl':\n                    if (params.length !== 3) {\n                        setRgba(rgbaArr, 0, 0, 0, 1);\n                        return;\n                    }\n                    hsla2rgba(params, rgbaArr);\n                    putToCache(colorStr, rgbaArr);\n                    return rgbaArr;\n                default:\n                    return;\n            }\n        }\n\n        setRgba(rgbaArr, 0, 0, 0, 1);\n        return;\n    }\n\n    /**\n     * @param {Array.<number>} hsla\n     * @param {Array.<number>} rgba\n     * @return {Array.<number>} rgba\n     */\n    function hsla2rgba(hsla, rgba) {\n        var h = (((parseFloat(hsla[0]) % 360) + 360) % 360) / 360;  // 0 .. 1\n        // NOTE(deanm): According to the CSS spec s/l should only be\n        // percentages, but we don't bother and let float or percentage.\n        var s = parseCssFloat(hsla[1]);\n        var l = parseCssFloat(hsla[2]);\n        var m2 = l <= 0.5 ? l * (s + 1) : l + s - l * s;\n        var m1 = l * 2 - m2;\n\n        rgba = rgba || [];\n        setRgba(rgba,\n            clampCssByte(cssHueToRgb(m1, m2, h + 1 / 3) * 255),\n            clampCssByte(cssHueToRgb(m1, m2, h) * 255),\n            clampCssByte(cssHueToRgb(m1, m2, h - 1 / 3) * 255),\n            1\n        );\n\n        if (hsla.length === 4) {\n            rgba[3] = hsla[3];\n        }\n\n        return rgba;\n    }\n\n    /**\n     * @param {Array.<number>} rgba\n     * @return {Array.<number>} hsla\n     */\n    function rgba2hsla(rgba) {\n        if (!rgba) {\n            return;\n        }\n\n        // RGB from 0 to 255\n        var R = rgba[0] / 255;\n        var G = rgba[1] / 255;\n        var B = rgba[2] / 255;\n\n        var vMin = Math.min(R, G, B); // Min. value of RGB\n        var vMax = Math.max(R, G, B); // Max. value of RGB\n        var delta = vMax - vMin; // Delta RGB value\n\n        var L = (vMax + vMin) / 2;\n        var H;\n        var S;\n        // HSL results from 0 to 1\n        if (delta === 0) {\n            H = 0;\n            S = 0;\n        }\n        else {\n            if (L < 0.5) {\n                S = delta / (vMax + vMin);\n            }\n            else {\n                S = delta / (2 - vMax - vMin);\n            }\n\n            var deltaR = (((vMax - R) / 6) + (delta / 2)) / delta;\n            var deltaG = (((vMax - G) / 6) + (delta / 2)) / delta;\n            var deltaB = (((vMax - B) / 6) + (delta / 2)) / delta;\n\n            if (R === vMax) {\n                H = deltaB - deltaG;\n            }\n            else if (G === vMax) {\n                H = (1 / 3) + deltaR - deltaB;\n            }\n            else if (B === vMax) {\n                H = (2 / 3) + deltaG - deltaR;\n            }\n\n            if (H < 0) {\n                H += 1;\n            }\n\n            if (H > 1) {\n                H -= 1;\n            }\n        }\n\n        var hsla = [H * 360, S, L];\n\n        if (rgba[3] != null) {\n            hsla.push(rgba[3]);\n        }\n\n        return hsla;\n    }\n\n    /**\n     * @param {string} color\n     * @param {number} level\n     * @return {string}\n     * @memberOf module:zrender/util/color\n     */\n    function lift(color, level) {\n        var colorArr = parse(color);\n        if (colorArr) {\n            for (var i = 0; i < 3; i++) {\n                if (level < 0) {\n                    colorArr[i] = colorArr[i] * (1 - level) | 0;\n                }\n                else {\n                    colorArr[i] = ((255 - colorArr[i]) * level + colorArr[i]) | 0;\n                }\n            }\n            return stringify(colorArr, colorArr.length === 4 ? 'rgba' : 'rgb');\n        }\n    }\n\n    /**\n     * @param {string} color\n     * @return {string}\n     * @memberOf module:zrender/util/color\n     */\n    function toHex(color, level) {\n        var colorArr = parse(color);\n        if (colorArr) {\n            return ((1 << 24) + (colorArr[0] << 16) + (colorArr[1] << 8) + (+colorArr[2])).toString(16).slice(1);\n        }\n    }\n\n    /**\n     * Map value to color. Faster than mapToColor methods because color is represented by rgba array.\n     * @param {number} normalizedValue A float between 0 and 1.\n     * @param {Array.<Array.<number>>} colors List of rgba color array\n     * @param {Array.<number>} [out] Mapped gba color array\n     * @return {Array.<number>} will be null/undefined if input illegal.\n     */\n    function fastMapToColor(normalizedValue, colors, out) {\n        if (!(colors && colors.length)\n            || !(normalizedValue >= 0 && normalizedValue <= 1)\n        ) {\n            return;\n        }\n\n        out = out || [];\n\n        var value = normalizedValue * (colors.length - 1);\n        var leftIndex = Math.floor(value);\n        var rightIndex = Math.ceil(value);\n        var leftColor = colors[leftIndex];\n        var rightColor = colors[rightIndex];\n        var dv = value - leftIndex;\n        out[0] = clampCssByte(lerp(leftColor[0], rightColor[0], dv));\n        out[1] = clampCssByte(lerp(leftColor[1], rightColor[1], dv));\n        out[2] = clampCssByte(lerp(leftColor[2], rightColor[2], dv));\n        out[3] = clampCssFloat(lerp(leftColor[3], rightColor[3], dv));\n\n        return out;\n    }\n    /**\n     * @param {number} normalizedValue A float between 0 and 1.\n     * @param {Array.<string>} colors Color list.\n     * @param {boolean=} fullOutput Default false.\n     * @return {(string|Object)} Result color. If fullOutput,\n     *                           return {color: ..., leftIndex: ..., rightIndex: ..., value: ...},\n     * @memberOf module:zrender/util/color\n     */\n    function mapToColor(normalizedValue, colors, fullOutput) {\n        if (!(colors && colors.length)\n            || !(normalizedValue >= 0 && normalizedValue <= 1)\n        ) {\n            return;\n        }\n\n        var value = normalizedValue * (colors.length - 1);\n        var leftIndex = Math.floor(value);\n        var rightIndex = Math.ceil(value);\n        var leftColor = parse(colors[leftIndex]);\n        var rightColor = parse(colors[rightIndex]);\n        var dv = value - leftIndex;\n\n        var color = stringify(\n            [\n                clampCssByte(lerp(leftColor[0], rightColor[0], dv)),\n                clampCssByte(lerp(leftColor[1], rightColor[1], dv)),\n                clampCssByte(lerp(leftColor[2], rightColor[2], dv)),\n                clampCssFloat(lerp(leftColor[3], rightColor[3], dv))\n            ],\n            'rgba'\n        );\n\n        return fullOutput\n            ? {\n                color: color,\n                leftIndex: leftIndex,\n                rightIndex: rightIndex,\n                value: value\n            }\n            : color;\n    }\n\n    /**\n     * @param {string} color\n     * @param {number=} h 0 ~ 360, ignore when null.\n     * @param {number=} s 0 ~ 1, ignore when null.\n     * @param {number=} l 0 ~ 1, ignore when null.\n     * @return {string} Color string in rgba format.\n     * @memberOf module:zrender/util/color\n     */\n    function modifyHSL(color, h, s, l) {\n        color = parse(color);\n\n        if (color) {\n            color = rgba2hsla(color);\n            h != null && (color[0] = clampCssAngle(h));\n            s != null && (color[1] = parseCssFloat(s));\n            l != null && (color[2] = parseCssFloat(l));\n\n            return stringify(hsla2rgba(color), 'rgba');\n        }\n    }\n\n    /**\n     * @param {string} color\n     * @param {number=} alpha 0 ~ 1\n     * @return {string} Color string in rgba format.\n     * @memberOf module:zrender/util/color\n     */\n    function modifyAlpha(color, alpha) {\n        color = parse(color);\n\n        if (color && alpha != null) {\n            color[3] = clampCssFloat(alpha);\n            return stringify(color, 'rgba');\n        }\n    }\n\n    /**\n     * @param {Array.<number>} arrColor like [12,33,44,0.4]\n     * @param {string} type 'rgba', 'hsva', ...\n     * @return {string} Result color. (If input illegal, return undefined).\n     */\n    function stringify(arrColor, type) {\n        if (!arrColor || !arrColor.length) {\n            return;\n        }\n        var colorStr = arrColor[0] + ',' + arrColor[1] + ',' + arrColor[2];\n        if (type === 'rgba' || type === 'hsva' || type === 'hsla') {\n            colorStr += ',' + arrColor[3];\n        }\n        return type + '(' + colorStr + ')';\n    }\n\n    module.exports = {\n        parse: parse,\n        lift: lift,\n        toHex: toHex,\n        fastMapToColor: fastMapToColor,\n        mapToColor: mapToColor,\n        modifyHSL: modifyHSL,\n        modifyAlpha: modifyAlpha,\n        stringify: stringify\n    };\n\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.5.1@zrender/lib/tool/color.js\n// module id = cwCJ\n// module chunks = 0 1","\n\n    module.exports = {\n        buildPath: function (ctx, shape) {\n            var x = shape.x;\n            var y = shape.y;\n            var width = shape.width;\n            var height = shape.height;\n            var r = shape.r;\n            var r1;\n            var r2;\n            var r3;\n            var r4;\n\n            // Convert width and height to positive for better borderRadius\n            if (width < 0) {\n                x = x + width;\n                width = -width;\n            }\n            if (height < 0) {\n                y = y + height;\n                height = -height;\n            }\n\n            if (typeof r === 'number') {\n                r1 = r2 = r3 = r4 = r;\n            }\n            else if (r instanceof Array) {\n                if (r.length === 1) {\n                    r1 = r2 = r3 = r4 = r[0];\n                }\n                else if (r.length === 2) {\n                    r1 = r3 = r[0];\n                    r2 = r4 = r[1];\n                }\n                else if (r.length === 3) {\n                    r1 = r[0];\n                    r2 = r4 = r[1];\n                    r3 = r[2];\n                }\n                else {\n                    r1 = r[0];\n                    r2 = r[1];\n                    r3 = r[2];\n                    r4 = r[3];\n                }\n            }\n            else {\n                r1 = r2 = r3 = r4 = 0;\n            }\n\n            var total;\n            if (r1 + r2 > width) {\n                total = r1 + r2;\n                r1 *= width / total;\n                r2 *= width / total;\n            }\n            if (r3 + r4 > width) {\n                total = r3 + r4;\n                r3 *= width / total;\n                r4 *= width / total;\n            }\n            if (r2 + r3 > height) {\n                total = r2 + r3;\n                r2 *= height / total;\n                r3 *= height / total;\n            }\n            if (r1 + r4 > height) {\n                total = r1 + r4;\n                r1 *= height / total;\n                r4 *= height / total;\n            }\n            ctx.moveTo(x + r1, y);\n            ctx.lineTo(x + width - r2, y);\n            r2 !== 0 && ctx.quadraticCurveTo(\n                x + width, y, x + width, y + r2\n            );\n            ctx.lineTo(x + width, y + height - r3);\n            r3 !== 0 && ctx.quadraticCurveTo(\n                x + width, y + height, x + width - r3, y + height\n            );\n            ctx.lineTo(x + r4, y + height);\n            r4 !== 0 && ctx.quadraticCurveTo(\n                x, y + height, x, y + height - r4\n            );\n            ctx.lineTo(x, y + r1);\n            r1 !== 0 && ctx.quadraticCurveTo(x, y, x + r1, y);\n        }\n    };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.5.1@zrender/lib/graphic/helper/roundRect.js\n// module id = d/Zd\n// module chunks = 0 1","\n\n    var classUtil = require('../../util/clazz');\n    var set = classUtil.set;\n    var get = classUtil.get;\n\n    module.exports = {\n        clearColorPalette: function () {\n            set(this, 'colorIdx', 0);\n            set(this, 'colorNameMap', {});\n        },\n\n        getColorFromPalette: function (name, scope) {\n            scope = scope || this;\n            var colorIdx = get(scope, 'colorIdx') || 0;\n            var colorNameMap = get(scope, 'colorNameMap') || set(scope, 'colorNameMap', {});\n            // Use `hasOwnProperty` to avoid conflict with Object.prototype.\n            if (colorNameMap.hasOwnProperty(name)) {\n                return colorNameMap[name];\n            }\n            var colorPalette = this.get('color', true) || [];\n            if (!colorPalette.length) {\n                return;\n            }\n\n            var color = colorPalette[colorIdx];\n            if (name) {\n                colorNameMap[name] = color;\n            }\n            set(scope, 'colorIdx', (colorIdx + 1) % colorPalette.length);\n\n            return color;\n        }\n    };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.6.1@echarts/lib/model/mixin/colorPalette.js\n// module id = dCDA\n// module chunks = 0 1","\n    module.exports = function windingLine(x0, y0, x1, y1, x, y) {\n        if ((y > y0 && y > y1) || (y < y0 && y < y1)) {\n            return 0;\n        }\n        // Ignore horizontal line\n        if (y1 === y0) {\n            return 0;\n        }\n        var dir = y1 < y0 ? 1 : -1;\n        var t = (y - y0) / (y1 - y0);\n\n        // Avoid winding error when intersection point is the connect point of two line of polygon\n        if (t === 1 || t === 0) {\n            dir = y1 < y0 ? 0.5 : -0.5;\n        }\n\n        var x_ = t * (x1 - x0) + x0;\n\n        return x_ > x ? dir : 0;\n    };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.5.1@zrender/lib/contain/windingLine.js\n// module id = e1yY\n// module chunks = 0 1","\n\n    var zrUtil = require('zrender/lib/core/util');\n    var clazz = require('./clazz');\n\n    var parseClassType = clazz.parseClassType;\n\n    var base = 0;\n\n    var componentUtil = {};\n\n    var DELIMITER = '_';\n\n    /**\n     * @public\n     * @param {string} type\n     * @return {string}\n     */\n    componentUtil.getUID = function (type) {\n        // Considering the case of crossing js context,\n        // use Math.random to make id as unique as possible.\n        return [(type || ''), base++, Math.random()].join(DELIMITER);\n    };\n\n    /**\n     * @inner\n     */\n    componentUtil.enableSubTypeDefaulter = function (entity) {\n\n        var subTypeDefaulters = {};\n\n        entity.registerSubTypeDefaulter = function (componentType, defaulter) {\n            componentType = parseClassType(componentType);\n            subTypeDefaulters[componentType.main] = defaulter;\n        };\n\n        entity.determineSubType = function (componentType, option) {\n            var type = option.type;\n            if (!type) {\n                var componentTypeMain = parseClassType(componentType).main;\n                if (entity.hasSubTypes(componentType) && subTypeDefaulters[componentTypeMain]) {\n                    type = subTypeDefaulters[componentTypeMain](option);\n                }\n            }\n            return type;\n        };\n\n        return entity;\n    };\n\n    /**\n     * Topological travel on Activity Network (Activity On Vertices).\n     * Dependencies is defined in Model.prototype.dependencies, like ['xAxis', 'yAxis'].\n     *\n     * If 'xAxis' or 'yAxis' is absent in componentTypeList, just ignore it in topology.\n     *\n     * If there is circle dependencey, Error will be thrown.\n     *\n     */\n    componentUtil.enableTopologicalTravel = function (entity, dependencyGetter) {\n\n        /**\n         * @public\n         * @param {Array.<string>} targetNameList Target Component type list.\n         *                                           Can be ['aa', 'bb', 'aa.xx']\n         * @param {Array.<string>} fullNameList By which we can build dependency graph.\n         * @param {Function} callback Params: componentType, dependencies.\n         * @param {Object} context Scope of callback.\n         */\n        entity.topologicalTravel = function (targetNameList, fullNameList, callback, context) {\n            if (!targetNameList.length) {\n                return;\n            }\n\n            var result = makeDepndencyGraph(fullNameList);\n            var graph = result.graph;\n            var stack = result.noEntryList;\n\n            var targetNameSet = {};\n            zrUtil.each(targetNameList, function (name) {\n                targetNameSet[name] = true;\n            });\n\n            while (stack.length) {\n                var currComponentType = stack.pop();\n                var currVertex = graph[currComponentType];\n                var isInTargetNameSet = !!targetNameSet[currComponentType];\n                if (isInTargetNameSet) {\n                    callback.call(context, currComponentType, currVertex.originalDeps.slice());\n                    delete targetNameSet[currComponentType];\n                }\n                zrUtil.each(\n                    currVertex.successor,\n                    isInTargetNameSet ? removeEdgeAndAdd : removeEdge\n                );\n            }\n\n            zrUtil.each(targetNameSet, function () {\n                throw new Error('Circle dependency may exists');\n            });\n\n            function removeEdge(succComponentType) {\n                graph[succComponentType].entryCount--;\n                if (graph[succComponentType].entryCount === 0) {\n                    stack.push(succComponentType);\n                }\n            }\n\n            // Consider this case: legend depends on series, and we call\n            // chart.setOption({series: [...]}), where only series is in option.\n            // If we do not have 'removeEdgeAndAdd', legendModel.mergeOption will\n            // not be called, but only sereis.mergeOption is called. Thus legend\n            // have no chance to update its local record about series (like which\n            // name of series is available in legend).\n            function removeEdgeAndAdd(succComponentType) {\n                targetNameSet[succComponentType] = true;\n                removeEdge(succComponentType);\n            }\n        };\n\n        /**\n         * DepndencyGraph: {Object}\n         * key: conponentType,\n         * value: {\n         *     successor: [conponentTypes...],\n         *     originalDeps: [conponentTypes...],\n         *     entryCount: {number}\n         * }\n         */\n        function makeDepndencyGraph(fullNameList) {\n            var graph = {};\n            var noEntryList = [];\n\n            zrUtil.each(fullNameList, function (name) {\n\n                var thisItem = createDependencyGraphItem(graph, name);\n                var originalDeps = thisItem.originalDeps = dependencyGetter(name);\n\n                var availableDeps = getAvailableDependencies(originalDeps, fullNameList);\n                thisItem.entryCount = availableDeps.length;\n                if (thisItem.entryCount === 0) {\n                    noEntryList.push(name);\n                }\n\n                zrUtil.each(availableDeps, function (dependentName) {\n                    if (zrUtil.indexOf(thisItem.predecessor, dependentName) < 0) {\n                        thisItem.predecessor.push(dependentName);\n                    }\n                    var thatItem = createDependencyGraphItem(graph, dependentName);\n                    if (zrUtil.indexOf(thatItem.successor, dependentName) < 0) {\n                        thatItem.successor.push(name);\n                    }\n                });\n            });\n\n            return {graph: graph, noEntryList: noEntryList};\n        }\n\n        function createDependencyGraphItem(graph, name) {\n            if (!graph[name]) {\n                graph[name] = {predecessor: [], successor: []};\n            }\n            return graph[name];\n        }\n\n        function getAvailableDependencies(originalDeps, fullNameList) {\n            var availableDeps = [];\n            zrUtil.each(originalDeps, function (dep) {\n                zrUtil.indexOf(fullNameList, dep) >= 0 && availableDeps.push(dep);\n            });\n            return availableDeps;\n        }\n    };\n\n    module.exports = componentUtil;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.6.1@echarts/lib/util/component.js\n// module id = e36O\n// module chunks = 0 1","'use strict';\n\n\n    var SeriesModel = require('../../model/Series');\n    var createListFromArray = require('../helper/createListFromArray');\n\n    module.exports = SeriesModel.extend({\n\n        type: 'series.__base_bar__',\n\n        getInitialData: function (option, ecModel) {\n            return createListFromArray(option.data, this, ecModel);\n        },\n\n        getMarkerPosition: function (value) {\n            var coordSys = this.coordinateSystem;\n            if (coordSys) {\n                // PENDING if clamp ?\n                var pt = coordSys.dataToPoint(value, true);\n                var data = this.getData();\n                var offset = data.getLayout('offset');\n                var size = data.getLayout('size');\n                var offsetIndex = coordSys.getBaseAxis().isHorizontal() ? 0 : 1;\n                pt[offsetIndex] += offset + size / 2;\n                return pt;\n            }\n            return [NaN, NaN];\n        },\n\n        defaultOption: {\n            zlevel: 0,                  // 一级层叠\n            z: 2,                       // 二级层叠\n            coordinateSystem: 'cartesian2d',\n            legendHoverLink: true,\n            // stack: null\n\n            // Cartesian coordinate system\n            // xAxisIndex: 0,\n            // yAxisIndex: 0,\n\n            // 最小高度改为0\n            barMinHeight: 0,\n            // 最小角度为0，仅对极坐标系下的柱状图有效\n            barMinAngle: 0,\n\n            // barMaxWidth: null,\n            // 默认自适应\n            // barWidth: null,\n            // 柱间距离，默认为柱形宽度的30%，可设固定值\n            // barGap: '30%',\n            // 类目间柱形距离，默认为类目间距的20%，可设固定值\n            // barCategoryGap: '20%',\n            // label: {\n            //     normal: {\n            //         show: false\n            //     }\n            // },\n            itemStyle: {\n                normal: {\n                    // color: '各异'\n                },\n                emphasis: {}\n            }\n        }\n    });\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.6.1@echarts/lib/chart/bar/BaseBarSeries.js\n// module id = eScH\n// module chunks = 0 1","'use strict';\n/**\n * Path 代理，可以在`buildPath`中用于替代`ctx`, 会保存每个path操作的命令到pathCommands属性中\n * 可以用于 isInsidePath 判断以及获取boundingRect\n *\n * @module zrender/core/PathProxy\n * @author Yi Shen (http://www.github.com/pissang)\n */\n\n // TODO getTotalLength, getPointAtLength\n\n\n    var curve = require('./curve');\n    var vec2 = require('./vector');\n    var bbox = require('./bbox');\n    var BoundingRect = require('./BoundingRect');\n    var dpr = require('../config').devicePixelRatio;\n\n    var CMD = {\n        M: 1,\n        L: 2,\n        C: 3,\n        Q: 4,\n        A: 5,\n        Z: 6,\n        // Rect\n        R: 7\n    };\n\n    // var CMD_MEM_SIZE = {\n    //     M: 3,\n    //     L: 3,\n    //     C: 7,\n    //     Q: 5,\n    //     A: 9,\n    //     R: 5,\n    //     Z: 1\n    // };\n\n    var min = [];\n    var max = [];\n    var min2 = [];\n    var max2 = [];\n    var mathMin = Math.min;\n    var mathMax = Math.max;\n    var mathCos = Math.cos;\n    var mathSin = Math.sin;\n    var mathSqrt = Math.sqrt;\n    var mathAbs = Math.abs;\n\n    var hasTypedArray = typeof Float32Array != 'undefined';\n\n    /**\n     * @alias module:zrender/core/PathProxy\n     * @constructor\n     */\n    var PathProxy = function (notSaveData) {\n\n        this._saveData = !(notSaveData || false);\n\n        if (this._saveData) {\n            /**\n             * Path data. Stored as flat array\n             * @type {Array.<Object>}\n             */\n            this.data = [];\n        }\n\n        this._ctx = null;\n    };\n\n    /**\n     * 快速计算Path包围盒（并不是最小包围盒）\n     * @return {Object}\n     */\n    PathProxy.prototype = {\n\n        constructor: PathProxy,\n\n        _xi: 0,\n        _yi: 0,\n\n        _x0: 0,\n        _y0: 0,\n        // Unit x, Unit y. Provide for avoiding drawing that too short line segment\n        _ux: 0,\n        _uy: 0,\n\n        _len: 0,\n\n        _lineDash: null,\n\n        _dashOffset: 0,\n\n        _dashIdx: 0,\n\n        _dashSum: 0,\n\n        /**\n         * @readOnly\n         */\n        setScale: function (sx, sy) {\n            this._ux = mathAbs(1 / dpr / sx) || 0;\n            this._uy = mathAbs(1 / dpr / sy) || 0;\n        },\n\n        getContext: function () {\n            return this._ctx;\n        },\n\n        /**\n         * @param  {CanvasRenderingContext2D} ctx\n         * @return {module:zrender/core/PathProxy}\n         */\n        beginPath: function (ctx) {\n\n            this._ctx = ctx;\n\n            ctx && ctx.beginPath();\n\n            ctx && (this.dpr = ctx.dpr);\n\n            // Reset\n            if (this._saveData) {\n                this._len = 0;\n            }\n\n            if (this._lineDash) {\n                this._lineDash = null;\n\n                this._dashOffset = 0;\n            }\n\n            return this;\n        },\n\n        /**\n         * @param  {number} x\n         * @param  {number} y\n         * @return {module:zrender/core/PathProxy}\n         */\n        moveTo: function (x, y) {\n            this.addData(CMD.M, x, y);\n            this._ctx && this._ctx.moveTo(x, y);\n\n            // x0, y0, xi, yi 是记录在 _dashedXXXXTo 方法中使用\n            // xi, yi 记录当前点, x0, y0 在 closePath 的时候回到起始点。\n            // 有可能在 beginPath 之后直接调用 lineTo，这时候 x0, y0 需要\n            // 在 lineTo 方法中记录，这里先不考虑这种情况，dashed line 也只在 IE10- 中不支持\n            this._x0 = x;\n            this._y0 = y;\n\n            this._xi = x;\n            this._yi = y;\n\n            return this;\n        },\n\n        /**\n         * @param  {number} x\n         * @param  {number} y\n         * @return {module:zrender/core/PathProxy}\n         */\n        lineTo: function (x, y) {\n            var exceedUnit = mathAbs(x - this._xi) > this._ux\n                || mathAbs(y - this._yi) > this._uy\n                // Force draw the first segment\n                || this._len < 5;\n\n            this.addData(CMD.L, x, y);\n\n            if (this._ctx && exceedUnit) {\n                this._needsDash() ? this._dashedLineTo(x, y)\n                    : this._ctx.lineTo(x, y);\n            }\n            if (exceedUnit) {\n                this._xi = x;\n                this._yi = y;\n            }\n\n            return this;\n        },\n\n        /**\n         * @param  {number} x1\n         * @param  {number} y1\n         * @param  {number} x2\n         * @param  {number} y2\n         * @param  {number} x3\n         * @param  {number} y3\n         * @return {module:zrender/core/PathProxy}\n         */\n        bezierCurveTo: function (x1, y1, x2, y2, x3, y3) {\n            this.addData(CMD.C, x1, y1, x2, y2, x3, y3);\n            if (this._ctx) {\n                this._needsDash() ? this._dashedBezierTo(x1, y1, x2, y2, x3, y3)\n                    : this._ctx.bezierCurveTo(x1, y1, x2, y2, x3, y3);\n            }\n            this._xi = x3;\n            this._yi = y3;\n            return this;\n        },\n\n        /**\n         * @param  {number} x1\n         * @param  {number} y1\n         * @param  {number} x2\n         * @param  {number} y2\n         * @return {module:zrender/core/PathProxy}\n         */\n        quadraticCurveTo: function (x1, y1, x2, y2) {\n            this.addData(CMD.Q, x1, y1, x2, y2);\n            if (this._ctx) {\n                this._needsDash() ? this._dashedQuadraticTo(x1, y1, x2, y2)\n                    : this._ctx.quadraticCurveTo(x1, y1, x2, y2);\n            }\n            this._xi = x2;\n            this._yi = y2;\n            return this;\n        },\n\n        /**\n         * @param  {number} cx\n         * @param  {number} cy\n         * @param  {number} r\n         * @param  {number} startAngle\n         * @param  {number} endAngle\n         * @param  {boolean} anticlockwise\n         * @return {module:zrender/core/PathProxy}\n         */\n        arc: function (cx, cy, r, startAngle, endAngle, anticlockwise) {\n            this.addData(\n                CMD.A, cx, cy, r, r, startAngle, endAngle - startAngle, 0, anticlockwise ? 0 : 1\n            );\n            this._ctx && this._ctx.arc(cx, cy, r, startAngle, endAngle, anticlockwise);\n\n            this._xi = mathCos(endAngle) * r + cx;\n            this._yi = mathSin(endAngle) * r + cx;\n            return this;\n        },\n\n        // TODO\n        arcTo: function (x1, y1, x2, y2, radius) {\n            if (this._ctx) {\n                this._ctx.arcTo(x1, y1, x2, y2, radius);\n            }\n            return this;\n        },\n\n        // TODO\n        rect: function (x, y, w, h) {\n            this._ctx && this._ctx.rect(x, y, w, h);\n            this.addData(CMD.R, x, y, w, h);\n            return this;\n        },\n\n        /**\n         * @return {module:zrender/core/PathProxy}\n         */\n        closePath: function () {\n            this.addData(CMD.Z);\n\n            var ctx = this._ctx;\n            var x0 = this._x0;\n            var y0 = this._y0;\n            if (ctx) {\n                this._needsDash() && this._dashedLineTo(x0, y0);\n                ctx.closePath();\n            }\n\n            this._xi = x0;\n            this._yi = y0;\n            return this;\n        },\n\n        /**\n         * Context 从外部传入，因为有可能是 rebuildPath 完之后再 fill。\n         * stroke 同样\n         * @param {CanvasRenderingContext2D} ctx\n         * @return {module:zrender/core/PathProxy}\n         */\n        fill: function (ctx) {\n            ctx && ctx.fill();\n            this.toStatic();\n        },\n\n        /**\n         * @param {CanvasRenderingContext2D} ctx\n         * @return {module:zrender/core/PathProxy}\n         */\n        stroke: function (ctx) {\n            ctx && ctx.stroke();\n            this.toStatic();\n        },\n\n        /**\n         * 必须在其它绘制命令前调用\n         * Must be invoked before all other path drawing methods\n         * @return {module:zrender/core/PathProxy}\n         */\n        setLineDash: function (lineDash) {\n            if (lineDash instanceof Array) {\n                this._lineDash = lineDash;\n\n                this._dashIdx = 0;\n\n                var lineDashSum = 0;\n                for (var i = 0; i < lineDash.length; i++) {\n                    lineDashSum += lineDash[i];\n                }\n                this._dashSum = lineDashSum;\n            }\n            return this;\n        },\n\n        /**\n         * 必须在其它绘制命令前调用\n         * Must be invoked before all other path drawing methods\n         * @return {module:zrender/core/PathProxy}\n         */\n        setLineDashOffset: function (offset) {\n            this._dashOffset = offset;\n            return this;\n        },\n\n        /**\n         *\n         * @return {boolean}\n         */\n        len: function () {\n            return this._len;\n        },\n\n        /**\n         * 直接设置 Path 数据\n         */\n        setData: function (data) {\n\n            var len = data.length;\n\n            if (! (this.data && this.data.length == len) && hasTypedArray) {\n                this.data = new Float32Array(len);\n            }\n\n            for (var i = 0; i < len; i++) {\n                this.data[i] = data[i];\n            }\n\n            this._len = len;\n        },\n\n        /**\n         * 添加子路径\n         * @param {module:zrender/core/PathProxy|Array.<module:zrender/core/PathProxy>} path\n         */\n        appendPath: function (path) {\n            if (!(path instanceof Array)) {\n                path = [path];\n            }\n            var len = path.length;\n            var appendSize = 0;\n            var offset = this._len;\n            for (var i = 0; i < len; i++) {\n                appendSize += path[i].len();\n            }\n            if (hasTypedArray && (this.data instanceof Float32Array)) {\n                this.data = new Float32Array(offset + appendSize);\n            }\n            for (var i = 0; i < len; i++) {\n                var appendPathData = path[i].data;\n                for (var k = 0; k < appendPathData.length; k++) {\n                    this.data[offset++] = appendPathData[k];\n                }\n            }\n            this._len = offset;\n        },\n\n        /**\n         * 填充 Path 数据。\n         * 尽量复用而不申明新的数组。大部分图形重绘的指令数据长度都是不变的。\n         */\n        addData: function (cmd) {\n            if (!this._saveData) {\n                return;\n            }\n\n            var data = this.data;\n            if (this._len + arguments.length > data.length) {\n                // 因为之前的数组已经转换成静态的 Float32Array\n                // 所以不够用时需要扩展一个新的动态数组\n                this._expandData();\n                data = this.data;\n            }\n            for (var i = 0; i < arguments.length; i++) {\n                data[this._len++] = arguments[i];\n            }\n\n            this._prevCmd = cmd;\n        },\n\n        _expandData: function () {\n            // Only if data is Float32Array\n            if (!(this.data instanceof Array)) {\n                var newData = [];\n                for (var i = 0; i < this._len; i++) {\n                    newData[i] = this.data[i];\n                }\n                this.data = newData;\n            }\n        },\n\n        /**\n         * If needs js implemented dashed line\n         * @return {boolean}\n         * @private\n         */\n        _needsDash: function () {\n            return this._lineDash;\n        },\n\n        _dashedLineTo: function (x1, y1) {\n            var dashSum = this._dashSum;\n            var offset = this._dashOffset;\n            var lineDash = this._lineDash;\n            var ctx = this._ctx;\n\n            var x0 = this._xi;\n            var y0 = this._yi;\n            var dx = x1 - x0;\n            var dy = y1 - y0;\n            var dist = mathSqrt(dx * dx + dy * dy);\n            var x = x0;\n            var y = y0;\n            var dash;\n            var nDash = lineDash.length;\n            var idx;\n            dx /= dist;\n            dy /= dist;\n\n            if (offset < 0) {\n                // Convert to positive offset\n                offset = dashSum + offset;\n            }\n            offset %= dashSum;\n            x -= offset * dx;\n            y -= offset * dy;\n\n            while ((dx > 0 && x <= x1) || (dx < 0 && x >= x1)\n            || (dx == 0 && ((dy > 0 && y <= y1) || (dy < 0 && y >= y1)))) {\n                idx = this._dashIdx;\n                dash = lineDash[idx];\n                x += dx * dash;\n                y += dy * dash;\n                this._dashIdx = (idx + 1) % nDash;\n                // Skip positive offset\n                if ((dx > 0 && x < x0) || (dx < 0 && x > x0) || (dy > 0 && y < y0) || (dy < 0 && y > y0)) {\n                    continue;\n                }\n                ctx[idx % 2 ? 'moveTo' : 'lineTo'](\n                    dx >= 0 ? mathMin(x, x1) : mathMax(x, x1),\n                    dy >= 0 ? mathMin(y, y1) : mathMax(y, y1)\n                );\n            }\n            // Offset for next lineTo\n            dx = x - x1;\n            dy = y - y1;\n            this._dashOffset = -mathSqrt(dx * dx + dy * dy);\n        },\n\n        // Not accurate dashed line to\n        _dashedBezierTo: function (x1, y1, x2, y2, x3, y3) {\n            var dashSum = this._dashSum;\n            var offset = this._dashOffset;\n            var lineDash = this._lineDash;\n            var ctx = this._ctx;\n\n            var x0 = this._xi;\n            var y0 = this._yi;\n            var t;\n            var dx;\n            var dy;\n            var cubicAt = curve.cubicAt;\n            var bezierLen = 0;\n            var idx = this._dashIdx;\n            var nDash = lineDash.length;\n\n            var x;\n            var y;\n\n            var tmpLen = 0;\n\n            if (offset < 0) {\n                // Convert to positive offset\n                offset = dashSum + offset;\n            }\n            offset %= dashSum;\n            // Bezier approx length\n            for (t = 0; t < 1; t += 0.1) {\n                dx = cubicAt(x0, x1, x2, x3, t + 0.1)\n                    - cubicAt(x0, x1, x2, x3, t);\n                dy = cubicAt(y0, y1, y2, y3, t + 0.1)\n                    - cubicAt(y0, y1, y2, y3, t);\n                bezierLen += mathSqrt(dx * dx + dy * dy);\n            }\n\n            // Find idx after add offset\n            for (; idx < nDash; idx++) {\n                tmpLen += lineDash[idx];\n                if (tmpLen > offset) {\n                    break;\n                }\n            }\n            t = (tmpLen - offset) / bezierLen;\n\n            while (t <= 1) {\n\n                x = cubicAt(x0, x1, x2, x3, t);\n                y = cubicAt(y0, y1, y2, y3, t);\n\n                // Use line to approximate dashed bezier\n                // Bad result if dash is long\n                idx % 2 ? ctx.moveTo(x, y)\n                    : ctx.lineTo(x, y);\n\n                t += lineDash[idx] / bezierLen;\n\n                idx = (idx + 1) % nDash;\n            }\n\n            // Finish the last segment and calculate the new offset\n            (idx % 2 !== 0) && ctx.lineTo(x3, y3);\n            dx = x3 - x;\n            dy = y3 - y;\n            this._dashOffset = -mathSqrt(dx * dx + dy * dy);\n        },\n\n        _dashedQuadraticTo: function (x1, y1, x2, y2) {\n            // Convert quadratic to cubic using degree elevation\n            var x3 = x2;\n            var y3 = y2;\n            x2 = (x2 + 2 * x1) / 3;\n            y2 = (y2 + 2 * y1) / 3;\n            x1 = (this._xi + 2 * x1) / 3;\n            y1 = (this._yi + 2 * y1) / 3;\n\n            this._dashedBezierTo(x1, y1, x2, y2, x3, y3);\n        },\n\n        /**\n         * 转成静态的 Float32Array 减少堆内存占用\n         * Convert dynamic array to static Float32Array\n         */\n        toStatic: function () {\n            var data = this.data;\n            if (data instanceof Array) {\n                data.length = this._len;\n                if (hasTypedArray) {\n                    this.data = new Float32Array(data);\n                }\n            }\n        },\n\n        /**\n         * @return {module:zrender/core/BoundingRect}\n         */\n        getBoundingRect: function () {\n            min[0] = min[1] = min2[0] = min2[1] = Number.MAX_VALUE;\n            max[0] = max[1] = max2[0] = max2[1] = -Number.MAX_VALUE;\n\n            var data = this.data;\n            var xi = 0;\n            var yi = 0;\n            var x0 = 0;\n            var y0 = 0;\n\n            for (var i = 0; i < data.length;) {\n                var cmd = data[i++];\n\n                if (i == 1) {\n                    // 如果第一个命令是 L, C, Q\n                    // 则 previous point 同绘制命令的第一个 point\n                    //\n                    // 第一个命令为 Arc 的情况下会在后面特殊处理\n                    xi = data[i];\n                    yi = data[i + 1];\n\n                    x0 = xi;\n                    y0 = yi;\n                }\n\n                switch (cmd) {\n                    case CMD.M:\n                        // moveTo 命令重新创建一个新的 subpath, 并且更新新的起点\n                        // 在 closePath 的时候使用\n                        x0 = data[i++];\n                        y0 = data[i++];\n                        xi = x0;\n                        yi = y0;\n                        min2[0] = x0;\n                        min2[1] = y0;\n                        max2[0] = x0;\n                        max2[1] = y0;\n                        break;\n                    case CMD.L:\n                        bbox.fromLine(xi, yi, data[i], data[i + 1], min2, max2);\n                        xi = data[i++];\n                        yi = data[i++];\n                        break;\n                    case CMD.C:\n                        bbox.fromCubic(\n                            xi, yi, data[i++], data[i++], data[i++], data[i++], data[i], data[i + 1],\n                            min2, max2\n                        );\n                        xi = data[i++];\n                        yi = data[i++];\n                        break;\n                    case CMD.Q:\n                        bbox.fromQuadratic(\n                            xi, yi, data[i++], data[i++], data[i], data[i + 1],\n                            min2, max2\n                        );\n                        xi = data[i++];\n                        yi = data[i++];\n                        break;\n                    case CMD.A:\n                        // TODO Arc 判断的开销比较大\n                        var cx = data[i++];\n                        var cy = data[i++];\n                        var rx = data[i++];\n                        var ry = data[i++];\n                        var startAngle = data[i++];\n                        var endAngle = data[i++] + startAngle;\n                        // TODO Arc 旋转\n                        var psi = data[i++];\n                        var anticlockwise = 1 - data[i++];\n\n                        if (i == 1) {\n                            // 直接使用 arc 命令\n                            // 第一个命令起点还未定义\n                            x0 = mathCos(startAngle) * rx + cx;\n                            y0 = mathSin(startAngle) * ry + cy;\n                        }\n\n                        bbox.fromArc(\n                            cx, cy, rx, ry, startAngle, endAngle,\n                            anticlockwise, min2, max2\n                        );\n\n                        xi = mathCos(endAngle) * rx + cx;\n                        yi = mathSin(endAngle) * ry + cy;\n                        break;\n                    case CMD.R:\n                        x0 = xi = data[i++];\n                        y0 = yi = data[i++];\n                        var width = data[i++];\n                        var height = data[i++];\n                        // Use fromLine\n                        bbox.fromLine(x0, y0, x0 + width, y0 + height, min2, max2);\n                        break;\n                    case CMD.Z:\n                        xi = x0;\n                        yi = y0;\n                        break;\n                }\n\n                // Union\n                vec2.min(min, min, min2);\n                vec2.max(max, max, max2);\n            }\n\n            // No data\n            if (i === 0) {\n                min[0] = min[1] = max[0] = max[1] = 0;\n            }\n\n            return new BoundingRect(\n                min[0], min[1], max[0] - min[0], max[1] - min[1]\n            );\n        },\n\n        /**\n         * Rebuild path from current data\n         * Rebuild path will not consider javascript implemented line dash.\n         * @param {CanvasRenderingContext} ctx\n         */\n        rebuildPath: function (ctx) {\n            var d = this.data;\n            var x0, y0;\n            var xi, yi;\n            var x, y;\n            var ux = this._ux;\n            var uy = this._uy;\n            var len = this._len;\n            for (var i = 0; i < len;) {\n                var cmd = d[i++];\n\n                if (i == 1) {\n                    // 如果第一个命令是 L, C, Q\n                    // 则 previous point 同绘制命令的第一个 point\n                    //\n                    // 第一个命令为 Arc 的情况下会在后面特殊处理\n                    xi = d[i];\n                    yi = d[i + 1];\n\n                    x0 = xi;\n                    y0 = yi;\n                }\n                switch (cmd) {\n                    case CMD.M:\n                        x0 = xi = d[i++];\n                        y0 = yi = d[i++];\n                        ctx.moveTo(xi, yi);\n                        break;\n                    case CMD.L:\n                        x = d[i++];\n                        y = d[i++];\n                        // Not draw too small seg between\n                        if (mathAbs(x - xi) > ux || mathAbs(y - yi) > uy || i === len - 1) {\n                            ctx.lineTo(x, y);\n                            xi = x;\n                            yi = y;\n                        }\n                        break;\n                    case CMD.C:\n                        ctx.bezierCurveTo(\n                            d[i++], d[i++], d[i++], d[i++], d[i++], d[i++]\n                        );\n                        xi = d[i - 2];\n                        yi = d[i - 1];\n                        break;\n                    case CMD.Q:\n                        ctx.quadraticCurveTo(d[i++], d[i++], d[i++], d[i++]);\n                        xi = d[i - 2];\n                        yi = d[i - 1];\n                        break;\n                    case CMD.A:\n                        var cx = d[i++];\n                        var cy = d[i++];\n                        var rx = d[i++];\n                        var ry = d[i++];\n                        var theta = d[i++];\n                        var dTheta = d[i++];\n                        var psi = d[i++];\n                        var fs = d[i++];\n                        var r = (rx > ry) ? rx : ry;\n                        var scaleX = (rx > ry) ? 1 : rx / ry;\n                        var scaleY = (rx > ry) ? ry / rx : 1;\n                        var isEllipse = Math.abs(rx - ry) > 1e-3;\n                        var endAngle = theta + dTheta;\n                        if (isEllipse) {\n                            ctx.translate(cx, cy);\n                            ctx.rotate(psi);\n                            ctx.scale(scaleX, scaleY);\n                            ctx.arc(0, 0, r, theta, endAngle, 1 - fs);\n                            ctx.scale(1 / scaleX, 1 / scaleY);\n                            ctx.rotate(-psi);\n                            ctx.translate(-cx, -cy);\n                        }\n                        else {\n                            ctx.arc(cx, cy, r, theta, endAngle, 1 - fs);\n                        }\n\n                        if (i == 1) {\n                            // 直接使用 arc 命令\n                            // 第一个命令起点还未定义\n                            x0 = mathCos(theta) * rx + cx;\n                            y0 = mathSin(theta) * ry + cy;\n                        }\n                        xi = mathCos(endAngle) * rx + cx;\n                        yi = mathSin(endAngle) * ry + cy;\n                        break;\n                    case CMD.R:\n                        x0 = xi = d[i];\n                        y0 = yi = d[i + 1];\n                        ctx.rect(d[i++], d[i++], d[i++], d[i++]);\n                        break;\n                    case CMD.Z:\n                        ctx.closePath();\n                        xi = x0;\n                        yi = y0;\n                }\n            }\n        }\n    };\n\n    PathProxy.CMD = CMD;\n\n    module.exports = PathProxy;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.5.1@zrender/lib/core/PathProxy.js\n// module id = f/vB\n// module chunks = 0 1","\n\n    var lib = {};\n\n    var ORIGIN_METHOD = '\\0__throttleOriginMethod';\n    var RATE = '\\0__throttleRate';\n    var THROTTLE_TYPE = '\\0__throttleType';\n\n    /**\n     * @public\n     * @param {(Function)} fn\n     * @param {number} [delay=0] Unit: ms.\n     * @param {boolean} [debounce=false]\n     *        true: If call interval less than `delay`, only the last call works.\n     *        false: If call interval less than `delay, call works on fixed rate.\n     * @return {(Function)} throttled fn.\n     */\n    lib.throttle = function (fn, delay, debounce) {\n\n        var currCall;\n        var lastCall = 0;\n        var lastExec = 0;\n        var timer = null;\n        var diff;\n        var scope;\n        var args;\n        var debounceNextCall;\n\n        delay = delay || 0;\n\n        function exec() {\n            lastExec = (new Date()).getTime();\n            timer = null;\n            fn.apply(scope, args || []);\n        }\n\n        var cb = function () {\n            currCall = (new Date()).getTime();\n            scope = this;\n            args = arguments;\n            var thisDelay = debounceNextCall || delay;\n            var thisDebounce = debounceNextCall || debounce;\n            debounceNextCall = null;\n            diff = currCall - (thisDebounce ? lastCall : lastExec) - thisDelay;\n\n            clearTimeout(timer);\n\n            if (thisDebounce) {\n                timer = setTimeout(exec, thisDelay);\n            }\n            else {\n                if (diff >= 0) {\n                    exec();\n                }\n                else {\n                    timer = setTimeout(exec, -diff);\n                }\n            }\n\n            lastCall = currCall;\n        };\n\n        /**\n         * Clear throttle.\n         * @public\n         */\n        cb.clear = function () {\n            if (timer) {\n                clearTimeout(timer);\n                timer = null;\n            }\n        };\n\n        /**\n         * Enable debounce once.\n         */\n        cb.debounceNextCall = function (debounceDelay) {\n            debounceNextCall = debounceDelay;\n        };\n\n        return cb;\n    };\n\n    /**\n     * Create throttle method or update throttle rate.\n     *\n     * @example\n     * ComponentView.prototype.render = function () {\n     *     ...\n     *     throttle.createOrUpdate(\n     *         this,\n     *         '_dispatchAction',\n     *         this.model.get('throttle'),\n     *         'fixRate'\n     *     );\n     * };\n     * ComponentView.prototype.remove = function () {\n     *     throttle.clear(this, '_dispatchAction');\n     * };\n     * ComponentView.prototype.dispose = function () {\n     *     throttle.clear(this, '_dispatchAction');\n     * };\n     *\n     * @public\n     * @param {Object} obj\n     * @param {string} fnAttr\n     * @param {number} [rate]\n     * @param {string} [throttleType='fixRate'] 'fixRate' or 'debounce'\n     * @return {Function} throttled function.\n     */\n    lib.createOrUpdate = function (obj, fnAttr, rate, throttleType) {\n        var fn = obj[fnAttr];\n\n        if (!fn) {\n            return;\n        }\n\n        var originFn = fn[ORIGIN_METHOD] || fn;\n        var lastThrottleType = fn[THROTTLE_TYPE];\n        var lastRate = fn[RATE];\n\n        if (lastRate !== rate || lastThrottleType !== throttleType) {\n            if (rate == null || !throttleType) {\n                return (obj[fnAttr] = originFn);\n            }\n\n            fn = obj[fnAttr] = lib.throttle(\n                originFn, rate, throttleType === 'debounce'\n            );\n            fn[ORIGIN_METHOD] = originFn;\n            fn[THROTTLE_TYPE] = throttleType;\n            fn[RATE] = rate;\n        }\n\n        return fn;\n    };\n\n    /**\n     * Clear throttle. Example see throttle.createOrUpdate.\n     *\n     * @public\n     * @param {Object} obj\n     * @param {string} fnAttr\n     */\n    lib.clear = function (obj, fnAttr) {\n        var fn = obj[fnAttr];\n        if (fn && fn[ORIGIN_METHOD]) {\n            obj[fnAttr] = fn[ORIGIN_METHOD];\n        }\n    };\n\n    module.exports = lib;\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.6.1@echarts/lib/util/throttle.js\n// module id = fIB7\n// module chunks = 0 1","/**\n * 事件扩展\n * @module zrender/mixin/Eventful\n * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)\n *         pissang (https://www.github.com/pissang)\n */\n\n\n    var arrySlice = Array.prototype.slice;\n\n    /**\n     * 事件分发器\n     * @alias module:zrender/mixin/Eventful\n     * @constructor\n     */\n    var Eventful = function () {\n        this._$handlers = {};\n    };\n\n    Eventful.prototype = {\n\n        constructor: Eventful,\n\n        /**\n         * 单次触发绑定，trigger后销毁\n         *\n         * @param {string} event 事件名\n         * @param {Function} handler 响应函数\n         * @param {Object} context\n         */\n        one: function (event, handler, context) {\n            var _h = this._$handlers;\n\n            if (!handler || !event) {\n                return this;\n            }\n\n            if (!_h[event]) {\n                _h[event] = [];\n            }\n\n            for (var i = 0; i < _h[event].length; i++) {\n                if (_h[event][i].h === handler) {\n                    return this;\n                }\n            }\n\n            _h[event].push({\n                h: handler,\n                one: true,\n                ctx: context || this\n            });\n\n            return this;\n        },\n\n        /**\n         * 绑定事件\n         * @param {string} event 事件名\n         * @param {Function} handler 事件处理函数\n         * @param {Object} [context]\n         */\n        on: function (event, handler, context) {\n            var _h = this._$handlers;\n\n            if (!handler || !event) {\n                return this;\n            }\n\n            if (!_h[event]) {\n                _h[event] = [];\n            }\n\n            for (var i = 0; i < _h[event].length; i++) {\n                if (_h[event][i].h === handler) {\n                    return this;\n                }\n            }\n\n            _h[event].push({\n                h: handler,\n                one: false,\n                ctx: context || this\n            });\n\n            return this;\n        },\n\n        /**\n         * 是否绑定了事件\n         * @param  {string}  event\n         * @return {boolean}\n         */\n        isSilent: function (event) {\n            var _h = this._$handlers;\n            return _h[event] && _h[event].length;\n        },\n\n        /**\n         * 解绑事件\n         * @param {string} event 事件名\n         * @param {Function} [handler] 事件处理函数\n         */\n        off: function (event, handler) {\n            var _h = this._$handlers;\n\n            if (!event) {\n                this._$handlers = {};\n                return this;\n            }\n\n            if (handler) {\n                if (_h[event]) {\n                    var newList = [];\n                    for (var i = 0, l = _h[event].length; i < l; i++) {\n                        if (_h[event][i]['h'] != handler) {\n                            newList.push(_h[event][i]);\n                        }\n                    }\n                    _h[event] = newList;\n                }\n\n                if (_h[event] && _h[event].length === 0) {\n                    delete _h[event];\n                }\n            }\n            else {\n                delete _h[event];\n            }\n\n            return this;\n        },\n\n        /**\n         * 事件分发\n         *\n         * @param {string} type 事件类型\n         */\n        trigger: function (type) {\n            if (this._$handlers[type]) {\n                var args = arguments;\n                var argLen = args.length;\n\n                if (argLen > 3) {\n                    args = arrySlice.call(args, 1);\n                }\n\n                var _h = this._$handlers[type];\n                var len = _h.length;\n                for (var i = 0; i < len;) {\n                    // Optimize advise from backbone\n                    switch (argLen) {\n                        case 1:\n                            _h[i]['h'].call(_h[i]['ctx']);\n                            break;\n                        case 2:\n                            _h[i]['h'].call(_h[i]['ctx'], args[1]);\n                            break;\n                        case 3:\n                            _h[i]['h'].call(_h[i]['ctx'], args[1], args[2]);\n                            break;\n                        default:\n                            // have more than 2 given arguments\n                            _h[i]['h'].apply(_h[i]['ctx'], args);\n                            break;\n                    }\n\n                    if (_h[i]['one']) {\n                        _h.splice(i, 1);\n                        len--;\n                    }\n                    else {\n                        i++;\n                    }\n                }\n            }\n\n            return this;\n        },\n\n        /**\n         * 带有context的事件分发, 最后一个参数是事件回调的context\n         * @param {string} type 事件类型\n         */\n        triggerWithContext: function (type) {\n            if (this._$handlers[type]) {\n                var args = arguments;\n                var argLen = args.length;\n\n                if (argLen > 4) {\n                    args = arrySlice.call(args, 1, args.length - 1);\n                }\n                var ctx = args[args.length - 1];\n\n                var _h = this._$handlers[type];\n                var len = _h.length;\n                for (var i = 0; i < len;) {\n                    // Optimize advise from backbone\n                    switch (argLen) {\n                        case 1:\n                            _h[i]['h'].call(ctx);\n                            break;\n                        case 2:\n                            _h[i]['h'].call(ctx, args[1]);\n                            break;\n                        case 3:\n                            _h[i]['h'].call(ctx, args[1], args[2]);\n                            break;\n                        default:\n                            // have more than 2 given arguments\n                            _h[i]['h'].apply(ctx, args);\n                            break;\n                    }\n\n                    if (_h[i]['one']) {\n                        _h.splice(i, 1);\n                        len--;\n                    }\n                    else {\n                        i++;\n                    }\n                }\n            }\n\n            return this;\n        }\n    };\n\n    // 对象可以通过 onxxxx 绑定事件\n    /**\n     * @event module:zrender/mixin/Eventful#onclick\n     * @type {Function}\n     * @default null\n     */\n    /**\n     * @event module:zrender/mixin/Eventful#onmouseover\n     * @type {Function}\n     * @default null\n     */\n    /**\n     * @event module:zrender/mixin/Eventful#onmouseout\n     * @type {Function}\n     * @default null\n     */\n    /**\n     * @event module:zrender/mixin/Eventful#onmousemove\n     * @type {Function}\n     * @default null\n     */\n    /**\n     * @event module:zrender/mixin/Eventful#onmousewheel\n     * @type {Function}\n     * @default null\n     */\n    /**\n     * @event module:zrender/mixin/Eventful#onmousedown\n     * @type {Function}\n     * @default null\n     */\n    /**\n     * @event module:zrender/mixin/Eventful#onmouseup\n     * @type {Function}\n     * @default null\n     */\n    /**\n     * @event module:zrender/mixin/Eventful#ondrag\n     * @type {Function}\n     * @default null\n     */\n    /**\n     * @event module:zrender/mixin/Eventful#ondragstart\n     * @type {Function}\n     * @default null\n     */\n    /**\n     * @event module:zrender/mixin/Eventful#ondragend\n     * @type {Function}\n     * @default null\n     */\n    /**\n     * @event module:zrender/mixin/Eventful#ondragenter\n     * @type {Function}\n     * @default null\n     */\n    /**\n     * @event module:zrender/mixin/Eventful#ondragleave\n     * @type {Function}\n     * @default null\n     */\n    /**\n     * @event module:zrender/mixin/Eventful#ondragover\n     * @type {Function}\n     * @default null\n     */\n    /**\n     * @event module:zrender/mixin/Eventful#ondrop\n     * @type {Function}\n     * @default null\n     */\n\n    module.exports = Eventful;\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.5.1@zrender/lib/mixin/Eventful.js\n// module id = feXt\n// module chunks = 0 1","\n\n    var zrUtil = require('zrender/lib/core/util');\n\n    var clazz = {};\n\n    var TYPE_DELIMITER = '.';\n    var IS_CONTAINER = '___EC__COMPONENT__CONTAINER___';\n    var MEMBER_PRIFIX = '\\0ec_\\0';\n\n    /**\n     * Hide private class member.\n     * The same behavior as `host[name] = value;` (can be right-value)\n     * @public\n     */\n    clazz.set = function (host, name, value) {\n        return (host[MEMBER_PRIFIX + name] = value);\n    };\n\n    /**\n     * Hide private class member.\n     * The same behavior as `host[name];`\n     * @public\n     */\n    clazz.get = function (host, name) {\n        return host[MEMBER_PRIFIX + name];\n    };\n\n    /**\n     * For hidden private class member.\n     * The same behavior as `host.hasOwnProperty(name);`\n     * @public\n     */\n    clazz.hasOwn = function (host, name) {\n        return host.hasOwnProperty(MEMBER_PRIFIX + name);\n    };\n\n    /**\n     * Notice, parseClassType('') should returns {main: '', sub: ''}\n     * @public\n     */\n    var parseClassType = clazz.parseClassType = function (componentType) {\n        var ret = {main: '', sub: ''};\n        if (componentType) {\n            componentType = componentType.split(TYPE_DELIMITER);\n            ret.main = componentType[0] || '';\n            ret.sub = componentType[1] || '';\n        }\n        return ret;\n    };\n\n    /**\n     * @public\n     */\n    function checkClassType(componentType) {\n        zrUtil.assert(\n            /^[a-zA-Z0-9_]+([.][a-zA-Z0-9_]+)?$/.test(componentType),\n            'componentType \"' + componentType + '\" illegal'\n        );\n    }\n\n    /**\n     * @public\n     */\n    clazz.enableClassExtend = function (RootClass, mandatoryMethods) {\n\n        RootClass.$constructor = RootClass;\n        RootClass.extend = function (proto) {\n\n            if (__DEV__) {\n                zrUtil.each(mandatoryMethods, function (method) {\n                    if (!proto[method]) {\n                        console.warn(\n                            'Method `' + method + '` should be implemented'\n                            + (proto.type ? ' in ' + proto.type : '') + '.'\n                        );\n                    }\n                });\n            }\n\n            var superClass = this;\n            var ExtendedClass = function () {\n                if (!proto.$constructor) {\n                    superClass.apply(this, arguments);\n                }\n                else {\n                    proto.$constructor.apply(this, arguments);\n                }\n            };\n\n            zrUtil.extend(ExtendedClass.prototype, proto);\n\n            ExtendedClass.extend = this.extend;\n            ExtendedClass.superCall = superCall;\n            ExtendedClass.superApply = superApply;\n            zrUtil.inherits(ExtendedClass, this);\n            ExtendedClass.superClass = superClass;\n\n            return ExtendedClass;\n        };\n    };\n\n    // superCall should have class info, which can not be fetch from 'this'.\n    // Consider this case:\n    // class A has method f,\n    // class B inherits class A, overrides method f, f call superApply('f'),\n    // class C inherits class B, do not overrides method f,\n    // then when method of class C is called, dead loop occured.\n    function superCall(context, methodName) {\n        var args = zrUtil.slice(arguments, 2);\n        return this.superClass.prototype[methodName].apply(context, args);\n    }\n\n    function superApply(context, methodName, args) {\n        return this.superClass.prototype[methodName].apply(context, args);\n    }\n\n    /**\n     * @param {Object} entity\n     * @param {Object} options\n     * @param {boolean} [options.registerWhenExtend]\n     * @public\n     */\n    clazz.enableClassManagement = function (entity, options) {\n        options = options || {};\n\n        /**\n         * Component model classes\n         * key: componentType,\n         * value:\n         *     componentClass, when componentType is 'xxx'\n         *     or Object.<subKey, componentClass>, when componentType is 'xxx.yy'\n         * @type {Object}\n         */\n        var storage = {};\n\n        entity.registerClass = function (Clazz, componentType) {\n            if (componentType) {\n                checkClassType(componentType);\n                componentType = parseClassType(componentType);\n\n                if (!componentType.sub) {\n                    if (__DEV__) {\n                        if (storage[componentType.main]) {\n                            console.warn(componentType.main + ' exists.');\n                        }\n                    }\n                    storage[componentType.main] = Clazz;\n                }\n                else if (componentType.sub !== IS_CONTAINER) {\n                    var container = makeContainer(componentType);\n                    container[componentType.sub] = Clazz;\n                }\n            }\n            return Clazz;\n        };\n\n        entity.getClass = function (componentMainType, subType, throwWhenNotFound) {\n            var Clazz = storage[componentMainType];\n\n            if (Clazz && Clazz[IS_CONTAINER]) {\n                Clazz = subType ? Clazz[subType] : null;\n            }\n\n            if (throwWhenNotFound && !Clazz) {\n                throw new Error(\n                    !subType\n                        ? componentMainType + '.' + 'type should be specified.'\n                        : 'Component ' + componentMainType + '.' + (subType || '') + ' not exists. Load it first.'\n                );\n            }\n\n            return Clazz;\n        };\n\n        entity.getClassesByMainType = function (componentType) {\n            componentType = parseClassType(componentType);\n\n            var result = [];\n            var obj = storage[componentType.main];\n\n            if (obj && obj[IS_CONTAINER]) {\n                zrUtil.each(obj, function (o, type) {\n                    type !== IS_CONTAINER && result.push(o);\n                });\n            }\n            else {\n                result.push(obj);\n            }\n\n            return result;\n        };\n\n        entity.hasClass = function (componentType) {\n            // Just consider componentType.main.\n            componentType = parseClassType(componentType);\n            return !!storage[componentType.main];\n        };\n\n        /**\n         * @return {Array.<string>} Like ['aa', 'bb'], but can not be ['aa.xx']\n         */\n        entity.getAllClassMainTypes = function () {\n            var types = [];\n            zrUtil.each(storage, function (obj, type) {\n                types.push(type);\n            });\n            return types;\n        };\n\n        /**\n         * If a main type is container and has sub types\n         * @param  {string}  mainType\n         * @return {boolean}\n         */\n        entity.hasSubTypes = function (componentType) {\n            componentType = parseClassType(componentType);\n            var obj = storage[componentType.main];\n            return obj && obj[IS_CONTAINER];\n        };\n\n        entity.parseClassType = parseClassType;\n\n        function makeContainer(componentType) {\n            var container = storage[componentType.main];\n            if (!container || !container[IS_CONTAINER]) {\n                container = storage[componentType.main] = {};\n                container[IS_CONTAINER] = true;\n            }\n            return container;\n        }\n\n        if (options.registerWhenExtend) {\n            var originalExtend = entity.extend;\n            if (originalExtend) {\n                entity.extend = function (proto) {\n                    var ExtendedClass = originalExtend.call(this, proto);\n                    return entity.registerClass(ExtendedClass, proto.type);\n                };\n            }\n        }\n\n        return entity;\n    };\n\n    /**\n     * @param {string|Array.<string>} properties\n     */\n    clazz.setReadOnly = function (obj, properties) {\n        // FIXME It seems broken in IE8 simulation of IE11\n        // if (!zrUtil.isArray(properties)) {\n        //     properties = properties != null ? [properties] : [];\n        // }\n        // zrUtil.each(properties, function (prop) {\n        //     var value = obj[prop];\n\n        //     Object.defineProperty\n        //         && Object.defineProperty(obj, prop, {\n        //             value: value, writable: false\n        //         });\n        //     zrUtil.isArray(obj[prop])\n        //         && Object.freeze\n        //         && Object.freeze(obj[prop]);\n        // });\n    };\n\n    module.exports = clazz;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.6.1@echarts/lib/util/clazz.js\n// module id = fzq8\n// module chunks = 0 1","/**\n * 可绘制的图形基类\n * Base class of all displayable graphic objects\n * @module zrender/graphic/Displayable\n */\n\n\n\n    var zrUtil = require('../core/util');\n\n    var Style = require('./Style');\n\n    var Element = require('../Element');\n    var RectText = require('./mixin/RectText');\n    // var Stateful = require('./mixin/Stateful');\n\n    /**\n     * @alias module:zrender/graphic/Displayable\n     * @extends module:zrender/Element\n     * @extends module:zrender/graphic/mixin/RectText\n     */\n    function Displayable(opts) {\n\n        opts = opts || {};\n\n        Element.call(this, opts);\n\n        // Extend properties\n        for (var name in opts) {\n            if (\n                opts.hasOwnProperty(name) &&\n                name !== 'style'\n            ) {\n                this[name] = opts[name];\n            }\n        }\n\n        /**\n         * @type {module:zrender/graphic/Style}\n         */\n        this.style = new Style(opts.style);\n\n        this._rect = null;\n        // Shapes for cascade clipping.\n        this.__clipPaths = [];\n\n        // FIXME Stateful must be mixined after style is setted\n        // Stateful.call(this, opts);\n    }\n\n    Displayable.prototype = {\n\n        constructor: Displayable,\n\n        type: 'displayable',\n\n        /**\n         * Displayable 是否为脏，Painter 中会根据该标记判断是否需要是否需要重新绘制\n         * Dirty flag. From which painter will determine if this displayable object needs brush\n         * @name module:zrender/graphic/Displayable#__dirty\n         * @type {boolean}\n         */\n        __dirty: true,\n\n        /**\n         * 图形是否可见，为true时不绘制图形，但是仍能触发鼠标事件\n         * If ignore drawing of the displayable object. Mouse event will still be triggered\n         * @name module:/zrender/graphic/Displayable#invisible\n         * @type {boolean}\n         * @default false\n         */\n        invisible: false,\n\n        /**\n         * @name module:/zrender/graphic/Displayable#z\n         * @type {number}\n         * @default 0\n         */\n        z: 0,\n\n        /**\n         * @name module:/zrender/graphic/Displayable#z\n         * @type {number}\n         * @default 0\n         */\n        z2: 0,\n\n        /**\n         * z层level，决定绘画在哪层canvas中\n         * @name module:/zrender/graphic/Displayable#zlevel\n         * @type {number}\n         * @default 0\n         */\n        zlevel: 0,\n\n        /**\n         * 是否可拖拽\n         * @name module:/zrender/graphic/Displayable#draggable\n         * @type {boolean}\n         * @default false\n         */\n        draggable: false,\n\n        /**\n         * 是否正在拖拽\n         * @name module:/zrender/graphic/Displayable#draggable\n         * @type {boolean}\n         * @default false\n         */\n        dragging: false,\n\n        /**\n         * 是否相应鼠标事件\n         * @name module:/zrender/graphic/Displayable#silent\n         * @type {boolean}\n         * @default false\n         */\n        silent: false,\n\n        /**\n         * If enable culling\n         * @type {boolean}\n         * @default false\n         */\n        culling: false,\n\n        /**\n         * Mouse cursor when hovered\n         * @name module:/zrender/graphic/Displayable#cursor\n         * @type {string}\n         */\n        cursor: 'pointer',\n\n        /**\n         * If hover area is bounding rect\n         * @name module:/zrender/graphic/Displayable#rectHover\n         * @type {string}\n         */\n        rectHover: false,\n\n        /**\n         * Render the element progressively when the value >= 0,\n         * usefull for large data.\n         * @type {number}\n         */\n        progressive: -1,\n\n        beforeBrush: function (ctx) {},\n\n        afterBrush: function (ctx) {},\n\n        /**\n         * 图形绘制方法\n         * @param {Canvas2DRenderingContext} ctx\n         */\n        // Interface\n        brush: function (ctx, prevEl) {},\n\n        /**\n         * 获取最小包围盒\n         * @return {module:zrender/core/BoundingRect}\n         */\n        // Interface\n        getBoundingRect: function () {},\n\n        /**\n         * 判断坐标 x, y 是否在图形上\n         * If displayable element contain coord x, y\n         * @param  {number} x\n         * @param  {number} y\n         * @return {boolean}\n         */\n        contain: function (x, y) {\n            return this.rectContain(x, y);\n        },\n\n        /**\n         * @param  {Function} cb\n         * @param  {}   context\n         */\n        traverse: function (cb, context) {\n            cb.call(context, this);\n        },\n\n        /**\n         * 判断坐标 x, y 是否在图形的包围盒上\n         * If bounding rect of element contain coord x, y\n         * @param  {number} x\n         * @param  {number} y\n         * @return {boolean}\n         */\n        rectContain: function (x, y) {\n            var coord = this.transformCoordToLocal(x, y);\n            var rect = this.getBoundingRect();\n            return rect.contain(coord[0], coord[1]);\n        },\n\n        /**\n         * 标记图形元素为脏，并且在下一帧重绘\n         * Mark displayable element dirty and refresh next frame\n         */\n        dirty: function () {\n            this.__dirty = true;\n\n            this._rect = null;\n\n            this.__zr && this.__zr.refresh();\n        },\n\n        /**\n         * 图形是否会触发事件\n         * If displayable object binded any event\n         * @return {boolean}\n         */\n        // TODO, 通过 bind 绑定的事件\n        // isSilent: function () {\n        //     return !(\n        //         this.hoverable || this.draggable\n        //         || this.onmousemove || this.onmouseover || this.onmouseout\n        //         || this.onmousedown || this.onmouseup || this.onclick\n        //         || this.ondragenter || this.ondragover || this.ondragleave\n        //         || this.ondrop\n        //     );\n        // },\n        /**\n         * Alias for animate('style')\n         * @param {boolean} loop\n         */\n        animateStyle: function (loop) {\n            return this.animate('style', loop);\n        },\n\n        attrKV: function (key, value) {\n            if (key !== 'style') {\n                Element.prototype.attrKV.call(this, key, value);\n            }\n            else {\n                this.style.set(value);\n            }\n        },\n\n        /**\n         * @param {Object|string} key\n         * @param {*} value\n         */\n        setStyle: function (key, value) {\n            this.style.set(key, value);\n            this.dirty(false);\n            return this;\n        },\n\n        /**\n         * Use given style object\n         * @param  {Object} obj\n         */\n        useStyle: function (obj) {\n            this.style = new Style(obj);\n            this.dirty(false);\n            return this;\n        }\n    };\n\n    zrUtil.inherits(Displayable, Element);\n\n    zrUtil.mixin(Displayable, RectText);\n    // zrUtil.mixin(Displayable, Stateful);\n\n    module.exports = Displayable;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.5.1@zrender/lib/graphic/Displayable.js\n// module id = g07m\n// module chunks = 0 1","'use strict';\n/**\n * 圆形\n * @module zrender/shape/Circle\n */\n\n\n\n    module.exports = require('../Path').extend({\n\n        type: 'circle',\n\n        shape: {\n            cx: 0,\n            cy: 0,\n            r: 0\n        },\n\n\n        buildPath : function (ctx, shape, inBundle) {\n            // Better stroking in ShapeBundle\n            // Always do it may have performence issue ( fill may be 2x more cost)\n            if (inBundle) {\n                ctx.moveTo(shape.cx + shape.r, shape.cy);\n            }\n            // else {\n            //     if (ctx.allocate && !ctx.data.length) {\n            //         ctx.allocate(ctx.CMD_MEM_SIZE.A);\n            //     }\n            // }\n            // Better stroking in ShapeBundle\n            // ctx.moveTo(shape.cx + shape.r, shape.cy);\n            ctx.arc(shape.cx, shape.cy, shape.r, 0, Math.PI * 2, true);\n        }\n    });\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.5.1@zrender/lib/graphic/shape/Circle.js\n// module id = gE7w\n// module chunks = 0 1","/**\n * Catmull-Rom spline 插值折线\n * @module zrender/shape/util/smoothSpline\n * @author pissang (https://www.github.com/pissang)\n *         Kener (@Kener-林峰, kener.linfeng@gmail.com)\n *         errorrik (errorrik@gmail.com)\n */\n\n    var vec2 = require('../../core/vector');\n\n    /**\n     * @inner\n     */\n    function interpolate(p0, p1, p2, p3, t, t2, t3) {\n        var v0 = (p2 - p0) * 0.5;\n        var v1 = (p3 - p1) * 0.5;\n        return (2 * (p1 - p2) + v0 + v1) * t3\n                + (-3 * (p1 - p2) - 2 * v0 - v1) * t2\n                + v0 * t + p1;\n    }\n\n    /**\n     * @alias module:zrender/shape/util/smoothSpline\n     * @param {Array} points 线段顶点数组\n     * @param {boolean} isLoop\n     * @return {Array}\n     */\n    module.exports = function (points, isLoop) {\n        var len = points.length;\n        var ret = [];\n\n        var distance = 0;\n        for (var i = 1; i < len; i++) {\n            distance += vec2.distance(points[i - 1], points[i]);\n        }\n\n        var segs = distance / 2;\n        segs = segs < len ? len : segs;\n        for (var i = 0; i < segs; i++) {\n            var pos = i / (segs - 1) * (isLoop ? len : len - 1);\n            var idx = Math.floor(pos);\n\n            var w = pos - idx;\n\n            var p0;\n            var p1 = points[idx % len];\n            var p2;\n            var p3;\n            if (!isLoop) {\n                p0 = points[idx === 0 ? idx : idx - 1];\n                p2 = points[idx > len - 2 ? len - 1 : idx + 1];\n                p3 = points[idx > len - 3 ? len - 1 : idx + 2];\n            }\n            else {\n                p0 = points[(idx - 1 + len) % len];\n                p2 = points[(idx + 1) % len];\n                p3 = points[(idx + 2) % len];\n            }\n\n            var w2 = w * w;\n            var w3 = w * w2;\n\n            ret.push([\n                interpolate(p0[0], p1[0], p2[0], p3[0], w, w2, w3),\n                interpolate(p0[1], p1[1], p2[1], p3[1], w, w2, w3)\n            ]);\n        }\n        return ret;\n    };\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.5.1@zrender/lib/graphic/helper/smoothSpline.js\n// module id = gUUB\n// module chunks = 0 1","/**\n * 贝塞尔平滑曲线\n * @module zrender/shape/util/smoothBezier\n * @author pissang (https://www.github.com/pissang)\n *         Kener (@Kener-林峰, kener.linfeng@gmail.com)\n *         errorrik (errorrik@gmail.com)\n */\n\n\n    var vec2 = require('../../core/vector');\n    var v2Min = vec2.min;\n    var v2Max = vec2.max;\n    var v2Scale = vec2.scale;\n    var v2Distance = vec2.distance;\n    var v2Add = vec2.add;\n\n    /**\n     * 贝塞尔平滑曲线\n     * @alias module:zrender/shape/util/smoothBezier\n     * @param {Array} points 线段顶点数组\n     * @param {number} smooth 平滑等级, 0-1\n     * @param {boolean} isLoop\n     * @param {Array} constraint 将计算出来的控制点约束在一个包围盒内\n     *                           比如 [[0, 0], [100, 100]], 这个包围盒会与\n     *                           整个折线的包围盒做一个并集用来约束控制点。\n     * @param {Array} 计算出来的控制点数组\n     */\n    module.exports = function (points, smooth, isLoop, constraint) {\n        var cps = [];\n\n        var v = [];\n        var v1 = [];\n        var v2 = [];\n        var prevPoint;\n        var nextPoint;\n\n        var min, max;\n        if (constraint) {\n            min = [Infinity, Infinity];\n            max = [-Infinity, -Infinity];\n            for (var i = 0, len = points.length; i < len; i++) {\n                v2Min(min, min, points[i]);\n                v2Max(max, max, points[i]);\n            }\n            // 与指定的包围盒做并集\n            v2Min(min, min, constraint[0]);\n            v2Max(max, max, constraint[1]);\n        }\n\n        for (var i = 0, len = points.length; i < len; i++) {\n            var point = points[i];\n\n            if (isLoop) {\n                prevPoint = points[i ? i - 1 : len - 1];\n                nextPoint = points[(i + 1) % len];\n            }\n            else {\n                if (i === 0 || i === len - 1) {\n                    cps.push(vec2.clone(points[i]));\n                    continue;\n                }\n                else {\n                    prevPoint = points[i - 1];\n                    nextPoint = points[i + 1];\n                }\n            }\n\n            vec2.sub(v, nextPoint, prevPoint);\n\n            // use degree to scale the handle length\n            v2Scale(v, v, smooth);\n\n            var d0 = v2Distance(point, prevPoint);\n            var d1 = v2Distance(point, nextPoint);\n            var sum = d0 + d1;\n            if (sum !== 0) {\n                d0 /= sum;\n                d1 /= sum;\n            }\n\n            v2Scale(v1, v, -d0);\n            v2Scale(v2, v, d1);\n            var cp0 = v2Add([], point, v1);\n            var cp1 = v2Add([], point, v2);\n            if (constraint) {\n                v2Max(cp0, cp0, min);\n                v2Min(cp0, cp0, max);\n                v2Max(cp1, cp1, min);\n                v2Min(cp1, cp1, max);\n            }\n            cps.push(cp0);\n            cps.push(cp1);\n        }\n\n        if (isLoop) {\n            cps.push(cps.shift());\n        }\n\n        return cps;\n    };\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.5.1@zrender/lib/graphic/helper/smoothBezier.js\n// module id = geKH\n// module chunks = 0 1","\n\n    var graphic = require('../util/graphic');\n    var zrUtil = require('zrender/lib/core/util');\n    var PI = Math.PI;\n    /**\n     * @param {module:echarts/ExtensionAPI} api\n     * @param {Object} [opts]\n     * @param {string} [opts.text]\n     * @param {string} [opts.color]\n     * @param {string} [opts.textColor]\n     * @return {module:zrender/Element}\n     */\n    module.exports = function (api, opts) {\n        opts = opts || {};\n        zrUtil.defaults(opts, {\n            text: 'loading',\n            color: '#c23531',\n            textColor: '#000',\n            maskColor: 'rgba(255, 255, 255, 0.8)',\n            zlevel: 0\n        });\n        var mask = new graphic.Rect({\n            style: {\n                fill: opts.maskColor\n            },\n            zlevel: opts.zlevel,\n            z: 10000\n        });\n        var arc = new graphic.Arc({\n            shape: {\n                startAngle: -PI / 2,\n                endAngle: -PI / 2 + 0.1,\n                r: 10\n            },\n            style: {\n                stroke: opts.color,\n                lineCap: 'round',\n                lineWidth: 5\n            },\n            zlevel: opts.zlevel,\n            z: 10001\n        });\n        var labelRect = new graphic.Rect({\n            style: {\n                fill: 'none',\n                text: opts.text,\n                textPosition: 'right',\n                textDistance: 10,\n                textFill: opts.textColor\n            },\n            zlevel: opts.zlevel,\n            z: 10001\n        });\n\n        arc.animateShape(true)\n            .when(1000, {\n                endAngle: PI * 3 / 2\n            })\n            .start('circularInOut');\n        arc.animateShape(true)\n            .when(1000, {\n                startAngle: PI * 3 / 2\n            })\n            .delay(300)\n            .start('circularInOut');\n\n        var group = new graphic.Group();\n        group.add(arc);\n        group.add(labelRect);\n        group.add(mask);\n        // Inject resize\n        group.resize = function () {\n            var cx = api.getWidth() / 2;\n            var cy = api.getHeight() / 2;\n            arc.setShape({\n                cx: cx,\n                cy: cy\n            });\n            var r = arc.shape.r;\n            labelRect.setShape({\n                x: cx - r,\n                y: cy - r,\n                width: r * 2,\n                height: r * 2\n            });\n\n            mask.setShape({\n                x: 0,\n                y: 0,\n                width: api.getWidth(),\n                height: api.getHeight()\n            });\n        };\n        group.resize();\n        return group;\n    };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.6.1@echarts/lib/loading/default.js\n// module id = hXDN\n// module chunks = 0 1","// Compatitable with 2.0\n\n\n    var zrUtil = require('zrender/lib/core/util');\n    var compatStyle = require('./helper/compatStyle');\n\n    function get(opt, path) {\n        path = path.split(',');\n        var obj = opt;\n        for (var i = 0; i < path.length; i++) {\n            obj = obj && obj[path[i]];\n            if (obj == null) {\n                break;\n            }\n        }\n        return obj;\n    }\n\n    function set(opt, path, val, overwrite) {\n        path = path.split(',');\n        var obj = opt;\n        var key;\n        for (var i = 0; i < path.length - 1; i++) {\n            key = path[i];\n            if (obj[key] == null) {\n                obj[key] = {};\n            }\n            obj = obj[key];\n        }\n        if (overwrite || obj[path[i]] == null) {\n            obj[path[i]] = val;\n        }\n    }\n\n    function compatLayoutProperties(option) {\n        each(LAYOUT_PROPERTIES, function (prop) {\n            if (prop[0] in option && !(prop[1] in option)) {\n                option[prop[1]] = option[prop[0]];\n            }\n        });\n    }\n\n    var LAYOUT_PROPERTIES = [\n        ['x', 'left'], ['y', 'top'], ['x2', 'right'], ['y2', 'bottom']\n    ];\n\n    var COMPATITABLE_COMPONENTS = [\n        'grid', 'geo', 'parallel', 'legend', 'toolbox', 'title', 'visualMap', 'dataZoom', 'timeline'\n    ];\n\n    var COMPATITABLE_SERIES = [\n        'bar', 'boxplot', 'candlestick', 'chord', 'effectScatter',\n        'funnel', 'gauge', 'lines', 'graph', 'heatmap', 'line', 'map', 'parallel',\n        'pie', 'radar', 'sankey', 'scatter', 'treemap'\n    ];\n\n    var each = zrUtil.each;\n\n    module.exports = function (option) {\n        each(option.series, function (seriesOpt) {\n            if (!zrUtil.isObject(seriesOpt)) {\n                return;\n            }\n\n            var seriesType = seriesOpt.type;\n\n            compatStyle(seriesOpt);\n\n            if (seriesType === 'pie' || seriesType === 'gauge') {\n                if (seriesOpt.clockWise != null) {\n                    seriesOpt.clockwise = seriesOpt.clockWise;\n                }\n            }\n            if (seriesType === 'gauge') {\n                var pointerColor = get(seriesOpt, 'pointer.color');\n                pointerColor != null\n                    && set(seriesOpt, 'itemStyle.normal.color', pointerColor);\n            }\n\n            for (var i = 0; i < COMPATITABLE_SERIES.length; i++) {\n                if (COMPATITABLE_SERIES[i] === seriesOpt.type) {\n                    compatLayoutProperties(seriesOpt);\n                    break;\n                }\n            }\n        });\n\n        // dataRange has changed to visualMap\n        if (option.dataRange) {\n            option.visualMap = option.dataRange;\n        }\n\n        each(COMPATITABLE_COMPONENTS, function (componentName) {\n            var options = option[componentName];\n            if (options) {\n                if (!zrUtil.isArray(options)) {\n                    options = [options];\n                }\n                each(options, function (option) {\n                    compatLayoutProperties(option);\n                });\n            }\n        });\n    };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.6.1@echarts/lib/preprocessor/backwardCompat.js\n// module id = hpyJ\n// module chunks = 0 1","// Simple LRU cache use doubly linked list\n// @module zrender/core/LRU\n\n\n    /**\n     * Simple double linked list. Compared with array, it has O(1) remove operation.\n     * @constructor\n     */\n    var LinkedList = function () {\n\n        /**\n         * @type {module:zrender/core/LRU~Entry}\n         */\n        this.head = null;\n\n        /**\n         * @type {module:zrender/core/LRU~Entry}\n         */\n        this.tail = null;\n\n        this._len = 0;\n    };\n\n    var linkedListProto = LinkedList.prototype;\n    /**\n     * Insert a new value at the tail\n     * @param  {} val\n     * @return {module:zrender/core/LRU~Entry}\n     */\n    linkedListProto.insert = function (val) {\n        var entry = new Entry(val);\n        this.insertEntry(entry);\n        return entry;\n    };\n\n    /**\n     * Insert an entry at the tail\n     * @param  {module:zrender/core/LRU~Entry} entry\n     */\n    linkedListProto.insertEntry = function (entry) {\n        if (!this.head) {\n            this.head = this.tail = entry;\n        }\n        else {\n            this.tail.next = entry;\n            entry.prev = this.tail;\n            entry.next = null;\n            this.tail = entry;\n        }\n        this._len++;\n    };\n\n    /**\n     * Remove entry.\n     * @param  {module:zrender/core/LRU~Entry} entry\n     */\n    linkedListProto.remove = function (entry) {\n        var prev = entry.prev;\n        var next = entry.next;\n        if (prev) {\n            prev.next = next;\n        }\n        else {\n            // Is head\n            this.head = next;\n        }\n        if (next) {\n            next.prev = prev;\n        }\n        else {\n            // Is tail\n            this.tail = prev;\n        }\n        entry.next = entry.prev = null;\n        this._len--;\n    };\n\n    /**\n     * @return {number}\n     */\n    linkedListProto.len = function () {\n        return this._len;\n    };\n\n    /**\n     * Clear list\n     */\n    linkedListProto.clear = function () {\n        this.head = this.tail = null;\n        this._len = 0;\n    };\n\n    /**\n     * @constructor\n     * @param {} val\n     */\n    var Entry = function (val) {\n        /**\n         * @type {}\n         */\n        this.value = val;\n\n        /**\n         * @type {module:zrender/core/LRU~Entry}\n         */\n        this.next;\n\n        /**\n         * @type {module:zrender/core/LRU~Entry}\n         */\n        this.prev;\n    };\n\n    /**\n     * LRU Cache\n     * @constructor\n     * @alias module:zrender/core/LRU\n     */\n    var LRU = function (maxSize) {\n\n        this._list = new LinkedList();\n\n        this._map = {};\n\n        this._maxSize = maxSize || 10;\n\n        this._lastRemovedEntry = null;\n    };\n\n    var LRUProto = LRU.prototype;\n\n    /**\n     * @param  {string} key\n     * @param  {} value\n     * @return {} Removed value\n     */\n    LRUProto.put = function (key, value) {\n        var list = this._list;\n        var map = this._map;\n        var removed = null;\n        if (map[key] == null) {\n            var len = list.len();\n            // Reuse last removed entry\n            var entry = this._lastRemovedEntry;\n\n            if (len >= this._maxSize && len > 0) {\n                // Remove the least recently used\n                var leastUsedEntry = list.head;\n                list.remove(leastUsedEntry);\n                delete map[leastUsedEntry.key];\n\n                removed = leastUsedEntry.value;\n                this._lastRemovedEntry = leastUsedEntry;\n            }\n\n            if (entry) {\n                entry.value = value;\n            }\n            else {\n                entry = new Entry(value);\n            }\n            entry.key = key;\n            list.insertEntry(entry);\n            map[key] = entry;\n        }\n\n        return removed;\n    };\n\n    /**\n     * @param  {string} key\n     * @return {}\n     */\n    LRUProto.get = function (key) {\n        var entry = this._map[key];\n        var list = this._list;\n        if (entry != null) {\n            // Put the latest used entry in the tail\n            if (entry !== list.tail) {\n                list.remove(entry);\n                list.insertEntry(entry);\n            }\n\n            return entry.value;\n        }\n    };\n\n    /**\n     * Clear the cache\n     */\n    LRUProto.clear = function () {\n        this._list.clear();\n        this._map = {};\n    };\n\n    module.exports = LRU;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.5.1@zrender/lib/core/LRU.js\n// module id = i4I6\n// module chunks = 0 1","\n\n    require('../../echarts').extendComponentModel({\n\n        type: 'tooltip',\n\n        dependencies: ['axisPointer'],\n\n        defaultOption: {\n            zlevel: 0,\n\n            z: 8,\n\n            show: true,\n\n            // tooltip主体内容\n            showContent: true,\n\n            // 'trigger' only works on coordinate system.\n            // 'item' | 'axis' | 'none'\n            trigger: 'item',\n\n            // 'click' | 'mousemove' | 'none'\n            triggerOn: 'mousemove|click',\n\n            alwaysShowContent: false,\n\n            displayMode: 'single', // 'single' | 'multipleByCoordSys'\n\n            // 位置 {Array} | {Function}\n            // position: null\n            // Consider triggered from axisPointer handle, verticalAlign should be 'middle'\n            // align: null,\n            // verticalAlign: null,\n\n            // 是否约束 content 在 viewRect 中。默认 false 是为了兼容以前版本。\n            confine: false,\n\n            // 内容格式器：{string}（Template） ¦ {Function}\n            // formatter: null\n\n            showDelay: 0,\n\n            // 隐藏延迟，单位ms\n            hideDelay: 100,\n\n            // 动画变换时间，单位s\n            transitionDuration: 0.4,\n\n            enterable: false,\n\n            // 提示背景颜色，默认为透明度为0.7的黑色\n            backgroundColor: 'rgba(50,50,50,0.7)',\n\n            // 提示边框颜色\n            borderColor: '#333',\n\n            // 提示边框圆角，单位px，默认为4\n            borderRadius: 4,\n\n            // 提示边框线宽，单位px，默认为0（无边框）\n            borderWidth: 0,\n\n            // 提示内边距，单位px，默认各方向内边距为5，\n            // 接受数组分别设定上右下左边距，同css\n            padding: 5,\n\n            // Extra css text\n            extraCssText: '',\n\n            // 坐标轴指示器，坐标轴触发有效\n            axisPointer: {\n                // 默认为直线\n                // 可选为：'line' | 'shadow' | 'cross'\n                type: 'line',\n\n                // type 为 line 的时候有效，指定 tooltip line 所在的轴，可选\n                // 可选 'x' | 'y' | 'angle' | 'radius' | 'auto'\n                // 默认 'auto'，会选择类型为 cateogry 的轴，对于双数值轴，笛卡尔坐标系会默认选择 x 轴\n                // 极坐标系会默认选择 angle 轴\n                axis: 'auto',\n\n                animation: 'auto',\n                animationDurationUpdate: 200,\n                animationEasingUpdate: 'exponentialOut',\n\n                crossStyle: {\n                    color: '#999',\n                    width: 1,\n                    type: 'dashed',\n\n                    // TODO formatter\n                    textStyle: {}\n                }\n\n                // lineStyle and shadowStyle should not be specified here,\n                // otherwise it will always override those styles on option.axisPointer.\n            },\n            textStyle: {\n                color: '#fff',\n                fontSize: 14\n            }\n        }\n    });\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.6.1@echarts/lib/component/tooltip/TooltipModel.js\n// module id = iiGm\n// module chunks = 0 1","/**\n * @file Axis operator\n */\n\n\n    var zrUtil = require('zrender/lib/core/util');\n    var numberUtil = require('../../util/number');\n    var helper = require('./helper');\n    var each = zrUtil.each;\n    var asc = numberUtil.asc;\n\n    /**\n     * Operate single axis.\n     * One axis can only operated by one axis operator.\n     * Different dataZoomModels may be defined to operate the same axis.\n     * (i.e. 'inside' data zoom and 'slider' data zoom components)\n     * So dataZoomModels share one axisProxy in that case.\n     *\n     * @class\n     */\n    var AxisProxy = function (dimName, axisIndex, dataZoomModel, ecModel) {\n\n        /**\n         * @private\n         * @type {string}\n         */\n        this._dimName = dimName;\n\n        /**\n         * @private\n         */\n        this._axisIndex = axisIndex;\n\n        /**\n         * @private\n         * @type {Array.<number>}\n         */\n        this._valueWindow;\n\n        /**\n         * @private\n         * @type {Array.<number>}\n         */\n        this._percentWindow;\n\n        /**\n         * @private\n         * @type {Array.<number>}\n         */\n        this._dataExtent;\n\n        /**\n         * {minSpan, maxSpan, minValueSpan, maxValueSpan}\n         * @private\n         * @type {Object}\n         */\n        this._minMaxSpan;\n\n        /**\n         * @readOnly\n         * @type {module: echarts/model/Global}\n         */\n        this.ecModel = ecModel;\n\n        /**\n         * @private\n         * @type {module: echarts/component/dataZoom/DataZoomModel}\n         */\n        this._dataZoomModel = dataZoomModel;\n    };\n\n    AxisProxy.prototype = {\n\n        constructor: AxisProxy,\n\n        /**\n         * Whether the axisProxy is hosted by dataZoomModel.\n         *\n         * @public\n         * @param {module: echarts/component/dataZoom/DataZoomModel} dataZoomModel\n         * @return {boolean}\n         */\n        hostedBy: function (dataZoomModel) {\n            return this._dataZoomModel === dataZoomModel;\n        },\n\n        /**\n         * @return {Array.<number>} Value can only be NaN or finite value.\n         */\n        getDataValueWindow: function () {\n            return this._valueWindow.slice();\n        },\n\n        /**\n         * @return {Array.<number>}\n         */\n        getDataPercentWindow: function () {\n            return this._percentWindow.slice();\n        },\n\n        /**\n         * @public\n         * @param {number} axisIndex\n         * @return {Array} seriesModels\n         */\n        getTargetSeriesModels: function () {\n            var seriesModels = [];\n            var ecModel = this.ecModel;\n\n            ecModel.eachSeries(function (seriesModel) {\n                if (helper.isCoordSupported(seriesModel.get('coordinateSystem'))) {\n                    var dimName = this._dimName;\n                    var axisModel = ecModel.queryComponents({\n                        mainType: dimName + 'Axis',\n                        index: seriesModel.get(dimName + 'AxisIndex'),\n                        id: seriesModel.get(dimName + 'AxisId')\n                    })[0];\n                    if (this._axisIndex === (axisModel && axisModel.componentIndex)) {\n                        seriesModels.push(seriesModel);\n                    }\n                }\n            }, this);\n\n            return seriesModels;\n        },\n\n        getAxisModel: function () {\n            return this.ecModel.getComponent(this._dimName + 'Axis', this._axisIndex);\n        },\n\n        getOtherAxisModel: function () {\n            var axisDim = this._dimName;\n            var ecModel = this.ecModel;\n            var axisModel = this.getAxisModel();\n            var isCartesian = axisDim === 'x' || axisDim === 'y';\n            var otherAxisDim;\n            var coordSysIndexName;\n            if (isCartesian) {\n                coordSysIndexName = 'gridIndex';\n                otherAxisDim = axisDim === 'x' ? 'y' : 'x';\n            }\n            else {\n                coordSysIndexName = 'polarIndex';\n                otherAxisDim = axisDim === 'angle' ? 'radius' : 'angle';\n            }\n            var foundOtherAxisModel;\n            ecModel.eachComponent(otherAxisDim + 'Axis', function (otherAxisModel) {\n                if ((otherAxisModel.get(coordSysIndexName) || 0)\n                    === (axisModel.get(coordSysIndexName) || 0)\n                ) {\n                    foundOtherAxisModel = otherAxisModel;\n                }\n            });\n            return foundOtherAxisModel;\n        },\n\n        getMinMaxSpan: function () {\n            return zrUtil.clone(this._minMaxSpan);\n        },\n\n        /**\n         * Only calculate by given range and this._dataExtent, do not change anything.\n         *\n         * @param {Object} opt\n         * @param {number} [opt.start]\n         * @param {number} [opt.end]\n         * @param {number} [opt.startValue]\n         * @param {number} [opt.endValue]\n         */\n        calculateDataWindow: function (opt) {\n            var dataExtent = this._dataExtent;\n            var axisModel = this.getAxisModel();\n            var scale = axisModel.axis.scale;\n            var rangePropMode = this._dataZoomModel.getRangePropMode();\n            var percentExtent = [0, 100];\n            var percentWindow = [\n                opt.start,\n                opt.end\n            ];\n            var valueWindow = [];\n\n            each(['startValue', 'endValue'], function (prop) {\n                valueWindow.push(opt[prop] != null ? scale.parse(opt[prop]) : null);\n            });\n\n            // Normalize bound.\n            each([0, 1], function (idx) {\n                var boundValue = valueWindow[idx];\n                var boundPercent = percentWindow[idx];\n\n                // Notice: dataZoom is based either on `percentProp` ('start', 'end') or\n                // on `valueProp` ('startValue', 'endValue'). The former one is suitable\n                // for cases that a dataZoom component controls multiple axes with different\n                // unit or extent, and the latter one is suitable for accurate zoom by pixel\n                // (e.g., in dataZoomSelect). `valueProp` can be calculated from `percentProp`,\n                // but it is awkward that `percentProp` can not be obtained from `valueProp`\n                // accurately (because all of values that are overflow the `dataExtent` will\n                // be calculated to percent '100%'). So we have to use\n                // `dataZoom.getRangePropMode()` to mark which prop is used.\n                // `rangePropMode` is updated only when setOption or dispatchAction, otherwise\n                // it remains its original value.\n\n                if (rangePropMode[idx] === 'percent') {\n                    if (boundPercent == null) {\n                        boundPercent = percentExtent[idx];\n                    }\n                    // Use scale.parse to math round for category or time axis.\n                    boundValue = scale.parse(numberUtil.linearMap(\n                        boundPercent, percentExtent, dataExtent, true\n                    ));\n                }\n                else {\n                    // Calculating `percent` from `value` may be not accurate, because\n                    // This calculation can not be inversed, because all of values that\n                    // are overflow the `dataExtent` will be calculated to percent '100%'\n                    boundPercent = numberUtil.linearMap(\n                        boundValue, dataExtent, percentExtent, true\n                    );\n                }\n\n                // valueWindow[idx] = round(boundValue);\n                // percentWindow[idx] = round(boundPercent);\n                valueWindow[idx] = boundValue;\n                percentWindow[idx] = boundPercent;\n            });\n\n            return {\n                valueWindow: asc(valueWindow),\n                percentWindow: asc(percentWindow)\n            };\n        },\n\n        /**\n         * Notice: reset should not be called before series.restoreData() called,\n         * so it is recommanded to be called in \"process stage\" but not \"model init\n         * stage\".\n         *\n         * @param {module: echarts/component/dataZoom/DataZoomModel} dataZoomModel\n         */\n        reset: function (dataZoomModel) {\n            if (dataZoomModel !== this._dataZoomModel) {\n                return;\n            }\n\n            // Culculate data window and data extent, and record them.\n            this._dataExtent = calculateDataExtent(\n                this, this._dimName, this.getTargetSeriesModels()\n            );\n\n            var dataWindow = this.calculateDataWindow(dataZoomModel.option);\n\n            this._valueWindow = dataWindow.valueWindow;\n            this._percentWindow = dataWindow.percentWindow;\n\n            setMinMaxSpan(this);\n\n            // Update axis setting then.\n            setAxisModel(this);\n        },\n\n        /**\n         * @param {module: echarts/component/dataZoom/DataZoomModel} dataZoomModel\n         */\n        restore: function (dataZoomModel) {\n            if (dataZoomModel !== this._dataZoomModel) {\n                return;\n            }\n\n            this._valueWindow = this._percentWindow = null;\n            setAxisModel(this, true);\n        },\n\n        /**\n         * @param {module: echarts/component/dataZoom/DataZoomModel} dataZoomModel\n         */\n        filterData: function (dataZoomModel) {\n            if (dataZoomModel !== this._dataZoomModel) {\n                return;\n            }\n\n            var axisDim = this._dimName;\n            var seriesModels = this.getTargetSeriesModels();\n            var filterMode = dataZoomModel.get('filterMode');\n            var valueWindow = this._valueWindow;\n\n            if (filterMode === 'none') {\n                return;\n            }\n\n            // FIXME\n            // Toolbox may has dataZoom injected. And if there are stacked bar chart\n            // with NaN data, NaN will be filtered and stack will be wrong.\n            // So we need to force the mode to be set empty.\n            // In fect, it is not a big deal that do not support filterMode-'filter'\n            // when using toolbox#dataZoom, utill tooltip#dataZoom support \"single axis\n            // selection\" some day, which might need \"adapt to data extent on the\n            // otherAxis\", which is disabled by filterMode-'empty'.\n            var otherAxisModel = this.getOtherAxisModel();\n            if (dataZoomModel.get('$fromToolbox')\n                && otherAxisModel\n                && otherAxisModel.get('type') === 'category'\n            ) {\n                filterMode = 'empty';\n            }\n\n            // Process series data\n            each(seriesModels, function (seriesModel) {\n                var seriesData = seriesModel.getData();\n                var dataDims = seriesModel.coordDimToDataDim(axisDim);\n\n                if (filterMode === 'weakFilter') {\n                    seriesData && seriesData.filterSelf(function (dataIndex) {\n                        var leftOut;\n                        var rightOut;\n                        var hasValue;\n                        for (var i = 0; i < dataDims.length; i++) {\n                            var value = seriesData.get(dataDims[i], dataIndex);\n                            var thisHasValue = !isNaN(value);\n                            var thisLeftOut = value < valueWindow[0];\n                            var thisRightOut = value > valueWindow[1];\n                            if (thisHasValue && !thisLeftOut && !thisRightOut) {\n                                return true;\n                            }\n                            thisHasValue && (hasValue = true);\n                            thisLeftOut && (leftOut = true);\n                            thisRightOut && (rightOut = true);\n                        }\n                        // If both left out and right out, do not filter.\n                        return hasValue && leftOut && rightOut;\n                    });\n                }\n                else {\n                    seriesData && each(dataDims, function (dim) {\n                        if (filterMode === 'empty') {\n                            seriesModel.setData(\n                                seriesData.map(dim, function (value) {\n                                    return !isInWindow(value) ? NaN : value;\n                                })\n                            );\n                        }\n                        else {\n                            seriesData.filterSelf(dim, isInWindow);\n                        }\n                    });\n                }\n            });\n\n            function isInWindow(value) {\n                return value >= valueWindow[0] && value <= valueWindow[1];\n            }\n        }\n    };\n\n    function calculateDataExtent(axisProxy, axisDim, seriesModels) {\n        var dataExtent = [Infinity, -Infinity];\n\n        each(seriesModels, function (seriesModel) {\n            var seriesData = seriesModel.getData();\n            if (seriesData) {\n                each(seriesModel.coordDimToDataDim(axisDim), function (dim) {\n                    var seriesExtent = seriesData.getDataExtent(dim);\n                    seriesExtent[0] < dataExtent[0] && (dataExtent[0] = seriesExtent[0]);\n                    seriesExtent[1] > dataExtent[1] && (dataExtent[1] = seriesExtent[1]);\n                });\n            }\n        });\n\n        if (dataExtent[1] < dataExtent[0]) {\n            dataExtent = [NaN, NaN];\n        }\n\n        // It is important to get \"consistent\" extent when more then one axes is\n        // controlled by a `dataZoom`, otherwise those axes will not be synchronized\n        // when zooming. But it is difficult to know what is \"consistent\", considering\n        // axes have different type or even different meanings (For example, two\n        // time axes are used to compare data of the same date in different years).\n        // So basically dataZoom just obtains extent by series.data (in category axis\n        // extent can be obtained from axis.data).\n        // Nevertheless, user can set min/max/scale on axes to make extent of axes\n        // consistent.\n        fixExtentByAxis(axisProxy, dataExtent);\n\n        return dataExtent;\n    }\n\n    function fixExtentByAxis(axisProxy, dataExtent) {\n        var axisModel = axisProxy.getAxisModel();\n        var min = axisModel.getMin(true);\n\n        // For category axis, if min/max/scale are not set, extent is determined\n        // by axis.data by default.\n        var isCategoryAxis = axisModel.get('type') === 'category';\n        var axisDataLen = isCategoryAxis && (axisModel.get('data') || []).length;\n\n        if (min != null && min !== 'dataMin') {\n            dataExtent[0] = min;\n        }\n        else if (isCategoryAxis) {\n            dataExtent[0] = axisDataLen > 0 ? 0 : NaN;\n        }\n\n        var max = axisModel.getMax(true);\n        if (max != null && max !== 'dataMax') {\n            dataExtent[1] = max;\n        }\n        else if (isCategoryAxis) {\n            dataExtent[1] = axisDataLen > 0 ? axisDataLen - 1 : NaN;\n        }\n\n        if (!axisModel.get('scale', true)) {\n            dataExtent[0] > 0 && (dataExtent[0] = 0);\n            dataExtent[1] < 0 && (dataExtent[1] = 0);\n        }\n\n        // For value axis, if min/max/scale are not set, we just use the extent obtained\n        // by series data, which may be a little different from the extent calculated by\n        // `axisHelper.getScaleExtent`. But the different just affects the experience a\n        // little when zooming. So it will not be fixed until some users require it strongly.\n\n        return dataExtent;\n    }\n\n    function setAxisModel(axisProxy, isRestore) {\n        var axisModel = axisProxy.getAxisModel();\n\n        var percentWindow = axisProxy._percentWindow;\n        var valueWindow = axisProxy._valueWindow;\n\n        if (!percentWindow) {\n            return;\n        }\n\n        // [0, 500]: arbitrary value, guess axis extent.\n        var precision = numberUtil.getPixelPrecision(valueWindow, [0, 500]);\n        // isRestore or isFull\n        var useOrigin = isRestore || (percentWindow[0] === 0 && percentWindow[1] === 100);\n\n        axisModel.setRange(\n            useOrigin ? null : +valueWindow[0].toFixed(precision),\n            useOrigin ? null : +valueWindow[1].toFixed(precision)\n        );\n    }\n\n    function setMinMaxSpan(axisProxy) {\n        var minMaxSpan = axisProxy._minMaxSpan = {};\n        var dataZoomModel = axisProxy._dataZoomModel;\n\n        each(['min', 'max'], function (minMax) {\n            minMaxSpan[minMax + 'Span'] = dataZoomModel.get(minMax + 'Span');\n\n            // minValueSpan and maxValueSpan has higher priority than minSpan and maxSpan\n            var valueSpan = dataZoomModel.get(minMax + 'ValueSpan');\n            if (valueSpan != null) {\n                minMaxSpan[minMax + 'ValueSpan'] = valueSpan;\n\n                valueSpan = axisProxy.getAxisModel().axis.scale.parse(valueSpan);\n                if (valueSpan != null) {\n                    minMaxSpan[minMax + 'Span'] = numberUtil.linearMap(\n                        valueSpan, axisProxy._dataExtent, [0, 100], true\n                    );\n                }\n            }\n        });\n    }\n\n    module.exports = AxisProxy;\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.6.1@echarts/lib/component/dataZoom/AxisProxy.js\n// module id = ikqo\n// module chunks = 0 1","/**\n * @module zrender/Layer\n * @author pissang(https://www.github.com/pissang)\n */\n\n\n    var util = require('./core/util');\n    var config = require('./config');\n    var Style = require('./graphic/Style');\n    var Pattern = require('./graphic/Pattern');\n\n    function returnFalse() {\n        return false;\n    }\n\n    /**\n     * 创建dom\n     *\n     * @inner\n     * @param {string} id dom id 待用\n     * @param {string} type dom type，such as canvas, div etc.\n     * @param {Painter} painter painter instance\n     * @param {number} number\n     */\n    function createDom(id, type, painter, dpr) {\n        var newDom = document.createElement(type);\n        var width = painter.getWidth();\n        var height = painter.getHeight();\n\n        var newDomStyle = newDom.style;\n        // 没append呢，请原谅我这样写，清晰~\n        newDomStyle.position = 'absolute';\n        newDomStyle.left = 0;\n        newDomStyle.top = 0;\n        newDomStyle.width = width + 'px';\n        newDomStyle.height = height + 'px';\n        newDom.width = width * dpr;\n        newDom.height = height * dpr;\n\n        // id不作为索引用，避免可能造成的重名，定义为私有属性\n        newDom.setAttribute('data-zr-dom-id', id);\n        return newDom;\n    }\n\n    /**\n     * @alias module:zrender/Layer\n     * @constructor\n     * @extends module:zrender/mixin/Transformable\n     * @param {string} id\n     * @param {module:zrender/Painter} painter\n     * @param {number} [dpr]\n     */\n    var Layer = function(id, painter, dpr) {\n        var dom;\n        dpr = dpr || config.devicePixelRatio;\n        if (typeof id === 'string') {\n            dom = createDom(id, 'canvas', painter, dpr);\n        }\n        // Not using isDom because in node it will return false\n        else if (util.isObject(id)) {\n            dom = id;\n            id = dom.id;\n        }\n        this.id = id;\n        this.dom = dom;\n\n        var domStyle = dom.style;\n        if (domStyle) { // Not in node\n            dom.onselectstart = returnFalse; // 避免页面选中的尴尬\n            domStyle['-webkit-user-select'] = 'none';\n            domStyle['user-select'] = 'none';\n            domStyle['-webkit-touch-callout'] = 'none';\n            domStyle['-webkit-tap-highlight-color'] = 'rgba(0,0,0,0)';\n            domStyle['padding'] = 0;\n            domStyle['margin'] = 0;\n            domStyle['border-width'] = 0;\n        }\n\n        this.domBack = null;\n        this.ctxBack = null;\n\n        this.painter = painter;\n\n        this.config = null;\n\n        // Configs\n        /**\n         * 每次清空画布的颜色\n         * @type {string}\n         * @default 0\n         */\n        this.clearColor = 0;\n        /**\n         * 是否开启动态模糊\n         * @type {boolean}\n         * @default false\n         */\n        this.motionBlur = false;\n        /**\n         * 在开启动态模糊的时候使用，与上一帧混合的alpha值，值越大尾迹越明显\n         * @type {number}\n         * @default 0.7\n         */\n        this.lastFrameAlpha = 0.7;\n\n        /**\n         * Layer dpr\n         * @type {number}\n         */\n        this.dpr = dpr;\n    };\n\n    Layer.prototype = {\n\n        constructor: Layer,\n\n        elCount: 0,\n\n        __dirty: true,\n\n        initContext: function () {\n            this.ctx = this.dom.getContext('2d');\n\n            this.ctx.dpr = this.dpr;\n        },\n\n        createBackBuffer: function () {\n            var dpr = this.dpr;\n\n            this.domBack = createDom('back-' + this.id, 'canvas', this.painter, dpr);\n            this.ctxBack = this.domBack.getContext('2d');\n\n            if (dpr != 1) {\n                this.ctxBack.scale(dpr, dpr);\n            }\n        },\n\n        /**\n         * @param  {number} width\n         * @param  {number} height\n         */\n        resize: function (width, height) {\n            var dpr = this.dpr;\n\n            var dom = this.dom;\n            var domStyle = dom.style;\n            var domBack = this.domBack;\n\n            domStyle.width = width + 'px';\n            domStyle.height = height + 'px';\n\n            dom.width = width * dpr;\n            dom.height = height * dpr;\n\n            if (domBack) {\n                domBack.width = width * dpr;\n                domBack.height = height * dpr;\n\n                if (dpr != 1) {\n                    this.ctxBack.scale(dpr, dpr);\n                }\n            }\n        },\n\n        /**\n         * 清空该层画布\n         * @param {boolean} clearAll Clear all with out motion blur\n         */\n        clear: function (clearAll) {\n            var dom = this.dom;\n            var ctx = this.ctx;\n            var width = dom.width;\n            var height = dom.height;\n\n            var clearColor = this.clearColor;\n            var haveMotionBLur = this.motionBlur && !clearAll;\n            var lastFrameAlpha = this.lastFrameAlpha;\n\n            var dpr = this.dpr;\n\n            if (haveMotionBLur) {\n                if (!this.domBack) {\n                    this.createBackBuffer();\n                }\n\n                this.ctxBack.globalCompositeOperation = 'copy';\n                this.ctxBack.drawImage(\n                    dom, 0, 0,\n                    width / dpr,\n                    height / dpr\n                );\n            }\n\n            ctx.clearRect(0, 0, width, height);\n            if (clearColor) {\n                var clearColorGradientOrPattern;\n                // Gradient\n                if (clearColor.colorStops) {\n                    // Cache canvas gradient\n                    clearColorGradientOrPattern = clearColor.__canvasGradient || Style.getGradient(ctx, clearColor, {\n                        x: 0,\n                        y: 0,\n                        width: width,\n                        height: height\n                    });\n\n                    clearColor.__canvasGradient = clearColorGradientOrPattern;\n                }\n                // Pattern\n                else if (clearColor.image) {\n                    clearColorGradientOrPattern = Pattern.prototype.getCanvasPattern.call(clearColor, ctx);\n                }\n                ctx.save();\n                ctx.fillStyle = clearColorGradientOrPattern || clearColor;\n                ctx.fillRect(0, 0, width, height);\n                ctx.restore();\n            }\n\n            if (haveMotionBLur) {\n                var domBack = this.domBack;\n                ctx.save();\n                ctx.globalAlpha = lastFrameAlpha;\n                ctx.drawImage(domBack, 0, 0, width, height);\n                ctx.restore();\n            }\n        }\n    };\n\n    module.exports = Layer;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.5.1@zrender/lib/Layer.js\n// module id = jBAq\n// module chunks = 0 1","'use strict';\n\n\n    var zrUtil = require('zrender/lib/core/util');\n\n    var echartsAPIList = [\n        'getDom', 'getZr', 'getWidth', 'getHeight', 'getDevicePixelRatio', 'dispatchAction', 'isDisposed',\n        'on', 'off', 'getDataURL', 'getConnectedDataURL', 'getModel', 'getOption',\n        'getViewOfComponentModel', 'getViewOfSeriesModel'\n    ];\n    // And `getCoordinateSystems` and `getComponentByElement` will be injected in echarts.js\n\n    function ExtensionAPI(chartInstance) {\n        zrUtil.each(echartsAPIList, function (name) {\n            this[name] = zrUtil.bind(chartInstance[name], chartInstance);\n        }, this);\n    }\n\n    module.exports = ExtensionAPI;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.6.1@echarts/lib/ExtensionAPI.js\n// module id = jTvm\n// module chunks = 0 1","/**\n * 缓动代码来自 https://github.com/sole/tween.js/blob/master/src/Tween.js\n * @see http://sole.github.io/tween.js/examples/03_graphs.html\n * @exports zrender/animation/easing\n */\n\n    var easing = {\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        linear: function (k) {\n            return k;\n        },\n\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        quadraticIn: function (k) {\n            return k * k;\n        },\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        quadraticOut: function (k) {\n            return k * (2 - k);\n        },\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        quadraticInOut: function (k) {\n            if ((k *= 2) < 1) {\n                return 0.5 * k * k;\n            }\n            return -0.5 * (--k * (k - 2) - 1);\n        },\n\n        // 三次方的缓动（t^3）\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        cubicIn: function (k) {\n            return k * k * k;\n        },\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        cubicOut: function (k) {\n            return --k * k * k + 1;\n        },\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        cubicInOut: function (k) {\n            if ((k *= 2) < 1) {\n                return 0.5 * k * k * k;\n            }\n            return 0.5 * ((k -= 2) * k * k + 2);\n        },\n\n        // 四次方的缓动（t^4）\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        quarticIn: function (k) {\n            return k * k * k * k;\n        },\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        quarticOut: function (k) {\n            return 1 - (--k * k * k * k);\n        },\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        quarticInOut: function (k) {\n            if ((k *= 2) < 1) {\n                return 0.5 * k * k * k * k;\n            }\n            return -0.5 * ((k -= 2) * k * k * k - 2);\n        },\n\n        // 五次方的缓动（t^5）\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        quinticIn: function (k) {\n            return k * k * k * k * k;\n        },\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        quinticOut: function (k) {\n            return --k * k * k * k * k + 1;\n        },\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        quinticInOut: function (k) {\n            if ((k *= 2) < 1) {\n                return 0.5 * k * k * k * k * k;\n            }\n            return 0.5 * ((k -= 2) * k * k * k * k + 2);\n        },\n\n        // 正弦曲线的缓动（sin(t)）\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        sinusoidalIn: function (k) {\n            return 1 - Math.cos(k * Math.PI / 2);\n        },\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        sinusoidalOut: function (k) {\n            return Math.sin(k * Math.PI / 2);\n        },\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        sinusoidalInOut: function (k) {\n            return 0.5 * (1 - Math.cos(Math.PI * k));\n        },\n\n        // 指数曲线的缓动（2^t）\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        exponentialIn: function (k) {\n            return k === 0 ? 0 : Math.pow(1024, k - 1);\n        },\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        exponentialOut: function (k) {\n            return k === 1 ? 1 : 1 - Math.pow(2, -10 * k);\n        },\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        exponentialInOut: function (k) {\n            if (k === 0) {\n                return 0;\n            }\n            if (k === 1) {\n                return 1;\n            }\n            if ((k *= 2) < 1) {\n                return 0.5 * Math.pow(1024, k - 1);\n            }\n            return 0.5 * (-Math.pow(2, -10 * (k - 1)) + 2);\n        },\n\n        // 圆形曲线的缓动（sqrt(1-t^2)）\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        circularIn: function (k) {\n            return 1 - Math.sqrt(1 - k * k);\n        },\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        circularOut: function (k) {\n            return Math.sqrt(1 - (--k * k));\n        },\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        circularInOut: function (k) {\n            if ((k *= 2) < 1) {\n                return -0.5 * (Math.sqrt(1 - k * k) - 1);\n            }\n            return 0.5 * (Math.sqrt(1 - (k -= 2) * k) + 1);\n        },\n\n        // 创建类似于弹簧在停止前来回振荡的动画\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        elasticIn: function (k) {\n            var s;\n            var a = 0.1;\n            var p = 0.4;\n            if (k === 0) {\n                return 0;\n            }\n            if (k === 1) {\n                return 1;\n            }\n            if (!a || a < 1) {\n                a = 1; s = p / 4;\n            }\n            else {\n                s = p * Math.asin(1 / a) / (2 * Math.PI);\n            }\n            return -(a * Math.pow(2, 10 * (k -= 1)) *\n                        Math.sin((k - s) * (2 * Math.PI) / p));\n        },\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        elasticOut: function (k) {\n            var s;\n            var a = 0.1;\n            var p = 0.4;\n            if (k === 0) {\n                return 0;\n            }\n            if (k === 1) {\n                return 1;\n            }\n            if (!a || a < 1) {\n                a = 1; s = p / 4;\n            }\n            else {\n                s = p * Math.asin(1 / a) / (2 * Math.PI);\n            }\n            return (a * Math.pow(2, -10 * k) *\n                    Math.sin((k - s) * (2 * Math.PI) / p) + 1);\n        },\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        elasticInOut: function (k) {\n            var s;\n            var a = 0.1;\n            var p = 0.4;\n            if (k === 0) {\n                return 0;\n            }\n            if (k === 1) {\n                return 1;\n            }\n            if (!a || a < 1) {\n                a = 1; s = p / 4;\n            }\n            else {\n                s = p * Math.asin(1 / a) / (2 * Math.PI);\n            }\n            if ((k *= 2) < 1) {\n                return -0.5 * (a * Math.pow(2, 10 * (k -= 1))\n                    * Math.sin((k - s) * (2 * Math.PI) / p));\n            }\n            return a * Math.pow(2, -10 * (k -= 1))\n                    * Math.sin((k - s) * (2 * Math.PI) / p) * 0.5 + 1;\n\n        },\n\n        // 在某一动画开始沿指示的路径进行动画处理前稍稍收回该动画的移动\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        backIn: function (k) {\n            var s = 1.70158;\n            return k * k * ((s + 1) * k - s);\n        },\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        backOut: function (k) {\n            var s = 1.70158;\n            return --k * k * ((s + 1) * k + s) + 1;\n        },\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        backInOut: function (k) {\n            var s = 1.70158 * 1.525;\n            if ((k *= 2) < 1) {\n                return 0.5 * (k * k * ((s + 1) * k - s));\n            }\n            return 0.5 * ((k -= 2) * k * ((s + 1) * k + s) + 2);\n        },\n\n        // 创建弹跳效果\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        bounceIn: function (k) {\n            return 1 - easing.bounceOut(1 - k);\n        },\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        bounceOut: function (k) {\n            if (k < (1 / 2.75)) {\n                return 7.5625 * k * k;\n            }\n            else if (k < (2 / 2.75)) {\n                return 7.5625 * (k -= (1.5 / 2.75)) * k + 0.75;\n            }\n            else if (k < (2.5 / 2.75)) {\n                return 7.5625 * (k -= (2.25 / 2.75)) * k + 0.9375;\n            }\n            else {\n                return 7.5625 * (k -= (2.625 / 2.75)) * k + 0.984375;\n            }\n        },\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        bounceInOut: function (k) {\n            if (k < 0.5) {\n                return easing.bounceIn(k * 2) * 0.5;\n            }\n            return easing.bounceOut(k * 2 - 1) * 0.5 + 0.5;\n        }\n    };\n\n    module.exports = easing;\n\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.5.1@zrender/lib/animation/easing.js\n// module id = kQ9+\n// module chunks = 0 1","'use strict';\n/**\n * 事件辅助类\n * @module zrender/core/event\n * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)\n */\n\n\n    var Eventful = require('../mixin/Eventful');\n    var env = require('./env');\n\n    var isDomLevel2 = (typeof window !== 'undefined') && !!window.addEventListener;\n\n    function getBoundingClientRect(el) {\n        // BlackBerry 5, iOS 3 (original iPhone) don't have getBoundingRect\n        return el.getBoundingClientRect ? el.getBoundingClientRect() : {left: 0, top: 0};\n    }\n\n    // `calculate` is optional, default false\n    function clientToLocal(el, e, out, calculate) {\n        out = out || {};\n\n        // According to the W3C Working Draft, offsetX and offsetY should be relative\n        // to the padding edge of the target element. The only browser using this convention\n        // is IE. Webkit uses the border edge, Opera uses the content edge, and FireFox does\n        // not support the properties.\n        // (see http://www.jacklmoore.com/notes/mouse-position/)\n        // In zr painter.dom, padding edge equals to border edge.\n\n        // FIXME\n        // When mousemove event triggered on ec tooltip, target is not zr painter.dom, and\n        // offsetX/Y is relative to e.target, where the calculation of zrX/Y via offsetX/Y\n        // is too complex. So css-transfrom dont support in this case temporarily.\n        if (calculate || !env.canvasSupported) {\n            defaultGetZrXY(el, e, out);\n        }\n        // Caution: In FireFox, layerX/layerY Mouse position relative to the closest positioned\n        // ancestor element, so we should make sure el is positioned (e.g., not position:static).\n        // BTW1, Webkit don't return the same results as FF in non-simple cases (like add\n        // zoom-factor, overflow / opacity layers, transforms ...)\n        // BTW2, (ev.offsetY || ev.pageY - $(ev.target).offset().top) is not correct in preserve-3d.\n        // <https://bugs.jquery.com/ticket/8523#comment:14>\n        // BTW3, In ff, offsetX/offsetY is always 0.\n        else if (env.browser.firefox && e.layerX != null && e.layerX !== e.offsetX) {\n            out.zrX = e.layerX;\n            out.zrY = e.layerY;\n        }\n        // For IE6+, chrome, safari, opera. (When will ff support offsetX?)\n        else if (e.offsetX != null) {\n            out.zrX = e.offsetX;\n            out.zrY = e.offsetY;\n        }\n        // For some other device, e.g., IOS safari.\n        else {\n            defaultGetZrXY(el, e, out);\n        }\n\n        return out;\n    }\n\n    function defaultGetZrXY(el, e, out) {\n        // This well-known method below does not support css transform.\n        var box = getBoundingClientRect(el);\n        out.zrX = e.clientX - box.left;\n        out.zrY = e.clientY - box.top;\n    }\n\n    /**\n     * 如果存在第三方嵌入的一些dom触发的事件，或touch事件，需要转换一下事件坐标.\n     * `calculate` is optional, default false.\n     */\n    function normalizeEvent(el, e, calculate) {\n\n        e = e || window.event;\n\n        if (e.zrX != null) {\n            return e;\n        }\n\n        var eventType = e.type;\n        var isTouch = eventType && eventType.indexOf('touch') >= 0;\n\n        if (!isTouch) {\n            clientToLocal(el, e, e, calculate);\n            e.zrDelta = (e.wheelDelta) ? e.wheelDelta / 120 : -(e.detail || 0) / 3;\n        }\n        else {\n            var touch = eventType != 'touchend'\n                ? e.targetTouches[0]\n                : e.changedTouches[0];\n            touch && clientToLocal(el, touch, e, calculate);\n        }\n\n        return e;\n    }\n\n    function addEventListener(el, name, handler) {\n        if (isDomLevel2) {\n            el.addEventListener(name, handler);\n        }\n        else {\n            el.attachEvent('on' + name, handler);\n        }\n    }\n\n    function removeEventListener(el, name, handler) {\n        if (isDomLevel2) {\n            el.removeEventListener(name, handler);\n        }\n        else {\n            el.detachEvent('on' + name, handler);\n        }\n    }\n\n    /**\n     * preventDefault and stopPropagation.\n     * Notice: do not do that in zrender. Upper application\n     * do that if necessary.\n     *\n     * @memberOf module:zrender/core/event\n     * @method\n     * @param {Event} e : event对象\n     */\n    var stop = isDomLevel2\n        ? function (e) {\n            e.preventDefault();\n            e.stopPropagation();\n            e.cancelBubble = true;\n        }\n        : function (e) {\n            e.returnValue = false;\n            e.cancelBubble = true;\n        };\n\n    module.exports = {\n        clientToLocal: clientToLocal,\n        normalizeEvent: normalizeEvent,\n        addEventListener: addEventListener,\n        removeEventListener: removeEventListener,\n\n        stop: stop,\n        // 做向上兼容\n        Dispatcher: Eventful\n    };\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.5.1@zrender/lib/core/event.js\n// module id = kawL\n// module chunks = 0 1","\n\n    module.exports = function (seriesType, defaultSymbolType, legendSymbol, ecModel, api) {\n\n        // Encoding visual for all series include which is filtered for legend drawing\n        ecModel.eachRawSeriesByType(seriesType, function (seriesModel) {\n            var data = seriesModel.getData();\n\n            var symbolType = seriesModel.get('symbol') || defaultSymbolType;\n            var symbolSize = seriesModel.get('symbolSize');\n\n            data.setVisual({\n                legendSymbol: legendSymbol || symbolType,\n                symbol: symbolType,\n                symbolSize: symbolSize\n            });\n\n            // Only visible series has each data be visual encoded\n            if (!ecModel.isSeriesFiltered(seriesModel)) {\n                if (typeof symbolSize === 'function') {\n                    data.each(function (idx) {\n                        var rawValue = seriesModel.getRawValue(idx);\n                        // FIXME\n                        var params = seriesModel.getDataParams(idx);\n                        data.setItemVisual(idx, 'symbolSize', symbolSize(rawValue, params));\n                    });\n                }\n                data.each(function (idx) {\n                    var itemModel = data.getItemModel(idx);\n                    var itemSymbolType = itemModel.getShallow('symbol', true);\n                    var itemSymbolSize = itemModel.getShallow('symbolSize', true);\n                    // If has item symbol\n                    if (itemSymbolType != null) {\n                        data.setItemVisual(idx, 'symbol', itemSymbolType);\n                    }\n                    if (itemSymbolSize != null) {\n                        // PENDING Transform symbolSize ?\n                        data.setItemVisual(idx, 'symbolSize', itemSymbolSize);\n                    }\n                });\n            }\n        });\n    };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.6.1@echarts/lib/visual/symbol.js\n// module id = kwh2\n// module chunks = 0 1","'use strict';\n\n\n    var ComponentModel = require('../../model/Component');\n    var zrUtil = require('zrender/lib/core/util');\n    var axisModelCreator = require('../axisModelCreator');\n\n    var AxisModel = ComponentModel.extend({\n\n        type: 'cartesian2dAxis',\n\n        /**\n         * @type {module:echarts/coord/cartesian/Axis2D}\n         */\n        axis: null,\n\n        /**\n         * @override\n         */\n        init: function () {\n            AxisModel.superApply(this, 'init', arguments);\n            this.resetRange();\n        },\n\n        /**\n         * @override\n         */\n        mergeOption: function () {\n            AxisModel.superApply(this, 'mergeOption', arguments);\n            this.resetRange();\n        },\n\n        /**\n         * @override\n         */\n        restoreData: function () {\n            AxisModel.superApply(this, 'restoreData', arguments);\n            this.resetRange();\n        },\n\n        /**\n         * @override\n         * @return {module:echarts/model/Component}\n         */\n        getCoordSysModel: function () {\n            return this.ecModel.queryComponents({\n                mainType: 'grid',\n                index: this.option.gridIndex,\n                id: this.option.gridId\n            })[0];\n        }\n\n    });\n\n    function getAxisType(axisDim, option) {\n        // Default axis with data is category axis\n        return option.type || (option.data ? 'category' : 'value');\n    }\n\n    zrUtil.merge(AxisModel.prototype, require('../axisModelCommonMixin'));\n\n    var extraOption = {\n        // gridIndex: 0,\n        // gridId: '',\n\n        // Offset is for multiple axis on the same position\n        offset: 0\n    };\n\n    axisModelCreator('x', AxisModel, getAxisType, extraOption);\n    axisModelCreator('y', AxisModel, getAxisType, extraOption);\n\n    module.exports = AxisModel;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.6.1@echarts/lib/coord/cartesian/AxisModel.js\n// module id = lzeG\n// module chunks = 0 1","\n\n    var graphic = require('../../util/graphic');\n    var zrUtil = require('zrender/lib/core/util');\n\n    /**\n     * @param {module:echarts/model/Series} seriesModel\n     * @param {boolean} hasAnimation\n     * @inner\n     */\n    function updateDataSelected(uid, seriesModel, hasAnimation, api) {\n        var data = seriesModel.getData();\n        var dataIndex = this.dataIndex;\n        var name = data.getName(dataIndex);\n        var selectedOffset = seriesModel.get('selectedOffset');\n\n        api.dispatchAction({\n            type: 'pieToggleSelect',\n            from: uid,\n            name: name,\n            seriesId: seriesModel.id\n        });\n\n        data.each(function (idx) {\n            toggleItemSelected(\n                data.getItemGraphicEl(idx),\n                data.getItemLayout(idx),\n                seriesModel.isSelected(data.getName(idx)),\n                selectedOffset,\n                hasAnimation\n            );\n        });\n    }\n\n    /**\n     * @param {module:zrender/graphic/Sector} el\n     * @param {Object} layout\n     * @param {boolean} isSelected\n     * @param {number} selectedOffset\n     * @param {boolean} hasAnimation\n     * @inner\n     */\n    function toggleItemSelected(el, layout, isSelected, selectedOffset, hasAnimation) {\n        var midAngle = (layout.startAngle + layout.endAngle) / 2;\n\n        var dx = Math.cos(midAngle);\n        var dy = Math.sin(midAngle);\n\n        var offset = isSelected ? selectedOffset : 0;\n        var position = [dx * offset, dy * offset];\n\n        hasAnimation\n            // animateTo will stop revious animation like update transition\n            ? el.animate()\n                .when(200, {\n                    position: position\n                })\n                .start('bounceOut')\n            : el.attr('position', position);\n    }\n\n    /**\n     * Piece of pie including Sector, Label, LabelLine\n     * @constructor\n     * @extends {module:zrender/graphic/Group}\n     */\n    function PiePiece(data, idx) {\n\n        graphic.Group.call(this);\n\n        var sector = new graphic.Sector({\n            z2: 2\n        });\n        var polyline = new graphic.Polyline();\n        var text = new graphic.Text();\n        this.add(sector);\n        this.add(polyline);\n        this.add(text);\n\n        this.updateData(data, idx, true);\n\n        // Hover to change label and labelLine\n        function onEmphasis() {\n            polyline.ignore = polyline.hoverIgnore;\n            text.ignore = text.hoverIgnore;\n        }\n        function onNormal() {\n            polyline.ignore = polyline.normalIgnore;\n            text.ignore = text.normalIgnore;\n        }\n        this.on('emphasis', onEmphasis)\n            .on('normal', onNormal)\n            .on('mouseover', onEmphasis)\n            .on('mouseout', onNormal);\n    }\n\n    var piePieceProto = PiePiece.prototype;\n\n    function getLabelStyle(data, idx, state, labelModel, labelPosition) {\n        var textStyleModel = labelModel.getModel('textStyle');\n        var isLabelInside = labelPosition === 'inside' || labelPosition === 'inner';\n        return {\n            fill: textStyleModel.getTextColor()\n                || (isLabelInside ? '#fff' : data.getItemVisual(idx, 'color')),\n            opacity: data.getItemVisual(idx, 'opacity'),\n            textFont: textStyleModel.getFont(),\n            text: zrUtil.retrieve(\n                data.hostModel.getFormattedLabel(idx, state), data.getName(idx)\n            )\n        };\n    }\n\n    piePieceProto.updateData = function (data, idx, firstCreate) {\n\n        var sector = this.childAt(0);\n\n        var seriesModel = data.hostModel;\n        var itemModel = data.getItemModel(idx);\n        var layout = data.getItemLayout(idx);\n        var sectorShape = zrUtil.extend({}, layout);\n        sectorShape.label = null;\n\n        if (firstCreate) {\n            sector.setShape(sectorShape);\n\n            var animationType = seriesModel.getShallow('animationType');\n            if (animationType === 'scale') {\n                sector.shape.r = layout.r0;\n                graphic.initProps(sector, {\n                    shape: {\n                        r: layout.r\n                    }\n                }, seriesModel, idx);\n            }\n            // Expansion\n            else {\n                sector.shape.endAngle = layout.startAngle;\n                graphic.updateProps(sector, {\n                    shape: {\n                        endAngle: layout.endAngle\n                    }\n                }, seriesModel, idx);\n            }\n\n        }\n        else {\n            graphic.updateProps(sector, {\n                shape: sectorShape\n            }, seriesModel, idx);\n        }\n\n        // Update common style\n        var itemStyleModel = itemModel.getModel('itemStyle');\n        var visualColor = data.getItemVisual(idx, 'color');\n\n        sector.useStyle(\n            zrUtil.defaults(\n                {\n                    lineJoin: 'bevel',\n                    fill: visualColor\n                },\n                itemStyleModel.getModel('normal').getItemStyle()\n            )\n        );\n        sector.hoverStyle = itemStyleModel.getModel('emphasis').getItemStyle();\n\n        // Toggle selected\n        toggleItemSelected(\n            this,\n            data.getItemLayout(idx),\n            itemModel.get('selected'),\n            seriesModel.get('selectedOffset'),\n            seriesModel.get('animation')\n        );\n\n        function onEmphasis() {\n            // Sector may has animation of updating data. Force to move to the last frame\n            // Or it may stopped on the wrong shape\n            sector.stopAnimation(true);\n            sector.animateTo({\n                shape: {\n                    r: layout.r + 10\n                }\n            }, 300, 'elasticOut');\n        }\n        function onNormal() {\n            sector.stopAnimation(true);\n            sector.animateTo({\n                shape: {\n                    r: layout.r\n                }\n            }, 300, 'elasticOut');\n        }\n        sector.off('mouseover').off('mouseout').off('emphasis').off('normal');\n        if (itemModel.get('hoverAnimation') && seriesModel.isAnimationEnabled()) {\n            sector\n                .on('mouseover', onEmphasis)\n                .on('mouseout', onNormal)\n                .on('emphasis', onEmphasis)\n                .on('normal', onNormal);\n        }\n\n        this._updateLabel(data, idx);\n\n        graphic.setHoverStyle(this);\n    };\n\n    piePieceProto._updateLabel = function (data, idx) {\n\n        var labelLine = this.childAt(1);\n        var labelText = this.childAt(2);\n\n        var seriesModel = data.hostModel;\n        var itemModel = data.getItemModel(idx);\n        var layout = data.getItemLayout(idx);\n        var labelLayout = layout.label;\n        var visualColor = data.getItemVisual(idx, 'color');\n\n        graphic.updateProps(labelLine, {\n            shape: {\n                points: labelLayout.linePoints || [\n                    [labelLayout.x, labelLayout.y], [labelLayout.x, labelLayout.y], [labelLayout.x, labelLayout.y]\n                ]\n            }\n        }, seriesModel, idx);\n\n        graphic.updateProps(labelText, {\n            style: {\n                x: labelLayout.x,\n                y: labelLayout.y\n            }\n        }, seriesModel, idx);\n        labelText.attr({\n            style: {\n                textVerticalAlign: labelLayout.verticalAlign,\n                textAlign: labelLayout.textAlign,\n                textFont: labelLayout.font\n            },\n            rotation: labelLayout.rotation,\n            origin: [labelLayout.x, labelLayout.y],\n            z2: 10\n        });\n\n        var labelModel = itemModel.getModel('label.normal');\n        var labelHoverModel = itemModel.getModel('label.emphasis');\n        var labelLineModel = itemModel.getModel('labelLine.normal');\n        var labelLineHoverModel = itemModel.getModel('labelLine.emphasis');\n        var labelPosition = labelModel.get('position') || labelHoverModel.get('position');\n\n        labelText.setStyle(getLabelStyle(data, idx, 'normal', labelModel, labelPosition));\n\n        labelText.ignore = labelText.normalIgnore = !labelModel.get('show');\n        labelText.hoverIgnore = !labelHoverModel.get('show');\n\n        labelLine.ignore = labelLine.normalIgnore = !labelLineModel.get('show');\n        labelLine.hoverIgnore = !labelLineHoverModel.get('show');\n\n        // Default use item visual color\n        labelLine.setStyle({\n            stroke: visualColor,\n            opacity: data.getItemVisual(idx, 'opacity')\n        });\n        labelLine.setStyle(labelLineModel.getModel('lineStyle').getLineStyle());\n\n        labelText.hoverStyle = getLabelStyle(data, idx, 'emphasis', labelHoverModel, labelPosition);\n        labelLine.hoverStyle = labelLineHoverModel.getModel('lineStyle').getLineStyle();\n\n        var smooth = labelLineModel.get('smooth');\n        if (smooth && smooth === true) {\n            smooth = 0.4;\n        }\n        labelLine.setShape({\n            smooth: smooth\n        });\n    };\n\n    zrUtil.inherits(PiePiece, graphic.Group);\n\n\n    // Pie view\n    var Pie = require('../../view/Chart').extend({\n\n        type: 'pie',\n\n        init: function () {\n            var sectorGroup = new graphic.Group();\n            this._sectorGroup = sectorGroup;\n        },\n\n        render: function (seriesModel, ecModel, api, payload) {\n            if (payload && (payload.from === this.uid)) {\n                return;\n            }\n\n            var data = seriesModel.getData();\n            var oldData = this._data;\n            var group = this.group;\n\n            var hasAnimation = ecModel.get('animation');\n            var isFirstRender = !oldData;\n            var animationType = seriesModel.get('animationType');\n\n            var onSectorClick = zrUtil.curry(\n                updateDataSelected, this.uid, seriesModel, hasAnimation, api\n            );\n\n            var selectedMode = seriesModel.get('selectedMode');\n\n            data.diff(oldData)\n                .add(function (idx) {\n                    var piePiece = new PiePiece(data, idx);\n                    // Default expansion animation\n                    if (isFirstRender && animationType !== 'scale') {\n                        piePiece.eachChild(function (child) {\n                            child.stopAnimation(true);\n                        });\n                    }\n\n                    selectedMode && piePiece.on('click', onSectorClick);\n\n                    data.setItemGraphicEl(idx, piePiece);\n\n                    group.add(piePiece);\n                })\n                .update(function (newIdx, oldIdx) {\n                    var piePiece = oldData.getItemGraphicEl(oldIdx);\n\n                    piePiece.updateData(data, newIdx);\n\n                    piePiece.off('click');\n                    selectedMode && piePiece.on('click', onSectorClick);\n                    group.add(piePiece);\n                    data.setItemGraphicEl(newIdx, piePiece);\n                })\n                .remove(function (idx) {\n                    var piePiece = oldData.getItemGraphicEl(idx);\n                    group.remove(piePiece);\n                })\n                .execute();\n\n            if (\n                hasAnimation && isFirstRender && data.count() > 0\n                // Default expansion animation\n                && animationType !== 'scale'\n            ) {\n                var shape = data.getItemLayout(0);\n                var r = Math.max(api.getWidth(), api.getHeight()) / 2;\n\n                var removeClipPath = zrUtil.bind(group.removeClipPath, group);\n                group.setClipPath(this._createClipPath(\n                    shape.cx, shape.cy, r, shape.startAngle, shape.clockwise, removeClipPath, seriesModel\n                ));\n            }\n\n            this._data = data;\n        },\n\n        dispose: function () {},\n\n        _createClipPath: function (\n            cx, cy, r, startAngle, clockwise, cb, seriesModel\n        ) {\n            var clipPath = new graphic.Sector({\n                shape: {\n                    cx: cx,\n                    cy: cy,\n                    r0: 0,\n                    r: r,\n                    startAngle: startAngle,\n                    endAngle: startAngle,\n                    clockwise: clockwise\n                }\n            });\n\n            graphic.initProps(clipPath, {\n                shape: {\n                    endAngle: startAngle + (clockwise ? 1 : -1) * Math.PI * 2\n                }\n            }, seriesModel, cb);\n\n            return clipPath;\n        },\n\n        /**\n         * @implement\n         */\n        containPoint: function (point, seriesModel) {\n            var data = seriesModel.getData();\n            var itemLayout = data.getItemLayout(0);\n            if (itemLayout) {\n                var dx = point[0] - itemLayout.cx;\n                var dy = point[1] - itemLayout.cy;\n                var radius = Math.sqrt(dx * dx + dy * dy);\n                return radius <= itemLayout.r && radius >= itemLayout.r0;\n            }\n        }\n\n    });\n\n    module.exports = Pie;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.6.1@echarts/lib/chart/pie/PieView.js\n// module id = n/gz\n// module chunks = 0 1","/**\n * @file History manager.\n */\n\n\n    var zrUtil = require('zrender/lib/core/util');\n    var each = zrUtil.each;\n\n    var ATTR = '\\0_ec_hist_store';\n\n    var history = {\n\n        /**\n         * @public\n         * @param {module:echarts/model/Global} ecModel\n         * @param {Object} newSnapshot {dataZoomId, batch: [payloadInfo, ...]}\n         */\n        push: function (ecModel, newSnapshot) {\n            var store = giveStore(ecModel);\n\n            // If previous dataZoom can not be found,\n            // complete an range with current range.\n            each(newSnapshot, function (batchItem, dataZoomId) {\n                var i = store.length - 1;\n                for (; i >= 0; i--) {\n                    var snapshot = store[i];\n                    if (snapshot[dataZoomId]) {\n                        break;\n                    }\n                }\n                if (i < 0) {\n                    // No origin range set, create one by current range.\n                    var dataZoomModel = ecModel.queryComponents(\n                        {mainType: 'dataZoom', subType: 'select', id: dataZoomId}\n                    )[0];\n                    if (dataZoomModel) {\n                        var percentRange = dataZoomModel.getPercentRange();\n                        store[0][dataZoomId] = {\n                            dataZoomId: dataZoomId,\n                            start: percentRange[0],\n                            end: percentRange[1]\n                        };\n                    }\n                }\n            });\n\n            store.push(newSnapshot);\n        },\n\n        /**\n         * @public\n         * @param {module:echarts/model/Global} ecModel\n         * @return {Object} snapshot\n         */\n        pop: function (ecModel) {\n            var store = giveStore(ecModel);\n            var head = store[store.length - 1];\n            store.length > 1 && store.pop();\n\n            // Find top for all dataZoom.\n            var snapshot = {};\n            each(head, function (batchItem, dataZoomId) {\n                for (var i = store.length - 1; i >= 0; i--) {\n                    var batchItem = store[i][dataZoomId];\n                    if (batchItem) {\n                        snapshot[dataZoomId] = batchItem;\n                        break;\n                    }\n                }\n            });\n\n            return snapshot;\n        },\n\n        /**\n         * @public\n         */\n        clear: function (ecModel) {\n            ecModel[ATTR] = null;\n        },\n\n        /**\n         * @public\n         * @param {module:echarts/model/Global} ecModel\n         * @return {number} records. always >= 1.\n         */\n        count: function (ecModel) {\n            return giveStore(ecModel).length;\n        }\n\n    };\n\n    /**\n     * [{key: dataZoomId, value: {dataZoomId, range}}, ...]\n     * History length of each dataZoom may be different.\n     * this._history[0] is used to store origin range.\n     * @type {Array.<Object>}\n     */\n    function giveStore(ecModel) {\n        var store = ecModel[ATTR];\n        if (!store) {\n            store = ecModel[ATTR] = [{}];\n        }\n        return store;\n    }\n\n    module.exports = history;\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.6.1@echarts/lib/component/dataZoom/history.js\n// module id = nXqQ\n// module chunks = 0 1","'use strict';\n// FIXME step not support polar\n\n\n    var zrUtil = require('zrender/lib/core/util');\n    var SymbolDraw = require('../helper/SymbolDraw');\n    var Symbol = require('../helper/Symbol');\n    var lineAnimationDiff = require('./lineAnimationDiff');\n    var graphic = require('../../util/graphic');\n    var modelUtil = require('../../util/model');\n    var polyHelper = require('./poly');\n    var ChartView = require('../../view/Chart');\n\n    function isPointsSame(points1, points2) {\n        if (points1.length !== points2.length) {\n            return;\n        }\n        for (var i = 0; i < points1.length; i++) {\n            var p1 = points1[i];\n            var p2 = points2[i];\n            if (p1[0] !== p2[0] || p1[1] !== p2[1]) {\n                return;\n            }\n        }\n        return true;\n    }\n\n    function getSmooth(smooth) {\n        return typeof (smooth) === 'number' ? smooth : (smooth ? 0.3 : 0);\n    }\n\n    function getAxisExtentWithGap(axis) {\n        var extent = axis.getGlobalExtent();\n        if (axis.onBand) {\n            // Remove extra 1px to avoid line miter in clipped edge\n            var halfBandWidth = axis.getBandWidth() / 2 - 1;\n            var dir = extent[1] > extent[0] ? 1 : -1;\n            extent[0] += dir * halfBandWidth;\n            extent[1] -= dir * halfBandWidth;\n        }\n        return extent;\n    }\n\n    function sign(val) {\n        return val >= 0 ? 1 : -1;\n    }\n    /**\n     * @param {module:echarts/coord/cartesian/Cartesian2D|module:echarts/coord/polar/Polar} coordSys\n     * @param {module:echarts/data/List} data\n     * @param {Array.<Array.<number>>} points\n     * @private\n     */\n    function getStackedOnPoints(coordSys, data) {\n        var baseAxis = coordSys.getBaseAxis();\n        var valueAxis = coordSys.getOtherAxis(baseAxis);\n        var valueStart = baseAxis.onZero\n            ? 0 : valueAxis.scale.getExtent()[0];\n\n        var valueDim = valueAxis.dim;\n\n        var baseDataOffset = valueDim === 'x' || valueDim === 'radius' ? 1 : 0;\n\n        return data.mapArray([valueDim], function (val, idx) {\n            var stackedOnSameSign;\n            var stackedOn = data.stackedOn;\n            // Find first stacked value with same sign\n            while (stackedOn &&\n                sign(stackedOn.get(valueDim, idx)) === sign(val)\n            ) {\n                stackedOnSameSign = stackedOn;\n                break;\n            }\n            var stackedData = [];\n            stackedData[baseDataOffset] = data.get(baseAxis.dim, idx);\n            stackedData[1 - baseDataOffset] = stackedOnSameSign\n                ? stackedOnSameSign.get(valueDim, idx, true) : valueStart;\n\n            return coordSys.dataToPoint(stackedData);\n        }, true);\n    }\n\n    function createGridClipShape(cartesian, hasAnimation, seriesModel) {\n        var xExtent = getAxisExtentWithGap(cartesian.getAxis('x'));\n        var yExtent = getAxisExtentWithGap(cartesian.getAxis('y'));\n        var isHorizontal = cartesian.getBaseAxis().isHorizontal();\n\n        var x = Math.min(xExtent[0], xExtent[1]);\n        var y = Math.min(yExtent[0], yExtent[1]);\n        var width = Math.max(xExtent[0], xExtent[1]) - x;\n        var height = Math.max(yExtent[0], yExtent[1]) - y;\n        var lineWidth = seriesModel.get('lineStyle.normal.width') || 2;\n        // Expand clip shape to avoid clipping when line value exceeds axis\n        var expandSize = seriesModel.get('clipOverflow') ? lineWidth / 2 : Math.max(width, height);\n        if (isHorizontal) {\n            y -= expandSize;\n            height += expandSize * 2;\n        }\n        else {\n            x -= expandSize;\n            width += expandSize * 2;\n        }\n\n        var clipPath = new graphic.Rect({\n            shape: {\n                x: x,\n                y: y,\n                width: width,\n                height: height\n            }\n        });\n\n        if (hasAnimation) {\n            clipPath.shape[isHorizontal ? 'width' : 'height'] = 0;\n            graphic.initProps(clipPath, {\n                shape: {\n                    width: width,\n                    height: height\n                }\n            }, seriesModel);\n        }\n\n        return clipPath;\n    }\n\n    function createPolarClipShape(polar, hasAnimation, seriesModel) {\n        var angleAxis = polar.getAngleAxis();\n        var radiusAxis = polar.getRadiusAxis();\n\n        var radiusExtent = radiusAxis.getExtent();\n        var angleExtent = angleAxis.getExtent();\n\n        var RADIAN = Math.PI / 180;\n\n        var clipPath = new graphic.Sector({\n            shape: {\n                cx: polar.cx,\n                cy: polar.cy,\n                r0: radiusExtent[0],\n                r: radiusExtent[1],\n                startAngle: -angleExtent[0] * RADIAN,\n                endAngle: -angleExtent[1] * RADIAN,\n                clockwise: angleAxis.inverse\n            }\n        });\n\n        if (hasAnimation) {\n            clipPath.shape.endAngle = -angleExtent[0] * RADIAN;\n            graphic.initProps(clipPath, {\n                shape: {\n                    endAngle: -angleExtent[1] * RADIAN\n                }\n            }, seriesModel);\n        }\n\n        return clipPath;\n    }\n\n    function createClipShape(coordSys, hasAnimation, seriesModel) {\n        return coordSys.type === 'polar'\n            ? createPolarClipShape(coordSys, hasAnimation, seriesModel)\n            : createGridClipShape(coordSys, hasAnimation, seriesModel);\n    }\n\n    function turnPointsIntoStep(points, coordSys, stepTurnAt) {\n        var baseAxis = coordSys.getBaseAxis();\n        var baseIndex = baseAxis.dim === 'x' || baseAxis.dim === 'radius' ? 0 : 1;\n\n        var stepPoints = [];\n        for (var i = 0; i < points.length - 1; i++) {\n            var nextPt = points[i + 1];\n            var pt = points[i];\n            stepPoints.push(pt);\n\n            var stepPt = [];\n            switch (stepTurnAt) {\n                case 'end':\n                    stepPt[baseIndex] = nextPt[baseIndex];\n                    stepPt[1 - baseIndex] = pt[1 - baseIndex];\n                    // default is start\n                    stepPoints.push(stepPt);\n                    break;\n                case 'middle':\n                    // default is start\n                    var middle = (pt[baseIndex] + nextPt[baseIndex]) / 2;\n                    var stepPt2 = [];\n                    stepPt[baseIndex] = stepPt2[baseIndex] = middle;\n                    stepPt[1 - baseIndex] = pt[1 - baseIndex];\n                    stepPt2[1 - baseIndex] = nextPt[1 - baseIndex];\n                    stepPoints.push(stepPt);\n                    stepPoints.push(stepPt2);\n                    break;\n                default:\n                    stepPt[baseIndex] = pt[baseIndex];\n                    stepPt[1 - baseIndex] = nextPt[1 - baseIndex];\n                    // default is start\n                    stepPoints.push(stepPt);\n            }\n        }\n        // Last points\n        points[i] && stepPoints.push(points[i]);\n        return stepPoints;\n    }\n\n    function getVisualGradient(data, coordSys) {\n        var visualMetaList = data.getVisual('visualMeta');\n        if (!visualMetaList || !visualMetaList.length || !data.count()) {\n            // When data.count() is 0, gradient range can not be calculated.\n            return;\n        }\n\n        var visualMeta;\n        for (var i = visualMetaList.length - 1; i >= 0; i--) {\n            // Can only be x or y\n            if (visualMetaList[i].dimension < 2) {\n                visualMeta = visualMetaList[i];\n                break;\n            }\n        }\n        if (!visualMeta || coordSys.type !== 'cartesian2d') {\n            if (__DEV__) {\n                console.warn('Visual map on line style only support x or y dimension.');\n            }\n            return;\n        }\n\n        // If the area to be rendered is bigger than area defined by LinearGradient,\n        // the canvas spec prescribes that the color of the first stop and the last\n        // stop should be used. But if two stops are added at offset 0, in effect\n        // browsers use the color of the second stop to render area outside\n        // LinearGradient. So we can only infinitesimally extend area defined in\n        // LinearGradient to render `outerColors`.\n\n        var dimension = visualMeta.dimension;\n        var dimName = data.dimensions[dimension];\n        var axis = coordSys.getAxis(dimName);\n\n        // dataToCoor mapping may not be linear, but must be monotonic.\n        var colorStops = zrUtil.map(visualMeta.stops, function (stop) {\n            return {\n                coord: axis.toGlobalCoord(axis.dataToCoord(stop.value)),\n                color: stop.color\n            };\n        });\n        var stopLen = colorStops.length;\n        var outerColors = visualMeta.outerColors.slice();\n\n        if (stopLen && colorStops[0].coord > colorStops[stopLen - 1].coord) {\n            colorStops.reverse();\n            outerColors.reverse();\n        }\n\n        var tinyExtent = 10; // Arbitrary value: 10px\n        var minCoord = colorStops[0].coord - tinyExtent;\n        var maxCoord = colorStops[stopLen - 1].coord + tinyExtent;\n        var coordSpan = maxCoord - minCoord;\n\n        if (coordSpan < 1e-3) {\n            return 'transparent';\n        }\n\n        zrUtil.each(colorStops, function (stop) {\n            stop.offset = (stop.coord - minCoord) / coordSpan;\n        });\n        colorStops.push({\n            offset: stopLen ? colorStops[stopLen - 1].offset : 0.5,\n            color: outerColors[1] || 'transparent'\n        });\n        colorStops.unshift({ // notice colorStops.length have been changed.\n            offset: stopLen ? colorStops[0].offset : 0.5,\n            color: outerColors[0] || 'transparent'\n        });\n\n        // zrUtil.each(colorStops, function (colorStop) {\n        //     // Make sure each offset has rounded px to avoid not sharp edge\n        //     colorStop.offset = (Math.round(colorStop.offset * (end - start) + start) - start) / (end - start);\n        // });\n\n        var gradient = new graphic.LinearGradient(0, 0, 0, 0, colorStops, true);\n        gradient[dimName] = minCoord;\n        gradient[dimName + '2'] = maxCoord;\n\n        return gradient;\n    }\n\n    module.exports = ChartView.extend({\n\n        type: 'line',\n\n        init: function () {\n            var lineGroup = new graphic.Group();\n\n            var symbolDraw = new SymbolDraw();\n            this.group.add(symbolDraw.group);\n\n            this._symbolDraw = symbolDraw;\n            this._lineGroup = lineGroup;\n        },\n\n        render: function (seriesModel, ecModel, api) {\n            var coordSys = seriesModel.coordinateSystem;\n            var group = this.group;\n            var data = seriesModel.getData();\n            var lineStyleModel = seriesModel.getModel('lineStyle.normal');\n            var areaStyleModel = seriesModel.getModel('areaStyle.normal');\n\n            var points = data.mapArray(data.getItemLayout, true);\n\n            var isCoordSysPolar = coordSys.type === 'polar';\n            var prevCoordSys = this._coordSys;\n\n            var symbolDraw = this._symbolDraw;\n            var polyline = this._polyline;\n            var polygon = this._polygon;\n\n            var lineGroup = this._lineGroup;\n\n            var hasAnimation = seriesModel.get('animation');\n\n            var isAreaChart = !areaStyleModel.isEmpty();\n            var stackedOnPoints = getStackedOnPoints(coordSys, data);\n\n            var showSymbol = seriesModel.get('showSymbol');\n\n            var isSymbolIgnore = showSymbol && !isCoordSysPolar && !seriesModel.get('showAllSymbol')\n                && this._getSymbolIgnoreFunc(data, coordSys);\n\n            // Remove temporary symbols\n            var oldData = this._data;\n            oldData && oldData.eachItemGraphicEl(function (el, idx) {\n                if (el.__temp) {\n                    group.remove(el);\n                    oldData.setItemGraphicEl(idx, null);\n                }\n            });\n\n            // Remove previous created symbols if showSymbol changed to false\n            if (!showSymbol) {\n                symbolDraw.remove();\n            }\n\n            group.add(lineGroup);\n\n            // FIXME step not support polar\n            var step = !isCoordSysPolar && seriesModel.get('step');\n            // Initialization animation or coordinate system changed\n            if (\n                !(polyline && prevCoordSys.type === coordSys.type && step === this._step)\n            ) {\n                showSymbol && symbolDraw.updateData(data, isSymbolIgnore);\n\n                if (step) {\n                    // TODO If stacked series is not step\n                    points = turnPointsIntoStep(points, coordSys, step);\n                    stackedOnPoints = turnPointsIntoStep(stackedOnPoints, coordSys, step);\n                }\n\n                polyline = this._newPolyline(points, coordSys, hasAnimation);\n                if (isAreaChart) {\n                    polygon = this._newPolygon(\n                        points, stackedOnPoints,\n                        coordSys, hasAnimation\n                    );\n                }\n                lineGroup.setClipPath(createClipShape(coordSys, true, seriesModel));\n            }\n            else {\n                if (isAreaChart && !polygon) {\n                    // If areaStyle is added\n                    polygon = this._newPolygon(\n                        points, stackedOnPoints,\n                        coordSys, hasAnimation\n                    );\n                }\n                else if (polygon && !isAreaChart) {\n                    // If areaStyle is removed\n                    lineGroup.remove(polygon);\n                    polygon = this._polygon = null;\n                }\n\n                // Update clipPath\n                lineGroup.setClipPath(createClipShape(coordSys, false, seriesModel));\n\n                // Always update, or it is wrong in the case turning on legend\n                // because points are not changed\n                showSymbol && symbolDraw.updateData(data, isSymbolIgnore);\n\n                // Stop symbol animation and sync with line points\n                // FIXME performance?\n                data.eachItemGraphicEl(function (el) {\n                    el.stopAnimation(true);\n                });\n\n                // In the case data zoom triggerred refreshing frequently\n                // Data may not change if line has a category axis. So it should animate nothing\n                if (!isPointsSame(this._stackedOnPoints, stackedOnPoints)\n                    || !isPointsSame(this._points, points)\n                ) {\n                    if (hasAnimation) {\n                        this._updateAnimation(\n                            data, stackedOnPoints, coordSys, api, step\n                        );\n                    }\n                    else {\n                        // Not do it in update with animation\n                        if (step) {\n                            // TODO If stacked series is not step\n                            points = turnPointsIntoStep(points, coordSys, step);\n                            stackedOnPoints = turnPointsIntoStep(stackedOnPoints, coordSys, step);\n                        }\n\n                        polyline.setShape({\n                            points: points\n                        });\n                        polygon && polygon.setShape({\n                            points: points,\n                            stackedOnPoints: stackedOnPoints\n                        });\n                    }\n                }\n            }\n\n            var visualColor = getVisualGradient(data, coordSys) || data.getVisual('color');\n\n            polyline.useStyle(zrUtil.defaults(\n                // Use color in lineStyle first\n                lineStyleModel.getLineStyle(),\n                {\n                    fill: 'none',\n                    stroke: visualColor,\n                    lineJoin: 'bevel'\n                }\n            ));\n\n            var smooth = seriesModel.get('smooth');\n            smooth = getSmooth(seriesModel.get('smooth'));\n            polyline.setShape({\n                smooth: smooth,\n                smoothMonotone: seriesModel.get('smoothMonotone'),\n                connectNulls: seriesModel.get('connectNulls')\n            });\n\n            if (polygon) {\n                var stackedOn = data.stackedOn;\n                var stackedOnSmooth = 0;\n\n                polygon.useStyle(zrUtil.defaults(\n                    areaStyleModel.getAreaStyle(),\n                    {\n                        fill: visualColor,\n                        opacity: 0.7,\n                        lineJoin: 'bevel'\n                    }\n                ));\n\n                if (stackedOn) {\n                    var stackedOnSeries = stackedOn.hostModel;\n                    stackedOnSmooth = getSmooth(stackedOnSeries.get('smooth'));\n                }\n\n                polygon.setShape({\n                    smooth: smooth,\n                    stackedOnSmooth: stackedOnSmooth,\n                    smoothMonotone: seriesModel.get('smoothMonotone'),\n                    connectNulls: seriesModel.get('connectNulls')\n                });\n            }\n\n            this._data = data;\n            // Save the coordinate system for transition animation when data changed\n            this._coordSys = coordSys;\n            this._stackedOnPoints = stackedOnPoints;\n            this._points = points;\n            this._step = step;\n        },\n\n        dispose: function () {},\n\n        highlight: function (seriesModel, ecModel, api, payload) {\n            var data = seriesModel.getData();\n            var dataIndex = modelUtil.queryDataIndex(data, payload);\n\n            if (!(dataIndex instanceof Array) && dataIndex != null && dataIndex >= 0) {\n                var symbol = data.getItemGraphicEl(dataIndex);\n                if (!symbol) {\n                    // Create a temporary symbol if it is not exists\n                    var pt = data.getItemLayout(dataIndex);\n                    if (!pt) {\n                        // Null data\n                        return;\n                    }\n                    symbol = new Symbol(data, dataIndex);\n                    symbol.position = pt;\n                    symbol.setZ(\n                        seriesModel.get('zlevel'),\n                        seriesModel.get('z')\n                    );\n                    symbol.ignore = isNaN(pt[0]) || isNaN(pt[1]);\n                    symbol.__temp = true;\n                    data.setItemGraphicEl(dataIndex, symbol);\n\n                    // Stop scale animation\n                    symbol.stopSymbolAnimation(true);\n\n                    this.group.add(symbol);\n                }\n                symbol.highlight();\n            }\n            else {\n                // Highlight whole series\n                ChartView.prototype.highlight.call(\n                    this, seriesModel, ecModel, api, payload\n                );\n            }\n        },\n\n        downplay: function (seriesModel, ecModel, api, payload) {\n            var data = seriesModel.getData();\n            var dataIndex = modelUtil.queryDataIndex(data, payload);\n            if (dataIndex != null && dataIndex >= 0) {\n                var symbol = data.getItemGraphicEl(dataIndex);\n                if (symbol) {\n                    if (symbol.__temp) {\n                        data.setItemGraphicEl(dataIndex, null);\n                        this.group.remove(symbol);\n                    }\n                    else {\n                        symbol.downplay();\n                    }\n                }\n            }\n            else {\n                // FIXME\n                // can not downplay completely.\n                // Downplay whole series\n                ChartView.prototype.downplay.call(\n                    this, seriesModel, ecModel, api, payload\n                );\n            }\n        },\n\n        /**\n         * @param {module:zrender/container/Group} group\n         * @param {Array.<Array.<number>>} points\n         * @private\n         */\n        _newPolyline: function (points) {\n            var polyline = this._polyline;\n            // Remove previous created polyline\n            if (polyline) {\n                this._lineGroup.remove(polyline);\n            }\n\n            polyline = new polyHelper.Polyline({\n                shape: {\n                    points: points\n                },\n                silent: true,\n                z2: 10\n            });\n\n            this._lineGroup.add(polyline);\n\n            this._polyline = polyline;\n\n            return polyline;\n        },\n\n        /**\n         * @param {module:zrender/container/Group} group\n         * @param {Array.<Array.<number>>} stackedOnPoints\n         * @param {Array.<Array.<number>>} points\n         * @private\n         */\n        _newPolygon: function (points, stackedOnPoints) {\n            var polygon = this._polygon;\n            // Remove previous created polygon\n            if (polygon) {\n                this._lineGroup.remove(polygon);\n            }\n\n            polygon = new polyHelper.Polygon({\n                shape: {\n                    points: points,\n                    stackedOnPoints: stackedOnPoints\n                },\n                silent: true\n            });\n\n            this._lineGroup.add(polygon);\n\n            this._polygon = polygon;\n            return polygon;\n        },\n        /**\n         * @private\n         */\n        _getSymbolIgnoreFunc: function (data, coordSys) {\n            var categoryAxis = coordSys.getAxesByScale('ordinal')[0];\n            // `getLabelInterval` is provided by echarts/component/axis\n            if (categoryAxis && categoryAxis.isLabelIgnored) {\n                return zrUtil.bind(categoryAxis.isLabelIgnored, categoryAxis);\n            }\n        },\n\n        /**\n         * @private\n         */\n        // FIXME Two value axis\n        _updateAnimation: function (data, stackedOnPoints, coordSys, api, step) {\n            var polyline = this._polyline;\n            var polygon = this._polygon;\n            var seriesModel = data.hostModel;\n\n            var diff = lineAnimationDiff(\n                this._data, data,\n                this._stackedOnPoints, stackedOnPoints,\n                this._coordSys, coordSys\n            );\n\n            var current = diff.current;\n            var stackedOnCurrent = diff.stackedOnCurrent;\n            var next = diff.next;\n            var stackedOnNext = diff.stackedOnNext;\n            if (step) {\n                // TODO If stacked series is not step\n                current = turnPointsIntoStep(diff.current, coordSys, step);\n                stackedOnCurrent = turnPointsIntoStep(diff.stackedOnCurrent, coordSys, step);\n                next = turnPointsIntoStep(diff.next, coordSys, step);\n                stackedOnNext = turnPointsIntoStep(diff.stackedOnNext, coordSys, step);\n            }\n            // `diff.current` is subset of `current` (which should be ensured by\n            // turnPointsIntoStep), so points in `__points` can be updated when\n            // points in `current` are update during animation.\n            polyline.shape.__points = diff.current;\n            polyline.shape.points = current;\n\n            graphic.updateProps(polyline, {\n                shape: {\n                    points: next\n                }\n            }, seriesModel);\n\n            if (polygon) {\n                polygon.setShape({\n                    points: current,\n                    stackedOnPoints: stackedOnCurrent\n                });\n                graphic.updateProps(polygon, {\n                    shape: {\n                        points: next,\n                        stackedOnPoints: stackedOnNext\n                    }\n                }, seriesModel);\n            }\n\n            var updatedDataInfo = [];\n            var diffStatus = diff.status;\n\n            for (var i = 0; i < diffStatus.length; i++) {\n                var cmd = diffStatus[i].cmd;\n                if (cmd === '=') {\n                    var el = data.getItemGraphicEl(diffStatus[i].idx1);\n                    if (el) {\n                        updatedDataInfo.push({\n                            el: el,\n                            ptIdx: i    // Index of points\n                        });\n                    }\n                }\n            }\n\n            if (polyline.animators && polyline.animators.length) {\n                polyline.animators[0].during(function () {\n                    for (var i = 0; i < updatedDataInfo.length; i++) {\n                        var el = updatedDataInfo[i].el;\n                        el.attr('position', polyline.shape.__points[updatedDataInfo[i].ptIdx]);\n                    }\n                });\n            }\n        },\n\n        remove: function (ecModel) {\n            var group = this.group;\n            var oldData = this._data;\n            this._lineGroup.removeAll();\n            this._symbolDraw.remove(true);\n            // Remove temporary created elements when highlighting\n            oldData && oldData.eachItemGraphicEl(function (el, idx) {\n                if (el.__temp) {\n                    group.remove(el);\n                    oldData.setItemGraphicEl(idx, null);\n                }\n            });\n\n            this._polyline =\n            this._polygon =\n            this._coordSys =\n            this._points =\n            this._stackedOnPoints =\n            this._data = null;\n        }\n    });\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.6.1@echarts/lib/chart/line/LineView.js\n// module id = nfmd\n// module chunks = 0 1","/**\n * @module zrender/core/util\n */\n\n\n    // 用于处理merge时无法遍历Date等对象的问题\n    var BUILTIN_OBJECT = {\n        '[object Function]': 1,\n        '[object RegExp]': 1,\n        '[object Date]': 1,\n        '[object Error]': 1,\n        '[object CanvasGradient]': 1,\n        '[object CanvasPattern]': 1,\n        // For node-canvas\n        '[object Image]': 1,\n        '[object Canvas]': 1\n    };\n\n    var TYPED_ARRAY = {\n        '[object Int8Array]': 1,\n        '[object Uint8Array]': 1,\n        '[object Uint8ClampedArray]': 1,\n        '[object Int16Array]': 1,\n        '[object Uint16Array]': 1,\n        '[object Int32Array]': 1,\n        '[object Uint32Array]': 1,\n        '[object Float32Array]': 1,\n        '[object Float64Array]': 1\n    };\n\n    var objToString = Object.prototype.toString;\n\n    var arrayProto = Array.prototype;\n    var nativeForEach = arrayProto.forEach;\n    var nativeFilter = arrayProto.filter;\n    var nativeSlice = arrayProto.slice;\n    var nativeMap = arrayProto.map;\n    var nativeReduce = arrayProto.reduce;\n\n    /**\n     * Those data types can be cloned:\n     *     Plain object, Array, TypedArray, number, string, null, undefined.\n     * Those data types will be assgined using the orginal data:\n     *     BUILTIN_OBJECT\n     * Instance of user defined class will be cloned to a plain object, without\n     * properties in prototype.\n     * Other data types is not supported (not sure what will happen).\n     *\n     * Caution: do not support clone Date, for performance consideration.\n     * (There might be a large number of date in `series.data`).\n     * So date should not be modified in and out of echarts.\n     *\n     * @param {*} source\n     * @return {*} new\n     */\n    function clone(source) {\n        if (source == null || typeof source != 'object') {\n            return source;\n        }\n\n        var result = source;\n        var typeStr = objToString.call(source);\n\n        if (typeStr === '[object Array]') {\n            result = [];\n            for (var i = 0, len = source.length; i < len; i++) {\n                result[i] = clone(source[i]);\n            }\n        }\n        else if (TYPED_ARRAY[typeStr]) {\n            result = source.constructor.from(source);\n        }\n        else if (!BUILTIN_OBJECT[typeStr] && !isPrimitive(source) && !isDom(source)) {\n            result = {};\n            for (var key in source) {\n                if (source.hasOwnProperty(key)) {\n                    result[key] = clone(source[key]);\n                }\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * @memberOf module:zrender/core/util\n     * @param {*} target\n     * @param {*} source\n     * @param {boolean} [overwrite=false]\n     */\n    function merge(target, source, overwrite) {\n        // We should escapse that source is string\n        // and enter for ... in ...\n        if (!isObject(source) || !isObject(target)) {\n            return overwrite ? clone(source) : target;\n        }\n\n        for (var key in source) {\n            if (source.hasOwnProperty(key)) {\n                var targetProp = target[key];\n                var sourceProp = source[key];\n\n                if (isObject(sourceProp)\n                    && isObject(targetProp)\n                    && !isArray(sourceProp)\n                    && !isArray(targetProp)\n                    && !isDom(sourceProp)\n                    && !isDom(targetProp)\n                    && !isBuiltInObject(sourceProp)\n                    && !isBuiltInObject(targetProp)\n                    && !isPrimitive(sourceProp)\n                    && !isPrimitive(targetProp)\n                ) {\n                    // 如果需要递归覆盖，就递归调用merge\n                    merge(targetProp, sourceProp, overwrite);\n                }\n                else if (overwrite || !(key in target)) {\n                    // 否则只处理overwrite为true，或者在目标对象中没有此属性的情况\n                    // NOTE，在 target[key] 不存在的时候也是直接覆盖\n                    target[key] = clone(source[key], true);\n                }\n            }\n        }\n\n        return target;\n    }\n\n    /**\n     * @param {Array} targetAndSources The first item is target, and the rests are source.\n     * @param {boolean} [overwrite=false]\n     * @return {*} target\n     */\n    function mergeAll(targetAndSources, overwrite) {\n        var result = targetAndSources[0];\n        for (var i = 1, len = targetAndSources.length; i < len; i++) {\n            result = merge(result, targetAndSources[i], overwrite);\n        }\n        return result;\n    }\n\n    /**\n     * @param {*} target\n     * @param {*} source\n     * @memberOf module:zrender/core/util\n     */\n    function extend(target, source) {\n        for (var key in source) {\n            if (source.hasOwnProperty(key)) {\n                target[key] = source[key];\n            }\n        }\n        return target;\n    }\n\n    /**\n     * @param {*} target\n     * @param {*} source\n     * @param {boolen} [overlay=false]\n     * @memberOf module:zrender/core/util\n     */\n    function defaults(target, source, overlay) {\n        for (var key in source) {\n            if (source.hasOwnProperty(key)\n                && (overlay ? source[key] != null : target[key] == null)\n            ) {\n                target[key] = source[key];\n            }\n        }\n        return target;\n    }\n\n    function createCanvas() {\n        return document.createElement('canvas');\n    }\n    // FIXME\n    var _ctx;\n    function getContext() {\n        if (!_ctx) {\n            // Use util.createCanvas instead of createCanvas\n            // because createCanvas may be overwritten in different environment\n            _ctx = util.createCanvas().getContext('2d');\n        }\n        return _ctx;\n    }\n\n    /**\n     * 查询数组中元素的index\n     * @memberOf module:zrender/core/util\n     */\n    function indexOf(array, value) {\n        if (array) {\n            if (array.indexOf) {\n                return array.indexOf(value);\n            }\n            for (var i = 0, len = array.length; i < len; i++) {\n                if (array[i] === value) {\n                    return i;\n                }\n            }\n        }\n        return -1;\n    }\n\n    /**\n     * 构造类继承关系\n     *\n     * @memberOf module:zrender/core/util\n     * @param {Function} clazz 源类\n     * @param {Function} baseClazz 基类\n     */\n    function inherits(clazz, baseClazz) {\n        var clazzPrototype = clazz.prototype;\n        function F() {}\n        F.prototype = baseClazz.prototype;\n        clazz.prototype = new F();\n\n        for (var prop in clazzPrototype) {\n            clazz.prototype[prop] = clazzPrototype[prop];\n        }\n        clazz.prototype.constructor = clazz;\n        clazz.superClass = baseClazz;\n    }\n\n    /**\n     * @memberOf module:zrender/core/util\n     * @param {Object|Function} target\n     * @param {Object|Function} sorce\n     * @param {boolean} overlay\n     */\n    function mixin(target, source, overlay) {\n        target = 'prototype' in target ? target.prototype : target;\n        source = 'prototype' in source ? source.prototype : source;\n\n        defaults(target, source, overlay);\n    }\n\n    /**\n     * Consider typed array.\n     * @param {Array|TypedArray} data\n     */\n    function isArrayLike(data) {\n        if (! data) {\n            return;\n        }\n        if (typeof data == 'string') {\n            return false;\n        }\n        return typeof data.length == 'number';\n    }\n\n    /**\n     * 数组或对象遍历\n     * @memberOf module:zrender/core/util\n     * @param {Object|Array} obj\n     * @param {Function} cb\n     * @param {*} [context]\n     */\n    function each(obj, cb, context) {\n        if (!(obj && cb)) {\n            return;\n        }\n        if (obj.forEach && obj.forEach === nativeForEach) {\n            obj.forEach(cb, context);\n        }\n        else if (obj.length === +obj.length) {\n            for (var i = 0, len = obj.length; i < len; i++) {\n                cb.call(context, obj[i], i, obj);\n            }\n        }\n        else {\n            for (var key in obj) {\n                if (obj.hasOwnProperty(key)) {\n                    cb.call(context, obj[key], key, obj);\n                }\n            }\n        }\n    }\n\n    /**\n     * 数组映射\n     * @memberOf module:zrender/core/util\n     * @param {Array} obj\n     * @param {Function} cb\n     * @param {*} [context]\n     * @return {Array}\n     */\n    function map(obj, cb, context) {\n        if (!(obj && cb)) {\n            return;\n        }\n        if (obj.map && obj.map === nativeMap) {\n            return obj.map(cb, context);\n        }\n        else {\n            var result = [];\n            for (var i = 0, len = obj.length; i < len; i++) {\n                result.push(cb.call(context, obj[i], i, obj));\n            }\n            return result;\n        }\n    }\n\n    /**\n     * @memberOf module:zrender/core/util\n     * @param {Array} obj\n     * @param {Function} cb\n     * @param {Object} [memo]\n     * @param {*} [context]\n     * @return {Array}\n     */\n    function reduce(obj, cb, memo, context) {\n        if (!(obj && cb)) {\n            return;\n        }\n        if (obj.reduce && obj.reduce === nativeReduce) {\n            return obj.reduce(cb, memo, context);\n        }\n        else {\n            for (var i = 0, len = obj.length; i < len; i++) {\n                memo = cb.call(context, memo, obj[i], i, obj);\n            }\n            return memo;\n        }\n    }\n\n    /**\n     * 数组过滤\n     * @memberOf module:zrender/core/util\n     * @param {Array} obj\n     * @param {Function} cb\n     * @param {*} [context]\n     * @return {Array}\n     */\n    function filter(obj, cb, context) {\n        if (!(obj && cb)) {\n            return;\n        }\n        if (obj.filter && obj.filter === nativeFilter) {\n            return obj.filter(cb, context);\n        }\n        else {\n            var result = [];\n            for (var i = 0, len = obj.length; i < len; i++) {\n                if (cb.call(context, obj[i], i, obj)) {\n                    result.push(obj[i]);\n                }\n            }\n            return result;\n        }\n    }\n\n    /**\n     * 数组项查找\n     * @memberOf module:zrender/core/util\n     * @param {Array} obj\n     * @param {Function} cb\n     * @param {*} [context]\n     * @return {Array}\n     */\n    function find(obj, cb, context) {\n        if (!(obj && cb)) {\n            return;\n        }\n        for (var i = 0, len = obj.length; i < len; i++) {\n            if (cb.call(context, obj[i], i, obj)) {\n                return obj[i];\n            }\n        }\n    }\n\n    /**\n     * @memberOf module:zrender/core/util\n     * @param {Function} func\n     * @param {*} context\n     * @return {Function}\n     */\n    function bind(func, context) {\n        var args = nativeSlice.call(arguments, 2);\n        return function () {\n            return func.apply(context, args.concat(nativeSlice.call(arguments)));\n        };\n    }\n\n    /**\n     * @memberOf module:zrender/core/util\n     * @param {Function} func\n     * @return {Function}\n     */\n    function curry(func) {\n        var args = nativeSlice.call(arguments, 1);\n        return function () {\n            return func.apply(this, args.concat(nativeSlice.call(arguments)));\n        };\n    }\n\n    /**\n     * @memberOf module:zrender/core/util\n     * @param {*} value\n     * @return {boolean}\n     */\n    function isArray(value) {\n        return objToString.call(value) === '[object Array]';\n    }\n\n    /**\n     * @memberOf module:zrender/core/util\n     * @param {*} value\n     * @return {boolean}\n     */\n    function isFunction(value) {\n        return typeof value === 'function';\n    }\n\n    /**\n     * @memberOf module:zrender/core/util\n     * @param {*} value\n     * @return {boolean}\n     */\n    function isString(value) {\n        return objToString.call(value) === '[object String]';\n    }\n\n    /**\n     * @memberOf module:zrender/core/util\n     * @param {*} value\n     * @return {boolean}\n     */\n    function isObject(value) {\n        // Avoid a V8 JIT bug in Chrome 19-20.\n        // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.\n        var type = typeof value;\n        return type === 'function' || (!!value && type == 'object');\n    }\n\n    /**\n     * @memberOf module:zrender/core/util\n     * @param {*} value\n     * @return {boolean}\n     */\n    function isBuiltInObject(value) {\n        return !!BUILTIN_OBJECT[objToString.call(value)];\n    }\n\n    /**\n     * @memberOf module:zrender/core/util\n     * @param {*} value\n     * @return {boolean}\n     */\n    function isDom(value) {\n        return typeof value === 'object'\n            && typeof value.nodeType === 'number'\n            && typeof value.ownerDocument === 'object';\n    }\n\n    /**\n     * Whether is exactly NaN. Notice isNaN('a') returns true.\n     * @param {*} value\n     * @return {boolean}\n     */\n    function eqNaN(value) {\n        return value !== value;\n    }\n\n    /**\n     * If value1 is not null, then return value1, otherwise judget rest of values.\n     * @memberOf module:zrender/core/util\n     * @return {*} Final value\n     */\n    function retrieve(values) {\n        for (var i = 0, len = arguments.length; i < len; i++) {\n            if (arguments[i] != null) {\n                return arguments[i];\n            }\n        }\n    }\n\n    /**\n     * @memberOf module:zrender/core/util\n     * @param {Array} arr\n     * @param {number} startIndex\n     * @param {number} endIndex\n     * @return {Array}\n     */\n    function slice() {\n        return Function.call.apply(nativeSlice, arguments);\n    }\n\n    /**\n     * @memberOf module:zrender/core/util\n     * @param {boolean} condition\n     * @param {string} message\n     */\n    function assert(condition, message) {\n        if (!condition) {\n            throw new Error(message);\n        }\n    }\n\n    var primitiveKey = '__ec_primitive__';\n    /**\n     * Set an object as primitive to be ignored traversing children in clone or merge\n     */\n    function setAsPrimitive(obj) {\n        obj[primitiveKey] = true;\n    }\n\n    function isPrimitive(obj) {\n        return obj[primitiveKey];\n    }\n\n    /**\n     * @constructor\n     * @param {Object} obj Only apply `ownProperty`.\n     */\n    function HashMap(obj) {\n        obj && each(obj, function (value, key) {\n            this.set(key, value);\n        }, this);\n    }\n\n    // Add prefix to avoid conflict with Object.prototype.\n    var HASH_MAP_PREFIX = '_ec_';\n    var HASH_MAP_PREFIX_LENGTH = 4;\n\n    HashMap.prototype = {\n        constructor: HashMap,\n        // Do not provide `has` method to avoid defining what is `has`.\n        // (We usually treat `null` and `undefined` as the same, different\n        // from ES6 Map).\n        get: function (key) {\n            return this[HASH_MAP_PREFIX + key];\n        },\n        set: function (key, value) {\n            this[HASH_MAP_PREFIX + key] = value;\n            // Comparing with invocation chaining, `return value` is more commonly\n            // used in this case: `var someVal = map.set('a', genVal());`\n            return value;\n        },\n        // Although util.each can be performed on this hashMap directly, user\n        // should not use the exposed keys, who are prefixed.\n        each: function (cb, context) {\n            context !== void 0 && (cb = bind(cb, context));\n            for (var prefixedKey in this) {\n                this.hasOwnProperty(prefixedKey)\n                    && cb(this[prefixedKey], prefixedKey.slice(HASH_MAP_PREFIX_LENGTH));\n            }\n        },\n        // Do not use this method if performance sensitive.\n        removeKey: function (key) {\n            delete this[key];\n        }\n    };\n\n    function createHashMap(obj) {\n        return new HashMap(obj);\n    }\n\n    var util = {\n        inherits: inherits,\n        mixin: mixin,\n        clone: clone,\n        merge: merge,\n        mergeAll: mergeAll,\n        extend: extend,\n        defaults: defaults,\n        getContext: getContext,\n        createCanvas: createCanvas,\n        indexOf: indexOf,\n        slice: slice,\n        find: find,\n        isArrayLike: isArrayLike,\n        each: each,\n        map: map,\n        reduce: reduce,\n        filter: filter,\n        bind: bind,\n        curry: curry,\n        isArray: isArray,\n        isString: isString,\n        isObject: isObject,\n        isFunction: isFunction,\n        isBuiltInObject: isBuiltInObject,\n        isDom: isDom,\n        eqNaN: eqNaN,\n        retrieve: retrieve,\n        assert: assert,\n        setAsPrimitive: setAsPrimitive,\n        createHashMap: createHashMap,\n        noop: function () {}\n    };\n    module.exports = util;\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.5.1@zrender/lib/core/util.js\n// module id = nw1Z\n// module chunks = 0 1","'use strict';\n\n\n    var zrUtil = require('zrender/lib/core/util');\n\n    var coordinateSystemCreators = {};\n\n    function CoordinateSystemManager() {\n\n        this._coordinateSystems = [];\n    }\n\n    CoordinateSystemManager.prototype = {\n\n        constructor: CoordinateSystemManager,\n\n        create: function (ecModel, api) {\n            var coordinateSystems = [];\n            zrUtil.each(coordinateSystemCreators, function (creater, type) {\n                var list = creater.create(ecModel, api);\n                coordinateSystems = coordinateSystems.concat(list || []);\n            });\n\n            this._coordinateSystems = coordinateSystems;\n        },\n\n        update: function (ecModel, api) {\n            zrUtil.each(this._coordinateSystems, function (coordSys) {\n                // FIXME MUST have\n                coordSys.update && coordSys.update(ecModel, api);\n            });\n        },\n\n        getCoordinateSystems: function () {\n            return this._coordinateSystems.slice();\n        }\n    };\n\n    CoordinateSystemManager.register = function (type, coordinateSystemCreator) {\n        coordinateSystemCreators[type] = coordinateSystemCreator;\n    };\n\n    CoordinateSystemManager.get = function (type) {\n        return coordinateSystemCreators[type];\n    };\n\n    module.exports = CoordinateSystemManager;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.6.1@echarts/lib/CoordinateSystem.js\n// module id = o/Er\n// module chunks = 0 1","/**\n * @file Data zoom model\n */\n\n\n    var DataZoomModel = require('./DataZoomModel');\n\n    module.exports = DataZoomModel.extend({\n\n        type: 'dataZoom.select'\n\n    });\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.6.1@echarts/lib/component/dataZoom/SelectZoomModel.js\n// module id = o0M/\n// module chunks = 0 1","'use strict';\n/**\n * @module zrender/mixin/Animatable\n */\n\n\n    var Animator = require('../animation/Animator');\n    var util = require('../core/util');\n    var isString = util.isString;\n    var isFunction = util.isFunction;\n    var isObject = util.isObject;\n    var log = require('../core/log');\n\n    /**\n     * @alias modue:zrender/mixin/Animatable\n     * @constructor\n     */\n    var Animatable = function () {\n\n        /**\n         * @type {Array.<module:zrender/animation/Animator>}\n         * @readOnly\n         */\n        this.animators = [];\n    };\n\n    Animatable.prototype = {\n\n        constructor: Animatable,\n\n        /**\n         * 动画\n         *\n         * @param {string} path 需要添加动画的属性获取路径，可以通过a.b.c来获取深层的属性\n         * @param {boolean} [loop] 动画是否循环\n         * @return {module:zrender/animation/Animator}\n         * @example:\n         *     el.animate('style', false)\n         *         .when(1000, {x: 10} )\n         *         .done(function(){ // Animation done })\n         *         .start()\n         */\n        animate: function (path, loop) {\n            var target;\n            var animatingShape = false;\n            var el = this;\n            var zr = this.__zr;\n            if (path) {\n                var pathSplitted = path.split('.');\n                var prop = el;\n                // If animating shape\n                animatingShape = pathSplitted[0] === 'shape';\n                for (var i = 0, l = pathSplitted.length; i < l; i++) {\n                    if (!prop) {\n                        continue;\n                    }\n                    prop = prop[pathSplitted[i]];\n                }\n                if (prop) {\n                    target = prop;\n                }\n            }\n            else {\n                target = el;\n            }\n\n            if (!target) {\n                log(\n                    'Property \"'\n                    + path\n                    + '\" is not existed in element '\n                    + el.id\n                );\n                return;\n            }\n\n            var animators = el.animators;\n\n            var animator = new Animator(target, loop);\n\n            animator.during(function (target) {\n                el.dirty(animatingShape);\n            })\n            .done(function () {\n                // FIXME Animator will not be removed if use `Animator#stop` to stop animation\n                animators.splice(util.indexOf(animators, animator), 1);\n            });\n\n            animators.push(animator);\n\n            // If animate after added to the zrender\n            if (zr) {\n                zr.animation.addAnimator(animator);\n            }\n\n            return animator;\n        },\n\n        /**\n         * 停止动画\n         * @param {boolean} forwardToLast If move to last frame before stop\n         */\n        stopAnimation: function (forwardToLast) {\n            var animators = this.animators;\n            var len = animators.length;\n            for (var i = 0; i < len; i++) {\n                animators[i].stop(forwardToLast);\n            }\n            animators.length = 0;\n\n            return this;\n        },\n\n        /**\n         * @param {Object} target\n         * @param {number} [time=500] Time in ms\n         * @param {string} [easing='linear']\n         * @param {number} [delay=0]\n         * @param {Function} [callback]\n         *\n         * @example\n         *  // Animate position\n         *  el.animateTo({\n         *      position: [10, 10]\n         *  }, function () { // done })\n         *\n         *  // Animate shape, style and position in 100ms, delayed 100ms, with cubicOut easing\n         *  el.animateTo({\n         *      shape: {\n         *          width: 500\n         *      },\n         *      style: {\n         *          fill: 'red'\n         *      }\n         *      position: [10, 10]\n         *  }, 100, 100, 'cubicOut', function () { // done })\n         */\n         // TODO Return animation key\n        animateTo: function (target, time, delay, easing, callback) {\n            // animateTo(target, time, easing, callback);\n            if (isString(delay)) {\n                callback = easing;\n                easing = delay;\n                delay = 0;\n            }\n            // animateTo(target, time, delay, callback);\n            else if (isFunction(easing)) {\n                callback = easing;\n                easing = 'linear';\n                delay = 0;\n            }\n            // animateTo(target, time, callback);\n            else if (isFunction(delay)) {\n                callback = delay;\n                delay = 0;\n            }\n            // animateTo(target, callback)\n            else if (isFunction(time)) {\n                callback = time;\n                time = 500;\n            }\n            // animateTo(target)\n            else if (!time) {\n                time = 500;\n            }\n            // Stop all previous animations\n            this.stopAnimation();\n            this._animateToShallow('', this, target, time, delay, easing, callback);\n\n            // Animators may be removed immediately after start\n            // if there is nothing to animate\n            var animators = this.animators.slice();\n            var count = animators.length;\n            function done() {\n                count--;\n                if (!count) {\n                    callback && callback();\n                }\n            }\n\n            // No animators. This should be checked before animators[i].start(),\n            // because 'done' may be executed immediately if no need to animate.\n            if (!count) {\n                callback && callback();\n            }\n            // Start after all animators created\n            // Incase any animator is done immediately when all animation properties are not changed\n            for (var i = 0; i < animators.length; i++) {\n                animators[i]\n                    .done(done)\n                    .start(easing);\n            }\n        },\n\n        /**\n         * @private\n         * @param {string} path=''\n         * @param {Object} source=this\n         * @param {Object} target\n         * @param {number} [time=500]\n         * @param {number} [delay=0]\n         *\n         * @example\n         *  // Animate position\n         *  el._animateToShallow({\n         *      position: [10, 10]\n         *  })\n         *\n         *  // Animate shape, style and position in 100ms, delayed 100ms\n         *  el._animateToShallow({\n         *      shape: {\n         *          width: 500\n         *      },\n         *      style: {\n         *          fill: 'red'\n         *      }\n         *      position: [10, 10]\n         *  }, 100, 100)\n         */\n        _animateToShallow: function (path, source, target, time, delay) {\n            var objShallow = {};\n            var propertyCount = 0;\n            for (var name in target) {\n                if (!target.hasOwnProperty(name)) {\n                    continue;\n                }\n\n                if (source[name] != null) {\n                    if (isObject(target[name]) && !util.isArrayLike(target[name])) {\n                        this._animateToShallow(\n                            path ? path + '.' + name : name,\n                            source[name],\n                            target[name],\n                            time,\n                            delay\n                        );\n                    }\n                    else {\n                        objShallow[name] = target[name];\n                        propertyCount++;\n                    }\n                }\n                else if (target[name] != null) {\n                    // Attr directly if not has property\n                    // FIXME, if some property not needed for element ?\n                    if (!path) {\n                        this.attr(name, target[name]);\n                    }\n                    else {  // Shape or style\n                        var props = {};\n                        props[path] = {};\n                        props[path][name] = target[name];\n                        this.attr(props);\n                    }\n                }\n            }\n\n            if (propertyCount > 0) {\n                this.animate(path, false)\n                    .when(time == null ? 500 : time, objShallow)\n                    .delay(delay || 0);\n            }\n\n            return this;\n        }\n    };\n\n    module.exports = Animatable;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.5.1@zrender/lib/mixin/Animatable.js\n// module id = oHN5\n// module chunks = 0 1","/**\n * @module zrender/graphic/shape/Polyline\n */\n\n\n    var polyHelper = require('../helper/poly');\n\n    module.exports = require('../Path').extend({\n        \n        type: 'polyline',\n\n        shape: {\n            points: null,\n\n            smooth: false,\n\n            smoothConstraint: null\n        },\n\n        style: {\n            stroke: '#000',\n\n            fill: null\n        },\n\n        buildPath: function (ctx, shape) {\n            polyHelper.buildPath(ctx, shape, false);\n        }\n    });\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.5.1@zrender/lib/graphic/shape/Polyline.js\n// module id = oge2\n// module chunks = 0 1","'use strict';\n\n\n    var graphic = require('../util/graphic');\n    var zrUtil = require('zrender/lib/core/util');\n    var echarts = require('../echarts');\n\n    require('../coord/cartesian/Grid');\n\n    require('./axis');\n\n    // Grid view\n    echarts.extendComponentView({\n\n        type: 'grid',\n\n        render: function (gridModel, ecModel) {\n            this.group.removeAll();\n            if (gridModel.get('show')) {\n                this.group.add(new graphic.Rect({\n                    shape: gridModel.coordinateSystem.getRect(),\n                    style: zrUtil.defaults({\n                        fill: gridModel.get('backgroundColor')\n                    }, gridModel.getItemStyle()),\n                    silent: true,\n                    z2: -1\n                }));\n            }\n        }\n\n    });\n\n    echarts.registerPreprocessor(function (option) {\n        // Only create grid when need\n        if (option.xAxis && option.yAxis && !option.grid) {\n            option.grid = {};\n        }\n    });\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.6.1@echarts/lib/component/gridSimple.js\n// module id = olP8\n// module chunks = 0 1","\n    var getLineStyle = require('./makeStyleMapper')(\n        [\n            ['lineWidth', 'width'],\n            ['stroke', 'color'],\n            ['opacity'],\n            ['shadowBlur'],\n            ['shadowOffsetX'],\n            ['shadowOffsetY'],\n            ['shadowColor']\n        ]\n    );\n    module.exports = {\n        getLineStyle: function (excludes) {\n            var style = getLineStyle.call(this, excludes);\n            var lineDash = this.getLineDash(style.lineWidth);\n            lineDash && (style.lineDash = lineDash);\n            return style;\n        },\n\n        getLineDash: function (lineWidth) {\n            if (lineWidth == null) {\n                lineWidth = 1;\n            }\n            var lineType = this.get('type');\n            var dotSize = Math.max(lineWidth, 2);\n            var dashSize = lineWidth * 4;\n            return (lineType === 'solid' || lineType == null) ? null\n                : (lineType === 'dashed' ? [dashSize, dashSize] : [dotSize, dotSize]);\n        }\n    };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.6.1@echarts/lib/model/mixin/lineStyle.js\n// module id = omlO\n// module chunks = 0 1","'use strict';\n/**\n * Handler\n * @module zrender/Handler\n * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)\n *         errorrik (errorrik@gmail.com)\n *         pissang (shenyi.914@gmail.com)\n */\n\n\n    var util = require('./core/util');\n    var Draggable = require('./mixin/Draggable');\n\n    var Eventful = require('./mixin/Eventful');\n\n    var SILENT = 'silent';\n\n    function makeEventPacket(eveType, targetInfo, event) {\n        return {\n            type: eveType,\n            event: event,\n            // target can only be an element that is not silent.\n            target: targetInfo.target,\n            // topTarget can be a silent element.\n            topTarget: targetInfo.topTarget,\n            cancelBubble: false,\n            offsetX: event.zrX,\n            offsetY: event.zrY,\n            gestureEvent: event.gestureEvent,\n            pinchX: event.pinchX,\n            pinchY: event.pinchY,\n            pinchScale: event.pinchScale,\n            wheelDelta: event.zrDelta,\n            zrByTouch: event.zrByTouch\n        };\n    }\n\n    function EmptyProxy () {}\n    EmptyProxy.prototype.dispose = function () {};\n\n    var handlerNames = [\n        'click', 'dblclick', 'mousewheel', 'mouseout',\n        'mouseup', 'mousedown', 'mousemove', 'contextmenu'\n    ];\n    /**\n     * @alias module:zrender/Handler\n     * @constructor\n     * @extends module:zrender/mixin/Eventful\n     * @param {module:zrender/Storage} storage Storage instance.\n     * @param {module:zrender/Painter} painter Painter instance.\n     * @param {module:zrender/dom/HandlerProxy} proxy HandlerProxy instance.\n     * @param {HTMLElement} painterRoot painter.root (not painter.getViewportRoot()).\n     */\n    var Handler = function(storage, painter, proxy, painterRoot) {\n        Eventful.call(this);\n\n        this.storage = storage;\n\n        this.painter = painter;\n\n        this.painterRoot = painterRoot;\n\n        proxy = proxy || new EmptyProxy();\n\n        /**\n         * Proxy of event. can be Dom, WebGLSurface, etc.\n         */\n        this.proxy = proxy;\n\n        // Attach handler\n        proxy.handler = this;\n\n        /**\n         * {target, topTarget}\n         * @private\n         * @type {Object}\n         */\n        this._hovered = {};\n\n        /**\n         * @private\n         * @type {Date}\n         */\n        this._lastTouchMoment;\n\n        /**\n         * @private\n         * @type {number}\n         */\n        this._lastX;\n\n        /**\n         * @private\n         * @type {number}\n         */\n        this._lastY;\n\n\n        Draggable.call(this);\n\n        util.each(handlerNames, function (name) {\n            proxy.on && proxy.on(name, this[name], this);\n        }, this);\n    };\n\n    Handler.prototype = {\n\n        constructor: Handler,\n\n        mousemove: function (event) {\n            var x = event.zrX;\n            var y = event.zrY;\n\n            var lastHovered = this._hovered;\n            var hovered = this._hovered = this.findHover(x, y);\n            var hoveredTarget = hovered.target;\n            var lastHoveredTarget = lastHovered.target;\n\n            var proxy = this.proxy;\n            proxy.setCursor && proxy.setCursor(hoveredTarget ? hoveredTarget.cursor : 'default');\n\n            // Mouse out on previous hovered element\n            if (lastHoveredTarget && hoveredTarget !== lastHoveredTarget && lastHoveredTarget.__zr) {\n                this.dispatchToElement(lastHovered, 'mouseout', event);\n            }\n\n            // Mouse moving on one element\n            this.dispatchToElement(hovered, 'mousemove', event);\n\n            // Mouse over on a new element\n            if (hoveredTarget && hoveredTarget !== lastHoveredTarget) {\n                this.dispatchToElement(hovered, 'mouseover', event);\n            }\n        },\n\n        mouseout: function (event) {\n            this.dispatchToElement(this._hovered, 'mouseout', event);\n\n            // There might be some doms created by upper layer application\n            // at the same level of painter.getViewportRoot() (e.g., tooltip\n            // dom created by echarts), where 'globalout' event should not\n            // be triggered when mouse enters these doms. (But 'mouseout'\n            // should be triggered at the original hovered element as usual).\n            var element = event.toElement || event.relatedTarget;\n            var innerDom;\n            do {\n                element = element && element.parentNode;\n            }\n            while (element && element.nodeType != 9 && !(\n                innerDom = element === this.painterRoot\n            ));\n\n            !innerDom && this.trigger('globalout', {event: event});\n        },\n\n        /**\n         * Resize\n         */\n        resize: function (event) {\n            this._hovered = {};\n        },\n\n        /**\n         * Dispatch event\n         * @param {string} eventName\n         * @param {event=} eventArgs\n         */\n        dispatch: function (eventName, eventArgs) {\n            var handler = this[eventName];\n            handler && handler.call(this, eventArgs);\n        },\n\n        /**\n         * Dispose\n         */\n        dispose: function () {\n\n            this.proxy.dispose();\n\n            this.storage =\n            this.proxy =\n            this.painter = null;\n        },\n\n        /**\n         * 设置默认的cursor style\n         * @param {string} [cursorStyle='default'] 例如 crosshair\n         */\n        setCursorStyle: function (cursorStyle) {\n            var proxy = this.proxy;\n            proxy.setCursor && proxy.setCursor(cursorStyle);\n        },\n\n        /**\n         * 事件分发代理\n         *\n         * @private\n         * @param {Object} targetInfo {target, topTarget} 目标图形元素\n         * @param {string} eventName 事件名称\n         * @param {Object} event 事件对象\n         */\n        dispatchToElement: function (targetInfo, eventName, event) {\n            targetInfo = targetInfo || {};\n            var eventHandler = 'on' + eventName;\n            var eventPacket = makeEventPacket(eventName, targetInfo, event);\n\n            var el = targetInfo.target;\n            while (el) {\n                el[eventHandler]\n                    && (eventPacket.cancelBubble = el[eventHandler].call(el, eventPacket));\n\n                el.trigger(eventName, eventPacket);\n\n                el = el.parent;\n\n                if (eventPacket.cancelBubble) {\n                    break;\n                }\n            }\n\n            if (!eventPacket.cancelBubble) {\n                // 冒泡到顶级 zrender 对象\n                this.trigger(eventName, eventPacket);\n                // 分发事件到用户自定义层\n                // 用户有可能在全局 click 事件中 dispose，所以需要判断下 painter 是否存在\n                this.painter && this.painter.eachOtherLayer(function (layer) {\n                    if (typeof(layer[eventHandler]) == 'function') {\n                        layer[eventHandler].call(layer, eventPacket);\n                    }\n                    if (layer.trigger) {\n                        layer.trigger(eventName, eventPacket);\n                    }\n                });\n            }\n        },\n\n        /**\n         * @private\n         * @param {number} x\n         * @param {number} y\n         * @param {module:zrender/graphic/Displayable} exclude\n         * @return {model:zrender/Element}\n         * @method\n         */\n        findHover: function(x, y, exclude) {\n            var list = this.storage.getDisplayList();\n            var out = {};\n\n            for (var i = list.length - 1; i >= 0 ; i--) {\n                var hoverCheckResult;\n                if (list[i] !== exclude\n                    // getDisplayList may include ignored item in VML mode\n                    && !list[i].ignore\n                    && (hoverCheckResult = isHover(list[i], x, y))\n                ) {\n                    !out.topTarget && (out.topTarget = list[i]);\n                    if (hoverCheckResult !== SILENT) {\n                        out.target = list[i];\n                        break;\n                    }\n                }\n            }\n\n            return out;\n        }\n    };\n\n    // Common handlers\n    util.each(['click', 'mousedown', 'mouseup', 'mousewheel', 'dblclick', 'contextmenu'], function (name) {\n        Handler.prototype[name] = function (event) {\n            // Find hover again to avoid click event is dispatched manually. Or click is triggered without mouseover\n            var hovered = this.findHover(event.zrX, event.zrY);\n            var hoveredTarget = hovered.target;\n\n            if (name === 'mousedown') {\n                this._downel = hoveredTarget;\n                // In case click triggered before mouseup\n                this._upel = hoveredTarget;\n            }\n            else if (name === 'mosueup') {\n                this._upel = hoveredTarget;\n            }\n            else if (name === 'click') {\n                if (this._downel !== this._upel) {\n                    return;\n                }\n            }\n\n            this.dispatchToElement(hovered, name, event);\n        };\n    });\n\n    function isHover(displayable, x, y) {\n        if (displayable[displayable.rectHover ? 'rectContain' : 'contain'](x, y)) {\n            var el = displayable;\n            var isSilent;\n            while (el) {\n                // If clipped by ancestor.\n                // FIXME: If clipPath has neither stroke nor fill,\n                // el.clipPath.contain(x, y) will always return false.\n                if (el.clipPath && !el.clipPath.contain(x, y))  {\n                    return false;\n                }\n                if (el.silent) {\n                    isSilent = true;\n                }\n                el = el.parent;\n            }\n            return isSilent ? SILENT : true;\n        }\n\n        return false;\n    }\n\n    util.mixin(Handler, Eventful);\n    util.mixin(Handler, Draggable);\n\n    module.exports = Handler;\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.5.1@zrender/lib/Handler.js\n// module id = p+9T\n// module chunks = 0 1","\n\n    var echarts = require('../echarts');\n    var axisPointerModelHelper = require('./axisPointer/modelHelper');\n    var axisTrigger = require('./axisPointer/axisTrigger');\n    var zrUtil = require('zrender/lib/core/util');\n\n    require('./axisPointer/AxisPointerModel');\n    require('./axisPointer/AxisPointerView');\n\n    // CartesianAxisPointer is not supposed to be required here. But consider\n    // echarts.simple.js and online build tooltip, which only require gridSimple,\n    // CartesianAxisPointer should be able to required somewhere.\n    require('./axisPointer/CartesianAxisPointer');\n\n    echarts.registerPreprocessor(function (option) {\n        // Always has a global axisPointerModel for default setting.\n        if (option) {\n            (!option.axisPointer || option.axisPointer.length === 0)\n                && (option.axisPointer = {});\n\n            var link = option.axisPointer.link;\n            // Normalize to array to avoid object mergin. But if link\n            // is not set, remain null/undefined, otherwise it will\n            // override existent link setting.\n            if (link && !zrUtil.isArray(link)) {\n                option.axisPointer.link = [link];\n            }\n        }\n    });\n\n    // This process should proformed after coordinate systems created\n    // and series data processed. So put it on statistic processing stage.\n    echarts.registerProcessor(echarts.PRIORITY.PROCESSOR.STATISTIC, function (ecModel, api) {\n        // Build axisPointerModel, mergin tooltip.axisPointer model for each axis.\n        // allAxesInfo should be updated when setOption performed.\n        ecModel.getComponent('axisPointer').coordSysAxesInfo\n            = axisPointerModelHelper.collect(ecModel, api);\n    });\n\n    // Broadcast to all views.\n    echarts.registerAction({\n        type: 'updateAxisPointer',\n        event: 'updateAxisPointer',\n        update: ':updateAxisPointer'\n    }, function (payload, ecModel, api) {\n        var outputFinder = axisTrigger(\n            ecModel.getComponent('axisPointer').coordSysAxesInfo,\n            payload.currTrigger,\n            [payload.x, payload.y],\n            payload,\n            payload.dispatchAction || zrUtil.bind(api.dispatchAction, api),\n            ecModel,\n            api,\n            payload.tooltipOption\n        );\n\n        return outputFinder;\n    });\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.6.1@echarts/lib/component/axisPointer.js\n// module id = pt00\n// module chunks = 0 1","'use strict';\n\n\n    var List = require('../../data/List');\n    var completeDimensions = require('../../data/helper/completeDimensions');\n    var zrUtil = require('zrender/lib/core/util');\n    var modelUtil = require('../../util/model');\n    var CoordinateSystem = require('../../CoordinateSystem');\n    var getDataItemValue = modelUtil.getDataItemValue;\n    var converDataValue = modelUtil.converDataValue;\n\n    function firstDataNotNull(data) {\n        var i = 0;\n        while (i < data.length && data[i] == null) {\n            i++;\n        }\n        return data[i];\n    }\n    function ifNeedCompleteOrdinalData(data) {\n        var sampleItem = firstDataNotNull(data);\n        return sampleItem != null\n            && !zrUtil.isArray(getDataItemValue(sampleItem));\n    }\n\n    /**\n     * Helper function to create a list from option data\n     */\n    function createListFromArray(data, seriesModel, ecModel) {\n        // If data is undefined\n        data = data || [];\n\n        if (__DEV__) {\n            if (!zrUtil.isArray(data)) {\n                throw new Error('Invalid data.');\n            }\n        }\n\n        var coordSysName = seriesModel.get('coordinateSystem');\n        var creator = creators[coordSysName];\n        var registeredCoordSys = CoordinateSystem.get(coordSysName);\n        var completeDimOpt = {\n            encodeDef: seriesModel.get('encode'),\n            dimsDef: seriesModel.get('dimensions')\n        };\n\n        // FIXME\n        var axesInfo = creator && creator(data, seriesModel, ecModel, completeDimOpt);\n        var dimensions = axesInfo && axesInfo.dimensions;\n        if (!dimensions) {\n            // Get dimensions from registered coordinate system\n            dimensions = (registeredCoordSys && (\n                registeredCoordSys.getDimensionsInfo\n                    ? registeredCoordSys.getDimensionsInfo()\n                    : registeredCoordSys.dimensions.slice()\n            )) || ['x', 'y'];\n            dimensions = completeDimensions(dimensions, data, completeDimOpt);\n        }\n\n        var categoryIndex = axesInfo ? axesInfo.categoryIndex : -1;\n\n        var list = new List(dimensions, seriesModel);\n\n        var nameList = createNameList(axesInfo, data);\n\n        var categories = {};\n        var dimValueGetter = (categoryIndex >= 0 && ifNeedCompleteOrdinalData(data))\n            ? function (itemOpt, dimName, dataIndex, dimIndex) {\n                // If any dataItem is like { value: 10 }\n                if (modelUtil.isDataItemOption(itemOpt)) {\n                    list.hasItemOption = true;\n                }\n\n                // Use dataIndex as ordinal value in categoryAxis\n                return dimIndex === categoryIndex\n                    ? dataIndex\n                    : converDataValue(getDataItemValue(itemOpt), dimensions[dimIndex]);\n            }\n            : function (itemOpt, dimName, dataIndex, dimIndex) {\n                var value = getDataItemValue(itemOpt);\n                var val = converDataValue(value && value[dimIndex], dimensions[dimIndex]);\n                // If any dataItem is like { value: 10 }\n                if (modelUtil.isDataItemOption(itemOpt)) {\n                    list.hasItemOption = true;\n                }\n\n                var categoryAxesModels = axesInfo && axesInfo.categoryAxesModels;\n                if (categoryAxesModels && categoryAxesModels[dimName]) {\n                    // If given value is a category string\n                    if (typeof val === 'string') {\n                        // Lazy get categories\n                        categories[dimName] = categories[dimName]\n                            || categoryAxesModels[dimName].getCategories();\n                        val = zrUtil.indexOf(categories[dimName], val);\n                        if (val < 0 && !isNaN(val)) {\n                            // In case some one write '1', '2' istead of 1, 2\n                            val = +val;\n                        }\n                    }\n                }\n                return val;\n            };\n\n        list.hasItemOption = false;\n        list.initData(data, nameList, dimValueGetter);\n\n        return list;\n    }\n\n    function isStackable(axisType) {\n        return axisType !== 'category' && axisType !== 'time';\n    }\n\n    function getDimTypeByAxis(axisType) {\n        return axisType === 'category'\n            ? 'ordinal'\n            : axisType === 'time'\n            ? 'time'\n            : 'float';\n    }\n\n    /**\n     * Creaters for each coord system.\n     */\n    var creators = {\n\n        cartesian2d: function (data, seriesModel, ecModel, completeDimOpt) {\n\n            var axesModels = zrUtil.map(['xAxis', 'yAxis'], function (name) {\n                return ecModel.queryComponents({\n                    mainType: name,\n                    index: seriesModel.get(name + 'Index'),\n                    id: seriesModel.get(name + 'Id')\n                })[0];\n            });\n            var xAxisModel = axesModels[0];\n            var yAxisModel = axesModels[1];\n\n            if (__DEV__) {\n                if (!xAxisModel) {\n                    throw new Error('xAxis \"' + zrUtil.retrieve(\n                        seriesModel.get('xAxisIndex'),\n                        seriesModel.get('xAxisId'),\n                        0\n                    ) + '\" not found');\n                }\n                if (!yAxisModel) {\n                    throw new Error('yAxis \"' + zrUtil.retrieve(\n                        seriesModel.get('xAxisIndex'),\n                        seriesModel.get('yAxisId'),\n                        0\n                    ) + '\" not found');\n                }\n            }\n\n            var xAxisType = xAxisModel.get('type');\n            var yAxisType = yAxisModel.get('type');\n\n            var dimensions = [\n                {\n                    name: 'x',\n                    type: getDimTypeByAxis(xAxisType),\n                    stackable: isStackable(xAxisType)\n                },\n                {\n                    name: 'y',\n                    // If two category axes\n                    type: getDimTypeByAxis(yAxisType),\n                    stackable: isStackable(yAxisType)\n                }\n            ];\n\n            var isXAxisCateogry = xAxisType === 'category';\n            var isYAxisCategory = yAxisType === 'category';\n\n            dimensions = completeDimensions(dimensions, data, completeDimOpt);\n\n            var categoryAxesModels = {};\n            if (isXAxisCateogry) {\n                categoryAxesModels.x = xAxisModel;\n            }\n            if (isYAxisCategory) {\n                categoryAxesModels.y = yAxisModel;\n            }\n            return {\n                dimensions: dimensions,\n                categoryIndex: isXAxisCateogry ? 0 : (isYAxisCategory ? 1 : -1),\n                categoryAxesModels: categoryAxesModels\n            };\n        },\n\n        singleAxis: function (data, seriesModel, ecModel, completeDimOpt) {\n\n            var singleAxisModel = ecModel.queryComponents({\n                mainType: 'singleAxis',\n                index: seriesModel.get('singleAxisIndex'),\n                id: seriesModel.get('singleAxisId')\n            })[0];\n\n            if (__DEV__) {\n                if (!singleAxisModel) {\n                    throw new Error('singleAxis should be specified.');\n                }\n            }\n\n            var singleAxisType = singleAxisModel.get('type');\n            var isCategory = singleAxisType === 'category';\n\n            var dimensions = [{\n                name: 'single',\n                type: getDimTypeByAxis(singleAxisType),\n                stackable: isStackable(singleAxisType)\n            }];\n\n            dimensions = completeDimensions(dimensions, data, completeDimOpt);\n\n            var categoryAxesModels = {};\n            if (isCategory) {\n                categoryAxesModels.single = singleAxisModel;\n            }\n\n            return {\n                dimensions: dimensions,\n                categoryIndex: isCategory ? 0 : -1,\n                categoryAxesModels: categoryAxesModels\n            };\n        },\n\n        polar: function (data, seriesModel, ecModel, completeDimOpt) {\n            var polarModel = ecModel.queryComponents({\n                mainType: 'polar',\n                index: seriesModel.get('polarIndex'),\n                id: seriesModel.get('polarId')\n            })[0];\n\n            var angleAxisModel = polarModel.findAxisModel('angleAxis');\n            var radiusAxisModel = polarModel.findAxisModel('radiusAxis');\n\n            if (__DEV__) {\n                if (!angleAxisModel) {\n                    throw new Error('angleAxis option not found');\n                }\n                if (!radiusAxisModel) {\n                    throw new Error('radiusAxis option not found');\n                }\n            }\n\n            var radiusAxisType = radiusAxisModel.get('type');\n            var angleAxisType = angleAxisModel.get('type');\n\n            var dimensions = [\n                {\n                    name: 'radius',\n                    type: getDimTypeByAxis(radiusAxisType),\n                    stackable: isStackable(radiusAxisType)\n                },\n                {\n                    name: 'angle',\n                    type: getDimTypeByAxis(angleAxisType),\n                    stackable: isStackable(angleAxisType)\n                }\n            ];\n            var isAngleAxisCateogry = angleAxisType === 'category';\n            var isRadiusAxisCateogry = radiusAxisType === 'category';\n\n            dimensions = completeDimensions(dimensions, data, completeDimOpt);\n\n            var categoryAxesModels = {};\n            if (isRadiusAxisCateogry) {\n                categoryAxesModels.radius = radiusAxisModel;\n            }\n            if (isAngleAxisCateogry) {\n                categoryAxesModels.angle = angleAxisModel;\n            }\n            return {\n                dimensions: dimensions,\n                categoryIndex: isAngleAxisCateogry ? 1 : (isRadiusAxisCateogry ? 0 : -1),\n                categoryAxesModels: categoryAxesModels\n            };\n        },\n\n        geo: function (data, seriesModel, ecModel, completeDimOpt) {\n            // TODO Region\n            // 多个散点图系列在同一个地区的时候\n            return {\n                dimensions: completeDimensions([\n                    {name: 'lng'},\n                    {name: 'lat'}\n                ], data, completeDimOpt)\n            };\n        }\n    };\n\n    function createNameList(result, data) {\n        var nameList = [];\n\n        var categoryDim = result && result.dimensions[result.categoryIndex];\n        var categoryAxisModel;\n        if (categoryDim) {\n            categoryAxisModel = result.categoryAxesModels[categoryDim.name];\n        }\n\n        if (categoryAxisModel) {\n            // FIXME Two category axis\n            var categories = categoryAxisModel.getCategories();\n            if (categories) {\n                var dataLen = data.length;\n                // Ordered data is given explicitly like\n                // [[3, 0.2], [1, 0.3], [2, 0.15]]\n                // or given scatter data,\n                // pick the category\n                if (zrUtil.isArray(data[0]) && data[0].length > 1) {\n                    nameList = [];\n                    for (var i = 0; i < dataLen; i++) {\n                        nameList[i] = categories[data[i][result.categoryIndex || 0]];\n                    }\n                }\n                else {\n                    nameList = categories.slice(0);\n                }\n            }\n        }\n\n        return nameList;\n    }\n\n    module.exports = createListFromArray;\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.6.1@echarts/lib/chart/helper/createListFromArray.js\n// module id = pwBP\n// module chunks = 0 1","\n\n\n    var getBarItemStyle = require('../../model/mixin/makeStyleMapper')(\n        [\n            ['fill', 'color'],\n            ['stroke', 'borderColor'],\n            ['lineWidth', 'borderWidth'],\n            // Compatitable with 2\n            ['stroke', 'barBorderColor'],\n            ['lineWidth', 'barBorderWidth'],\n            ['opacity'],\n            ['shadowBlur'],\n            ['shadowOffsetX'],\n            ['shadowOffsetY'],\n            ['shadowColor']\n        ]\n    );\n    module.exports = {\n        getBarItemStyle: function (excludes) {\n            var style = getBarItemStyle.call(this, excludes);\n            if (this.getBorderLineDash) {\n                var lineDash = this.getBorderLineDash();\n                lineDash && (style.lineDash = lineDash);\n            }\n            return style;\n        }\n    };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.6.1@echarts/lib/chart/bar/barItemStyle.js\n// module id = qLdl\n// module chunks = 0 1","'use strict';\n/**\n * 动画主类, 调度和管理所有动画控制器\n *\n * @module zrender/animation/Animation\n * @author pissang(https://github.com/pissang)\n */\n// TODO Additive animation\n// http://iosoteric.com/additive-animations-animatewithduration-in-ios-8/\n// https://developer.apple.com/videos/wwdc2014/#236\n\n\n    var util = require('../core/util');\n    var Dispatcher = require('../core/event').Dispatcher;\n\n    var requestAnimationFrame = require('./requestAnimationFrame');\n\n    var Animator = require('./Animator');\n    /**\n     * @typedef {Object} IZRenderStage\n     * @property {Function} update\n     */\n\n    /**\n     * @alias module:zrender/animation/Animation\n     * @constructor\n     * @param {Object} [options]\n     * @param {Function} [options.onframe]\n     * @param {IZRenderStage} [options.stage]\n     * @example\n     *     var animation = new Animation();\n     *     var obj = {\n     *         x: 100,\n     *         y: 100\n     *     };\n     *     animation.animate(node.position)\n     *         .when(1000, {\n     *             x: 500,\n     *             y: 500\n     *         })\n     *         .when(2000, {\n     *             x: 100,\n     *             y: 100\n     *         })\n     *         .start('spline');\n     */\n    var Animation = function (options) {\n\n        options = options || {};\n\n        this.stage = options.stage || {};\n\n        this.onframe = options.onframe || function() {};\n\n        // private properties\n        this._clips = [];\n\n        this._running = false;\n\n        this._time;\n\n        this._pausedTime;\n\n        this._pauseStart;\n\n        this._paused = false;\n\n        Dispatcher.call(this);\n    };\n\n    Animation.prototype = {\n\n        constructor: Animation,\n        /**\n         * 添加 clip\n         * @param {module:zrender/animation/Clip} clip\n         */\n        addClip: function (clip) {\n            this._clips.push(clip);\n        },\n        /**\n         * 添加 animator\n         * @param {module:zrender/animation/Animator} animator\n         */\n        addAnimator: function (animator) {\n            animator.animation = this;\n            var clips = animator.getClips();\n            for (var i = 0; i < clips.length; i++) {\n                this.addClip(clips[i]);\n            }\n        },\n        /**\n         * 删除动画片段\n         * @param {module:zrender/animation/Clip} clip\n         */\n        removeClip: function(clip) {\n            var idx = util.indexOf(this._clips, clip);\n            if (idx >= 0) {\n                this._clips.splice(idx, 1);\n            }\n        },\n\n        /**\n         * 删除动画片段\n         * @param {module:zrender/animation/Animator} animator\n         */\n        removeAnimator: function (animator) {\n            var clips = animator.getClips();\n            for (var i = 0; i < clips.length; i++) {\n                this.removeClip(clips[i]);\n            }\n            animator.animation = null;\n        },\n\n        _update: function() {\n\n            var time = new Date().getTime() - this._pausedTime;\n            var delta = time - this._time;\n            var clips = this._clips;\n            var len = clips.length;\n\n            var deferredEvents = [];\n            var deferredClips = [];\n            for (var i = 0; i < len; i++) {\n                var clip = clips[i];\n                var e = clip.step(time, delta);\n                // Throw out the events need to be called after\n                // stage.update, like destroy\n                if (e) {\n                    deferredEvents.push(e);\n                    deferredClips.push(clip);\n                }\n            }\n\n            // Remove the finished clip\n            for (var i = 0; i < len;) {\n                if (clips[i]._needsRemove) {\n                    clips[i] = clips[len - 1];\n                    clips.pop();\n                    len--;\n                }\n                else {\n                    i++;\n                }\n            }\n\n            len = deferredEvents.length;\n            for (var i = 0; i < len; i++) {\n                deferredClips[i].fire(deferredEvents[i]);\n            }\n\n            this._time = time;\n\n            this.onframe(delta);\n\n            this.trigger('frame', delta);\n\n            if (this.stage.update) {\n                this.stage.update();\n            }\n        },\n\n        _startLoop: function () {\n            var self = this;\n\n            this._running = true;\n\n            function step() {\n                if (self._running) {\n\n                    requestAnimationFrame(step);\n\n                    !self._paused && self._update();\n                }\n            }\n\n            requestAnimationFrame(step);\n        },\n\n        /**\n         * 开始运行动画\n         */\n        start: function () {\n\n            this._time = new Date().getTime();\n            this._pausedTime = 0;\n\n            this._startLoop();\n        },\n        /**\n         * 停止运行动画\n         */\n        stop: function () {\n            this._running = false;\n        },\n\n        /**\n         * Pause\n         */\n        pause: function () {\n            if (!this._paused) {\n                this._pauseStart = new Date().getTime();\n                this._paused = true;\n            }\n        },\n\n        /**\n         * Resume\n         */\n        resume: function () {\n            if (this._paused) {\n                this._pausedTime += (new Date().getTime()) - this._pauseStart;\n                this._paused = false;\n            }\n        },\n\n        /**\n         * 清除所有动画片段\n         */\n        clear: function () {\n            this._clips = [];\n        },\n        /**\n         * 对一个目标创建一个animator对象，可以指定目标中的属性使用动画\n         * @param  {Object} target\n         * @param  {Object} options\n         * @param  {boolean} [options.loop=false] 是否循环播放动画\n         * @param  {Function} [options.getter=null]\n         *         如果指定getter函数，会通过getter函数取属性值\n         * @param  {Function} [options.setter=null]\n         *         如果指定setter函数，会通过setter函数设置属性值\n         * @return {module:zrender/animation/Animation~Animator}\n         */\n        // TODO Gap\n        animate: function (target, options) {\n            options = options || {};\n\n            var animator = new Animator(\n                target,\n                options.loop,\n                options.getter,\n                options.setter\n            );\n\n            this.addAnimator(animator);\n\n            return animator;\n        }\n    };\n\n    util.mixin(Animation, Dispatcher);\n\n    module.exports = Animation;\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.5.1@zrender/lib/animation/Animation.js\n// module id = qYWS\n// module chunks = 0 1","/**\n * @module echarts/animation/Animator\n */\n\n\n    var Clip = require('./Clip');\n    var color = require('../tool/color');\n    var util = require('../core/util');\n    var isArrayLike = util.isArrayLike;\n\n    var arraySlice = Array.prototype.slice;\n\n    function defaultGetter(target, key) {\n        return target[key];\n    }\n\n    function defaultSetter(target, key, value) {\n        target[key] = value;\n    }\n\n    /**\n     * @param  {number} p0\n     * @param  {number} p1\n     * @param  {number} percent\n     * @return {number}\n     */\n    function interpolateNumber(p0, p1, percent) {\n        return (p1 - p0) * percent + p0;\n    }\n\n    /**\n     * @param  {string} p0\n     * @param  {string} p1\n     * @param  {number} percent\n     * @return {string}\n     */\n    function interpolateString(p0, p1, percent) {\n        return percent > 0.5 ? p1 : p0;\n    }\n\n    /**\n     * @param  {Array} p0\n     * @param  {Array} p1\n     * @param  {number} percent\n     * @param  {Array} out\n     * @param  {number} arrDim\n     */\n    function interpolateArray(p0, p1, percent, out, arrDim) {\n        var len = p0.length;\n        if (arrDim == 1) {\n            for (var i = 0; i < len; i++) {\n                out[i] = interpolateNumber(p0[i], p1[i], percent);\n            }\n        }\n        else {\n            var len2 = len && p0[0].length;\n            for (var i = 0; i < len; i++) {\n                for (var j = 0; j < len2; j++) {\n                    out[i][j] = interpolateNumber(\n                        p0[i][j], p1[i][j], percent\n                    );\n                }\n            }\n        }\n    }\n\n    // arr0 is source array, arr1 is target array.\n    // Do some preprocess to avoid error happened when interpolating from arr0 to arr1\n    function fillArr(arr0, arr1, arrDim) {\n        var arr0Len = arr0.length;\n        var arr1Len = arr1.length;\n        if (arr0Len !== arr1Len) {\n            // FIXME Not work for TypedArray\n            var isPreviousLarger = arr0Len > arr1Len;\n            if (isPreviousLarger) {\n                // Cut the previous\n                arr0.length = arr1Len;\n            }\n            else {\n                // Fill the previous\n                for (var i = arr0Len; i < arr1Len; i++) {\n                    arr0.push(\n                        arrDim === 1 ? arr1[i] : arraySlice.call(arr1[i])\n                    );\n                }\n            }\n        }\n        // Handling NaN value\n        var len2 = arr0[0] && arr0[0].length;\n        for (var i = 0; i < arr0.length; i++) {\n            if (arrDim === 1) {\n                if (isNaN(arr0[i])) {\n                    arr0[i] = arr1[i];\n                }\n            }\n            else {\n                for (var j = 0; j < len2; j++) {\n                    if (isNaN(arr0[i][j])) {\n                        arr0[i][j] = arr1[i][j];\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * @param  {Array} arr0\n     * @param  {Array} arr1\n     * @param  {number} arrDim\n     * @return {boolean}\n     */\n    function isArraySame(arr0, arr1, arrDim) {\n        if (arr0 === arr1) {\n            return true;\n        }\n        var len = arr0.length;\n        if (len !== arr1.length) {\n            return false;\n        }\n        if (arrDim === 1) {\n            for (var i = 0; i < len; i++) {\n                if (arr0[i] !== arr1[i]) {\n                    return false;\n                }\n            }\n        }\n        else {\n            var len2 = arr0[0].length;\n            for (var i = 0; i < len; i++) {\n                for (var j = 0; j < len2; j++) {\n                    if (arr0[i][j] !== arr1[i][j]) {\n                        return false;\n                    }\n                }\n            }\n        }\n        return true;\n    }\n\n    /**\n     * Catmull Rom interpolate array\n     * @param  {Array} p0\n     * @param  {Array} p1\n     * @param  {Array} p2\n     * @param  {Array} p3\n     * @param  {number} t\n     * @param  {number} t2\n     * @param  {number} t3\n     * @param  {Array} out\n     * @param  {number} arrDim\n     */\n    function catmullRomInterpolateArray(\n        p0, p1, p2, p3, t, t2, t3, out, arrDim\n    ) {\n        var len = p0.length;\n        if (arrDim == 1) {\n            for (var i = 0; i < len; i++) {\n                out[i] = catmullRomInterpolate(\n                    p0[i], p1[i], p2[i], p3[i], t, t2, t3\n                );\n            }\n        }\n        else {\n            var len2 = p0[0].length;\n            for (var i = 0; i < len; i++) {\n                for (var j = 0; j < len2; j++) {\n                    out[i][j] = catmullRomInterpolate(\n                        p0[i][j], p1[i][j], p2[i][j], p3[i][j],\n                        t, t2, t3\n                    );\n                }\n            }\n        }\n    }\n\n    /**\n     * Catmull Rom interpolate number\n     * @param  {number} p0\n     * @param  {number} p1\n     * @param  {number} p2\n     * @param  {number} p3\n     * @param  {number} t\n     * @param  {number} t2\n     * @param  {number} t3\n     * @return {number}\n     */\n    function catmullRomInterpolate(p0, p1, p2, p3, t, t2, t3) {\n        var v0 = (p2 - p0) * 0.5;\n        var v1 = (p3 - p1) * 0.5;\n        return (2 * (p1 - p2) + v0 + v1) * t3\n                + (-3 * (p1 - p2) - 2 * v0 - v1) * t2\n                + v0 * t + p1;\n    }\n\n    function cloneValue(value) {\n        if (isArrayLike(value)) {\n            var len = value.length;\n            if (isArrayLike(value[0])) {\n                var ret = [];\n                for (var i = 0; i < len; i++) {\n                    ret.push(arraySlice.call(value[i]));\n                }\n                return ret;\n            }\n\n            return arraySlice.call(value);\n        }\n\n        return value;\n    }\n\n    function rgba2String(rgba) {\n        rgba[0] = Math.floor(rgba[0]);\n        rgba[1] = Math.floor(rgba[1]);\n        rgba[2] = Math.floor(rgba[2]);\n\n        return 'rgba(' + rgba.join(',') + ')';\n    }\n\n    function getArrayDim(keyframes) {\n        var lastValue = keyframes[keyframes.length - 1].value;\n        return isArrayLike(lastValue && lastValue[0]) ? 2 : 1;\n    }\n\n    function createTrackClip (animator, easing, oneTrackDone, keyframes, propName) {\n        var getter = animator._getter;\n        var setter = animator._setter;\n        var useSpline = easing === 'spline';\n\n        var trackLen = keyframes.length;\n        if (!trackLen) {\n            return;\n        }\n        // Guess data type\n        var firstVal = keyframes[0].value;\n        var isValueArray = isArrayLike(firstVal);\n        var isValueColor = false;\n        var isValueString = false;\n\n        // For vertices morphing\n        var arrDim = isValueArray ? getArrayDim(keyframes) : 0;\n\n        var trackMaxTime;\n        // Sort keyframe as ascending\n        keyframes.sort(function(a, b) {\n            return a.time - b.time;\n        });\n\n        trackMaxTime = keyframes[trackLen - 1].time;\n        // Percents of each keyframe\n        var kfPercents = [];\n        // Value of each keyframe\n        var kfValues = [];\n        var prevValue = keyframes[0].value;\n        var isAllValueEqual = true;\n        for (var i = 0; i < trackLen; i++) {\n            kfPercents.push(keyframes[i].time / trackMaxTime);\n            // Assume value is a color when it is a string\n            var value = keyframes[i].value;\n\n            // Check if value is equal, deep check if value is array\n            if (!((isValueArray && isArraySame(value, prevValue, arrDim))\n                || (!isValueArray && value === prevValue))) {\n                isAllValueEqual = false;\n            }\n            prevValue = value;\n\n            // Try converting a string to a color array\n            if (typeof value == 'string') {\n                var colorArray = color.parse(value);\n                if (colorArray) {\n                    value = colorArray;\n                    isValueColor = true;\n                }\n                else {\n                    isValueString = true;\n                }\n            }\n            kfValues.push(value);\n        }\n        if (isAllValueEqual) {\n            return;\n        }\n\n        var lastValue = kfValues[trackLen - 1];\n        // Polyfill array and NaN value\n        for (var i = 0; i < trackLen - 1; i++) {\n            if (isValueArray) {\n                fillArr(kfValues[i], lastValue, arrDim);\n            }\n            else {\n                if (isNaN(kfValues[i]) && !isNaN(lastValue) && !isValueString && !isValueColor) {\n                    kfValues[i] = lastValue;\n                }\n            }\n        }\n        isValueArray && fillArr(getter(animator._target, propName), lastValue, arrDim);\n\n        // Cache the key of last frame to speed up when\n        // animation playback is sequency\n        var lastFrame = 0;\n        var lastFramePercent = 0;\n        var start;\n        var w;\n        var p0;\n        var p1;\n        var p2;\n        var p3;\n\n        if (isValueColor) {\n            var rgba = [0, 0, 0, 0];\n        }\n\n        var onframe = function (target, percent) {\n            // Find the range keyframes\n            // kf1-----kf2---------current--------kf3\n            // find kf2 and kf3 and do interpolation\n            var frame;\n            // In the easing function like elasticOut, percent may less than 0\n            if (percent < 0) {\n                frame = 0;\n            }\n            else if (percent < lastFramePercent) {\n                // Start from next key\n                // PENDING start from lastFrame ?\n                start = Math.min(lastFrame + 1, trackLen - 1);\n                for (frame = start; frame >= 0; frame--) {\n                    if (kfPercents[frame] <= percent) {\n                        break;\n                    }\n                }\n                // PENDING really need to do this ?\n                frame = Math.min(frame, trackLen - 2);\n            }\n            else {\n                for (frame = lastFrame; frame < trackLen; frame++) {\n                    if (kfPercents[frame] > percent) {\n                        break;\n                    }\n                }\n                frame = Math.min(frame - 1, trackLen - 2);\n            }\n            lastFrame = frame;\n            lastFramePercent = percent;\n\n            var range = (kfPercents[frame + 1] - kfPercents[frame]);\n            if (range === 0) {\n                return;\n            }\n            else {\n                w = (percent - kfPercents[frame]) / range;\n            }\n            if (useSpline) {\n                p1 = kfValues[frame];\n                p0 = kfValues[frame === 0 ? frame : frame - 1];\n                p2 = kfValues[frame > trackLen - 2 ? trackLen - 1 : frame + 1];\n                p3 = kfValues[frame > trackLen - 3 ? trackLen - 1 : frame + 2];\n                if (isValueArray) {\n                    catmullRomInterpolateArray(\n                        p0, p1, p2, p3, w, w * w, w * w * w,\n                        getter(target, propName),\n                        arrDim\n                    );\n                }\n                else {\n                    var value;\n                    if (isValueColor) {\n                        value = catmullRomInterpolateArray(\n                            p0, p1, p2, p3, w, w * w, w * w * w,\n                            rgba, 1\n                        );\n                        value = rgba2String(rgba);\n                    }\n                    else if (isValueString) {\n                        // String is step(0.5)\n                        return interpolateString(p1, p2, w);\n                    }\n                    else {\n                        value = catmullRomInterpolate(\n                            p0, p1, p2, p3, w, w * w, w * w * w\n                        );\n                    }\n                    setter(\n                        target,\n                        propName,\n                        value\n                    );\n                }\n            }\n            else {\n                if (isValueArray) {\n                    interpolateArray(\n                        kfValues[frame], kfValues[frame + 1], w,\n                        getter(target, propName),\n                        arrDim\n                    );\n                }\n                else {\n                    var value;\n                    if (isValueColor) {\n                        interpolateArray(\n                            kfValues[frame], kfValues[frame + 1], w,\n                            rgba, 1\n                        );\n                        value = rgba2String(rgba);\n                    }\n                    else if (isValueString) {\n                        // String is step(0.5)\n                        return interpolateString(kfValues[frame], kfValues[frame + 1], w);\n                    }\n                    else {\n                        value = interpolateNumber(kfValues[frame], kfValues[frame + 1], w);\n                    }\n                    setter(\n                        target,\n                        propName,\n                        value\n                    );\n                }\n            }\n        };\n\n        var clip = new Clip({\n            target: animator._target,\n            life: trackMaxTime,\n            loop: animator._loop,\n            delay: animator._delay,\n            onframe: onframe,\n            ondestroy: oneTrackDone\n        });\n\n        if (easing && easing !== 'spline') {\n            clip.easing = easing;\n        }\n\n        return clip;\n    }\n\n    /**\n     * @alias module:zrender/animation/Animator\n     * @constructor\n     * @param {Object} target\n     * @param {boolean} loop\n     * @param {Function} getter\n     * @param {Function} setter\n     */\n    var Animator = function(target, loop, getter, setter) {\n        this._tracks = {};\n        this._target = target;\n\n        this._loop = loop || false;\n\n        this._getter = getter || defaultGetter;\n        this._setter = setter || defaultSetter;\n\n        this._clipCount = 0;\n\n        this._delay = 0;\n\n        this._doneList = [];\n\n        this._onframeList = [];\n\n        this._clipList = [];\n    };\n\n    Animator.prototype = {\n        /**\n         * 设置动画关键帧\n         * @param  {number} time 关键帧时间，单位是ms\n         * @param  {Object} props 关键帧的属性值，key-value表示\n         * @return {module:zrender/animation/Animator}\n         */\n        when: function(time /* ms */, props) {\n            var tracks = this._tracks;\n            for (var propName in props) {\n                if (!props.hasOwnProperty(propName)) {\n                    continue;\n                }\n\n                if (!tracks[propName]) {\n                    tracks[propName] = [];\n                    // Invalid value\n                    var value = this._getter(this._target, propName);\n                    if (value == null) {\n                        // zrLog('Invalid property ' + propName);\n                        continue;\n                    }\n                    // If time is 0\n                    //  Then props is given initialize value\n                    // Else\n                    //  Initialize value from current prop value\n                    if (time !== 0) {\n                        tracks[propName].push({\n                            time: 0,\n                            value: cloneValue(value)\n                        });\n                    }\n                }\n                tracks[propName].push({\n                    time: time,\n                    value: props[propName]\n                });\n            }\n            return this;\n        },\n        /**\n         * 添加动画每一帧的回调函数\n         * @param  {Function} callback\n         * @return {module:zrender/animation/Animator}\n         */\n        during: function (callback) {\n            this._onframeList.push(callback);\n            return this;\n        },\n\n        pause: function () {\n            for (var i = 0; i < this._clipList.length; i++) {\n                this._clipList[i].pause();\n            }\n            this._paused = true;\n        },\n\n        resume: function () {\n            for (var i = 0; i < this._clipList.length; i++) {\n                this._clipList[i].resume();\n            }\n            this._paused = false;\n        },\n\n        isPaused: function () {\n            return !!this._paused;\n        },\n\n        _doneCallback: function () {\n            // Clear all tracks\n            this._tracks = {};\n            // Clear all clips\n            this._clipList.length = 0;\n\n            var doneList = this._doneList;\n            var len = doneList.length;\n            for (var i = 0; i < len; i++) {\n                doneList[i].call(this);\n            }\n        },\n        /**\n         * 开始执行动画\n         * @param  {string|Function} easing\n         *         动画缓动函数，详见{@link module:zrender/animation/easing}\n         * @return {module:zrender/animation/Animator}\n         */\n        start: function (easing) {\n\n            var self = this;\n            var clipCount = 0;\n\n            var oneTrackDone = function() {\n                clipCount--;\n                if (!clipCount) {\n                    self._doneCallback();\n                }\n            };\n\n            var lastClip;\n            for (var propName in this._tracks) {\n                if (!this._tracks.hasOwnProperty(propName)) {\n                    continue;\n                }\n                var clip = createTrackClip(\n                    this, easing, oneTrackDone,\n                    this._tracks[propName], propName\n                );\n                if (clip) {\n                    this._clipList.push(clip);\n                    clipCount++;\n\n                    // If start after added to animation\n                    if (this.animation) {\n                        this.animation.addClip(clip);\n                    }\n\n                    lastClip = clip;\n                }\n            }\n\n            // Add during callback on the last clip\n            if (lastClip) {\n                var oldOnFrame = lastClip.onframe;\n                lastClip.onframe = function (target, percent) {\n                    oldOnFrame(target, percent);\n\n                    for (var i = 0; i < self._onframeList.length; i++) {\n                        self._onframeList[i](target, percent);\n                    }\n                };\n            }\n\n            if (!clipCount) {\n                this._doneCallback();\n            }\n            return this;\n        },\n        /**\n         * 停止动画\n         * @param {boolean} forwardToLast If move to last frame before stop\n         */\n        stop: function (forwardToLast) {\n            var clipList = this._clipList;\n            var animation = this.animation;\n            for (var i = 0; i < clipList.length; i++) {\n                var clip = clipList[i];\n                if (forwardToLast) {\n                    // Move to last frame before stop\n                    clip.onframe(this._target, 1);\n                }\n                animation && animation.removeClip(clip);\n            }\n            clipList.length = 0;\n        },\n        /**\n         * 设置动画延迟开始的时间\n         * @param  {number} time 单位ms\n         * @return {module:zrender/animation/Animator}\n         */\n        delay: function (time) {\n            this._delay = time;\n            return this;\n        },\n        /**\n         * 添加动画结束的回调\n         * @param  {Function} cb\n         * @return {module:zrender/animation/Animator}\n         */\n        done: function(cb) {\n            if (cb) {\n                this._doneList.push(cb);\n            }\n            return this;\n        },\n\n        /**\n         * @return {Array.<module:zrender/animation/Clip>}\n         */\n        getClips: function () {\n            return this._clipList;\n        }\n    };\n\n    module.exports = Animator;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.5.1@zrender/lib/animation/Animator.js\n// module id = qf1S\n// module chunks = 0 1","// FIXME Better way to pack data in graphic element\n\n\n    require('./axisPointer');\n\n    require('./tooltip/TooltipModel');\n\n    require('./tooltip/TooltipView');\n\n\n    // Show tip action\n    /**\n     * @action\n     * @property {string} type\n     * @property {number} seriesIndex\n     * @property {number} dataIndex\n     * @property {number} [x]\n     * @property {number} [y]\n     */\n    require('../echarts').registerAction(\n        {\n            type: 'showTip',\n            event: 'showTip',\n            update: 'tooltip:manuallyShowTip'\n        },\n        // noop\n        function () {}\n    );\n    // Hide tip action\n    require('../echarts').registerAction(\n        {\n            type: 'hideTip',\n            event: 'hideTip',\n            update: 'tooltip:manuallyHideTip'\n        },\n        // noop\n        function () {}\n    );\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.6.1@echarts/lib/component/tooltip.js\n// module id = rRE/\n// module chunks = 0 1","\n\n    var env = require('zrender/lib/core/env');\n    var zrUtil = require('zrender/lib/core/util');\n    var get = require('../../util/model').makeGetter();\n\n    var each = zrUtil.each;\n\n    var globalListener = {};\n\n    /**\n     * @param {string} key\n     * @param {module:echarts/ExtensionAPI} api\n     * @param {Function} handler\n     *      param: {string} currTrigger\n     *      param: {Array.<number>} point\n     */\n    globalListener.register = function (key, api, handler) {\n        if (env.node) {\n            return;\n        }\n\n        var zr = api.getZr();\n        get(zr).records || (get(zr).records = {});\n\n        initGlobalListeners(zr, api);\n\n        var record = get(zr).records[key] || (get(zr).records[key] = {});\n        record.handler = handler;\n    };\n\n    function initGlobalListeners(zr, api) {\n        if (get(zr).initialized) {\n            return;\n        }\n\n        get(zr).initialized = true;\n\n        useHandler('click', zrUtil.curry(doEnter, 'click'));\n        useHandler('mousemove', zrUtil.curry(doEnter, 'mousemove'));\n        // useHandler('mouseout', onLeave);\n        useHandler('globalout', onLeave);\n\n        function useHandler(eventType, cb) {\n            zr.on(eventType, function (e) {\n                var dis = makeDispatchAction(api);\n\n                each(get(zr).records, function (record) {\n                    record && cb(record, e, dis.dispatchAction);\n                });\n\n                dispatchTooltipFinally(dis.pendings, api);\n            });\n        }\n    }\n\n    function dispatchTooltipFinally(pendings, api) {\n        var showLen = pendings.showTip.length;\n        var hideLen = pendings.hideTip.length;\n\n        var actuallyPayload;\n        if (showLen) {\n            actuallyPayload = pendings.showTip[showLen - 1];\n        }\n        else if (hideLen) {\n            actuallyPayload = pendings.hideTip[hideLen - 1];\n        }\n        if (actuallyPayload) {\n            actuallyPayload.dispatchAction = null;\n            api.dispatchAction(actuallyPayload);\n        }\n    }\n\n    function onLeave(record, e, dispatchAction) {\n        record.handler('leave', null, dispatchAction);\n    }\n\n    function doEnter(currTrigger, record, e, dispatchAction) {\n        record.handler(currTrigger, e, dispatchAction);\n    }\n\n    function makeDispatchAction(api) {\n        var pendings = {\n            showTip: [],\n            hideTip: []\n        };\n        // FIXME\n        // better approach?\n        // 'showTip' and 'hideTip' can be triggered by axisPointer and tooltip,\n        // which may be conflict, (axisPointer call showTip but tooltip call hideTip);\n        // So we have to add \"final stage\" to merge those dispatched actions.\n        var dispatchAction = function (payload) {\n            var pendingList = pendings[payload.type];\n            if (pendingList) {\n                pendingList.push(payload);\n            }\n            else {\n                payload.dispatchAction = dispatchAction;\n                api.dispatchAction(payload);\n            }\n        };\n\n        return {\n            dispatchAction: dispatchAction,\n            pendings: pendings\n        };\n    }\n\n    /**\n     * @param {string} key\n     * @param {module:echarts/ExtensionAPI} api\n     */\n    globalListener.unregister = function (key, api) {\n        if (env.node) {\n            return;\n        }\n        var zr = api.getZr();\n        var record = (get(zr).records || {})[key];\n        if (record) {\n            get(zr).records[key] = null;\n        }\n    };\n\n    module.exports = globalListener;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.6.1@echarts/lib/component/axisPointer/globalListener.js\n// module id = sEAT\n// module chunks = 0 1","/**\n * For testable.\n */\n\n\n    var numberUtil = require('../util/number');\n\n    var roundNumber = numberUtil.round;\n\n    var helper = {};\n\n    /**\n     * @param {Array.<number>} extent Both extent[0] and extent[1] should be valid number.\n     *                                Should be extent[0] < extent[1].\n     * @param {number} splitNumber splitNumber should be >= 1.\n     * @param {number} [minInterval]\n     * @return {Object} {interval, intervalPrecision, niceTickExtent}\n     */\n    helper.intervalScaleNiceTicks = function (extent, splitNumber, minInterval) {\n        var result = {};\n        var span = extent[1] - extent[0];\n\n        var interval = result.interval = numberUtil.nice(span / splitNumber, true);\n        if (minInterval != null && interval < minInterval) {\n            interval = result.interval = minInterval;\n        }\n        // Tow more digital for tick.\n        var precision = result.intervalPrecision = numberUtil.getPrecisionSafe(interval) + 2;\n        // Niced extent inside original extent\n        var niceTickExtent = result.niceTickExtent = [\n            roundNumber(Math.ceil(extent[0] / interval) * interval, precision),\n            roundNumber(Math.floor(extent[1] / interval) * interval, precision)\n        ];\n\n        helper.fixExtent(niceTickExtent, extent);\n\n        return result;\n    };\n\n    function clamp(niceTickExtent, idx, extent) {\n        niceTickExtent[idx] = Math.max(Math.min(niceTickExtent[idx], extent[1]), extent[0]);\n    }\n\n    // In some cases (e.g., splitNumber is 1), niceTickExtent may be out of extent.\n    helper.fixExtent = function (niceTickExtent, extent) {\n        !isFinite(niceTickExtent[0]) && (niceTickExtent[0] = extent[0]);\n        !isFinite(niceTickExtent[1]) && (niceTickExtent[1] = extent[1]);\n        clamp(niceTickExtent, 0, extent);\n        clamp(niceTickExtent, 1, extent);\n        if (niceTickExtent[0] > niceTickExtent[1]) {\n            niceTickExtent[0] = niceTickExtent[1];\n        }\n    };\n\n    helper.intervalScaleGetTicks = function (interval, extent, niceTickExtent, intervalPrecision) {\n        var ticks = [];\n\n        // If interval is 0, return [];\n        if (!interval) {\n            return ticks;\n        }\n\n        // Consider this case: using dataZoom toolbox, zoom and zoom.\n        var safeLimit = 10000;\n\n        if (extent[0] < niceTickExtent[0]) {\n            ticks.push(extent[0]);\n        }\n        var tick = niceTickExtent[0];\n\n        while (tick <= niceTickExtent[1]) {\n            ticks.push(tick);\n            // Avoid rounding error\n            tick = roundNumber(tick + interval, intervalPrecision);\n            if (tick === ticks[ticks.length - 1]) {\n                // Consider out of safe float point, e.g.,\n                // -3711126.9907707 + 2e-10 === -3711126.9907707\n                break;\n            }\n            if (ticks.length > safeLimit) {\n                return [];\n            }\n        }\n        // Consider this case: the last item of ticks is smaller\n        // than niceTickExtent[1] and niceTickExtent[1] === extent[1].\n        if (extent[1] > (ticks.length ? ticks[ticks.length - 1] : niceTickExtent[1])) {\n            ticks.push(extent[1]);\n        }\n\n        return ticks;\n    };\n\n    module.exports = helper;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.6.1@echarts/lib/scale/helper.js\n// module id = svhf\n// module chunks = 0 1","\n\n    var axisPointerModelHelper = require('../axisPointer/modelHelper');\n\n    /**\n     * Base class of AxisView.\n     */\n    var AxisView = require('../../echarts').extendComponentView({\n\n        type: 'axis',\n\n        /**\n         * @private\n         */\n        _axisPointer: null,\n\n        /**\n         * @protected\n         * @type {string}\n         */\n        axisPointerClass: null,\n\n        /**\n         * @override\n         */\n        render: function (axisModel, ecModel, api, payload) {\n            // FIXME\n            // This process should proformed after coordinate systems updated\n            // (axis scale updated), and should be performed each time update.\n            // So put it here temporarily, although it is not appropriate to\n            // put a model-writing procedure in `view`.\n            this.axisPointerClass && axisPointerModelHelper.fixValue(axisModel);\n\n            AxisView.superApply(this, 'render', arguments);\n\n            updateAxisPointer(this, axisModel, ecModel, api, payload, true);\n        },\n\n        /**\n         * Action handler.\n         * @public\n         * @param {module:echarts/coord/cartesian/AxisModel} axisModel\n         * @param {module:echarts/model/Global} ecModel\n         * @param {module:echarts/ExtensionAPI} api\n         * @param {Object} payload\n         */\n        updateAxisPointer: function (axisModel, ecModel, api, payload, force) {\n            updateAxisPointer(this, axisModel, ecModel, api, payload, false);\n        },\n\n        /**\n         * @override\n         */\n        remove: function (ecModel, api) {\n            var axisPointer = this._axisPointer;\n            axisPointer && axisPointer.remove(api);\n            AxisView.superApply(this, 'remove', arguments);\n        },\n\n        /**\n         * @override\n         */\n        dispose: function (ecModel, api) {\n            disposeAxisPointer(this, api);\n            AxisView.superApply(this, 'dispose', arguments);\n        }\n\n    });\n\n    function updateAxisPointer(axisView, axisModel, ecModel, api, payload, forceRender) {\n        var Clazz = AxisView.getAxisPointerClass(axisView.axisPointerClass);\n        if (!Clazz) {\n            return;\n        }\n        var axisPointerModel = axisPointerModelHelper.getAxisPointerModel(axisModel);\n        axisPointerModel\n            ? (axisView._axisPointer || (axisView._axisPointer = new Clazz()))\n                .render(axisModel, axisPointerModel, api, forceRender)\n            : disposeAxisPointer(axisView, api);\n    }\n\n    function disposeAxisPointer(axisView, ecModel, api) {\n        var axisPointer = axisView._axisPointer;\n        axisPointer && axisPointer.dispose(ecModel, api);\n        axisView._axisPointer = null;\n    }\n\n    var axisPointerClazz = [];\n\n    AxisView.registerAxisPointerClass = function (type, clazz) {\n        if (__DEV__) {\n            if (axisPointerClazz[type]) {\n                throw new Error('axisPointer ' + type + ' exists');\n            }\n        }\n        axisPointerClazz[type] = clazz;\n    };\n\n    AxisView.getAxisPointerClass = function (type) {\n        return type && axisPointerClazz[type];\n    };\n\n    module.exports = AxisView;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.6.1@echarts/lib/component/axis/AxisView.js\n// module id = t4wi\n// module chunks = 0 1","\n\n    var DataZoomView = require('./DataZoomView');\n    var zrUtil = require('zrender/lib/core/util');\n    var sliderMove = require('../helper/sliderMove');\n    var roams = require('./roams');\n    var bind = zrUtil.bind;\n\n    var InsideZoomView = DataZoomView.extend({\n\n        type: 'dataZoom.inside',\n\n        /**\n         * @override\n         */\n        init: function (ecModel, api) {\n            /**\n             * 'throttle' is used in this.dispatchAction, so we save range\n             * to avoid missing some 'pan' info.\n             * @private\n             * @type {Array.<number>}\n             */\n            this._range;\n        },\n\n        /**\n         * @override\n         */\n        render: function (dataZoomModel, ecModel, api, payload) {\n            InsideZoomView.superApply(this, 'render', arguments);\n\n            // Notice: origin this._range should be maintained, and should not be re-fetched\n            // from dataZoomModel when payload.type is 'dataZoom', otherwise 'pan' or 'zoom'\n            // info will be missed because of 'throttle' of this.dispatchAction.\n            if (roams.shouldRecordRange(payload, dataZoomModel.id)) {\n                this._range = dataZoomModel.getPercentRange();\n            }\n\n            // Reset controllers.\n            zrUtil.each(this.getTargetCoordInfo(), function (coordInfoList, coordSysName) {\n\n                var allCoordIds = zrUtil.map(coordInfoList, function (coordInfo) {\n                    return roams.generateCoordId(coordInfo.model);\n                });\n\n                zrUtil.each(coordInfoList, function (coordInfo) {\n                    var coordModel = coordInfo.model;\n                    var dataZoomOption = dataZoomModel.option;\n\n                    roams.register(\n                        api,\n                        {\n                            coordId: roams.generateCoordId(coordModel),\n                            allCoordIds: allCoordIds,\n                            containsPoint: function (e, x, y) {\n                                return coordModel.coordinateSystem.containPoint([x, y]);\n                            },\n                            dataZoomId: dataZoomModel.id,\n                            throttleRate: dataZoomModel.get('throttle', true),\n                            panGetRange: bind(this._onPan, this, coordInfo, coordSysName),\n                            zoomGetRange: bind(this._onZoom, this, coordInfo, coordSysName),\n                            zoomLock: dataZoomOption.zoomLock,\n                            disabled: dataZoomOption.disabled,\n                            roamControllerOpt: {\n                                zoomOnMouseWheel: dataZoomOption.zoomOnMouseWheel,\n                                moveOnMouseMove: dataZoomOption.moveOnMouseMove,\n                                preventDefaultMouseMove: dataZoomOption.preventDefaultMouseMove\n                            }\n                        }\n                    );\n                }, this);\n\n            }, this);\n        },\n\n        /**\n         * @override\n         */\n        dispose: function () {\n            roams.unregister(this.api, this.dataZoomModel.id);\n            InsideZoomView.superApply(this, 'dispose', arguments);\n            this._range = null;\n        },\n\n        /**\n         * @private\n         */\n        _onPan: function (coordInfo, coordSysName, controller, dx, dy, oldX, oldY, newX, newY) {\n            var range = this._range.slice();\n\n            // Calculate transform by the first axis.\n            var axisModel = coordInfo.axisModels[0];\n            if (!axisModel) {\n                return;\n            }\n\n            var directionInfo = getDirectionInfo[coordSysName](\n                [oldX, oldY], [newX, newY], axisModel, controller, coordInfo\n            );\n\n            var percentDelta = directionInfo.signal\n                * (range[1] - range[0])\n                * directionInfo.pixel / directionInfo.pixelLength;\n\n            sliderMove(percentDelta, range, [0, 100], 'all');\n\n            return (this._range = range);\n        },\n\n        /**\n         * @private\n         */\n        _onZoom: function (coordInfo, coordSysName, controller, scale, mouseX, mouseY) {\n            var range = this._range.slice();\n\n            // Calculate transform by the first axis.\n            var axisModel = coordInfo.axisModels[0];\n            if (!axisModel) {\n                return;\n            }\n\n            var directionInfo = getDirectionInfo[coordSysName](\n                null, [mouseX, mouseY], axisModel, controller, coordInfo\n            );\n\n            var percentPoint = (directionInfo.pixel - directionInfo.pixelStart) /\n                directionInfo.pixelLength * (range[1] - range[0]) + range[0];\n\n            scale = Math.max(1 / scale, 0);\n            range[0] = (range[0] - percentPoint) * scale + percentPoint;\n            range[1] = (range[1] - percentPoint) * scale + percentPoint;\n\n            // Restrict range.\n            var minMaxSpan = this.dataZoomModel.findRepresentativeAxisProxy().getMinMaxSpan();\n            sliderMove(0, range, [0, 100], 0, minMaxSpan.minSpan, minMaxSpan.maxSpan);\n\n            return (this._range = range);\n        }\n\n    });\n\n    var getDirectionInfo = {\n\n        grid: function (oldPoint, newPoint, axisModel, controller, coordInfo) {\n            var axis = axisModel.axis;\n            var ret = {};\n            var rect = coordInfo.model.coordinateSystem.getRect();\n            oldPoint = oldPoint || [0, 0];\n\n            if (axis.dim === 'x') {\n                ret.pixel = newPoint[0] - oldPoint[0];\n                ret.pixelLength = rect.width;\n                ret.pixelStart = rect.x;\n                ret.signal = axis.inverse ? 1 : -1;\n            }\n            else { // axis.dim === 'y'\n                ret.pixel = newPoint[1] - oldPoint[1];\n                ret.pixelLength = rect.height;\n                ret.pixelStart = rect.y;\n                ret.signal = axis.inverse ? -1 : 1;\n            }\n\n            return ret;\n        },\n\n        polar: function (oldPoint, newPoint, axisModel, controller, coordInfo) {\n            var axis = axisModel.axis;\n            var ret = {};\n            var polar = coordInfo.model.coordinateSystem;\n            var radiusExtent = polar.getRadiusAxis().getExtent();\n            var angleExtent = polar.getAngleAxis().getExtent();\n\n            oldPoint = oldPoint ? polar.pointToCoord(oldPoint) : [0, 0];\n            newPoint = polar.pointToCoord(newPoint);\n\n            if (axisModel.mainType === 'radiusAxis') {\n                ret.pixel = newPoint[0] - oldPoint[0];\n                // ret.pixelLength = Math.abs(radiusExtent[1] - radiusExtent[0]);\n                // ret.pixelStart = Math.min(radiusExtent[0], radiusExtent[1]);\n                ret.pixelLength = radiusExtent[1] - radiusExtent[0];\n                ret.pixelStart = radiusExtent[0];\n                ret.signal = axis.inverse ? 1 : -1;\n            }\n            else { // 'angleAxis'\n                ret.pixel = newPoint[1] - oldPoint[1];\n                // ret.pixelLength = Math.abs(angleExtent[1] - angleExtent[0]);\n                // ret.pixelStart = Math.min(angleExtent[0], angleExtent[1]);\n                ret.pixelLength = angleExtent[1] - angleExtent[0];\n                ret.pixelStart = angleExtent[0];\n                ret.signal = axis.inverse ? -1 : 1;\n            }\n\n            return ret;\n        },\n\n        singleAxis: function (oldPoint, newPoint, axisModel, controller, coordInfo) {\n            var axis = axisModel.axis;\n            var rect = coordInfo.model.coordinateSystem.getRect();\n            var ret = {};\n\n            oldPoint = oldPoint || [0, 0];\n\n            if (axis.orient === 'horizontal') {\n                ret.pixel = newPoint[0] - oldPoint[0];\n                ret.pixelLength = rect.width;\n                ret.pixelStart = rect.x;\n                ret.signal = axis.inverse ? 1 : -1;\n            }\n            else { // 'vertical'\n                ret.pixel = newPoint[1] - oldPoint[1];\n                ret.pixelLength = rect.height;\n                ret.pixelStart = rect.y;\n                ret.signal = axis.inverse ? -1 : 1;\n            }\n\n            return ret;\n        }\n    };\n\n    module.exports = InsideZoomView;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.6.1@echarts/lib/component/dataZoom/InsideZoomView.js\n// module id = t6Cc\n// module chunks = 0 1","\n\n    module.exports = {\n        getBoxLayoutParams: function () {\n            return {\n                left: this.get('left'),\n                top: this.get('top'),\n                right: this.get('right'),\n                bottom: this.get('bottom'),\n                width: this.get('width'),\n                height: this.get('height')\n            };\n        }\n    };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.6.1@echarts/lib/model/mixin/boxLayout.js\n// module id = tPN/\n// module chunks = 0 1","\n\n    var zrUtil = require('zrender/lib/core/util');\n    var modelUtil = require('../../util/model');\n\n    /**\n     * @param {Object} finder contains {seriesIndex, dataIndex, dataIndexInside}\n     * @param {module:echarts/model/Global} ecModel\n     * @return {Object} {point: [x, y], el: ...} point Will not be null.\n     */\n    module.exports = function (finder, ecModel) {\n        var point = [];\n        var seriesIndex = finder.seriesIndex;\n        var seriesModel;\n        if (seriesIndex == null || !(\n            seriesModel = ecModel.getSeriesByIndex(seriesIndex)\n        )) {\n            return {point: []};\n        }\n\n        var data = seriesModel.getData();\n        var dataIndex = modelUtil.queryDataIndex(data, finder);\n        if (dataIndex == null || zrUtil.isArray(dataIndex)) {\n            return {point: []};\n        }\n\n        var el = data.getItemGraphicEl(dataIndex);\n        var coordSys = seriesModel.coordinateSystem;\n\n        if (seriesModel.getTooltipPosition) {\n            point = seriesModel.getTooltipPosition(dataIndex) || [];\n        }\n        else if (coordSys && coordSys.dataToPoint) {\n            point = coordSys.dataToPoint(\n                data.getValues(\n                    zrUtil.map(coordSys.dimensions, function (dim) {\n                        return seriesModel.coordDimToDataDim(dim)[0];\n                    }), dataIndex, true\n                )\n            ) || [];\n        }\n        else if (el) {\n            // Use graphic bounding rect\n            var rect = el.getBoundingRect().clone();\n            rect.applyTransform(el.transform);\n            point = [\n                rect.x + rect.width / 2,\n                rect.y + rect.height / 2\n            ];\n        }\n\n        return {point: point, el: el};\n    };\n\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.6.1@echarts/lib/component/axisPointer/findPointFromSeries.js\n// module id = tR6g\n// module chunks = 0 1","\n\n    var zrUtil = require('zrender/lib/core/util');\n    var graphic = require('../../util/graphic');\n    var AxisBuilder = require('./AxisBuilder');\n    var AxisView = require('./AxisView');\n    var cartesianAxisHelper = require('./cartesianAxisHelper');\n    var ifIgnoreOnTick = AxisBuilder.ifIgnoreOnTick;\n    var getInterval = AxisBuilder.getInterval;\n\n    var axisBuilderAttrs = [\n        'axisLine', 'axisLabel', 'axisTick', 'axisName'\n    ];\n    var selfBuilderAttrs = [\n        'splitArea', 'splitLine'\n    ];\n\n    // function getAlignWithLabel(model, axisModel) {\n    //     var alignWithLabel = model.get('alignWithLabel');\n    //     if (alignWithLabel === 'auto') {\n    //         alignWithLabel = axisModel.get('axisTick.alignWithLabel');\n    //     }\n    //     return alignWithLabel;\n    // }\n\n    var CartesianAxisView = AxisView.extend({\n\n        type: 'cartesianAxis',\n\n        axisPointerClass: 'CartesianAxisPointer',\n\n        /**\n         * @override\n         */\n        render: function (axisModel, ecModel, api, payload) {\n\n            this.group.removeAll();\n\n            var oldAxisGroup = this._axisGroup;\n            this._axisGroup = new graphic.Group();\n\n            this.group.add(this._axisGroup);\n\n            if (!axisModel.get('show')) {\n                return;\n            }\n\n            var gridModel = axisModel.getCoordSysModel();\n\n            var layout = cartesianAxisHelper.layout(gridModel, axisModel);\n\n            var axisBuilder = new AxisBuilder(axisModel, layout);\n\n            zrUtil.each(axisBuilderAttrs, axisBuilder.add, axisBuilder);\n\n            this._axisGroup.add(axisBuilder.getGroup());\n\n            zrUtil.each(selfBuilderAttrs, function (name) {\n                if (axisModel.get(name + '.show')) {\n                    this['_' + name](axisModel, gridModel, layout.labelInterval);\n                }\n            }, this);\n\n            graphic.groupTransition(oldAxisGroup, this._axisGroup, axisModel);\n\n            CartesianAxisView.superCall(this, 'render', axisModel, ecModel, api, payload);\n        },\n\n        /**\n         * @param {module:echarts/coord/cartesian/AxisModel} axisModel\n         * @param {module:echarts/coord/cartesian/GridModel} gridModel\n         * @param {number|Function} labelInterval\n         * @private\n         */\n        _splitLine: function (axisModel, gridModel, labelInterval) {\n            var axis = axisModel.axis;\n\n            if (axis.scale.isBlank()) {\n                return;\n            }\n\n            var splitLineModel = axisModel.getModel('splitLine');\n            var lineStyleModel = splitLineModel.getModel('lineStyle');\n            var lineColors = lineStyleModel.get('color');\n\n            var lineInterval = getInterval(splitLineModel, labelInterval);\n\n            lineColors = zrUtil.isArray(lineColors) ? lineColors : [lineColors];\n\n            var gridRect = gridModel.coordinateSystem.getRect();\n            var isHorizontal = axis.isHorizontal();\n\n            var lineCount = 0;\n\n            var ticksCoords = axis.getTicksCoords(\n                // splitLineModel.get('alignWithLabel')\n            );\n            var ticks = axis.scale.getTicks();\n\n            var p1 = [];\n            var p2 = [];\n            // Simple optimization\n            // Batching the lines if color are the same\n            var lineStyle = lineStyleModel.getLineStyle();\n            for (var i = 0; i < ticksCoords.length; i++) {\n                if (ifIgnoreOnTick(axis, i, lineInterval)) {\n                    continue;\n                }\n\n                var tickCoord = axis.toGlobalCoord(ticksCoords[i]);\n\n                if (isHorizontal) {\n                    p1[0] = tickCoord;\n                    p1[1] = gridRect.y;\n                    p2[0] = tickCoord;\n                    p2[1] = gridRect.y + gridRect.height;\n                }\n                else {\n                    p1[0] = gridRect.x;\n                    p1[1] = tickCoord;\n                    p2[0] = gridRect.x + gridRect.width;\n                    p2[1] = tickCoord;\n                }\n\n                var colorIndex = (lineCount++) % lineColors.length;\n                this._axisGroup.add(new graphic.Line(graphic.subPixelOptimizeLine({\n                    anid: 'line_' + ticks[i],\n\n                    shape: {\n                        x1: p1[0],\n                        y1: p1[1],\n                        x2: p2[0],\n                        y2: p2[1]\n                    },\n                    style: zrUtil.defaults({\n                        stroke: lineColors[colorIndex]\n                    }, lineStyle),\n                    silent: true\n                })));\n            }\n        },\n\n        /**\n         * @param {module:echarts/coord/cartesian/AxisModel} axisModel\n         * @param {module:echarts/coord/cartesian/GridModel} gridModel\n         * @param {number|Function} labelInterval\n         * @private\n         */\n        _splitArea: function (axisModel, gridModel, labelInterval) {\n            var axis = axisModel.axis;\n\n            if (axis.scale.isBlank()) {\n                return;\n            }\n\n            var splitAreaModel = axisModel.getModel('splitArea');\n            var areaStyleModel = splitAreaModel.getModel('areaStyle');\n            var areaColors = areaStyleModel.get('color');\n\n            var gridRect = gridModel.coordinateSystem.getRect();\n\n            var ticksCoords = axis.getTicksCoords(\n                // splitAreaModel.get('alignWithLabel')\n            );\n            var ticks = axis.scale.getTicks();\n\n            var prevX = axis.toGlobalCoord(ticksCoords[0]);\n            var prevY = axis.toGlobalCoord(ticksCoords[0]);\n\n            var count = 0;\n\n            var areaInterval = getInterval(splitAreaModel, labelInterval);\n\n            var areaStyle = areaStyleModel.getAreaStyle();\n            areaColors = zrUtil.isArray(areaColors) ? areaColors : [areaColors];\n\n            for (var i = 1; i < ticksCoords.length; i++) {\n                if (ifIgnoreOnTick(axis, i, areaInterval)) {\n                    continue;\n                }\n\n                var tickCoord = axis.toGlobalCoord(ticksCoords[i]);\n\n                var x;\n                var y;\n                var width;\n                var height;\n                if (axis.isHorizontal()) {\n                    x = prevX;\n                    y = gridRect.y;\n                    width = tickCoord - x;\n                    height = gridRect.height;\n                }\n                else {\n                    x = gridRect.x;\n                    y = prevY;\n                    width = gridRect.width;\n                    height = tickCoord - y;\n                }\n\n                var colorIndex = (count++) % areaColors.length;\n                this._axisGroup.add(new graphic.Rect({\n                    anid: 'area_' + ticks[i],\n\n                    shape: {\n                        x: x,\n                        y: y,\n                        width: width,\n                        height: height\n                    },\n                    style: zrUtil.defaults({\n                        fill: areaColors[colorIndex]\n                    }, areaStyle),\n                    silent: true\n                }));\n\n                prevX = x + width;\n                prevY = y + height;\n            }\n        }\n    });\n\n    CartesianAxisView.extend({\n        type: 'xAxis'\n    });\n    CartesianAxisView.extend({\n        type: 'yAxis'\n    });\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.6.1@echarts/lib/component/axis/CartesianAxisView.js\n// module id = tojz\n// module chunks = 0 1","\n\n    var PI2 = Math.PI * 2;\n    module.exports = {\n        normalizeRadian: function(angle) {\n            angle %= PI2;\n            if (angle < 0) {\n                angle += PI2;\n            }\n            return angle;\n        }\n    };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.5.1@zrender/lib/contain/util.js\n// module id = u4xi\n// module chunks = 0 1","\n\n    var numberUtil = require('../../util/number');\n    var parsePercent = numberUtil.parsePercent;\n    var labelLayout = require('./labelLayout');\n    var zrUtil = require('zrender/lib/core/util');\n\n    var PI2 = Math.PI * 2;\n    var RADIAN = Math.PI / 180;\n\n    module.exports = function (seriesType, ecModel, api, payload) {\n        ecModel.eachSeriesByType(seriesType, function (seriesModel) {\n            var center = seriesModel.get('center');\n            var radius = seriesModel.get('radius');\n\n            if (!zrUtil.isArray(radius)) {\n                radius = [0, radius];\n            }\n            if (!zrUtil.isArray(center)) {\n                center = [center, center];\n            }\n\n            var width = api.getWidth();\n            var height = api.getHeight();\n            var size = Math.min(width, height);\n            var cx = parsePercent(center[0], width);\n            var cy = parsePercent(center[1], height);\n            var r0 = parsePercent(radius[0], size / 2);\n            var r = parsePercent(radius[1], size / 2);\n\n            var data = seriesModel.getData();\n\n            var startAngle = -seriesModel.get('startAngle') * RADIAN;\n\n            var minAngle = seriesModel.get('minAngle') * RADIAN;\n\n            var validDataCount = 0;\n            data.each('value', function (value) {\n                !isNaN(value) && validDataCount++;\n            });\n\n            var sum = data.getSum('value');\n            // Sum may be 0\n            var unitRadian = Math.PI / (sum || validDataCount) * 2;\n\n            var clockwise = seriesModel.get('clockwise');\n\n            var roseType = seriesModel.get('roseType');\n            var stillShowZeroSum = seriesModel.get('stillShowZeroSum');\n\n            // [0...max]\n            var extent = data.getDataExtent('value');\n            extent[0] = 0;\n\n            // In the case some sector angle is smaller than minAngle\n            var restAngle = PI2;\n            var valueSumLargerThanMinAngle = 0;\n\n            var currentAngle = startAngle;\n            var dir = clockwise ? 1 : -1;\n\n            data.each('value', function (value, idx) {\n                var angle;\n                if (isNaN(value)) {\n                    data.setItemLayout(idx, {\n                        angle: NaN,\n                        startAngle: NaN,\n                        endAngle: NaN,\n                        clockwise: clockwise,\n                        cx: cx,\n                        cy: cy,\n                        r0: r0,\n                        r: roseType\n                            ? NaN\n                            : r\n                    });\n                    return;\n                }\n\n                // FIXME 兼容 2.0 但是 roseType 是 area 的时候才是这样？\n                if (roseType !== 'area') {\n                    angle = (sum === 0 && stillShowZeroSum)\n                        ? unitRadian : (value * unitRadian);\n                }\n                else {\n                    angle = PI2 / validDataCount;\n                }\n\n                if (angle < minAngle) {\n                    angle = minAngle;\n                    restAngle -= minAngle;\n                }\n                else {\n                    valueSumLargerThanMinAngle += value;\n                }\n\n                var endAngle = currentAngle + dir * angle;\n                data.setItemLayout(idx, {\n                    angle: angle,\n                    startAngle: currentAngle,\n                    endAngle: endAngle,\n                    clockwise: clockwise,\n                    cx: cx,\n                    cy: cy,\n                    r0: r0,\n                    r: roseType\n                        ? numberUtil.linearMap(value, extent, [r0, r])\n                        : r\n                });\n\n                currentAngle = endAngle;\n            }, true);\n\n            // Some sector is constrained by minAngle\n            // Rest sectors needs recalculate angle\n            if (restAngle < PI2 && validDataCount) {\n                // Average the angle if rest angle is not enough after all angles is\n                // Constrained by minAngle\n                if (restAngle <= 1e-3) {\n                    var angle = PI2 / validDataCount;\n                    data.each('value', function (value, idx) {\n                        if (!isNaN(value)) {\n                            var layout = data.getItemLayout(idx);\n                            layout.angle = angle;\n                            layout.startAngle = startAngle + dir * idx * angle;\n                            layout.endAngle = startAngle + dir * (idx + 1) * angle;\n                        }\n                    });\n                }\n                else {\n                    unitRadian = restAngle / valueSumLargerThanMinAngle;\n                    currentAngle = startAngle;\n                    data.each('value', function (value, idx) {\n                        if (!isNaN(value)) {\n                            var layout = data.getItemLayout(idx);\n                            var angle = layout.angle === minAngle\n                                ? minAngle : value * unitRadian;\n                            layout.startAngle = currentAngle;\n                            layout.endAngle = currentAngle + dir * angle;\n                            currentAngle += dir * angle;\n                        }\n                    });\n                }\n            }\n\n            labelLayout(seriesModel, r, width, height);\n        });\n    };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.6.1@echarts/lib/chart/pie/pieLayout.js\n// module id = ujyV\n// module chunks = 0 1","\n\n    var ComponentView = require('../../view/Component');\n\n    module.exports = ComponentView.extend({\n\n        type: 'dataZoom',\n\n        render: function (dataZoomModel, ecModel, api, payload) {\n            this.dataZoomModel = dataZoomModel;\n            this.ecModel = ecModel;\n            this.api = api;\n        },\n\n        /**\n         * Find the first target coordinate system.\n         *\n         * @protected\n         * @return {Object} {\n         *                   grid: [\n         *                       {model: coord0, axisModels: [axis1, axis3], coordIndex: 1},\n         *                       {model: coord1, axisModels: [axis0, axis2], coordIndex: 0},\n         *                       ...\n         *                   ],  // cartesians must not be null/undefined.\n         *                   polar: [\n         *                       {model: coord0, axisModels: [axis4], coordIndex: 0},\n         *                       ...\n         *                   ],  // polars must not be null/undefined.\n         *                   singleAxis: [\n         *                       {model: coord0, axisModels: [], coordIndex: 0}\n         *                   ]\n         */\n        getTargetCoordInfo: function () {\n            var dataZoomModel = this.dataZoomModel;\n            var ecModel = this.ecModel;\n            var coordSysLists = {};\n\n            dataZoomModel.eachTargetAxis(function (dimNames, axisIndex) {\n                var axisModel = ecModel.getComponent(dimNames.axis, axisIndex);\n                if (axisModel) {\n                    var coordModel = axisModel.getCoordSysModel();\n                    coordModel && save(\n                        coordModel,\n                        axisModel,\n                        coordSysLists[coordModel.mainType] || (coordSysLists[coordModel.mainType] = []),\n                        coordModel.componentIndex\n                    );\n                }\n            }, this);\n\n            function save(coordModel, axisModel, store, coordIndex) {\n                var item;\n                for (var i = 0; i < store.length; i++) {\n                    if (store[i].model === coordModel) {\n                        item = store[i];\n                        break;\n                    }\n                }\n                if (!item) {\n                    store.push(item = {\n                        model: coordModel, axisModels: [], coordIndex: coordIndex\n                    });\n                }\n                item.axisModels.push(axisModel);\n            }\n\n            return coordSysLists;\n        }\n\n    });\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.6.1@echarts/lib/component/dataZoom/DataZoomView.js\n// module id = uliI\n// module chunks = 0 1","\n\n    var curve = require('../core/curve');\n\n    module.exports = {\n        /**\n         * 三次贝塞尔曲线描边包含判断\n         * @param  {number}  x0\n         * @param  {number}  y0\n         * @param  {number}  x1\n         * @param  {number}  y1\n         * @param  {number}  x2\n         * @param  {number}  y2\n         * @param  {number}  x3\n         * @param  {number}  y3\n         * @param  {number}  lineWidth\n         * @param  {number}  x\n         * @param  {number}  y\n         * @return {boolean}\n         */\n        containStroke: function(x0, y0, x1, y1, x2, y2, x3, y3, lineWidth, x, y) {\n            if (lineWidth === 0) {\n                return false;\n            }\n            var _l = lineWidth;\n            // Quick reject\n            if (\n                (y > y0 + _l && y > y1 + _l && y > y2 + _l && y > y3 + _l)\n                || (y < y0 - _l && y < y1 - _l && y < y2 - _l && y < y3 - _l)\n                || (x > x0 + _l && x > x1 + _l && x > x2 + _l && x > x3 + _l)\n                || (x < x0 - _l && x < x1 - _l && x < x2 - _l && x < x3 - _l)\n            ) {\n                return false;\n            }\n            var d = curve.cubicProjectPoint(\n                x0, y0, x1, y1, x2, y2, x3, y3,\n                x, y, null\n            );\n            return d <= _l / 2;\n        }\n    };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.5.1@zrender/lib/contain/cubic.js\n// module id = uy5n\n// module chunks = 0 1","/**\n * @module echarts/chart/helper/Symbol\n */\n\n\n    var graphic = require('../../util/graphic');\n    var zrUtil = require('zrender/lib/core/util');\n    var modelUtil = require('../../util/model');\n\n    var helper = {};\n\n    helper.findLabelValueDim = function (data) {\n        var valueDim;\n        var labelDims = modelUtil.otherDimToDataDim(data, 'label');\n\n        if (labelDims.length) {\n            valueDim = labelDims[0];\n        }\n        else {\n            // Get last value dim\n            var dimensions = data.dimensions.slice();\n            var dataType;\n            while (dimensions.length && (\n                valueDim = dimensions.pop(),\n                dataType = data.getDimensionInfo(valueDim).type,\n                dataType === 'ordinal' || dataType === 'time'\n            )) {} // jshint ignore:line\n        }\n\n        return valueDim;\n    };\n\n    helper.setTextToStyle = function (\n        data, dataIndex, valueDim, elStyle, seriesModel, labelModel, color\n    ) {\n        if (valueDim != null && labelModel.getShallow('show')) {\n            graphic.setText(elStyle, labelModel, color);\n            elStyle.text = zrUtil.retrieve(\n                seriesModel.getFormattedLabel(dataIndex, 'normal'),\n                data.get(valueDim, dataIndex)\n            );\n        }\n        else {\n            elStyle.text = '';\n        }\n    };\n\n    module.exports = helper;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.6.1@echarts/lib/chart/helper/labelHelper.js\n// module id = vGh9\n// module chunks = 0 1","'use strict';\n\n\n    var zrUtil = require('zrender/lib/core/util');\n    var formatUtil = require('../util/format');\n    var classUtil = require('../util/clazz');\n    var modelUtil = require('../util/model');\n    var ComponentModel = require('./Component');\n    var colorPaletteMixin = require('./mixin/colorPalette');\n    var env = require('zrender/lib/core/env');\n    var layout = require('../util/layout');\n\n    var set = classUtil.set;\n    var get = classUtil.get;\n    var encodeHTML = formatUtil.encodeHTML;\n    var addCommas = formatUtil.addCommas;\n\n    var SeriesModel = ComponentModel.extend({\n\n        type: 'series.__base__',\n\n        /**\n         * @readOnly\n         */\n        seriesIndex: 0,\n\n        // coodinateSystem will be injected in the echarts/CoordinateSystem\n        coordinateSystem: null,\n\n        /**\n         * @type {Object}\n         * @protected\n         */\n        defaultOption: null,\n\n        /**\n         * Data provided for legend\n         * @type {Function}\n         */\n        // PENDING\n        legendDataProvider: null,\n\n        /**\n         * Access path of color for visual\n         */\n        visualColorAccessPath: 'itemStyle.normal.color',\n\n        /**\n         * Support merge layout params.\n         * Only support 'box' now (left/right/top/bottom/width/height).\n         * @type {string|Object} Object can be {ignoreSize: true}\n         * @readOnly\n         */\n        layoutMode: null,\n\n        init: function (option, parentModel, ecModel, extraOpt) {\n\n            /**\n             * @type {number}\n             * @readOnly\n             */\n            this.seriesIndex = this.componentIndex;\n\n            this.mergeDefaultAndTheme(option, ecModel);\n\n            var data = this.getInitialData(option, ecModel);\n            if (__DEV__) {\n                zrUtil.assert(data, 'getInitialData returned invalid data.');\n            }\n            /**\n             * @type {module:echarts/data/List|module:echarts/data/Tree|module:echarts/data/Graph}\n             * @private\n             */\n            set(this, 'dataBeforeProcessed', data);\n\n            // If we reverse the order (make data firstly, and then make\n            // dataBeforeProcessed by cloneShallow), cloneShallow will\n            // cause data.graph.data !== data when using\n            // module:echarts/data/Graph or module:echarts/data/Tree.\n            // See module:echarts/data/helper/linkList\n            this.restoreData();\n        },\n\n        /**\n         * Util for merge default and theme to option\n         * @param  {Object} option\n         * @param  {module:echarts/model/Global} ecModel\n         */\n        mergeDefaultAndTheme: function (option, ecModel) {\n            var layoutMode = this.layoutMode;\n            var inputPositionParams = layoutMode\n                ? layout.getLayoutParams(option) : {};\n\n            zrUtil.merge(\n                option,\n                ecModel.getTheme().get(this.subType)\n            );\n            zrUtil.merge(option, this.getDefaultOption());\n\n            // Default label emphasis `position` and `show`\n            // FIXME Set label in mergeOption\n            modelUtil.defaultEmphasis(option.label, modelUtil.LABEL_OPTIONS);\n\n            this.fillDataTextStyle(option.data);\n\n            if (layoutMode) {\n                layout.mergeLayoutParam(option, inputPositionParams, layoutMode);\n            }\n        },\n\n        mergeOption: function (newSeriesOption, ecModel) {\n            newSeriesOption = zrUtil.merge(this.option, newSeriesOption, true);\n            this.fillDataTextStyle(newSeriesOption.data);\n\n            var layoutMode = this.layoutMode;\n            if (layoutMode) {\n                layout.mergeLayoutParam(this.option, newSeriesOption, layoutMode);\n            }\n\n            var data = this.getInitialData(newSeriesOption, ecModel);\n            // TODO Merge data?\n            if (data) {\n                set(this, 'data', data);\n                set(this, 'dataBeforeProcessed', data.cloneShallow());\n            }\n        },\n\n        fillDataTextStyle: function (data) {\n            // Default data label emphasis `position` and `show`\n            // FIXME Tree structure data ?\n            // FIXME Performance ?\n            if (data) {\n                for (var i = 0; i < data.length; i++) {\n                    if (data[i] && data[i].label) {\n                        modelUtil.defaultEmphasis(data[i].label, modelUtil.LABEL_OPTIONS);\n                    }\n                }\n            }\n        },\n\n        /**\n         * Init a data structure from data related option in series\n         * Must be overwritten\n         */\n        getInitialData: function () {},\n\n        /**\n         * @param {string} [dataType]\n         * @return {module:echarts/data/List}\n         */\n        getData: function (dataType) {\n            var data = get(this, 'data');\n            return dataType == null ? data : data.getLinkedData(dataType);\n        },\n\n        /**\n         * @param {module:echarts/data/List} data\n         */\n        setData: function (data) {\n            set(this, 'data', data);\n        },\n\n        /**\n         * Get data before processed\n         * @return {module:echarts/data/List}\n         */\n        getRawData: function () {\n            return get(this, 'dataBeforeProcessed');\n        },\n\n        /**\n         * Coord dimension to data dimension.\n         *\n         * By default the result is the same as dimensions of series data.\n         * But in some series data dimensions are different from coord dimensions (i.e.\n         * candlestick and boxplot). Override this method to handle those cases.\n         *\n         * Coord dimension to data dimension can be one-to-many\n         *\n         * @param {string} coordDim\n         * @return {Array.<string>} dimensions on the axis.\n         */\n        coordDimToDataDim: function (coordDim) {\n            return modelUtil.coordDimToDataDim(this.getData(), coordDim);\n        },\n\n        /**\n         * Convert data dimension to coord dimension.\n         *\n         * @param {string|number} dataDim\n         * @return {string}\n         */\n        dataDimToCoordDim: function (dataDim) {\n            return modelUtil.dataDimToCoordDim(this.getData(), dataDim);\n        },\n\n        /**\n         * Get base axis if has coordinate system and has axis.\n         * By default use coordSys.getBaseAxis();\n         * Can be overrided for some chart.\n         * @return {type} description\n         */\n        getBaseAxis: function () {\n            var coordSys = this.coordinateSystem;\n            return coordSys && coordSys.getBaseAxis && coordSys.getBaseAxis();\n        },\n\n        // FIXME\n        /**\n         * Default tooltip formatter\n         *\n         * @param {number} dataIndex\n         * @param {boolean} [multipleSeries=false]\n         * @param {number} [dataType]\n         */\n        formatTooltip: function (dataIndex, multipleSeries, dataType) {\n            function formatArrayValue(value) {\n                var vertially = zrUtil.reduce(value, function (vertially, val, idx) {\n                    var dimItem = data.getDimensionInfo(idx);\n                    return vertially |= dimItem.tooltip !== false && dimItem.tooltipName != null;\n                }, 0);\n\n                var result = [];\n                var tooltipDims = modelUtil.otherDimToDataDim(data, 'tooltip');\n\n                tooltipDims.length\n                    ? zrUtil.each(tooltipDims, function (dimIdx) {\n                        setEachItem(data.get(dimIdx, dataIndex), dimIdx);\n                    })\n                    // By default, all dims is used on tooltip.\n                    : zrUtil.each(value, setEachItem);\n\n                function setEachItem(val, dimIdx) {\n                    var dimInfo = data.getDimensionInfo(dimIdx);\n                    // If `dimInfo.tooltip` is not set, show tooltip.\n                    if (!dimInfo || dimInfo.otherDims.tooltip === false) {\n                        return;\n                    }\n                    var dimType = dimInfo.type;\n                    var valStr = (vertially ? '- ' + (dimInfo.tooltipName || dimInfo.name) + ': ' : '')\n                        + (dimType === 'ordinal'\n                            ? val + ''\n                            : dimType === 'time'\n                            ? (multipleSeries ? '' : formatUtil.formatTime('yyyy/MM/dd hh:mm:ss', val))\n                            : addCommas(val)\n                        );\n                    valStr && result.push(encodeHTML(valStr));\n                }\n\n                return (vertially ? '<br/>' : '') + result.join(vertially ? '<br/>' : ', ');\n            }\n\n            var data = get(this, 'data');\n\n            var value = this.getRawValue(dataIndex);\n            var formattedValue = zrUtil.isArray(value)\n                ? formatArrayValue(value) : encodeHTML(addCommas(value));\n            var name = data.getName(dataIndex);\n\n            var color = data.getItemVisual(dataIndex, 'color');\n            if (zrUtil.isObject(color) && color.colorStops) {\n                color = (color.colorStops[0] || {}).color;\n            }\n            color = color || 'transparent';\n\n            var colorEl = formatUtil.getTooltipMarker(color);\n\n            var seriesName = this.name;\n            // FIXME\n            if (seriesName === '\\0-') {\n                // Not show '-'\n                seriesName = '';\n            }\n            seriesName = seriesName\n                ? encodeHTML(seriesName) + (!multipleSeries ? '<br/>' : ': ')\n                : '';\n            return !multipleSeries\n                ? seriesName + colorEl\n                    + (name\n                        ? encodeHTML(name) + ': ' + formattedValue\n                        : formattedValue\n                    )\n                : colorEl + seriesName + formattedValue;\n        },\n\n        /**\n         * @return {boolean}\n         */\n        isAnimationEnabled: function () {\n            if (env.node) {\n                return false;\n            }\n\n            var animationEnabled = this.getShallow('animation');\n            if (animationEnabled) {\n                if (this.getData().count() > this.getShallow('animationThreshold')) {\n                    animationEnabled = false;\n                }\n            }\n            return animationEnabled;\n        },\n\n        restoreData: function () {\n            set(this, 'data', get(this, 'dataBeforeProcessed').cloneShallow());\n        },\n\n        getColorFromPalette: function (name, scope) {\n            var ecModel = this.ecModel;\n            // PENDING\n            var color = colorPaletteMixin.getColorFromPalette.call(this, name, scope);\n            if (!color) {\n                color = ecModel.getColorFromPalette(name, scope);\n            }\n            return color;\n        },\n\n        /**\n         * Get data indices for show tooltip content. See tooltip.\n         * @abstract\n         * @param {Array.<string>|string} dim\n         * @param {Array.<number>} value\n         * @param {module:echarts/coord/single/SingleAxis} baseAxis\n         * @return {Object} {dataIndices, nestestValue}.\n         */\n        getAxisTooltipData: null,\n\n        /**\n         * See tooltip.\n         * @abstract\n         * @param {number} dataIndex\n         * @return {Array.<number>} Point of tooltip. null/undefined can be returned.\n         */\n        getTooltipPosition: null\n    });\n\n    zrUtil.mixin(SeriesModel, modelUtil.dataFormatMixin);\n    zrUtil.mixin(SeriesModel, colorPaletteMixin);\n\n    module.exports = SeriesModel;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.6.1@echarts/lib/model/Series.js\n// module id = vd24\n// module chunks = 0 1","// CompoundPath to improve performance\n\n\n    var Path = require('./Path');\n\n    module.exports = Path.extend({\n\n        type: 'compound',\n\n        shape: {\n\n            paths: null\n        },\n\n        _updatePathDirty: function () {\n            var dirtyPath = this.__dirtyPath;\n            var paths = this.shape.paths;\n            for (var i = 0; i < paths.length; i++) {\n                // Mark as dirty if any subpath is dirty\n                dirtyPath = dirtyPath || paths[i].__dirtyPath;\n            }\n            this.__dirtyPath = dirtyPath;\n            this.__dirty = this.__dirty || dirtyPath;\n        },\n\n        beforeBrush: function () {\n            this._updatePathDirty();\n            var paths = this.shape.paths || [];\n            var scale = this.getGlobalScale();\n            // Update path scale\n            for (var i = 0; i < paths.length; i++) {\n                if (!paths[i].path) {\n                    paths[i].createPathProxy();\n                }\n                paths[i].path.setScale(scale[0], scale[1]);\n            }\n        },\n\n        buildPath: function (ctx, shape) {\n            var paths = shape.paths || [];\n            for (var i = 0; i < paths.length; i++) {\n                paths[i].buildPath(ctx, paths[i].shape, true);\n            }\n        },\n\n        afterBrush: function () {\n            var paths = this.shape.paths;\n            for (var i = 0; i < paths.length; i++) {\n                paths[i].__dirtyPath = false;\n            }\n        },\n\n        getBoundingRect: function () {\n            this._updatePathDirty();\n            return Path.prototype.getBoundingRect.call(this);\n        }\n    });\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.5.1@zrender/lib/graphic/CompoundPath.js\n// module id = vfQN\n// module chunks = 0 1","\n    var getItemStyle = require('./makeStyleMapper')(\n        [\n            ['fill', 'color'],\n            ['stroke', 'borderColor'],\n            ['lineWidth', 'borderWidth'],\n            ['opacity'],\n            ['shadowBlur'],\n            ['shadowOffsetX'],\n            ['shadowOffsetY'],\n            ['shadowColor'],\n            ['textPosition'],\n            ['textAlign']\n        ]\n    );\n    module.exports = {\n        getItemStyle: function (excludes, includes) {\n            var style = getItemStyle.call(this, excludes, includes);\n            var lineDash = this.getBorderLineDash();\n            lineDash && (style.lineDash = lineDash);\n            return style;\n        },\n\n        getBorderLineDash: function () {\n            var lineType = this.get('borderType');\n            return (lineType === 'solid' || lineType == null) ? null\n                : (lineType === 'dashed' ? [5, 5] : [1, 1]);\n        }\n    };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.6.1@echarts/lib/model/mixin/itemStyle.js\n// module id = vnaK\n// module chunks = 0 1","'use strict';\n\n\n    var graphic = require('../../util/graphic');\n    var BaseAxisPointer = require('./BaseAxisPointer');\n    var viewHelper = require('./viewHelper');\n    var cartesianAxisHelper = require('../axis/cartesianAxisHelper');\n    var AxisView = require('../axis/AxisView');\n\n    var CartesianAxisPointer = BaseAxisPointer.extend({\n\n        /**\n         * @override\n         */\n        makeElOption: function (elOption, value, axisModel, axisPointerModel, api) {\n            var axis = axisModel.axis;\n            var grid = axis.grid;\n            var axisPointerType = axisPointerModel.get('type');\n            var otherExtent = getCartesian(grid, axis).getOtherAxis(axis).getGlobalExtent();\n            var pixelValue = axis.toGlobalCoord(axis.dataToCoord(value, true));\n\n            if (axisPointerType && axisPointerType !== 'none') {\n                var elStyle = viewHelper.buildElStyle(axisPointerModel);\n                var pointerOption = pointerShapeBuilder[axisPointerType](\n                    axis, pixelValue, otherExtent, elStyle\n                );\n                pointerOption.style = elStyle;\n                elOption.graphicKey = pointerOption.type;\n                elOption.pointer = pointerOption;\n            }\n\n            var layoutInfo = cartesianAxisHelper.layout(grid.model, axisModel);\n            viewHelper.buildCartesianSingleLabelElOption(\n                value, elOption, layoutInfo, axisModel, axisPointerModel, api\n            );\n        },\n\n        /**\n         * @override\n         */\n        getHandleTransform: function (value, axisModel, axisPointerModel) {\n            var layoutInfo = cartesianAxisHelper.layout(axisModel.axis.grid.model, axisModel, {\n                labelInside: false\n            });\n            layoutInfo.labelMargin = axisPointerModel.get('handle.margin');\n            return {\n                position: viewHelper.getTransformedPosition(axisModel.axis, value, layoutInfo),\n                rotation: layoutInfo.rotation + (layoutInfo.labelDirection < 0 ? Math.PI : 0)\n            };\n        },\n\n        /**\n         * @override\n         */\n        updateHandleTransform: function (transform, delta, axisModel, axisPointerModel) {\n            var axis = axisModel.axis;\n            var grid = axis.grid;\n            var axisExtent = axis.getGlobalExtent(true);\n            var otherExtent = getCartesian(grid, axis).getOtherAxis(axis).getGlobalExtent();\n            var dimIndex = axis.dim === 'x' ? 0 : 1;\n\n            var currPosition = transform.position;\n            currPosition[dimIndex] += delta[dimIndex];\n            currPosition[dimIndex] = Math.min(axisExtent[1], currPosition[dimIndex]);\n            currPosition[dimIndex] = Math.max(axisExtent[0], currPosition[dimIndex]);\n\n            var cursorOtherValue = (otherExtent[1] + otherExtent[0]) / 2;\n            var cursorPoint = [cursorOtherValue, cursorOtherValue];\n            cursorPoint[dimIndex] = currPosition[dimIndex];\n\n            // Make tooltip do not overlap axisPointer and in the middle of the grid.\n            var tooltipOptions = [{verticalAlign: 'middle'}, {align: 'center'}];\n\n            return {\n                position: currPosition,\n                rotation: transform.rotation,\n                cursorPoint: cursorPoint,\n                tooltipOption: tooltipOptions[dimIndex]\n            };\n        }\n\n    });\n\n    function getCartesian(grid, axis) {\n        var opt = {};\n        opt[axis.dim + 'AxisIndex'] = axis.index;\n        return grid.getCartesian(opt);\n    }\n\n    var pointerShapeBuilder = {\n\n        line: function (axis, pixelValue, otherExtent, elStyle) {\n            var targetShape = viewHelper.makeLineShape(\n                [pixelValue, otherExtent[0]],\n                [pixelValue, otherExtent[1]],\n                getAxisDimIndex(axis)\n            );\n            graphic.subPixelOptimizeLine({\n                shape: targetShape,\n                style: elStyle\n            });\n            return {\n                type: 'Line',\n                shape: targetShape\n            };\n        },\n\n        shadow: function (axis, pixelValue, otherExtent, elStyle) {\n            var bandWidth = axis.getBandWidth();\n            var span = otherExtent[1] - otherExtent[0];\n            return {\n                type: 'Rect',\n                shape: viewHelper.makeRectShape(\n                    [pixelValue - bandWidth / 2, otherExtent[0]],\n                    [bandWidth, span],\n                    getAxisDimIndex(axis)\n                )\n            };\n        }\n    };\n\n    function getAxisDimIndex(axis) {\n        return axis.dim === 'x' ? 0 : 1;\n    }\n\n    AxisView.registerAxisPointerClass('CartesianAxisPointer', CartesianAxisPointer);\n\n    module.exports = CartesianAxisPointer;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.6.1@echarts/lib/component/axisPointer/CartesianAxisPointer.js\n// module id = wLby\n// module chunks = 0 1","/**\n * @file Legend action\n */\n\n\n    var echarts = require('../../echarts');\n    var zrUtil = require('zrender/lib/core/util');\n\n    function legendSelectActionHandler(methodName, payload, ecModel) {\n        var selectedMap = {};\n        var isToggleSelect = methodName === 'toggleSelected';\n        var isSelected;\n        // Update all legend components\n        ecModel.eachComponent('legend', function (legendModel) {\n            if (isToggleSelect && isSelected != null) {\n                // Force other legend has same selected status\n                // Or the first is toggled to true and other are toggled to false\n                // In the case one legend has some item unSelected in option. And if other legend\n                // doesn't has the item, they will assume it is selected.\n                legendModel[isSelected ? 'select' : 'unSelect'](payload.name);\n            }\n            else {\n                legendModel[methodName](payload.name);\n                isSelected = legendModel.isSelected(payload.name);\n            }\n            var legendData = legendModel.getData();\n            zrUtil.each(legendData, function (model) {\n                var name = model.get('name');\n                // Wrap element\n                if (name === '\\n' || name === '') {\n                    return;\n                }\n                var isItemSelected = legendModel.isSelected(name);\n                if (selectedMap.hasOwnProperty(name)) {\n                    // Unselected if any legend is unselected\n                    selectedMap[name] = selectedMap[name] && isItemSelected;\n                }\n                else {\n                    selectedMap[name] = isItemSelected;\n                }\n            });\n        });\n        // Return the event explicitly\n        return {\n            name: payload.name,\n            selected: selectedMap\n        };\n    }\n    /**\n     * @event legendToggleSelect\n     * @type {Object}\n     * @property {string} type 'legendToggleSelect'\n     * @property {string} [from]\n     * @property {string} name Series name or data item name\n     */\n    echarts.registerAction(\n        'legendToggleSelect', 'legendselectchanged',\n        zrUtil.curry(legendSelectActionHandler, 'toggleSelected')\n    );\n\n    /**\n     * @event legendSelect\n     * @type {Object}\n     * @property {string} type 'legendSelect'\n     * @property {string} name Series name or data item name\n     */\n    echarts.registerAction(\n        'legendSelect', 'legendselected',\n        zrUtil.curry(legendSelectActionHandler, 'select')\n    );\n\n    /**\n     * @event legendUnSelect\n     * @type {Object}\n     * @property {string} type 'legendUnSelect'\n     * @property {string} name Series name or data item name\n     */\n    echarts.registerAction(\n        'legendUnSelect', 'legendunselected',\n        zrUtil.curry(legendSelectActionHandler, 'unSelect')\n    );\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.6.1@echarts/lib/component/legend/legendAction.js\n// module id = wmWp\n// module chunks = 0 1","/**\n * Component model\n *\n * @module echarts/model/Component\n */\n\n\n    var Model = require('./Model');\n    var zrUtil = require('zrender/lib/core/util');\n    var arrayPush = Array.prototype.push;\n    var componentUtil = require('../util/component');\n    var clazzUtil = require('../util/clazz');\n    var layout = require('../util/layout');\n\n    /**\n     * @alias module:echarts/model/Component\n     * @constructor\n     * @param {Object} option\n     * @param {module:echarts/model/Model} parentModel\n     * @param {module:echarts/model/Model} ecModel\n     */\n    var ComponentModel = Model.extend({\n\n        type: 'component',\n\n        /**\n         * @readOnly\n         * @type {string}\n         */\n        id: '',\n\n        /**\n         * @readOnly\n         */\n        name: '',\n\n        /**\n         * @readOnly\n         * @type {string}\n         */\n        mainType: '',\n\n        /**\n         * @readOnly\n         * @type {string}\n         */\n        subType: '',\n\n        /**\n         * @readOnly\n         * @type {number}\n         */\n        componentIndex: 0,\n\n        /**\n         * @type {Object}\n         * @protected\n         */\n        defaultOption: null,\n\n        /**\n         * @type {module:echarts/model/Global}\n         * @readOnly\n         */\n        ecModel: null,\n\n        /**\n         * key: componentType\n         * value:  Component model list, can not be null.\n         * @type {Object.<string, Array.<module:echarts/model/Model>>}\n         * @readOnly\n         */\n        dependentModels: [],\n\n        /**\n         * @type {string}\n         * @readOnly\n         */\n        uid: null,\n\n        /**\n         * Support merge layout params.\n         * Only support 'box' now (left/right/top/bottom/width/height).\n         * @type {string|Object} Object can be {ignoreSize: true}\n         * @readOnly\n         */\n        layoutMode: null,\n\n        $constructor: function (option, parentModel, ecModel, extraOpt) {\n            Model.call(this, option, parentModel, ecModel, extraOpt);\n\n            this.uid = componentUtil.getUID('componentModel');\n        },\n\n\n        init: function (option, parentModel, ecModel, extraOpt) {\n            this.mergeDefaultAndTheme(option, ecModel);\n        },\n\n        mergeDefaultAndTheme: function (option, ecModel) {\n            var layoutMode = this.layoutMode;\n            var inputPositionParams = layoutMode\n                ? layout.getLayoutParams(option) : {};\n\n            var themeModel = ecModel.getTheme();\n            zrUtil.merge(option, themeModel.get(this.mainType));\n            zrUtil.merge(option, this.getDefaultOption());\n\n            if (layoutMode) {\n                layout.mergeLayoutParam(option, inputPositionParams, layoutMode);\n            }\n        },\n\n        mergeOption: function (option, extraOpt) {\n            zrUtil.merge(this.option, option, true);\n\n            var layoutMode = this.layoutMode;\n            if (layoutMode) {\n                layout.mergeLayoutParam(this.option, option, layoutMode);\n            }\n        },\n\n        // Hooker after init or mergeOption\n        optionUpdated: function (newCptOption, isInit) {},\n\n        getDefaultOption: function () {\n            if (!clazzUtil.hasOwn(this, '__defaultOption')) {\n                var optList = [];\n                var Class = this.constructor;\n                while (Class) {\n                    var opt = Class.prototype.defaultOption;\n                    opt && optList.push(opt);\n                    Class = Class.superClass;\n                }\n\n                var defaultOption = {};\n                for (var i = optList.length - 1; i >= 0; i--) {\n                    defaultOption = zrUtil.merge(defaultOption, optList[i], true);\n                }\n                clazzUtil.set(this, '__defaultOption', defaultOption);\n            }\n            return clazzUtil.get(this, '__defaultOption');\n        },\n\n        getReferringComponents: function (mainType) {\n            return this.ecModel.queryComponents({\n                mainType: mainType,\n                index: this.get(mainType + 'Index', true),\n                id: this.get(mainType + 'Id', true)\n            });\n        }\n\n    });\n\n    // Reset ComponentModel.extend, add preConstruct.\n    // clazzUtil.enableClassExtend(\n    //     ComponentModel,\n    //     function (option, parentModel, ecModel, extraOpt) {\n    //         // Set dependentModels, componentIndex, name, id, mainType, subType.\n    //         zrUtil.extend(this, extraOpt);\n\n    //         this.uid = componentUtil.getUID('componentModel');\n\n    //         // this.setReadOnly([\n    //         //     'type', 'id', 'uid', 'name', 'mainType', 'subType',\n    //         //     'dependentModels', 'componentIndex'\n    //         // ]);\n    //     }\n    // );\n\n    // Add capability of registerClass, getClass, hasClass, registerSubTypeDefaulter and so on.\n    clazzUtil.enableClassManagement(\n        ComponentModel, {registerWhenExtend: true}\n    );\n    componentUtil.enableSubTypeDefaulter(ComponentModel);\n\n    // Add capability of ComponentModel.topologicalTravel.\n    componentUtil.enableTopologicalTravel(ComponentModel, getDependencies);\n\n    function getDependencies(componentType) {\n        var deps = [];\n        zrUtil.each(ComponentModel.getClassesByMainType(componentType), function (Clazz) {\n            arrayPush.apply(deps, Clazz.prototype.dependencies || []);\n        });\n        // Ensure main type\n        return zrUtil.map(deps, function (type) {\n            return clazzUtil.parseClassType(type).main;\n        });\n    }\n\n    zrUtil.mixin(ComponentModel, require('./mixin/boxLayout'));\n\n    module.exports = ComponentModel;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.6.1@echarts/lib/model/Component.js\n// module id = wvll\n// module chunks = 0 1","\n    var dpr = 1;\n    // If in browser environment\n    if (typeof window !== 'undefined') {\n        dpr = Math.max(window.devicePixelRatio || 1, 1);\n    }\n    /**\n     * config默认配置项\n     * @exports zrender/config\n     * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)\n     */\n    var config = {\n        /**\n         * debug日志选项：catchBrushException为true下有效\n         * 0 : 不生成debug数据，发布用\n         * 1 : 异常抛出，调试用\n         * 2 : 控制台输出，调试用\n         */\n        debugMode: 0,\n\n        // retina 屏幕优化\n        devicePixelRatio: dpr\n    };\n    module.exports = config;\n\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.5.1@zrender/lib/config.js\n// module id = xFPV\n// module chunks = 0 1","/**\n * zrender: 生成唯一id\n *\n * @author errorrik (errorrik@gmail.com)\n */\n\n\n    var idStart = 0x0907;\n\n    module.exports = function () {\n        return idStart++;\n    };\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.5.1@zrender/lib/core/guid.js\n// module id = xG35\n// module chunks = 0 1","\n\n    var zrUtil = require('zrender/lib/core/util');\n    var symbolCreator = require('../../util/symbol');\n    var graphic = require('../../util/graphic');\n    var listComponentHelper = require('../helper/listComponent');\n\n    var curry = zrUtil.curry;\n\n    function dispatchSelectAction(name, api) {\n        api.dispatchAction({\n            type: 'legendToggleSelect',\n            name: name\n        });\n    }\n\n    function dispatchHighlightAction(seriesModel, dataName, api) {\n        // If element hover will move to a hoverLayer.\n        var el = api.getZr().storage.getDisplayList()[0];\n        if (!(el && el.useHoverLayer)) {\n            seriesModel.get('legendHoverLink') && api.dispatchAction({\n                type: 'highlight',\n                seriesName: seriesModel.name,\n                name: dataName\n            });\n        }\n    }\n\n    function dispatchDownplayAction(seriesModel, dataName, api) {\n        // If element hover will move to a hoverLayer.\n        var el = api.getZr().storage.getDisplayList()[0];\n        if (!(el && el.useHoverLayer)) {\n            seriesModel.get('legendHoverLink') && api.dispatchAction({\n                type: 'downplay',\n                seriesName: seriesModel.name,\n                name: dataName\n            });\n        }\n    }\n\n    module.exports = require('../../echarts').extendComponentView({\n\n        type: 'legend',\n\n        init: function () {\n            this._symbolTypeStore = {};\n        },\n\n        render: function (legendModel, ecModel, api) {\n            var group = this.group;\n            group.removeAll();\n\n            if (!legendModel.get('show')) {\n                return;\n            }\n\n            var selectMode = legendModel.get('selectedMode');\n            var itemAlign = legendModel.get('align');\n\n            if (itemAlign === 'auto') {\n                itemAlign = (legendModel.get('left') === 'right'\n                    && legendModel.get('orient') === 'vertical')\n                    ? 'right' : 'left';\n            }\n\n            var legendDrawedMap = zrUtil.createHashMap();\n\n            zrUtil.each(legendModel.getData(), function (itemModel) {\n                var name = itemModel.get('name');\n\n                // Use empty string or \\n as a newline string\n                if (name === '' || name === '\\n') {\n                    group.add(new graphic.Group({\n                        newline: true\n                    }));\n                    return;\n                }\n\n                var seriesModel = ecModel.getSeriesByName(name)[0];\n\n                if (legendDrawedMap.get(name)) {\n                    // Have been drawed\n                    return;\n                }\n\n                // Series legend\n                if (seriesModel) {\n                    var data = seriesModel.getData();\n                    var color = data.getVisual('color');\n\n                    // If color is a callback function\n                    if (typeof color === 'function') {\n                        // Use the first data\n                        color = color(seriesModel.getDataParams(0));\n                    }\n\n                    // Using rect symbol defaultly\n                    var legendSymbolType = data.getVisual('legendSymbol') || 'roundRect';\n                    var symbolType = data.getVisual('symbol');\n\n                    var itemGroup = this._createItem(\n                        name, itemModel, legendModel,\n                        legendSymbolType, symbolType,\n                        itemAlign, color,\n                        selectMode\n                    );\n\n                    itemGroup.on('click', curry(dispatchSelectAction, name, api))\n                        .on('mouseover', curry(dispatchHighlightAction, seriesModel, null, api))\n                        .on('mouseout', curry(dispatchDownplayAction, seriesModel, null, api));\n\n                    legendDrawedMap.set(name, true);\n                }\n                else {\n                    // Data legend of pie, funnel\n                    ecModel.eachRawSeries(function (seriesModel) {\n                        // In case multiple series has same data name\n                        if (legendDrawedMap.get(name)) {\n                            return;\n                        }\n                        if (seriesModel.legendDataProvider) {\n                            var data = seriesModel.legendDataProvider();\n                            var idx = data.indexOfName(name);\n                            if (idx < 0) {\n                                return;\n                            }\n\n                            var color = data.getItemVisual(idx, 'color');\n\n                            var legendSymbolType = 'roundRect';\n\n                            var itemGroup = this._createItem(\n                                name, itemModel, legendModel,\n                                legendSymbolType, null,\n                                itemAlign, color,\n                                selectMode\n                            );\n\n                            itemGroup.on('click', curry(dispatchSelectAction, name, api))\n                                // FIXME Should not specify the series name\n                                .on('mouseover', curry(dispatchHighlightAction, seriesModel, name, api))\n                                .on('mouseout', curry(dispatchDownplayAction, seriesModel, name, api));\n\n                            legendDrawedMap.set(name, true);\n                        }\n                    }, this);\n                }\n\n                if (__DEV__) {\n                    if (!legendDrawedMap.get(name)) {\n                        console.warn(name + ' series not exists. Legend data should be same with series name or data name.');\n                    }\n                }\n            }, this);\n\n            listComponentHelper.layout(group, legendModel, api);\n            // Render background after group is layout\n            // FIXME\n            listComponentHelper.addBackground(group, legendModel);\n        },\n\n        _createItem: function (\n            name, itemModel, legendModel,\n            legendSymbolType, symbolType,\n            itemAlign, color, selectMode\n        ) {\n            var itemWidth = legendModel.get('itemWidth');\n            var itemHeight = legendModel.get('itemHeight');\n            var inactiveColor = legendModel.get('inactiveColor');\n\n            var isSelected = legendModel.isSelected(name);\n            var itemGroup = new graphic.Group();\n\n            var textStyleModel = itemModel.getModel('textStyle');\n\n            var itemIcon = itemModel.get('icon');\n\n            var tooltipModel = itemModel.getModel('tooltip');\n            var legendGlobalTooltipModel = tooltipModel.parentModel;\n\n            // Use user given icon first\n            legendSymbolType = itemIcon || legendSymbolType;\n            itemGroup.add(symbolCreator.createSymbol(\n                legendSymbolType, 0, 0, itemWidth, itemHeight, isSelected ? color : inactiveColor\n            ));\n\n            // Compose symbols\n            // PENDING\n            if (!itemIcon && symbolType\n                // At least show one symbol, can't be all none\n                && ((symbolType !== legendSymbolType) || symbolType == 'none')\n            ) {\n                var size = itemHeight * 0.8;\n                if (symbolType === 'none') {\n                    symbolType = 'circle';\n                }\n                // Put symbol in the center\n                itemGroup.add(symbolCreator.createSymbol(\n                    symbolType, (itemWidth - size) / 2, (itemHeight - size) / 2, size, size,\n                    isSelected ? color : inactiveColor\n                ));\n            }\n\n            // Text\n            var textX = itemAlign === 'left' ? itemWidth + 5 : -5;\n            var textAlign = itemAlign;\n\n            var formatter = legendModel.get('formatter');\n            var content = name;\n            if (typeof formatter === 'string' && formatter) {\n                content = formatter.replace('{name}', name != null ? name : '');\n            }\n            else if (typeof formatter === 'function') {\n                content = formatter(name);\n            }\n\n            var text = new graphic.Text({\n                style: {\n                    text: content,\n                    x: textX,\n                    y: itemHeight / 2,\n                    fill: isSelected ? textStyleModel.getTextColor() : inactiveColor,\n                    textFont: textStyleModel.getFont(),\n                    textAlign: textAlign,\n                    textVerticalAlign: 'middle'\n                }\n            });\n            itemGroup.add(text);\n\n            // Add a invisible rect to increase the area of mouse hover\n            var hitRect = new graphic.Rect({\n                shape: itemGroup.getBoundingRect(),\n                invisible: true,\n                tooltip: tooltipModel.get('show') ? zrUtil.extend({\n                    content: name,\n                    // Defaul formatter\n                    formatter: legendGlobalTooltipModel.get('formatter', true) || function () {\n                        return name;\n                    },\n                    formatterParams: {\n                        componentType: 'legend',\n                        legendIndex: legendModel.componentIndex,\n                        name: name,\n                        $vars: ['name']\n                    }\n                }, tooltipModel.option) : null\n            });\n            itemGroup.add(hitRect);\n\n            itemGroup.eachChild(function (child) {\n                child.silent = true;\n            });\n\n            hitRect.silent = !selectMode;\n\n\n\n            this.group.add(itemGroup);\n\n            graphic.setHoverStyle(itemGroup);\n\n            return itemGroup;\n        }\n    });\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.6.1@echarts/lib/component/legend/LegendView.js\n// module id = xI8J\n// module chunks = 0 1","\n\n    var zrUtil = require('zrender/lib/core/util');\n    var modelUtil = require('../../util/model');\n    var modelHelper = require('./modelHelper');\n    var findPointFromSeries = require('./findPointFromSeries');\n\n    var each = zrUtil.each;\n    var curry = zrUtil.curry;\n    var get = modelUtil.makeGetter();\n\n    /**\n     * Basic logic: check all axis, if they do not demand show/highlight,\n     * then hide/downplay them.\n     *\n     * @param {Object} coordSysAxesInfo\n     * @param {string} [currTrigger] 'click' | 'mousemove' | 'leave'\n     * @param {Array.<number>} [point] x and y, which are mandatory, specify a point to\n     *              tigger axisPointer and tooltip.\n     * @param {Object} [finder] {\n     *                  seriesIndex, dataIndex,\n     *                  axesInfo: [{\n     *                      axisDim: 'x'|'y'|'angle'|..., axisIndex: ..., value: ...\n     *                  }, ...]\n     *              }\n     *              These properties, which are optional, restrict target axes.\n     * @param {Function} dispatchAction\n     * @param {module:echarts/ExtensionAPI} api\n     * @param {Object} [tooltipOption]\n     * @return {Object} content of event obj for echarts.connect.\n     */\n    function axisTrigger(\n        coordSysAxesInfo, currTrigger, point, finder, dispatchAction,\n        ecModel, api, tooltipOption\n    ) {\n        finder = finder || {};\n        if (illegalPoint(point)) {\n            // Used in the default behavior of `connection`: use the sample seriesIndex\n            // and dataIndex. And also used in the tooltipView trigger.\n            point = findPointFromSeries({\n                seriesIndex: finder.seriesIndex,\n                // Do not use dataIndexInside from other ec instance.\n                // FIXME: auto detect it?\n                dataIndex: finder.dataIndex\n            }, ecModel).point;\n        }\n        var isIllegalPoint = illegalPoint(point);\n\n        // Axis and value can be specified when calling dispatchAction({type: 'updateAxisPointer'}).\n        // Notice: In this case, it is difficult to get the `point` (which is necessary to show\n        // tooltip, so if point is not given, we just use the point found by sample seriesIndex\n        // and dataIndex.\n        var inputAxesInfo = finder.axesInfo;\n\n        var axesInfo = coordSysAxesInfo.axesInfo;\n        var shouldHide = currTrigger === 'leave' || illegalPoint(point);\n        var outputFinder = {};\n\n        var showValueMap = {};\n        var dataByCoordSys = {list: [], map: {}};\n        var updaters = {\n            showPointer: curry(showPointer, showValueMap),\n            showTooltip: curry(showTooltip, dataByCoordSys)\n        };\n\n        // Process for triggered axes.\n        each(coordSysAxesInfo.coordSysMap, function (coordSys, coordSysKey) {\n            // If a point given, it must be contained by the coordinate system.\n            var coordSysContainsPoint = isIllegalPoint || coordSys.containPoint(point);\n\n            each(coordSysAxesInfo.coordSysAxesInfo[coordSysKey], function (axisInfo, key) {\n                var axis = axisInfo.axis;\n                var inputAxisInfo = findInputAxisInfo(inputAxesInfo, axisInfo);\n                // If no inputAxesInfo, no axis is restricted.\n                if (!shouldHide && coordSysContainsPoint && (!inputAxesInfo || inputAxisInfo)) {\n                    var val = inputAxisInfo && inputAxisInfo.value;\n                    if (val == null && !isIllegalPoint) {\n                        val = axis.pointToData(point);\n                    }\n                    val != null && processOnAxis(axisInfo, val, updaters, false, outputFinder);\n                }\n            });\n        });\n\n        // Process for linked axes.\n        var linkTriggers = {};\n        each(axesInfo, function (tarAxisInfo, tarKey) {\n            var linkGroup = tarAxisInfo.linkGroup;\n\n            // If axis has been triggered in the previous stage, it should not be triggered by link.\n            if (linkGroup && !showValueMap[tarKey]) {\n                each(linkGroup.axesInfo, function (srcAxisInfo, srcKey) {\n                    var srcValItem = showValueMap[srcKey];\n                    // If srcValItem exist, source axis is triggered, so link to target axis.\n                    if (srcAxisInfo !== tarAxisInfo && srcValItem) {\n                        var val = srcValItem.value;\n                        linkGroup.mapper && (val = tarAxisInfo.axis.scale.parse(linkGroup.mapper(\n                            val, makeMapperParam(srcAxisInfo), makeMapperParam(tarAxisInfo)\n                        )));\n                        linkTriggers[tarAxisInfo.key] = val;\n                    }\n                });\n            }\n        });\n        each(linkTriggers, function (val, tarKey) {\n            processOnAxis(axesInfo[tarKey], val, updaters, true, outputFinder);\n        });\n\n        updateModelActually(showValueMap, axesInfo, outputFinder);\n        dispatchTooltipActually(dataByCoordSys, point, tooltipOption, dispatchAction);\n        dispatchHighDownActually(axesInfo, dispatchAction, api);\n\n        return outputFinder;\n    }\n\n    function processOnAxis(axisInfo, newValue, updaters, dontSnap, outputFinder) {\n        var axis = axisInfo.axis;\n\n        if (axis.scale.isBlank() || !axis.containData(newValue)) {\n            return;\n        }\n\n        if (!axisInfo.involveSeries) {\n            updaters.showPointer(axisInfo, newValue);\n            return;\n        }\n\n        // Heavy calculation. So put it after axis.containData checking.\n        var payloadInfo = buildPayloadsBySeries(newValue, axisInfo);\n        var payloadBatch = payloadInfo.payloadBatch;\n        var snapToValue = payloadInfo.snapToValue;\n\n        // Fill content of event obj for echarts.connect.\n        // By defualt use the first involved series data as a sample to connect.\n        if (payloadBatch[0] && outputFinder.seriesIndex == null) {\n            zrUtil.extend(outputFinder, payloadBatch[0]);\n        }\n\n        // If no linkSource input, this process is for collecting link\n        // target, where snap should not be accepted.\n        if (!dontSnap && axisInfo.snap) {\n            if (axis.containData(snapToValue) && snapToValue != null) {\n                newValue = snapToValue;\n            }\n        }\n\n        updaters.showPointer(axisInfo, newValue, payloadBatch, outputFinder);\n        // Tooltip should always be snapToValue, otherwise there will be\n        // incorrect \"axis value ~ series value\" mapping displayed in tooltip.\n        updaters.showTooltip(axisInfo, payloadInfo, snapToValue);\n    }\n\n    function buildPayloadsBySeries(value, axisInfo) {\n        var axis = axisInfo.axis;\n        var dim = axis.dim;\n        var snapToValue = value;\n        var payloadBatch = [];\n        var minDist = Number.MAX_VALUE;\n        var minDiff = -1;\n\n        each(axisInfo.seriesModels, function (series, idx) {\n            var dataDim = series.coordDimToDataDim(dim);\n            var seriesNestestValue;\n            var dataIndices;\n\n            if (series.getAxisTooltipData) {\n                var result = series.getAxisTooltipData(dataDim, value, axis);\n                dataIndices = result.dataIndices;\n                seriesNestestValue = result.nestestValue;\n            }\n            else {\n                dataIndices = series.getData().indicesOfNearest(\n                    dataDim[0],\n                    value,\n                    // Add a threshold to avoid find the wrong dataIndex\n                    // when data length is not same.\n                    false, axis.type === 'category' ? 0.5 : null\n                );\n                if (!dataIndices.length) {\n                    return;\n                }\n                seriesNestestValue = series.getData().get(dataDim[0], dataIndices[0]);\n            }\n\n            if (seriesNestestValue == null || !isFinite(seriesNestestValue)) {\n                return;\n            }\n\n            var diff = value - seriesNestestValue;\n            var dist = Math.abs(diff);\n            // Consider category case\n            if (dist <= minDist) {\n                if (dist < minDist || (diff >= 0 && minDiff < 0)) {\n                    minDist = dist;\n                    minDiff = diff;\n                    snapToValue = seriesNestestValue;\n                    payloadBatch.length = 0;\n                }\n                each(dataIndices, function (dataIndex) {\n                    payloadBatch.push({\n                        seriesIndex: series.seriesIndex,\n                        dataIndexInside: dataIndex,\n                        dataIndex: series.getData().getRawIndex(dataIndex)\n                    });\n                });\n            }\n        });\n\n        return {\n            payloadBatch: payloadBatch,\n            snapToValue: snapToValue\n        };\n    }\n\n    function showPointer(showValueMap, axisInfo, value, payloadBatch) {\n        showValueMap[axisInfo.key] = {value: value, payloadBatch: payloadBatch};\n    }\n\n    function showTooltip(dataByCoordSys, axisInfo, payloadInfo, value) {\n        var payloadBatch = payloadInfo.payloadBatch;\n        var axis = axisInfo.axis;\n        var axisModel = axis.model;\n        var axisPointerModel = axisInfo.axisPointerModel;\n\n        // If no data, do not create anything in dataByCoordSys,\n        // whose length will be used to judge whether dispatch action.\n        if (!axisInfo.triggerTooltip || !payloadBatch.length) {\n            return;\n        }\n\n        var coordSysModel = axisInfo.coordSys.model;\n        var coordSysKey = modelHelper.makeKey(coordSysModel);\n        var coordSysItem = dataByCoordSys.map[coordSysKey];\n        if (!coordSysItem) {\n            coordSysItem = dataByCoordSys.map[coordSysKey] = {\n                coordSysId: coordSysModel.id,\n                coordSysIndex: coordSysModel.componentIndex,\n                coordSysType: coordSysModel.type,\n                coordSysMainType: coordSysModel.mainType,\n                dataByAxis: []\n            };\n            dataByCoordSys.list.push(coordSysItem);\n        }\n\n        coordSysItem.dataByAxis.push({\n            axisDim: axis.dim,\n            axisIndex: axisModel.componentIndex,\n            axisType: axisModel.type,\n            axisId: axisModel.id,\n            value: value,\n            // Caustion: viewHelper.getValueLabel is actually on \"view stage\", which\n            // depends that all models have been updated. So it should not be performed\n            // here. Considering axisPointerModel used here is volatile, which is hard\n            // to be retrieve in TooltipView, we prepare parameters here.\n            valueLabelOpt: {\n                precision: axisPointerModel.get('label.precision'),\n                formatter: axisPointerModel.get('label.formatter')\n            },\n            seriesDataIndices: payloadBatch.slice()\n        });\n    }\n\n    function updateModelActually(showValueMap, axesInfo, outputFinder) {\n        var outputAxesInfo = outputFinder.axesInfo = [];\n        // Basic logic: If no 'show' required, 'hide' this axisPointer.\n        each(axesInfo, function (axisInfo, key) {\n            var option = axisInfo.axisPointerModel.option;\n            var valItem = showValueMap[key];\n\n            if (valItem) {\n                !axisInfo.useHandle && (option.status = 'show');\n                option.value = valItem.value;\n                // For label formatter param and highlight.\n                option.seriesDataIndices = (valItem.payloadBatch || []).slice();\n            }\n            // When always show (e.g., handle used), remain\n            // original value and status.\n            else {\n                // If hide, value still need to be set, consider\n                // click legend to toggle axis blank.\n                !axisInfo.useHandle && (option.status = 'hide');\n            }\n\n            // If status is 'hide', should be no info in payload.\n            option.status === 'show' && outputAxesInfo.push({\n                axisDim: axisInfo.axis.dim,\n                axisIndex: axisInfo.axis.model.componentIndex,\n                value: option.value\n            });\n        });\n    }\n\n    function dispatchTooltipActually(dataByCoordSys, point, tooltipOption, dispatchAction) {\n        // Basic logic: If no showTip required, hideTip will be dispatched.\n        if (illegalPoint(point) || !dataByCoordSys.list.length) {\n            dispatchAction({type: 'hideTip'});\n            return;\n        }\n\n        // In most case only one axis (or event one series is used). It is\n        // convinient to fetch payload.seriesIndex and payload.dataIndex\n        // dirtectly. So put the first seriesIndex and dataIndex of the first\n        // axis on the payload.\n        var sampleItem = ((dataByCoordSys.list[0].dataByAxis[0] || {}).seriesDataIndices || [])[0] || {};\n\n        dispatchAction({\n            type: 'showTip',\n            escapeConnect: true,\n            x: point[0],\n            y: point[1],\n            tooltipOption: tooltipOption,\n            dataIndexInside: sampleItem.dataIndexInside,\n            dataIndex: sampleItem.dataIndex,\n            seriesIndex: sampleItem.seriesIndex,\n            dataByCoordSys: dataByCoordSys.list\n        });\n    }\n\n    function dispatchHighDownActually(axesInfo, dispatchAction, api) {\n        // FIXME\n        // highlight status modification shoule be a stage of main process?\n        // (Consider confilct (e.g., legend and axisPointer) and setOption)\n\n        var zr = api.getZr();\n        var highDownKey = 'axisPointerLastHighlights';\n        var lastHighlights = get(zr)[highDownKey] || {};\n        var newHighlights = get(zr)[highDownKey] = {};\n\n        // Update highlight/downplay status according to axisPointer model.\n        // Build hash map and remove duplicate incidentally.\n        each(axesInfo, function (axisInfo, key) {\n            var option = axisInfo.axisPointerModel.option;\n            option.status === 'show' && each(option.seriesDataIndices, function (batchItem) {\n                var key = batchItem.seriesIndex + ' | ' + batchItem.dataIndex;\n                newHighlights[key] = batchItem;\n            });\n        });\n\n        // Diff.\n        var toHighlight = [];\n        var toDownplay = [];\n        zrUtil.each(lastHighlights, function (batchItem, key) {\n            !newHighlights[key] && toDownplay.push(batchItem);\n        });\n        zrUtil.each(newHighlights, function (batchItem, key) {\n            !lastHighlights[key] && toHighlight.push(batchItem);\n        });\n\n        toDownplay.length && api.dispatchAction({\n            type: 'downplay', escapeConnect: true, batch: toDownplay\n        });\n        toHighlight.length && api.dispatchAction({\n            type: 'highlight', escapeConnect: true, batch: toHighlight\n        });\n    }\n\n    function findInputAxisInfo(inputAxesInfo, axisInfo) {\n        for (var i = 0; i < (inputAxesInfo || []).length; i++) {\n            var inputAxisInfo = inputAxesInfo[i];\n            if (axisInfo.axis.dim === inputAxisInfo.axisDim\n                && axisInfo.axis.model.componentIndex === inputAxisInfo.axisIndex\n            ) {\n                return inputAxisInfo;\n            }\n        }\n    }\n\n    function makeMapperParam(axisInfo) {\n        var axisModel = axisInfo.axis.model;\n        var item = {};\n        var dim = item.axisDim = axisInfo.axis.dim;\n        item.axisIndex = item[dim + 'AxisIndex'] = axisModel.componentIndex;\n        item.axisName = item[dim + 'AxisName'] = axisModel.name;\n        item.axisId = item[dim + 'AxisId'] = axisModel.id;\n        return item;\n    }\n\n    function illegalPoint(point) {\n        return !point || point[0] == null || isNaN(point[0]) || point[1] == null || isNaN(point[1]);\n    }\n\n    module.exports = axisTrigger;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.6.1@echarts/lib/component/axisPointer/axisTrigger.js\n// module id = xLXz\n// module chunks = 0 1","'use strict';\n\n\n    var zrUtil = require('zrender/lib/core/util');\n\n    var pathTool = require('zrender/lib/tool/path');\n    var Path = require('zrender/lib/graphic/Path');\n    var colorTool = require('zrender/lib/tool/color');\n    var matrix = require('zrender/lib/core/matrix');\n    var vector = require('zrender/lib/core/vector');\n    var Transformable = require('zrender/lib/mixin/Transformable');\n    var BoundingRect = require('zrender/lib/core/BoundingRect');\n\n    var round = Math.round;\n    var mathMax = Math.max;\n    var mathMin = Math.min;\n\n    var graphic = {};\n\n    graphic.Group = require('zrender/lib/container/Group');\n\n    graphic.Image = require('zrender/lib/graphic/Image');\n\n    graphic.Text = require('zrender/lib/graphic/Text');\n\n    graphic.Circle = require('zrender/lib/graphic/shape/Circle');\n\n    graphic.Sector = require('zrender/lib/graphic/shape/Sector');\n\n    graphic.Ring = require('zrender/lib/graphic/shape/Ring');\n\n    graphic.Polygon = require('zrender/lib/graphic/shape/Polygon');\n\n    graphic.Polyline = require('zrender/lib/graphic/shape/Polyline');\n\n    graphic.Rect = require('zrender/lib/graphic/shape/Rect');\n\n    graphic.Line = require('zrender/lib/graphic/shape/Line');\n\n    graphic.BezierCurve = require('zrender/lib/graphic/shape/BezierCurve');\n\n    graphic.Arc = require('zrender/lib/graphic/shape/Arc');\n\n    graphic.CompoundPath = require('zrender/lib/graphic/CompoundPath');\n\n    graphic.LinearGradient = require('zrender/lib/graphic/LinearGradient');\n\n    graphic.RadialGradient = require('zrender/lib/graphic/RadialGradient');\n\n    graphic.BoundingRect = BoundingRect;\n\n    /**\n     * Extend shape with parameters\n     */\n    graphic.extendShape = function (opts) {\n        return Path.extend(opts);\n    };\n\n    /**\n     * Extend path\n     */\n    graphic.extendPath = function (pathData, opts) {\n        return pathTool.extendFromString(pathData, opts);\n    };\n\n    /**\n     * Create a path element from path data string\n     * @param {string} pathData\n     * @param {Object} opts\n     * @param {module:zrender/core/BoundingRect} rect\n     * @param {string} [layout=cover] 'center' or 'cover'\n     */\n    graphic.makePath = function (pathData, opts, rect, layout) {\n        var path = pathTool.createFromString(pathData, opts);\n        var boundingRect = path.getBoundingRect();\n        if (rect) {\n            var aspect = boundingRect.width / boundingRect.height;\n\n            if (layout === 'center') {\n                // Set rect to center, keep width / height ratio.\n                var width = rect.height * aspect;\n                var height;\n                if (width <= rect.width) {\n                    height = rect.height;\n                }\n                else {\n                    width = rect.width;\n                    height = width / aspect;\n                }\n                var cx = rect.x + rect.width / 2;\n                var cy = rect.y + rect.height / 2;\n\n                rect.x = cx - width / 2;\n                rect.y = cy - height / 2;\n                rect.width = width;\n                rect.height = height;\n            }\n\n            graphic.resizePath(path, rect);\n        }\n        return path;\n    };\n\n    graphic.mergePath = pathTool.mergePath,\n\n    /**\n     * Resize a path to fit the rect\n     * @param {module:zrender/graphic/Path} path\n     * @param {Object} rect\n     */\n    graphic.resizePath = function (path, rect) {\n        if (!path.applyTransform) {\n            return;\n        }\n\n        var pathRect = path.getBoundingRect();\n\n        var m = pathRect.calculateTransform(rect);\n\n        path.applyTransform(m);\n    };\n\n    /**\n     * Sub pixel optimize line for canvas\n     *\n     * @param {Object} param\n     * @param {Object} [param.shape]\n     * @param {number} [param.shape.x1]\n     * @param {number} [param.shape.y1]\n     * @param {number} [param.shape.x2]\n     * @param {number} [param.shape.y2]\n     * @param {Object} [param.style]\n     * @param {number} [param.style.lineWidth]\n     * @return {Object} Modified param\n     */\n    graphic.subPixelOptimizeLine = function (param) {\n        var subPixelOptimize = graphic.subPixelOptimize;\n        var shape = param.shape;\n        var lineWidth = param.style.lineWidth;\n\n        if (round(shape.x1 * 2) === round(shape.x2 * 2)) {\n            shape.x1 = shape.x2 = subPixelOptimize(shape.x1, lineWidth, true);\n        }\n        if (round(shape.y1 * 2) === round(shape.y2 * 2)) {\n            shape.y1 = shape.y2 = subPixelOptimize(shape.y1, lineWidth, true);\n        }\n        return param;\n    };\n\n    /**\n     * Sub pixel optimize rect for canvas\n     *\n     * @param {Object} param\n     * @param {Object} [param.shape]\n     * @param {number} [param.shape.x]\n     * @param {number} [param.shape.y]\n     * @param {number} [param.shape.width]\n     * @param {number} [param.shape.height]\n     * @param {Object} [param.style]\n     * @param {number} [param.style.lineWidth]\n     * @return {Object} Modified param\n     */\n    graphic.subPixelOptimizeRect = function (param) {\n        var subPixelOptimize = graphic.subPixelOptimize;\n        var shape = param.shape;\n        var lineWidth = param.style.lineWidth;\n        var originX = shape.x;\n        var originY = shape.y;\n        var originWidth = shape.width;\n        var originHeight = shape.height;\n        shape.x = subPixelOptimize(shape.x, lineWidth, true);\n        shape.y = subPixelOptimize(shape.y, lineWidth, true);\n        shape.width = Math.max(\n            subPixelOptimize(originX + originWidth, lineWidth, false) - shape.x,\n            originWidth === 0 ? 0 : 1\n        );\n        shape.height = Math.max(\n            subPixelOptimize(originY + originHeight, lineWidth, false) - shape.y,\n            originHeight === 0 ? 0 : 1\n        );\n        return param;\n    };\n\n    /**\n     * Sub pixel optimize for canvas\n     *\n     * @param {number} position Coordinate, such as x, y\n     * @param {number} lineWidth Should be nonnegative integer.\n     * @param {boolean=} positiveOrNegative Default false (negative).\n     * @return {number} Optimized position.\n     */\n    graphic.subPixelOptimize = function (position, lineWidth, positiveOrNegative) {\n        // Assure that (position + lineWidth / 2) is near integer edge,\n        // otherwise line will be fuzzy in canvas.\n        var doubledPosition = round(position * 2);\n        return (doubledPosition + round(lineWidth)) % 2 === 0\n            ? doubledPosition / 2\n            : (doubledPosition + (positiveOrNegative ? 1 : -1)) / 2;\n    };\n\n    function hasFillOrStroke(fillOrStroke) {\n        return fillOrStroke != null && fillOrStroke != 'none';\n    }\n\n    function liftColor(color) {\n        return typeof color === 'string' ? colorTool.lift(color, -0.1) : color;\n    }\n\n    /**\n     * @private\n     */\n    function cacheElementStl(el) {\n        if (el.__hoverStlDirty) {\n            var stroke = el.style.stroke;\n            var fill = el.style.fill;\n\n            // Create hoverStyle on mouseover\n            var hoverStyle = el.__hoverStl;\n            hoverStyle.fill = hoverStyle.fill\n                || (hasFillOrStroke(fill) ? liftColor(fill) : null);\n            hoverStyle.stroke = hoverStyle.stroke\n                || (hasFillOrStroke(stroke) ? liftColor(stroke) : null);\n\n            var normalStyle = {};\n            for (var name in hoverStyle) {\n                if (hoverStyle.hasOwnProperty(name)) {\n                    normalStyle[name] = el.style[name];\n                }\n            }\n\n            el.__normalStl = normalStyle;\n\n            el.__hoverStlDirty = false;\n        }\n    }\n\n    /**\n     * @private\n     */\n    function doSingleEnterHover(el) {\n        if (el.__isHover) {\n            return;\n        }\n\n        cacheElementStl(el);\n\n        if (el.useHoverLayer) {\n            el.__zr && el.__zr.addHover(el, el.__hoverStl);\n        }\n        else {\n            el.setStyle(el.__hoverStl);\n            el.z2 += 1;\n        }\n\n        el.__isHover = true;\n    }\n\n    /**\n     * @inner\n     */\n    function doSingleLeaveHover(el) {\n        if (!el.__isHover) {\n            return;\n        }\n\n        var normalStl = el.__normalStl;\n        if (el.useHoverLayer) {\n            el.__zr && el.__zr.removeHover(el);\n        }\n        else {\n            normalStl && el.setStyle(normalStl);\n            el.z2 -= 1;\n        }\n\n        el.__isHover = false;\n    }\n\n    /**\n     * @inner\n     */\n    function doEnterHover(el) {\n        el.type === 'group'\n            ? el.traverse(function (child) {\n                if (child.type !== 'group') {\n                    doSingleEnterHover(child);\n                }\n            })\n            : doSingleEnterHover(el);\n    }\n\n    function doLeaveHover(el) {\n        el.type === 'group'\n            ? el.traverse(function (child) {\n                if (child.type !== 'group') {\n                    doSingleLeaveHover(child);\n                }\n            })\n            : doSingleLeaveHover(el);\n    }\n\n    /**\n     * @inner\n     */\n    function setElementHoverStl(el, hoverStl) {\n        // If element has sepcified hoverStyle, then use it instead of given hoverStyle\n        // Often used when item group has a label element and it's hoverStyle is different\n        el.__hoverStl = el.hoverStyle || hoverStl || {};\n        el.__hoverStlDirty = true;\n\n        if (el.__isHover) {\n            cacheElementStl(el);\n        }\n    }\n\n    /**\n     * @inner\n     */\n    function onElementMouseOver(e) {\n        if (this.__hoverSilentOnTouch && e.zrByTouch) {\n            return;\n        }\n\n        // Only if element is not in emphasis status\n        !this.__isEmphasis && doEnterHover(this);\n    }\n\n    /**\n     * @inner\n     */\n    function onElementMouseOut(e) {\n        if (this.__hoverSilentOnTouch && e.zrByTouch) {\n            return;\n        }\n\n        // Only if element is not in emphasis status\n        !this.__isEmphasis && doLeaveHover(this);\n    }\n\n    /**\n     * @inner\n     */\n    function enterEmphasis() {\n        this.__isEmphasis = true;\n        doEnterHover(this);\n    }\n\n    /**\n     * @inner\n     */\n    function leaveEmphasis() {\n        this.__isEmphasis = false;\n        doLeaveHover(this);\n    }\n\n    /**\n     * Set hover style of element.\n     * This method can be called repeatly without side-effects.\n     * @param {module:zrender/Element} el\n     * @param {Object} [hoverStyle]\n     * @param {Object} [opt]\n     * @param {boolean} [opt.hoverSilentOnTouch=false]\n     *        In touch device, mouseover event will be trigger on touchstart event\n     *        (see module:zrender/dom/HandlerProxy). By this mechanism, we can\n     *        conviniently use hoverStyle when tap on touch screen without additional\n     *        code for compatibility.\n     *        But if the chart/component has select feature, which usually also use\n     *        hoverStyle, there might be conflict between 'select-highlight' and\n     *        'hover-highlight' especially when roam is enabled (see geo for example).\n     *        In this case, hoverSilentOnTouch should be used to disable hover-highlight\n     *        on touch device.\n     */\n    graphic.setHoverStyle = function (el, hoverStyle, opt) {\n        el.__hoverSilentOnTouch = opt && opt.hoverSilentOnTouch;\n\n        el.type === 'group'\n            ? el.traverse(function (child) {\n                if (child.type !== 'group') {\n                    setElementHoverStl(child, hoverStyle);\n                }\n            })\n            : setElementHoverStl(el, hoverStyle);\n\n        // Duplicated function will be auto-ignored, see Eventful.js.\n        el.on('mouseover', onElementMouseOver)\n          .on('mouseout', onElementMouseOut);\n\n        // Emphasis, normal can be triggered manually\n        el.on('emphasis', enterEmphasis)\n          .on('normal', leaveEmphasis);\n    };\n\n    /**\n     * Set text option in the style\n     * @param {Object} textStyle\n     * @param {module:echarts/model/Model} labelModel\n     * @param {string} color\n     */\n    graphic.setText = function (textStyle, labelModel, color) {\n        var labelPosition = labelModel.getShallow('position') || 'inside';\n        var labelOffset = labelModel.getShallow('offset');\n        var labelColor = labelPosition.indexOf('inside') >= 0 ? 'white' : color;\n        var textStyleModel = labelModel.getModel('textStyle');\n        zrUtil.extend(textStyle, {\n            textDistance: labelModel.getShallow('distance') || 5,\n            textFont: textStyleModel.getFont(),\n            textPosition: labelPosition,\n            textOffset: labelOffset,\n            textFill: textStyleModel.getTextColor() || labelColor\n        });\n    };\n\n    graphic.getFont = function (opt, ecModel) {\n        var gTextStyleModel = ecModel && ecModel.getModel('textStyle');\n        return [\n            // FIXME in node-canvas fontWeight is before fontStyle\n            opt.fontStyle || gTextStyleModel && gTextStyleModel.getShallow('fontStyle') || '',\n            opt.fontWeight || gTextStyleModel && gTextStyleModel.getShallow('fontWeight') || '',\n            (opt.fontSize || gTextStyleModel && gTextStyleModel.getShallow('fontSize') || 12) + 'px',\n            opt.fontFamily || gTextStyleModel && gTextStyleModel.getShallow('fontFamily') || 'sans-serif'\n        ].join(' ');\n    };\n\n    function animateOrSetProps(isUpdate, el, props, animatableModel, dataIndex, cb) {\n        if (typeof dataIndex === 'function') {\n            cb = dataIndex;\n            dataIndex = null;\n        }\n        // Do not check 'animation' property directly here. Consider this case:\n        // animation model is an `itemModel`, whose does not have `isAnimationEnabled`\n        // but its parent model (`seriesModel`) does.\n        var animationEnabled = animatableModel && animatableModel.isAnimationEnabled();\n\n        if (animationEnabled) {\n            var postfix = isUpdate ? 'Update' : '';\n            var duration = animatableModel.getShallow('animationDuration' + postfix);\n            var animationEasing = animatableModel.getShallow('animationEasing' + postfix);\n            var animationDelay = animatableModel.getShallow('animationDelay' + postfix);\n            if (typeof animationDelay === 'function') {\n                animationDelay = animationDelay(\n                    dataIndex,\n                    animatableModel.getAnimationDelayParams\n                        ? animatableModel.getAnimationDelayParams(el, dataIndex)\n                        : null\n                );\n            }\n            if (typeof duration === 'function') {\n                duration = duration(dataIndex);\n            }\n\n            duration > 0\n                ? el.animateTo(props, duration, animationDelay || 0, animationEasing, cb)\n                : (el.stopAnimation(), el.attr(props), cb && cb());\n        }\n        else {\n            el.stopAnimation();\n            el.attr(props);\n            cb && cb();\n        }\n    }\n\n    /**\n     * Update graphic element properties with or without animation according to the configuration in series\n     * @param {module:zrender/Element} el\n     * @param {Object} props\n     * @param {module:echarts/model/Model} [animatableModel]\n     * @param {number} [dataIndex]\n     * @param {Function} [cb]\n     * @example\n     *     graphic.updateProps(el, {\n     *         position: [100, 100]\n     *     }, seriesModel, dataIndex, function () { console.log('Animation done!'); });\n     *     // Or\n     *     graphic.updateProps(el, {\n     *         position: [100, 100]\n     *     }, seriesModel, function () { console.log('Animation done!'); });\n     */\n    graphic.updateProps = function (el, props, animatableModel, dataIndex, cb) {\n        animateOrSetProps(true, el, props, animatableModel, dataIndex, cb);\n    };\n\n    /**\n     * Init graphic element properties with or without animation according to the configuration in series\n     * @param {module:zrender/Element} el\n     * @param {Object} props\n     * @param {module:echarts/model/Model} [animatableModel]\n     * @param {number} [dataIndex]\n     * @param {Function} cb\n     */\n    graphic.initProps = function (el, props, animatableModel, dataIndex, cb) {\n        animateOrSetProps(false, el, props, animatableModel, dataIndex, cb);\n    };\n\n    /**\n     * Get transform matrix of target (param target),\n     * in coordinate of its ancestor (param ancestor)\n     *\n     * @param {module:zrender/mixin/Transformable} target\n     * @param {module:zrender/mixin/Transformable} [ancestor]\n     */\n    graphic.getTransform = function (target, ancestor) {\n        var mat = matrix.identity([]);\n\n        while (target && target !== ancestor) {\n            matrix.mul(mat, target.getLocalTransform(), mat);\n            target = target.parent;\n        }\n\n        return mat;\n    };\n\n    /**\n     * Apply transform to an vertex.\n     * @param {Array.<number>} target [x, y]\n     * @param {Array.<number>|TypedArray.<number>|Object} transform Can be:\n     *      + Transform matrix: like [1, 0, 0, 1, 0, 0]\n     *      + {position, rotation, scale}, the same as `zrender/Transformable`.\n     * @param {boolean=} invert Whether use invert matrix.\n     * @return {Array.<number>} [x, y]\n     */\n    graphic.applyTransform = function (target, transform, invert) {\n        if (transform && !zrUtil.isArrayLike(transform)) {\n            transform = Transformable.getLocalTransform(transform);\n        }\n\n        if (invert) {\n            transform = matrix.invert([], transform);\n        }\n        return vector.applyTransform([], target, transform);\n    };\n\n    /**\n     * @param {string} direction 'left' 'right' 'top' 'bottom'\n     * @param {Array.<number>} transform Transform matrix: like [1, 0, 0, 1, 0, 0]\n     * @param {boolean=} invert Whether use invert matrix.\n     * @return {string} Transformed direction. 'left' 'right' 'top' 'bottom'\n     */\n    graphic.transformDirection = function (direction, transform, invert) {\n\n        // Pick a base, ensure that transform result will not be (0, 0).\n        var hBase = (transform[4] === 0 || transform[5] === 0 || transform[0] === 0)\n            ? 1 : Math.abs(2 * transform[4] / transform[0]);\n        var vBase = (transform[4] === 0 || transform[5] === 0 || transform[2] === 0)\n            ? 1 : Math.abs(2 * transform[4] / transform[2]);\n\n        var vertex = [\n            direction === 'left' ? -hBase : direction === 'right' ? hBase : 0,\n            direction === 'top' ? -vBase : direction === 'bottom' ? vBase : 0\n        ];\n\n        vertex = graphic.applyTransform(vertex, transform, invert);\n\n        return Math.abs(vertex[0]) > Math.abs(vertex[1])\n            ? (vertex[0] > 0 ? 'right' : 'left')\n            : (vertex[1] > 0 ? 'bottom' : 'top');\n    };\n\n    /**\n     * Apply group transition animation from g1 to g2.\n     * If no animatableModel, no animation.\n     */\n    graphic.groupTransition = function (g1, g2, animatableModel, cb) {\n        if (!g1 || !g2) {\n            return;\n        }\n\n        function getElMap(g) {\n            var elMap = {};\n            g.traverse(function (el) {\n                if (!el.isGroup && el.anid) {\n                    elMap[el.anid] = el;\n                }\n            });\n            return elMap;\n        }\n        function getAnimatableProps(el) {\n            var obj = {\n                position: vector.clone(el.position),\n                rotation: el.rotation\n            };\n            if (el.shape) {\n                obj.shape = zrUtil.extend({}, el.shape);\n            }\n            return obj;\n        }\n        var elMap1 = getElMap(g1);\n\n        g2.traverse(function (el) {\n            if (!el.isGroup && el.anid) {\n                var oldEl = elMap1[el.anid];\n                if (oldEl) {\n                    var newProp = getAnimatableProps(el);\n                    el.attr(getAnimatableProps(oldEl));\n                    graphic.updateProps(el, newProp, animatableModel, el.dataIndex);\n                }\n                // else {\n                //     if (el.previousProps) {\n                //         graphic.updateProps\n                //     }\n                // }\n            }\n        });\n    };\n\n    /**\n     * @param {Array.<Array.<number>>} points Like: [[23, 44], [53, 66], ...]\n     * @param {Object} rect {x, y, width, height}\n     * @return {Array.<Array.<number>>} A new clipped points.\n     */\n    graphic.clipPointsByRect = function (points, rect) {\n        return zrUtil.map(points, function (point) {\n            var x = point[0];\n            x = mathMax(x, rect.x);\n            x = mathMin(x, rect.x + rect.width);\n            var y = point[1];\n            y = mathMax(y, rect.y);\n            y = mathMin(y, rect.y + rect.height);\n            return [x, y];\n        });\n    };\n\n    /**\n     * @param {Object} targetRect {x, y, width, height}\n     * @param {Object} rect {x, y, width, height}\n     * @return {Object} A new clipped rect. If rect size are negative, return undefined.\n     */\n    graphic.clipRectByRect = function (targetRect, rect) {\n        var x = mathMax(targetRect.x, rect.x);\n        var x2 = mathMin(targetRect.x + targetRect.width, rect.x + rect.width);\n        var y = mathMax(targetRect.y, rect.y);\n        var y2 = mathMin(targetRect.y + targetRect.height, rect.y + rect.height);\n\n        if (x2 >= x && y2 >= y) {\n            return {\n                x: x,\n                y: y,\n                width: x2 - x,\n                height: y2 - y\n            };\n        }\n    };\n\n    module.exports = graphic;\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.6.1@echarts/lib/util/graphic.js\n// module id = y2WT\n// module chunks = 0 1","/**\n * DataZoom component entry\n */\n\n\n    require('./dataZoom/typeDefaulter');\n\n    require('./dataZoom/DataZoomModel');\n    require('./dataZoom/DataZoomView');\n\n    require('./dataZoom/SliderZoomModel');\n    require('./dataZoom/SliderZoomView');\n\n    require('./dataZoom/InsideZoomModel');\n    require('./dataZoom/InsideZoomView');\n\n    require('./dataZoom/dataZoomProcessor');\n    require('./dataZoom/dataZoomAction');\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.6.1@echarts/lib/component/dataZoom.js\n// module id = y60F\n// module chunks = 0 1","'use strict';\n/**\n * Storage内容仓库模块\n * @module zrender/Storage\n * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)\n * @author errorrik (errorrik@gmail.com)\n * @author pissang (https://github.com/pissang/)\n */\n\n\n    var util = require('./core/util');\n    var env = require('./core/env');\n\n    var Group = require('./container/Group');\n\n    // Use timsort because in most case elements are partially sorted\n    // https://jsfiddle.net/pissang/jr4x7mdm/8/\n    var timsort = require('./core/timsort');\n\n    function shapeCompareFunc(a, b) {\n        if (a.zlevel === b.zlevel) {\n            if (a.z === b.z) {\n                // if (a.z2 === b.z2) {\n                //     // FIXME Slow has renderidx compare\n                //     // http://stackoverflow.com/questions/20883421/sorting-in-javascript-should-every-compare-function-have-a-return-0-statement\n                //     // https://github.com/v8/v8/blob/47cce544a31ed5577ffe2963f67acb4144ee0232/src/js/array.js#L1012\n                //     return a.__renderidx - b.__renderidx;\n                // }\n                return a.z2 - b.z2;\n            }\n            return a.z - b.z;\n        }\n        return a.zlevel - b.zlevel;\n    }\n    /**\n     * 内容仓库 (M)\n     * @alias module:zrender/Storage\n     * @constructor\n     */\n    var Storage = function () {\n        this._roots = [];\n\n        this._displayList = [];\n\n        this._displayListLen = 0;\n    };\n\n    Storage.prototype = {\n\n        constructor: Storage,\n\n        /**\n         * @param  {Function} cb\n         *\n         */\n        traverse: function (cb, context) {\n            for (var i = 0; i < this._roots.length; i++) {\n                this._roots[i].traverse(cb, context);\n            }\n        },\n\n        /**\n         * 返回所有图形的绘制队列\n         * @param {boolean} [update=false] 是否在返回前更新该数组\n         * @param {boolean} [includeIgnore=false] 是否包含 ignore 的数组, 在 update 为 true 的时候有效\n         *\n         * 详见{@link module:zrender/graphic/Displayable.prototype.updateDisplayList}\n         * @return {Array.<module:zrender/graphic/Displayable>}\n         */\n        getDisplayList: function (update, includeIgnore) {\n            includeIgnore = includeIgnore || false;\n            if (update) {\n                this.updateDisplayList(includeIgnore);\n            }\n            return this._displayList;\n        },\n\n        /**\n         * 更新图形的绘制队列。\n         * 每次绘制前都会调用，该方法会先深度优先遍历整个树，更新所有Group和Shape的变换并且把所有可见的Shape保存到数组中，\n         * 最后根据绘制的优先级（zlevel > z > 插入顺序）排序得到绘制队列\n         * @param {boolean} [includeIgnore=false] 是否包含 ignore 的数组\n         */\n        updateDisplayList: function (includeIgnore) {\n            this._displayListLen = 0;\n            var roots = this._roots;\n            var displayList = this._displayList;\n            for (var i = 0, len = roots.length; i < len; i++) {\n                this._updateAndAddDisplayable(roots[i], null, includeIgnore);\n            }\n            displayList.length = this._displayListLen;\n\n            // for (var i = 0, len = displayList.length; i < len; i++) {\n            //     displayList[i].__renderidx = i;\n            // }\n\n            // displayList.sort(shapeCompareFunc);\n            env.canvasSupported && timsort(displayList, shapeCompareFunc);\n        },\n\n        _updateAndAddDisplayable: function (el, clipPaths, includeIgnore) {\n\n            if (el.ignore && !includeIgnore) {\n                return;\n            }\n\n            el.beforeUpdate();\n\n            if (el.__dirty) {\n\n                el.update();\n\n            }\n\n            el.afterUpdate();\n\n            var userSetClipPath = el.clipPath;\n            if (userSetClipPath) {\n\n                // FIXME 效率影响\n                if (clipPaths) {\n                    clipPaths = clipPaths.slice();\n                }\n                else {\n                    clipPaths = [];\n                }\n\n                var currentClipPath = userSetClipPath;\n                var parentClipPath = el;\n                // Recursively add clip path\n                while (currentClipPath) {\n                    // clipPath 的变换是基于使用这个 clipPath 的元素\n                    currentClipPath.parent = parentClipPath;\n                    currentClipPath.updateTransform();\n\n                    clipPaths.push(currentClipPath);\n\n                    parentClipPath = currentClipPath;\n                    currentClipPath = currentClipPath.clipPath;\n                }\n            }\n\n            if (el.isGroup) {\n                var children = el._children;\n\n                for (var i = 0; i < children.length; i++) {\n                    var child = children[i];\n\n                    // Force to mark as dirty if group is dirty\n                    // FIXME __dirtyPath ?\n                    if (el.__dirty) {\n                        child.__dirty = true;\n                    }\n\n                    this._updateAndAddDisplayable(child, clipPaths, includeIgnore);\n                }\n\n                // Mark group clean here\n                el.__dirty = false;\n\n            }\n            else {\n                el.__clipPaths = clipPaths;\n\n                this._displayList[this._displayListLen++] = el;\n            }\n        },\n\n        /**\n         * 添加图形(Shape)或者组(Group)到根节点\n         * @param {module:zrender/Element} el\n         */\n        addRoot: function (el) {\n            if (el.__storage === this) {\n                return;\n            }\n\n            if (el instanceof Group) {\n                el.addChildrenToStorage(this);\n            }\n\n            this.addToStorage(el);\n            this._roots.push(el);\n        },\n\n        /**\n         * 删除指定的图形(Shape)或者组(Group)\n         * @param {string|Array.<string>} [el] 如果为空清空整个Storage\n         */\n        delRoot: function (el) {\n            if (el == null) {\n                // 不指定el清空\n                for (var i = 0; i < this._roots.length; i++) {\n                    var root = this._roots[i];\n                    if (root instanceof Group) {\n                        root.delChildrenFromStorage(this);\n                    }\n                }\n\n                this._roots = [];\n                this._displayList = [];\n                this._displayListLen = 0;\n\n                return;\n            }\n\n            if (el instanceof Array) {\n                for (var i = 0, l = el.length; i < l; i++) {\n                    this.delRoot(el[i]);\n                }\n                return;\n            }\n\n\n            var idx = util.indexOf(this._roots, el);\n            if (idx >= 0) {\n                this.delFromStorage(el);\n                this._roots.splice(idx, 1);\n                if (el instanceof Group) {\n                    el.delChildrenFromStorage(this);\n                }\n            }\n        },\n\n        addToStorage: function (el) {\n            el.__storage = this;\n            el.dirty(false);\n\n            return this;\n        },\n\n        delFromStorage: function (el) {\n            if (el) {\n                el.__storage = null;\n            }\n\n            return this;\n        },\n\n        /**\n         * 清空并且释放Storage\n         */\n        dispose: function () {\n            this._renderList =\n            this._roots = null;\n        },\n\n        displayableSortFunc: shapeCompareFunc\n    };\n\n    module.exports = Storage;\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.5.1@zrender/lib/Storage.js\n// module id = y9L0\n// module chunks = 0 1","/**\n * Group是一个容器，可以插入子节点，Group的变换也会被应用到子节点上\n * @module zrender/graphic/Group\n * @example\n *     var Group = require('zrender/lib/container/Group');\n *     var Circle = require('zrender/lib/graphic/shape/Circle');\n *     var g = new Group();\n *     g.position[0] = 100;\n *     g.position[1] = 100;\n *     g.add(new Circle({\n *         style: {\n *             x: 100,\n *             y: 100,\n *             r: 20,\n *         }\n *     }));\n *     zr.add(g);\n */\n\n\n    var zrUtil = require('../core/util');\n    var Element = require('../Element');\n    var BoundingRect = require('../core/BoundingRect');\n\n    /**\n     * @alias module:zrender/graphic/Group\n     * @constructor\n     * @extends module:zrender/mixin/Transformable\n     * @extends module:zrender/mixin/Eventful\n     */\n    var Group = function (opts) {\n\n        opts = opts || {};\n\n        Element.call(this, opts);\n\n        for (var key in opts) {\n            if (opts.hasOwnProperty(key)) {\n                this[key] = opts[key];\n            }\n        }\n\n        this._children = [];\n\n        this.__storage = null;\n\n        this.__dirty = true;\n    };\n\n    Group.prototype = {\n\n        constructor: Group,\n\n        isGroup: true,\n\n        /**\n         * @type {string}\n         */\n        type: 'group',\n\n        /**\n         * 所有子孙元素是否响应鼠标事件\n         * @name module:/zrender/container/Group#silent\n         * @type {boolean}\n         * @default false\n         */\n        silent: false,\n\n        /**\n         * @return {Array.<module:zrender/Element>}\n         */\n        children: function () {\n            return this._children.slice();\n        },\n\n        /**\n         * 获取指定 index 的儿子节点\n         * @param  {number} idx\n         * @return {module:zrender/Element}\n         */\n        childAt: function (idx) {\n            return this._children[idx];\n        },\n\n        /**\n         * 获取指定名字的儿子节点\n         * @param  {string} name\n         * @return {module:zrender/Element}\n         */\n        childOfName: function (name) {\n            var children = this._children;\n            for (var i = 0; i < children.length; i++) {\n                if (children[i].name === name) {\n                    return children[i];\n                }\n             }\n        },\n\n        /**\n         * @return {number}\n         */\n        childCount: function () {\n            return this._children.length;\n        },\n\n        /**\n         * 添加子节点到最后\n         * @param {module:zrender/Element} child\n         */\n        add: function (child) {\n            if (child && child !== this && child.parent !== this) {\n\n                this._children.push(child);\n\n                this._doAdd(child);\n            }\n\n            return this;\n        },\n\n        /**\n         * 添加子节点在 nextSibling 之前\n         * @param {module:zrender/Element} child\n         * @param {module:zrender/Element} nextSibling\n         */\n        addBefore: function (child, nextSibling) {\n            if (child && child !== this && child.parent !== this\n                && nextSibling && nextSibling.parent === this) {\n\n                var children = this._children;\n                var idx = children.indexOf(nextSibling);\n\n                if (idx >= 0) {\n                    children.splice(idx, 0, child);\n                    this._doAdd(child);\n                }\n            }\n\n            return this;\n        },\n\n        _doAdd: function (child) {\n            if (child.parent) {\n                child.parent.remove(child);\n            }\n\n            child.parent = this;\n\n            var storage = this.__storage;\n            var zr = this.__zr;\n            if (storage && storage !== child.__storage) {\n\n                storage.addToStorage(child);\n\n                if (child instanceof Group) {\n                    child.addChildrenToStorage(storage);\n                }\n            }\n\n            zr && zr.refresh();\n        },\n\n        /**\n         * 移除子节点\n         * @param {module:zrender/Element} child\n         */\n        remove: function (child) {\n            var zr = this.__zr;\n            var storage = this.__storage;\n            var children = this._children;\n\n            var idx = zrUtil.indexOf(children, child);\n            if (idx < 0) {\n                return this;\n            }\n            children.splice(idx, 1);\n\n            child.parent = null;\n\n            if (storage) {\n\n                storage.delFromStorage(child);\n\n                if (child instanceof Group) {\n                    child.delChildrenFromStorage(storage);\n                }\n            }\n\n            zr && zr.refresh();\n\n            return this;\n        },\n\n        /**\n         * 移除所有子节点\n         */\n        removeAll: function () {\n            var children = this._children;\n            var storage = this.__storage;\n            var child;\n            var i;\n            for (i = 0; i < children.length; i++) {\n                child = children[i];\n                if (storage) {\n                    storage.delFromStorage(child);\n                    if (child instanceof Group) {\n                        child.delChildrenFromStorage(storage);\n                    }\n                }\n                child.parent = null;\n            }\n            children.length = 0;\n\n            return this;\n        },\n\n        /**\n         * 遍历所有子节点\n         * @param  {Function} cb\n         * @param  {}   context\n         */\n        eachChild: function (cb, context) {\n            var children = this._children;\n            for (var i = 0; i < children.length; i++) {\n                var child = children[i];\n                cb.call(context, child, i);\n            }\n            return this;\n        },\n\n        /**\n         * 深度优先遍历所有子孙节点\n         * @param  {Function} cb\n         * @param  {}   context\n         */\n        traverse: function (cb, context) {\n            for (var i = 0; i < this._children.length; i++) {\n                var child = this._children[i];\n                cb.call(context, child);\n\n                if (child.type === 'group') {\n                    child.traverse(cb, context);\n                }\n            }\n            return this;\n        },\n\n        addChildrenToStorage: function (storage) {\n            for (var i = 0; i < this._children.length; i++) {\n                var child = this._children[i];\n                storage.addToStorage(child);\n                if (child instanceof Group) {\n                    child.addChildrenToStorage(storage);\n                }\n            }\n        },\n\n        delChildrenFromStorage: function (storage) {\n            for (var i = 0; i < this._children.length; i++) {\n                var child = this._children[i];\n                storage.delFromStorage(child);\n                if (child instanceof Group) {\n                    child.delChildrenFromStorage(storage);\n                }\n            }\n        },\n\n        dirty: function () {\n            this.__dirty = true;\n            this.__zr && this.__zr.refresh();\n            return this;\n        },\n\n        /**\n         * @return {module:zrender/core/BoundingRect}\n         */\n        getBoundingRect: function (includeChildren) {\n            // TODO Caching\n            var rect = null;\n            var tmpRect = new BoundingRect(0, 0, 0, 0);\n            var children = includeChildren || this._children;\n            var tmpMat = [];\n\n            for (var i = 0; i < children.length; i++) {\n                var child = children[i];\n                if (child.ignore || child.invisible) {\n                    continue;\n                }\n\n                var childRect = child.getBoundingRect();\n                var transform = child.getLocalTransform(tmpMat);\n                // TODO\n                // The boundingRect cacluated by transforming original\n                // rect may be bigger than the actual bundingRect when rotation\n                // is used. (Consider a circle rotated aginst its center, where\n                // the actual boundingRect should be the same as that not be\n                // rotated.) But we can not find better approach to calculate\n                // actual boundingRect yet, considering performance.\n                if (transform) {\n                    tmpRect.copy(childRect);\n                    tmpRect.applyTransform(transform);\n                    rect = rect || tmpRect.clone();\n                    rect.union(tmpRect);\n                }\n                else {\n                    rect = rect || childRect.clone();\n                    rect.union(childRect);\n                }\n            }\n            return rect || tmpRect;\n        }\n    };\n\n    zrUtil.inherits(Group, Element);\n\n    module.exports = Group;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.5.1@zrender/lib/container/Group.js\n// module id = yMOk\n// module chunks = 0 1","\n    var formatUtil = require('../../util/format');\n    var zrUtil = require('zrender/lib/core/util');\n\n    var helper = {};\n\n    var AXIS_DIMS = ['x', 'y', 'z', 'radius', 'angle', 'single'];\n    // Supported coords.\n    var COORDS = ['cartesian2d', 'polar', 'singleAxis'];\n\n    /**\n     * @param {string} coordType\n     * @return {boolean}\n     */\n    helper.isCoordSupported = function (coordType) {\n        return zrUtil.indexOf(COORDS, coordType) >= 0;\n    };\n\n    /**\n     * Create \"each\" method to iterate names.\n     *\n     * @pubilc\n     * @param  {Array.<string>} names\n     * @param  {Array.<string>=} attrs\n     * @return {Function}\n     */\n    helper.createNameEach = function (names, attrs) {\n        names = names.slice();\n        var capitalNames = zrUtil.map(names, formatUtil.capitalFirst);\n        attrs = (attrs || []).slice();\n        var capitalAttrs = zrUtil.map(attrs, formatUtil.capitalFirst);\n\n        return function (callback, context) {\n            zrUtil.each(names, function (name, index) {\n                var nameObj = {name: name, capital: capitalNames[index]};\n\n                for (var j = 0; j < attrs.length; j++) {\n                    nameObj[attrs[j]] = name + capitalAttrs[j];\n                }\n\n                callback.call(context, nameObj);\n            });\n        };\n    };\n\n    /**\n     * Iterate each dimension name.\n     *\n     * @public\n     * @param {Function} callback The parameter is like:\n     *                            {\n     *                                name: 'angle',\n     *                                capital: 'Angle',\n     *                                axis: 'angleAxis',\n     *                                axisIndex: 'angleAixs',\n     *                                index: 'angleIndex'\n     *                            }\n     * @param {Object} context\n     */\n    helper.eachAxisDim = helper.createNameEach(AXIS_DIMS, ['axisIndex', 'axis', 'index', 'id']);\n\n    /**\n     * If tow dataZoomModels has the same axis controlled, we say that they are 'linked'.\n     * dataZoomModels and 'links' make up one or more graphics.\n     * This function finds the graphic where the source dataZoomModel is in.\n     *\n     * @public\n     * @param {Function} forEachNode Node iterator.\n     * @param {Function} forEachEdgeType edgeType iterator\n     * @param {Function} edgeIdGetter Giving node and edgeType, return an array of edge id.\n     * @return {Function} Input: sourceNode, Output: Like {nodes: [], dims: {}}\n     */\n    helper.createLinkedNodesFinder = function (forEachNode, forEachEdgeType, edgeIdGetter) {\n\n        return function (sourceNode) {\n            var result = {\n                nodes: [],\n                records: {} // key: edgeType.name, value: Object (key: edge id, value: boolean).\n            };\n\n            forEachEdgeType(function (edgeType) {\n                result.records[edgeType.name] = {};\n            });\n\n            if (!sourceNode) {\n                return result;\n            }\n\n            absorb(sourceNode, result);\n\n            var existsLink;\n            do {\n                existsLink = false;\n                forEachNode(processSingleNode);\n            }\n            while (existsLink);\n\n            function processSingleNode(node) {\n                if (!isNodeAbsorded(node, result) && isLinked(node, result)) {\n                    absorb(node, result);\n                    existsLink = true;\n                }\n            }\n\n            return result;\n        };\n\n        function isNodeAbsorded(node, result) {\n            return zrUtil.indexOf(result.nodes, node) >= 0;\n        }\n\n        function isLinked(node, result) {\n            var hasLink = false;\n            forEachEdgeType(function (edgeType) {\n                zrUtil.each(edgeIdGetter(node, edgeType) || [], function (edgeId) {\n                    result.records[edgeType.name][edgeId] && (hasLink = true);\n                });\n            });\n            return hasLink;\n        }\n\n        function absorb(node, result) {\n            result.nodes.push(node);\n            forEachEdgeType(function (edgeType) {\n                zrUtil.each(edgeIdGetter(node, edgeType) || [], function (edgeId) {\n                    result.records[edgeType.name][edgeId] = true;\n                });\n            });\n        }\n    };\n\n    module.exports = helper;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.6.1@echarts/lib/component/dataZoom/helper.js\n// module id = yToh\n// module chunks = 0 1","/**\n * 矩形\n * @module zrender/graphic/shape/Rect\n */\n\n\n    var roundRectHelper = require('../helper/roundRect');\n\n    module.exports = require('../Path').extend({\n\n        type: 'rect',\n\n        shape: {\n            // 左上、右上、右下、左下角的半径依次为r1、r2、r3、r4\n            // r缩写为1         相当于 [1, 1, 1, 1]\n            // r缩写为[1]       相当于 [1, 1, 1, 1]\n            // r缩写为[1, 2]    相当于 [1, 2, 1, 2]\n            // r缩写为[1, 2, 3] 相当于 [1, 2, 3, 2]\n            r: 0,\n\n            x: 0,\n            y: 0,\n            width: 0,\n            height: 0\n        },\n\n        buildPath: function (ctx, shape) {\n            var x = shape.x;\n            var y = shape.y;\n            var width = shape.width;\n            var height = shape.height;\n            if (!shape.r) {\n                ctx.rect(x, y, width, height);\n            }\n            else {\n                roundRectHelper.buildPath(ctx, shape);\n            }\n            ctx.closePath();\n            return;\n        }\n    });\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.5.1@zrender/lib/graphic/shape/Rect.js\n// module id = yrSL\n// module chunks = 0 1","'use strict';\n// Grid 是在有直角坐标系的时候必须要存在的\n// 所以这里也要被 Cartesian2D 依赖\n\n\n    require('./AxisModel');\n\n    var ComponentModel = require('../../model/Component');\n\n    module.exports = ComponentModel.extend({\n\n        type: 'grid',\n\n        dependencies: ['xAxis', 'yAxis'],\n\n        layoutMode: 'box',\n\n        /**\n         * @type {module:echarts/coord/cartesian/Grid}\n         */\n        coordinateSystem: null,\n\n        defaultOption: {\n            show: false,\n            zlevel: 0,\n            z: 0,\n            left: '10%',\n            top: 60,\n            right: '10%',\n            bottom: 60,\n            // If grid size contain label\n            containLabel: false,\n            // width: {totalWidth} - left - right,\n            // height: {totalHeight} - top - bottom,\n            backgroundColor: 'rgba(0,0,0,0)',\n            borderWidth: 1,\n            borderColor: '#ccc'\n        }\n    });\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.6.1@echarts/lib/coord/cartesian/GridModel.js\n// module id = ys60\n// module chunks = 0 1","'use strict';\n// Layout helpers for each component positioning\n\n\n    var zrUtil = require('zrender/lib/core/util');\n    var BoundingRect = require('zrender/lib/core/BoundingRect');\n    var numberUtil = require('./number');\n    var formatUtil = require('./format');\n    var parsePercent = numberUtil.parsePercent;\n    var each = zrUtil.each;\n\n    var layout = {};\n\n    /**\n     * @public\n     */\n    var LOCATION_PARAMS = layout.LOCATION_PARAMS = [\n        'left', 'right', 'top', 'bottom', 'width', 'height'\n    ];\n\n    /**\n     * @public\n     */\n    var HV_NAMES = layout.HV_NAMES = [\n        ['width', 'left', 'right'],\n        ['height', 'top', 'bottom']\n    ];\n\n    function boxLayout(orient, group, gap, maxWidth, maxHeight) {\n        var x = 0;\n        var y = 0;\n        if (maxWidth == null) {\n            maxWidth = Infinity;\n        }\n        if (maxHeight == null) {\n            maxHeight = Infinity;\n        }\n        var currentLineMaxSize = 0;\n        group.eachChild(function (child, idx) {\n            var position = child.position;\n            var rect = child.getBoundingRect();\n            var nextChild = group.childAt(idx + 1);\n            var nextChildRect = nextChild && nextChild.getBoundingRect();\n            var nextX;\n            var nextY;\n            if (orient === 'horizontal') {\n                var moveX = rect.width + (nextChildRect ? (-nextChildRect.x + rect.x) : 0);\n                nextX = x + moveX;\n                // Wrap when width exceeds maxWidth or meet a `newline` group\n                if (nextX > maxWidth || child.newline) {\n                    x = 0;\n                    nextX = moveX;\n                    y += currentLineMaxSize + gap;\n                    currentLineMaxSize = rect.height;\n                }\n                else {\n                    currentLineMaxSize = Math.max(currentLineMaxSize, rect.height);\n                }\n            }\n            else {\n                var moveY = rect.height + (nextChildRect ? (-nextChildRect.y + rect.y) : 0);\n                nextY = y + moveY;\n                // Wrap when width exceeds maxHeight or meet a `newline` group\n                if (nextY > maxHeight || child.newline) {\n                    x += currentLineMaxSize + gap;\n                    y = 0;\n                    nextY = moveY;\n                    currentLineMaxSize = rect.width;\n                }\n                else {\n                    currentLineMaxSize = Math.max(currentLineMaxSize, rect.width);\n                }\n            }\n\n            if (child.newline) {\n                return;\n            }\n\n            position[0] = x;\n            position[1] = y;\n\n            orient === 'horizontal'\n                ? (x = nextX + gap)\n                : (y = nextY + gap);\n        });\n    }\n\n    /**\n     * VBox or HBox layouting\n     * @param {string} orient\n     * @param {module:zrender/container/Group} group\n     * @param {number} gap\n     * @param {number} [width=Infinity]\n     * @param {number} [height=Infinity]\n     */\n    layout.box = boxLayout;\n\n    /**\n     * VBox layouting\n     * @param {module:zrender/container/Group} group\n     * @param {number} gap\n     * @param {number} [width=Infinity]\n     * @param {number} [height=Infinity]\n     */\n    layout.vbox = zrUtil.curry(boxLayout, 'vertical');\n\n    /**\n     * HBox layouting\n     * @param {module:zrender/container/Group} group\n     * @param {number} gap\n     * @param {number} [width=Infinity]\n     * @param {number} [height=Infinity]\n     */\n    layout.hbox = zrUtil.curry(boxLayout, 'horizontal');\n\n    /**\n     * If x or x2 is not specified or 'center' 'left' 'right',\n     * the width would be as long as possible.\n     * If y or y2 is not specified or 'middle' 'top' 'bottom',\n     * the height would be as long as possible.\n     *\n     * @param {Object} positionInfo\n     * @param {number|string} [positionInfo.x]\n     * @param {number|string} [positionInfo.y]\n     * @param {number|string} [positionInfo.x2]\n     * @param {number|string} [positionInfo.y2]\n     * @param {Object} containerRect\n     * @param {string|number} margin\n     * @return {Object} {width, height}\n     */\n    layout.getAvailableSize = function (positionInfo, containerRect, margin) {\n        var containerWidth = containerRect.width;\n        var containerHeight = containerRect.height;\n\n        var x = parsePercent(positionInfo.x, containerWidth);\n        var y = parsePercent(positionInfo.y, containerHeight);\n        var x2 = parsePercent(positionInfo.x2, containerWidth);\n        var y2 = parsePercent(positionInfo.y2, containerHeight);\n\n        (isNaN(x) || isNaN(parseFloat(positionInfo.x))) && (x = 0);\n        (isNaN(x2) || isNaN(parseFloat(positionInfo.x2))) && (x2 = containerWidth);\n        (isNaN(y) || isNaN(parseFloat(positionInfo.y))) && (y = 0);\n        (isNaN(y2) || isNaN(parseFloat(positionInfo.y2))) && (y2 = containerHeight);\n\n        margin = formatUtil.normalizeCssArray(margin || 0);\n\n        return {\n            width: Math.max(x2 - x - margin[1] - margin[3], 0),\n            height: Math.max(y2 - y - margin[0] - margin[2], 0)\n        };\n    };\n\n    /**\n     * Parse position info.\n     *\n     * @param {Object} positionInfo\n     * @param {number|string} [positionInfo.left]\n     * @param {number|string} [positionInfo.top]\n     * @param {number|string} [positionInfo.right]\n     * @param {number|string} [positionInfo.bottom]\n     * @param {number|string} [positionInfo.width]\n     * @param {number|string} [positionInfo.height]\n     * @param {number|string} [positionInfo.aspect] Aspect is width / height\n     * @param {Object} containerRect\n     * @param {string|number} [margin]\n     *\n     * @return {module:zrender/core/BoundingRect}\n     */\n    layout.getLayoutRect = function (\n        positionInfo, containerRect, margin\n    ) {\n        margin = formatUtil.normalizeCssArray(margin || 0);\n\n        var containerWidth = containerRect.width;\n        var containerHeight = containerRect.height;\n\n        var left = parsePercent(positionInfo.left, containerWidth);\n        var top = parsePercent(positionInfo.top, containerHeight);\n        var right = parsePercent(positionInfo.right, containerWidth);\n        var bottom = parsePercent(positionInfo.bottom, containerHeight);\n        var width = parsePercent(positionInfo.width, containerWidth);\n        var height = parsePercent(positionInfo.height, containerHeight);\n\n        var verticalMargin = margin[2] + margin[0];\n        var horizontalMargin = margin[1] + margin[3];\n        var aspect = positionInfo.aspect;\n\n        // If width is not specified, calculate width from left and right\n        if (isNaN(width)) {\n            width = containerWidth - right - horizontalMargin - left;\n        }\n        if (isNaN(height)) {\n            height = containerHeight - bottom - verticalMargin - top;\n        }\n\n        // If width and height are not given\n        // 1. Graph should not exceeds the container\n        // 2. Aspect must be keeped\n        // 3. Graph should take the space as more as possible\n        if (isNaN(width) && isNaN(height)) {\n            if (aspect > containerWidth / containerHeight) {\n                width = containerWidth * 0.8;\n            }\n            else {\n                height = containerHeight * 0.8;\n            }\n        }\n\n        if (aspect != null) {\n            // Calculate width or height with given aspect\n            if (isNaN(width)) {\n                width = aspect * height;\n            }\n            if (isNaN(height)) {\n                height = width / aspect;\n            }\n        }\n\n        // If left is not specified, calculate left from right and width\n        if (isNaN(left)) {\n            left = containerWidth - right - width - horizontalMargin;\n        }\n        if (isNaN(top)) {\n            top = containerHeight - bottom - height - verticalMargin;\n        }\n\n        // Align left and top\n        switch (positionInfo.left || positionInfo.right) {\n            case 'center':\n                left = containerWidth / 2 - width / 2 - margin[3];\n                break;\n            case 'right':\n                left = containerWidth - width - horizontalMargin;\n                break;\n        }\n        switch (positionInfo.top || positionInfo.bottom) {\n            case 'middle':\n            case 'center':\n                top = containerHeight / 2 - height / 2 - margin[0];\n                break;\n            case 'bottom':\n                top = containerHeight - height - verticalMargin;\n                break;\n        }\n        // If something is wrong and left, top, width, height are calculated as NaN\n        left = left || 0;\n        top = top || 0;\n        if (isNaN(width)) {\n            // Width may be NaN if only one value is given except width\n            width = containerWidth - left - (right || 0);\n        }\n        if (isNaN(height)) {\n            // Height may be NaN if only one value is given except height\n            height = containerHeight - top - (bottom || 0);\n        }\n\n        var rect = new BoundingRect(left + margin[3], top + margin[0], width, height);\n        rect.margin = margin;\n        return rect;\n    };\n\n\n    /**\n     * Position a zr element in viewport\n     *  Group position is specified by either\n     *  {left, top}, {right, bottom}\n     *  If all properties exists, right and bottom will be igonred.\n     *\n     * Logic:\n     *     1. Scale (against origin point in parent coord)\n     *     2. Rotate (against origin point in parent coord)\n     *     3. Traslate (with el.position by this method)\n     * So this method only fixes the last step 'Traslate', which does not affect\n     * scaling and rotating.\n     *\n     * If be called repeatly with the same input el, the same result will be gotten.\n     *\n     * @param {module:zrender/Element} el Should have `getBoundingRect` method.\n     * @param {Object} positionInfo\n     * @param {number|string} [positionInfo.left]\n     * @param {number|string} [positionInfo.top]\n     * @param {number|string} [positionInfo.right]\n     * @param {number|string} [positionInfo.bottom]\n     * @param {Object} containerRect\n     * @param {string|number} margin\n     * @param {Object} [opt]\n     * @param {Array.<number>} [opt.hv=[1,1]] Only horizontal or only vertical.\n     * @param {Array.<number>} [opt.boundingMode='all']\n     *        Specify how to calculate boundingRect when locating.\n     *        'all': Position the boundingRect that is transformed and uioned\n     *               both itself and its descendants.\n     *               This mode simplies confine the elements in the bounding\n     *               of their container (e.g., using 'right: 0').\n     *        'raw': Position the boundingRect that is not transformed and only itself.\n     *               This mode is useful when you want a element can overflow its\n     *               container. (Consider a rotated circle needs to be located in a corner.)\n     *               In this mode positionInfo.width/height can only be number.\n     */\n    layout.positionElement = function (el, positionInfo, containerRect, margin, opt) {\n        var h = !opt || !opt.hv || opt.hv[0];\n        var v = !opt || !opt.hv || opt.hv[1];\n        var boundingMode = opt && opt.boundingMode || 'all';\n\n        if (!h && !v) {\n            return;\n        }\n\n        var rect;\n        if (boundingMode === 'raw') {\n            rect = el.type === 'group'\n                ? new BoundingRect(0, 0, +positionInfo.width || 0, +positionInfo.height || 0)\n                : el.getBoundingRect();\n        }\n        else {\n            rect = el.getBoundingRect();\n            if (el.needLocalTransform()) {\n                var transform = el.getLocalTransform();\n                // Notice: raw rect may be inner object of el,\n                // which should not be modified.\n                rect = rect.clone();\n                rect.applyTransform(transform);\n            }\n        }\n\n        positionInfo = layout.getLayoutRect(\n            zrUtil.defaults(\n                {width: rect.width, height: rect.height},\n                positionInfo\n            ),\n            containerRect,\n            margin\n        );\n\n        // Because 'tranlate' is the last step in transform\n        // (see zrender/core/Transformable#getLocalTransfrom),\n        // we can just only modify el.position to get final result.\n        var elPos = el.position;\n        var dx = h ? positionInfo.x - rect.x : 0;\n        var dy = v ? positionInfo.y - rect.y : 0;\n\n        el.attr('position', boundingMode === 'raw' ? [dx, dy] : [elPos[0] + dx, elPos[1] + dy]);\n    };\n\n    /**\n     * @param {Object} option Contains some of the properties in HV_NAMES.\n     * @param {number} hvIdx 0: horizontal; 1: vertical.\n     */\n    layout.sizeCalculable = function (option, hvIdx) {\n        return option[HV_NAMES[hvIdx][0]] != null\n            || (option[HV_NAMES[hvIdx][1]] != null && option[HV_NAMES[hvIdx][2]] != null);\n    };\n\n    /**\n     * Consider Case:\n     * When defulat option has {left: 0, width: 100}, and we set {right: 0}\n     * through setOption or media query, using normal zrUtil.merge will cause\n     * {right: 0} does not take effect.\n     *\n     * @example\n     * ComponentModel.extend({\n     *     init: function () {\n     *         ...\n     *         var inputPositionParams = layout.getLayoutParams(option);\n     *         this.mergeOption(inputPositionParams);\n     *     },\n     *     mergeOption: function (newOption) {\n     *         newOption && zrUtil.merge(thisOption, newOption, true);\n     *         layout.mergeLayoutParam(thisOption, newOption);\n     *     }\n     * });\n     *\n     * @param {Object} targetOption\n     * @param {Object} newOption\n     * @param {Object|string} [opt]\n     * @param {boolean|Array.<boolean>} [opt.ignoreSize=false] Some component must has width and height.\n     */\n    layout.mergeLayoutParam = function (targetOption, newOption, opt) {\n        !zrUtil.isObject(opt) && (opt = {});\n\n        var ignoreSize = opt.ignoreSize;\n        !zrUtil.isArray(ignoreSize) && (ignoreSize = [ignoreSize, ignoreSize]);\n\n        var hResult = merge(HV_NAMES[0], 0);\n        var vResult = merge(HV_NAMES[1], 1);\n\n        copy(HV_NAMES[0], targetOption, hResult);\n        copy(HV_NAMES[1], targetOption, vResult);\n\n        function merge(names, hvIdx) {\n            var newParams = {};\n            var newValueCount = 0;\n            var merged = {};\n            var mergedValueCount = 0;\n            var enoughParamNumber = 2;\n\n            each(names, function (name) {\n                merged[name] = targetOption[name];\n            });\n            each(names, function (name) {\n                // Consider case: newOption.width is null, which is\n                // set by user for removing width setting.\n                hasProp(newOption, name) && (newParams[name] = merged[name] = newOption[name]);\n                hasValue(newParams, name) && newValueCount++;\n                hasValue(merged, name) && mergedValueCount++;\n            });\n\n            if (ignoreSize[hvIdx]) {\n                // Only one of left/right is premitted to exist.\n                if (hasValue(newOption, names[1])) {\n                    merged[names[2]] = null;\n                }\n                else if (hasValue(newOption, names[2])) {\n                    merged[names[1]] = null;\n                }\n                return merged;\n            }\n\n            // Case: newOption: {width: ..., right: ...},\n            // or targetOption: {right: ...} and newOption: {width: ...},\n            // There is no conflict when merged only has params count\n            // little than enoughParamNumber.\n            if (mergedValueCount === enoughParamNumber || !newValueCount) {\n                return merged;\n            }\n            // Case: newOption: {width: ..., right: ...},\n            // Than we can make sure user only want those two, and ignore\n            // all origin params in targetOption.\n            else if (newValueCount >= enoughParamNumber) {\n                return newParams;\n            }\n            else {\n                // Chose another param from targetOption by priority.\n                for (var i = 0; i < names.length; i++) {\n                    var name = names[i];\n                    if (!hasProp(newParams, name) && hasProp(targetOption, name)) {\n                        newParams[name] = targetOption[name];\n                        break;\n                    }\n                }\n                return newParams;\n            }\n        }\n\n        function hasProp(obj, name) {\n            return obj.hasOwnProperty(name);\n        }\n\n        function hasValue(obj, name) {\n            return obj[name] != null && obj[name] !== 'auto';\n        }\n\n        function copy(names, target, source) {\n            each(names, function (name) {\n                target[name] = source[name];\n            });\n        }\n    };\n\n    /**\n     * Retrieve 'left', 'right', 'top', 'bottom', 'width', 'height' from object.\n     * @param {Object} source\n     * @return {Object} Result contains those props.\n     */\n    layout.getLayoutParams = function (source) {\n        return layout.copyLayoutParams({}, source);\n    };\n\n    /**\n     * Retrieve 'left', 'right', 'top', 'bottom', 'width', 'height' from object.\n     * @param {Object} source\n     * @return {Object} Result contains those props.\n     */\n    layout.copyLayoutParams = function (target, source) {\n        source && target && each(LOCATION_PARAMS, function (name) {\n            source.hasOwnProperty(name) && (target[name] = source[name]);\n        });\n        return target;\n    };\n\n    module.exports = layout;\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/.3.6.1@echarts/lib/util/layout.js\n// module id = zxuD\n// module chunks = 0 1"],"sourceRoot":""}